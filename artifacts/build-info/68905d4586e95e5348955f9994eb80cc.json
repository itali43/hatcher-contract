{"id":"68905d4586e95e5348955f9994eb80cc","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../utils/AddressUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n * time of contract deployment and can't be updated thereafter.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\n        __PaymentSplitter_init_unchained(payees, shares_);\n    }\n\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable Ether.\n     */\n    function releasable(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance + totalReleased();\n        return _pendingPayment(account, totalReceived, released(account));\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(IERC20Upgradeable token, address account) public view returns (uint256) {\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        return _pendingPayment(account, totalReceived, released(token, account));\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _totalReleased is the sum of all values in _released.\n        // If \"_totalReleased += payment\" does not overflow, then \"_released[account] += payment\" cannot overflow.\n        _totalReleased += payment;\n        unchecked {\n            _released[account] += payment;\n        }\n\n        AddressUpgradeable.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20Upgradeable token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(token, account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\n        // If \"_erc20TotalReleased[token] += payment\" does not overflow, then \"_erc20Released[token][account] += payment\"\n        // cannot overflow.\n        _erc20TotalReleased[token] += payment;\n        unchecked {\n            _erc20Released[token][account] += payment;\n        }\n\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[43] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267Upgradeable {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport {Initializable} from \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @inheritdoc IERC20PermitUpgradeable\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20PermitUpgradeable\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @inheritdoc IERC20PermitUpgradeable\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC5267Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:oz-renamed-from _HASHED_NAME\n    bytes32 private _hashedName;\n    /// @custom:oz-renamed-from _HASHED_VERSION\n    bytes32 private _hashedVersion;\n\n    string private _name;\n    string private _version;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        _name = name;\n        _version = version;\n\n        // Reset prior values in storage if upgrading\n        _hashedName = 0;\n        _hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require(_hashedName == 0 && _hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal virtual view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal virtual view returns (string memory) {\n        return _version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = _hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = _hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/HatcherV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\n\ninterface IERC721 {\n  function transferFrom(address from, address to, uint256 tokenId) external;\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes calldata data\n  ) external;\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n  function isApprovedForAll(\n    address owner,\n    address operator\n  ) external view returns (bool);\n\n  function getPlanetData(\n    uint256 tokenId\n  ) external view returns (PlanetData memory, bool);\n  function setApprovalForAll(address operator, bool approved) external;\n}\n\ninterface IBreedContract {\n  function requestBreed(\n    uint256 planetAId,\n    uint256 planetBId,\n    bool shouldUseMiniBlackhole,\n    uint value\n  ) external payable returns (bytes32);\n}\n\nstruct ListedPlanet {\n  uint256 planet;\n  uint256 price;\n  address ownerAddress;\n}\n\nstruct ClaimablePlanet {\n  address ownerParentAddress;\n  uint256 ownerTokenId;\n  bool delivered;\n  address otherParent;\n  uint256 otherTokenId;\n}\n\nstruct PlanetData {\n  uint256 gene;\n  uint256 baseAge;\n  uint256 evolve;\n  uint256 breedCount;\n  uint256 breedCountMax;\n  uint256 createTime; // before hatch\n  uint256 bornTime; // after hatch\n  uint256 lastBreedTime;\n  uint256[] relicsTokenIDs;\n  uint256[] parents; //parent token ids\n  uint256[] children; //children token ids\n}\n\n/// @title HatcherGG\n/// @author Caecus\n/// @notice This contract allows for escrowed NFT breeding\n/// @dev Contract is liable to be updated without warning\n/// @dev Homo faber suae quisque fortunae\n/// @custom:security-contact security@earnalliance.com\ncontract HatcherV1 is\n  Initializable,\n  PausableUpgradeable,\n  UUPSUpgradeable,\n  EIP712Upgradeable,\n  ERC20PermitUpgradeable,\n  PaymentSplitterUpgradeable,\n  IERC721ReceiverUpgradeable,\n  OwnableUpgradeable\n{\n  using AddressUpgradeable for address payable;\n\n  event NftReceived(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data,\n    string typeOfReceival\n  );\n  event ListedAPlanet(\n    address sentFromUser,\n    address token,\n    uint256 tokenId,\n    uint256 price\n  );\n  event DeListedAPlanet(address sentToUser, address token, uint256 tokenId);\n\n  event PlanetsConjoining(\n    uint256 planetAsking,\n    address askingUser,\n    uint256 planetJoining,\n    address joiningUser\n  );\n\n  IBreedContract breedContract;\n\n  address payable private treasuryAddr;\n\n  IERC721 nftPlanetContract;\n\n  uint256 vrfValue;\n\n  mapping(address => ListedPlanet[]) public userToListedPlanets;\n\n  ListedPlanet[] planetsListed;\n\n  // claimable tokenID -> address\n  mapping(uint256 => address) public claimableTokenIdToOwnerAddress;\n  // users to planets owed after conjunction\n  mapping(address => ClaimablePlanet[]) public claimablePlanets;\n\n  /// @notice error given if user other than minter tries to use forbidden funcs\n  error Unauthorized();\n\n  /// @notice set URI.  Where metadata and images will come from per tokenId\n  /// @param newTAdd the address that the owner would like the new URI to be\n  function setTAdd(address payable newTAdd) public onlyOwner whenNotPaused {\n    treasuryAddr = newTAdd;\n  }\n\n  /// @notice function should be run after deployment to set up defaults\n  function setAllOf(\n    address _breederContractAddr,\n    uint256 _vrfValue,\n    address _nftContractAddr\n  ) public onlyOwner whenNotPaused {\n    vrfValue = _vrfValue;\n    breedContract = IBreedContract(_breederContractAddr);\n    nftPlanetContract = IERC721(_nftContractAddr);\n  }\n\n  // /// @custom:oz-upgrades-unsafe-allow constructor\n  // constructor() {\n  //   _disableInitializers();\n  // }\n\n  /// @notice Initialization of contract, called upon deployment\n  /// @dev implements EIP712, is upgradeable, pausable, burn function is custom to save space\n  function initialize() public initializer {\n    __Ownable_init();\n    __Pausable_init();\n    // __ERC1155Burnable_init();\n    __UUPSUpgradeable_init();\n    // PaymentSplitterUpgradeable(_payees, _shares);\n  }\n\n  function changeVRFValue(uint256 newVRF) public onlyOwner whenNotPaused {\n    vrfValue = newVRF;\n  }\n\n  function list(uint256 tokenId, uint256 price, address ownerAddress) internal {\n    // make sure it is approved for all before! maybe during contract creation or right after prob better / more chill\n    //  add to userToListedPlanets\n\n    // ListedPlanet memory newPlanetToList = ListedPlanet(tokenId, price, ownerAddress);\n    // ListedPlanet[] currentUserLP = userToListedPlanets[ownerAddress];\n\n    ListedPlanet memory newPlanetToList = ListedPlanet(\n      tokenId,\n      price,\n      ownerAddress\n    );\n    userToListedPlanets[ownerAddress].push(newPlanetToList);\n\n    // add to planetsListed\n    planetsListed.push(newPlanetToList);\n\n    emit ListedAPlanet(msg.sender, address(nftPlanetContract), tokenId, price);\n  }\n\n  // test each address, one should have a claimable planet with the other being it's otherParent\n  // for loop thru claimable planets\n  // once address key hit, for loop thru those CPlanets checking otherParent for match\n  // mark delivered on CPlanet struct and that's that\n  function setDeliveryToTrue(address[2] memory parents) internal {\n    address parentA = parents[0];\n    address parentB = parents[1];\n\n    if (claimablePlanets[parentA].length > 0) {\n      // it is likely parent 0, confirm:\n      for (uint i = 0; i < claimablePlanets[parentA].length; i++) {\n        if (claimablePlanets[parentA][i].otherParent == parentB) {\n          // confirmed, change delivery status\n          claimablePlanets[parentA][i].delivered = true;\n        }\n      }\n    } else if (claimablePlanets[parents[1]].length > 0) {\n      // must be parent 1\n      for (uint i = 0; i < claimablePlanets[parentB].length; i++) {\n        if (claimablePlanets[parentB][i].otherParent == parentA) {\n          // confirmed, change delivery status\n          claimablePlanets[parentB][i].delivered = true;\n        }\n      }\n    } else {\n      revert(\"planet sent errantly, no one to claim\");\n    }\n  }\n\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes memory data\n  ) public override returns (bytes4) {\n    // if new planet arrives\n    if (msg.sender == address(0) && operator == address(nftPlanetContract)) {\n      // get parents\n      (PlanetData memory newPlanetData, ) = nftPlanetContract.getPlanetData(\n        tokenId\n      );\n\n      // check who the planet's parents are\n      uint256[] memory parentsIDs = newPlanetData.parents;\n\n      // lookup addresses from Parent TokenIDs\n      address addressParentA = claimableTokenIdToOwnerAddress[parentsIDs[0]];\n      address addressParentB = claimableTokenIdToOwnerAddress[parentsIDs[1]];\n\n      // package addresses\n      address[2] memory parents = [addressParentA, addressParentB];\n      // see description, sets deliverable to true.\n      setDeliveryToTrue(parents);\n      // Emit an event with details about the NFT received\n      emit NftReceived(operator, from, tokenId, data, \"new planet\");\n    } else if (data.length > 0 && operator == address(nftPlanetContract)) {\n      uint256 priceData = abi.decode(data, (uint256));\n      list(tokenId, priceData, from);\n      // Perform operations based on the decoded data\n      // Emit an event with details about the NFT received\n      emit NftReceived(operator, from, tokenId, data, \"listing planet\");\n    } else {\n      // Emit an event with details about the NFT received\n      emit NftReceived(operator, from, tokenId, data, \"uncategorized\");\n    }\n\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\n  }\n\n  // get planets by page, saves gas\n  function getPlanetsPaginated(\n    uint startIndex,\n    uint endIndex\n  ) public view returns (ListedPlanet[] memory) {\n    require(endIndex > startIndex, \"Invalid index\");\n    require(endIndex <= planetsListed.length, \"Index out of bounds\");\n\n    ListedPlanet[] memory page = new ListedPlanet[](endIndex - startIndex);\n    for (uint i = startIndex; i < endIndex; i++) {\n      page[i - startIndex] = planetsListed[i];\n    }\n    return page;\n  }\n\n  // get all planets from array\n  function getAllPlanets() public view returns (ListedPlanet[] memory) {\n    return planetsListed;\n  }\n\n  function listAllYourPlanets() public {\n    // make sure it is approved for all\n    // sort how many planets\n    // add each to listedPlanets\n  }\n  function deList(uint256 idIndex, uint256 tokenId) public whenNotPaused {\n    require(idIndex < planetsListed.length, \"Index out of bounds\");\n\n    address user = msg.sender;\n    ListedPlanet memory planetToDeList = planetsListed[idIndex];\n    // move out of escrow\n    // subtract to listedPlanets\n    // ensure owner or planet owner\n\n    if (msg.sender != planetToDeList.ownerAddress /*|| owner*/) {\n      revert();\n    }\n\n    // this solution keeps the array cleaner but moves keys around\n    // opted for alt solution b/c keeps keys intact\n    // planetsListed[idIndex] = planetsListed[planetsListed.length - 1];\n    // planetsListed.pop();\n\n    // zero out the array listing, this does not change the array keys\n    planetsListed[idIndex] = ListedPlanet({\n      planet: 0,\n      price: 0,\n      ownerAddress: address(0)\n    });\n\n    // delist on mapping\n\n    // send planet back to owner\n    _sendNFT(tokenId, user);\n\n    // emit accomplishment\n    emit DeListedAPlanet(\n      user,\n      address(nftPlanetContract),\n      planetToDeList.planet\n    );\n  }\n\n  function deListAllYourPlanets() public {\n    // make sure it is approved for all\n    // sort how many planets\n    // remove each to listedPlanets\n  }\n\n  function priceOfListingRetrieval(\n    uint256 tokenIdOfListedToken\n  ) internal view whenNotPaused returns (uint256) {\n    for (uint i = 0; i < planetsListed.length; i++) {\n      // seek out price\n      if (planetsListed[i].planet == tokenIdOfListedToken) {\n        return planetsListed[i].price;\n      }\n\n      // if no price found, give infinite for fail.\n      if (i == (planetsListed.length - 1)) {\n        return type(uint256).max;\n      }\n    }\n  }\n\n  // @notice: Conjunction functions takes a listed planet and a initiating user's planet and makes a breed request\n  // @dev: must send 0.2 RON along with, such that VRF can operate\n  // @param yourPlanet the planet user intends to breed\n  // @param withListedPlanet the planet user intends to breed with\n  function conjunct(\n    uint256 yourPlanet,\n    uint256 withListedPlanet\n  ) public payable whenNotPaused {\n    // make sure approval for all for (anima + aprs + nfts) before use\n    address userAsking = address(0);\n\n    address joiningUser = address(0);\n    uint256 price = priceOfListingRetrieval(withListedPlanet);\n\n    // can have this fail at breeder contract level or hatcher level.  commented out = breeder level\n    // if (msg.value < vrfValue) {\n    //       revert();\n    // }\n\n    // check if covers vrf value and price\n    if (msg.value < vrfValue + price) {\n      revert();\n    }\n    // check if both planets are presently held TODO\n\n    // pay the owner of withListedPlanet\n    // First, find the owner of the `withListedPlanet`\n    address payable ownerOfListedPlanet;\n    for (uint i = 0; i < planetsListed.length; i++) {\n      if (planetsListed[i].planet == withListedPlanet) {\n        ownerOfListedPlanet = payable(planetsListed[i].ownerAddress);\n        break;\n      }\n    }\n    // amount to send\n    uint256 amountToSend = 11; //withListedPlanet price\n\n    // Send Ether to the owner of the listed planet\n    (bool sent, ) = ownerOfListedPlanet.call{ value: amountToSend }(\"\");\n    require(sent, \"Failed to send Ether\");\n\n    // breed the planets\n    breedContract.requestBreed(yourPlanet, withListedPlanet, false, msg.value);\n\n    if (msg.value > vrfValue + amountToSend) {\n      (bool refunded, ) = msg.sender.call{\n        value: msg.value - vrfValue - amountToSend\n      }(\"\");\n      require(refunded, \"Failed to refund excess Ether\");\n    }\n\n    // if listed planet is out of bondings, delist it\n\n    //emit conjunction\n    emit PlanetsConjoining(\n      yourPlanet,\n      userAsking,\n      withListedPlanet,\n      joiningUser\n    );\n  }\n\n  function _sendNFT(uint256 _tokenId, address _to) internal {\n    nftPlanetContract.transferFrom(address(this), _to, _tokenId);\n  }\n\n  function status() public onlyOwner {\n    _pause();\n  }\n\n  /// @notice pause any token transfers including mints and burns\n  /// @dev can only be called by owner\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  /// @notice unpause any token transfers including mints and burns\n  /// @dev can only be called by owner\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n  // Function to set approval for all tokens owned by the owner to another address\n  function approveForAllAsOwner(\n    address operator,\n    bool approved\n  ) public onlyOwner {\n    nftPlanetContract.setApprovalForAll(operator, approved);\n  }\n\n  function checkApprovalForAll(\n    address owner,\n    address operator\n  ) public view returns (bool) {\n    return nftPlanetContract.isApprovedForAll(owner, operator);\n  }\n\n  /// @notice Allow Owner to withdraw of MATIC from the contract\n  /// @dev utility function only, shouldn't need to be used.\n  function withdrawFunds() public onlyOwner whenNotPaused {\n    address payable to = payable(msg.sender);\n    to.transfer(address(this).balance);\n  }\n\n  /// @notice called to authorize Upgrades by owner only\n  /// @dev used to upgrade\n  /// @param newImplementation new implementation\n  function _authorizeUpgrade(\n    address newImplementation\n  ) internal override onlyOwner {}\n\n  // unnecessary due to erc20Permit\n  // receive() external payable {}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/HatcherV1.sol:328:42:\n    |\n328 |   ) internal view whenNotPaused returns (uint256) {\n    |                                          ^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":10420,"file":"contracts/HatcherV1.sol","start":10413},"type":"Warning"}],"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[3177],"Initializable":[1193],"OwnableUpgradeable":[132]},"id":133,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":133,"sourceUnit":3178,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":133,"sourceUnit":1194,"src":"169:63:0","symbolAliases":[{"foreign":{"id":3,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"177:13:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":6,"name":"Initializable","nameLocations":["769:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"769:13:0"},"id":7,"nodeType":"InheritanceSpecifier","src":"769:13:0"},{"baseName":{"id":8,"name":"ContextUpgradeable","nameLocations":["784:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":3177,"src":"784:18:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"784:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"234:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":132,"linearizedBaseContracts":[132,3177,1193],"name":"OwnableUpgradeable","nameLocation":"747:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":11,"mutability":"mutable","name":"_owner","nameLocation":"825:6:0","nodeType":"VariableDeclaration","scope":132,"src":"809:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":17,"name":"OwnershipTransferred","nameLocation":"844:20:0","nodeType":"EventDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"881:13:0","nodeType":"VariableDeclaration","scope":17,"src":"865:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"865:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":15,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"912:8:0","nodeType":"VariableDeclaration","scope":17,"src":"896:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":14,"name":"address","nodeType":"ElementaryTypeName","src":"896:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"864:57:0"},"src":"838:84:0"},{"body":{"id":26,"nodeType":"Block","src":"1076:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":23,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1086:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1086:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":25,"nodeType":"ExpressionStatement","src":"1086:26:0"}]},"documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"928:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":21,"kind":"modifierInvocation","modifierName":{"id":20,"name":"onlyInitializing","nameLocations":["1059:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"1059:16:0"},"nodeType":"ModifierInvocation","src":"1059:16:0"}],"name":"__Ownable_init","nameLocation":"1033:14:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"1047:2:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"1076:0:0"},"scope":132,"src":"1024:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":37,"nodeType":"Block","src":"1187:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":33,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"1216:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":32,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1197:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1197:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":36,"nodeType":"ExpressionStatement","src":"1197:32:0"}]},"id":38,"implemented":true,"kind":"function","modifiers":[{"id":30,"kind":"modifierInvocation","modifierName":{"id":29,"name":"onlyInitializing","nameLocations":["1170:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"1170:16:0"},"nodeType":"ModifierInvocation","src":"1170:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1134:24:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"1158:2:0"},"returnParameters":{"id":31,"nodeType":"ParameterList","parameters":[],"src":"1187:0:0"},"scope":132,"src":"1125:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":45,"nodeType":"Block","src":"1345:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":41,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"1355:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":42,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43,"nodeType":"ExpressionStatement","src":"1355:13:0"},{"id":44,"nodeType":"PlaceholderStatement","src":"1378:1:0"}]},"documentation":{"id":39,"nodeType":"StructuredDocumentation","src":"1242:77:0","text":" @dev Throws if called by any account other than the owner."},"id":46,"name":"onlyOwner","nameLocation":"1333:9:0","nodeType":"ModifierDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[],"src":"1342:2:0"},"src":"1324:62:0","virtual":false,"visibility":"internal"},{"body":{"id":54,"nodeType":"Block","src":"1517:30:0","statements":[{"expression":{"id":52,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":51,"id":53,"nodeType":"Return","src":"1527:13:0"}]},"documentation":{"id":47,"nodeType":"StructuredDocumentation","src":"1392:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":55,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1471:5:0","nodeType":"FunctionDefinition","parameters":{"id":48,"nodeType":"ParameterList","parameters":[],"src":"1476:2:0"},"returnParameters":{"id":51,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":55,"src":"1508:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1507:9:0"},"scope":132,"src":"1462:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":68,"nodeType":"Block","src":"1665:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":64,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":60,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"1683:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":61,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1683:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":62,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"1694:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1694:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1683:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1708:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":59,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1675:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":66,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1675:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67,"nodeType":"ExpressionStatement","src":"1675:68:0"}]},"documentation":{"id":56,"nodeType":"StructuredDocumentation","src":"1553:62:0","text":" @dev Throws if the sender is not the owner."},"id":69,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1629:11:0","nodeType":"FunctionDefinition","parameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1640:2:0"},"returnParameters":{"id":58,"nodeType":"ParameterList","parameters":[],"src":"1665:0:0"},"scope":132,"src":"1620:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":82,"nodeType":"Block","src":"2139:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2176:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":77,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2168:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":76,"name":"address","nodeType":"ElementaryTypeName","src":"2168:7:0","typeDescriptions":{}}},"id":79,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":75,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"2149:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":80,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2149:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":81,"nodeType":"ExpressionStatement","src":"2149:30:0"}]},"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1756:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":83,"implemented":true,"kind":"function","modifiers":[{"id":73,"kind":"modifierInvocation","modifierName":{"id":72,"name":"onlyOwner","nameLocations":["2129:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"2129:9:0"},"nodeType":"ModifierInvocation","src":"2129:9:0"}],"name":"renounceOwnership","nameLocation":"2094:17:0","nodeType":"FunctionDefinition","parameters":{"id":71,"nodeType":"ParameterList","parameters":[],"src":"2111:2:0"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"2139:0:0"},"scope":132,"src":"2085:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":105,"nodeType":"Block","src":"2405:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":92,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"2423:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2443:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":94,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2435:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2435:7:0","typeDescriptions":{}}},"id":96,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2435:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2423:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":98,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2447:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":91,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2415:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2415:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":100,"nodeType":"ExpressionStatement","src":"2415:73:0"},{"expression":{"arguments":[{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"2517:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"2498:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2498:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":104,"nodeType":"ExpressionStatement","src":"2498:28:0"}]},"documentation":{"id":84,"nodeType":"StructuredDocumentation","src":"2192:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":106,"implemented":true,"kind":"function","modifiers":[{"id":89,"kind":"modifierInvocation","modifierName":{"id":88,"name":"onlyOwner","nameLocations":["2395:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"2395:9:0"},"nodeType":"ModifierInvocation","src":"2395:9:0"}],"name":"transferOwnership","nameLocation":"2344:17:0","nodeType":"FunctionDefinition","parameters":{"id":87,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"newOwner","nameLocation":"2370:8:0","nodeType":"VariableDeclaration","scope":106,"src":"2362:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":85,"name":"address","nodeType":"ElementaryTypeName","src":"2362:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2361:18:0"},"returnParameters":{"id":90,"nodeType":"ParameterList","parameters":[],"src":"2405:0:0"},"scope":132,"src":"2335:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2750:124:0","statements":[{"assignments":[113],"declarations":[{"constant":false,"id":113,"mutability":"mutable","name":"oldOwner","nameLocation":"2768:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2760:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"2760:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":115,"initialValue":{"id":114,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"2779:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2760:25:0"},{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":116,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"2795:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":117,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2804:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2795:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":119,"nodeType":"ExpressionStatement","src":"2795:17:0"},{"eventCall":{"arguments":[{"id":121,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"2848:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2858:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":120,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"2827:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"EmitStatement","src":"2822:45:0"}]},"documentation":{"id":107,"nodeType":"StructuredDocumentation","src":"2539:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":126,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2696:18:0","nodeType":"FunctionDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"newOwner","nameLocation":"2723:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2715:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":108,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2714:18:0"},"returnParameters":{"id":111,"nodeType":"ParameterList","parameters":[],"src":"2750:0:0"},"scope":132,"src":"2687:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2880:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":131,"mutability":"mutable","name":"__gap","nameLocation":"3159:5:0","nodeType":"VariableDeclaration","scope":132,"src":"3139:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"3139:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":130,"length":{"hexValue":"3439","id":129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3139:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":133,"src":"729:2438:0","usedErrors":[],"usedEvents":[17,1039]}],"src":"102:3066:0"},"id":0},"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3126],"ContextUpgradeable":[3177],"IERC20PermitUpgradeable":[2402],"IERC20Upgradeable":[2149],"Initializable":[1193],"PaymentSplitterUpgradeable":[633],"SafeERC20Upgradeable":[2778]},"id":634,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":134,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"111:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"../token/ERC20/utils/SafeERC20Upgradeable.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":634,"sourceUnit":2779,"src":"136:55:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../utils/AddressUpgradeable.sol","id":136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":634,"sourceUnit":3127,"src":"192:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":634,"sourceUnit":3178,"src":"234:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":634,"sourceUnit":1194,"src":"276:63:1","symbolAliases":[{"foreign":{"id":138,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"284:13:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":141,"name":"Initializable","nameLocations":["1607:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"1607:13:1"},"id":142,"nodeType":"InheritanceSpecifier","src":"1607:13:1"},{"baseName":{"id":143,"name":"ContextUpgradeable","nameLocations":["1622:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":3177,"src":"1622:18:1"},"id":144,"nodeType":"InheritanceSpecifier","src":"1622:18:1"}],"canonicalName":"PaymentSplitterUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":140,"nodeType":"StructuredDocumentation","src":"341:1226:1","text":" @title PaymentSplitter\n @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n that the Ether will be split in this way, since it is handled transparently by the contract.\n The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n time of contract deployment and can't be updated thereafter.\n `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n function.\n NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n to run tests before sending real value to this contract."},"fullyImplemented":true,"id":633,"linearizedBaseContracts":[633,3177,1193],"name":"PaymentSplitterUpgradeable","nameLocation":"1577:26:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac","id":150,"name":"PayeeAdded","nameLocation":"1653:10:1","nodeType":"EventDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":146,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1672:7:1","nodeType":"VariableDeclaration","scope":150,"src":"1664:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"1664:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":148,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"1689:6:1","nodeType":"VariableDeclaration","scope":150,"src":"1681:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":147,"name":"uint256","nodeType":"ElementaryTypeName","src":"1681:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1663:33:1"},"src":"1647:50:1"},{"anonymous":false,"eventSelector":"df20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056","id":156,"name":"PaymentReleased","nameLocation":"1708:15:1","nodeType":"EventDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"1732:2:1","nodeType":"VariableDeclaration","scope":156,"src":"1724:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"1724:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":154,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1744:6:1","nodeType":"VariableDeclaration","scope":156,"src":"1736:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":153,"name":"uint256","nodeType":"ElementaryTypeName","src":"1736:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1723:28:1"},"src":"1702:50:1"},{"anonymous":false,"eventSelector":"3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a","id":165,"name":"ERC20PaymentReleased","nameLocation":"1763:20:1","nodeType":"EventDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"1810:5:1","nodeType":"VariableDeclaration","scope":165,"src":"1784:31:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":158,"nodeType":"UserDefinedTypeName","pathNode":{"id":157,"name":"IERC20Upgradeable","nameLocations":["1784:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"1784:17:1"},"referencedDeclaration":2149,"src":"1784:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":161,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"1825:2:1","nodeType":"VariableDeclaration","scope":165,"src":"1817:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"1817:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":163,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1837:6:1","nodeType":"VariableDeclaration","scope":165,"src":"1829:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":162,"name":"uint256","nodeType":"ElementaryTypeName","src":"1829:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1783:61:1"},"src":"1757:88:1"},{"anonymous":false,"eventSelector":"6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770","id":171,"name":"PaymentReceived","nameLocation":"1856:15:1","nodeType":"EventDefinition","parameters":{"id":170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"1880:4:1","nodeType":"VariableDeclaration","scope":171,"src":"1872:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"1872:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":169,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1894:6:1","nodeType":"VariableDeclaration","scope":171,"src":"1886:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:30:1"},"src":"1850:52:1"},{"constant":false,"id":173,"mutability":"mutable","name":"_totalShares","nameLocation":"1924:12:1","nodeType":"VariableDeclaration","scope":633,"src":"1908:28:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":172,"name":"uint256","nodeType":"ElementaryTypeName","src":"1908:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":175,"mutability":"mutable","name":"_totalReleased","nameLocation":"1958:14:1","nodeType":"VariableDeclaration","scope":633,"src":"1942:30:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1942:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":179,"mutability":"mutable","name":"_shares","nameLocation":"2015:7:1","nodeType":"VariableDeclaration","scope":633,"src":"1979:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":178,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"1987:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1979:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":177,"name":"uint256","nodeType":"ElementaryTypeName","src":"1998:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":183,"mutability":"mutable","name":"_released","nameLocation":"2064:9:1","nodeType":"VariableDeclaration","scope":633,"src":"2028:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":182,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":180,"name":"address","nodeType":"ElementaryTypeName","src":"2036:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2028:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"2047:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":186,"mutability":"mutable","name":"_payees","nameLocation":"2097:7:1","nodeType":"VariableDeclaration","scope":633,"src":"2079:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":184,"name":"address","nodeType":"ElementaryTypeName","src":"2079:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":185,"nodeType":"ArrayTypeName","src":"2079:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"private"},{"constant":false,"id":191,"mutability":"mutable","name":"_erc20TotalReleased","nameLocation":"2157:19:1","nodeType":"VariableDeclaration","scope":633,"src":"2111:65:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20Upgradeable_$2149_$_t_uint256_$","typeString":"mapping(contract IERC20Upgradeable => uint256)"},"typeName":{"id":190,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":188,"nodeType":"UserDefinedTypeName","pathNode":{"id":187,"name":"IERC20Upgradeable","nameLocations":["2119:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"2119:17:1"},"referencedDeclaration":2149,"src":"2119:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"nodeType":"Mapping","src":"2111:37:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20Upgradeable_$2149_$_t_uint256_$","typeString":"mapping(contract IERC20Upgradeable => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"2140:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":198,"mutability":"mutable","name":"_erc20Released","nameLocation":"2248:14:1","nodeType":"VariableDeclaration","scope":633,"src":"2182:80:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20Upgradeable_$2149_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20Upgradeable => mapping(address => uint256))"},"typeName":{"id":197,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":193,"nodeType":"UserDefinedTypeName","pathNode":{"id":192,"name":"IERC20Upgradeable","nameLocations":["2190:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"2190:17:1"},"referencedDeclaration":2149,"src":"2190:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"nodeType":"Mapping","src":"2182:57:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20Upgradeable_$2149_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20Upgradeable => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":196,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":194,"name":"address","nodeType":"ElementaryTypeName","src":"2219:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2211:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":195,"name":"uint256","nodeType":"ElementaryTypeName","src":"2230:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"body":{"id":215,"nodeType":"Block","src":"2724:66:1","statements":[{"expression":{"arguments":[{"id":211,"name":"payees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2767:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":212,"name":"shares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"2775:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":210,"name":"__PaymentSplitter_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"2734:32:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory,uint256[] memory)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2734:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":214,"nodeType":"ExpressionStatement","src":"2734:49:1"}]},"documentation":{"id":199,"nodeType":"StructuredDocumentation","src":"2269:341:1","text":" @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n the matching position in the `shares` array.\n All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n duplicates in `payees`."},"id":216,"implemented":true,"kind":"function","modifiers":[{"id":208,"kind":"modifierInvocation","modifierName":{"id":207,"name":"onlyInitializing","nameLocations":["2707:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2707:16:1"},"nodeType":"ModifierInvocation","src":"2707:16:1"}],"name":"__PaymentSplitter_init","nameLocation":"2624:22:1","nodeType":"FunctionDefinition","parameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"payees","nameLocation":"2664:6:1","nodeType":"VariableDeclaration","scope":216,"src":"2647:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":200,"name":"address","nodeType":"ElementaryTypeName","src":"2647:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":201,"nodeType":"ArrayTypeName","src":"2647:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":205,"mutability":"mutable","name":"shares_","nameLocation":"2689:7:1","nodeType":"VariableDeclaration","scope":216,"src":"2672:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"2672:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":204,"nodeType":"ArrayTypeName","src":"2672:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2646:51:1"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"2724:0:1"},"scope":633,"src":"2615:175:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":266,"nodeType":"Block","src":"2915:288:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":228,"name":"payees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"2933:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2940:6:1","memberName":"length","nodeType":"MemberAccess","src":"2933:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":230,"name":"shares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"2950:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2958:6:1","memberName":"length","nodeType":"MemberAccess","src":"2950:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2933:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a2070617965657320616e6420736861726573206c656e677468206d69736d61746368","id":233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2966:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_a5e39d6690ea50b22e040fe9ba22acf868e3d7f78e6ca8dc7ae3224a0aade89f","typeString":"literal_string \"PaymentSplitter: payees and shares length mismatch\""},"value":"PaymentSplitter: payees and shares length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a5e39d6690ea50b22e040fe9ba22acf868e3d7f78e6ca8dc7ae3224a0aade89f","typeString":"literal_string \"PaymentSplitter: payees and shares length mismatch\""}],"id":227,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2925:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2925:94:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":235,"nodeType":"ExpressionStatement","src":"2925:94:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":237,"name":"payees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"3037:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3044:6:1","memberName":"length","nodeType":"MemberAccess","src":"3037:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3053:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3037:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a206e6f20706179656573","id":241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3056:28:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f1437b0f4053e38629626a98d8100226576b62fcebc211e7a49225bd05994643","typeString":"literal_string \"PaymentSplitter: no payees\""},"value":"PaymentSplitter: no payees"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f1437b0f4053e38629626a98d8100226576b62fcebc211e7a49225bd05994643","typeString":"literal_string \"PaymentSplitter: no payees\""}],"id":236,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3029:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3029:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":243,"nodeType":"ExpressionStatement","src":"3029:56:1"},{"body":{"id":264,"nodeType":"Block","src":"3140:57:1","statements":[{"expression":{"arguments":[{"baseExpression":{"id":256,"name":"payees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"3164:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":258,"indexExpression":{"id":257,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"3171:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3164:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":259,"name":"shares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"3175:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":261,"indexExpression":{"id":260,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"3183:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3175:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":255,"name":"_addPayee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"3154:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3154:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":263,"nodeType":"ExpressionStatement","src":"3154:32:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":248,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"3116:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":249,"name":"payees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"3120:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3127:6:1","memberName":"length","nodeType":"MemberAccess","src":"3120:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3116:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":265,"initializationExpression":{"assignments":[245],"declarations":[{"constant":false,"id":245,"mutability":"mutable","name":"i","nameLocation":"3109:1:1","nodeType":"VariableDeclaration","scope":265,"src":"3101:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"3101:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":247,"initialValue":{"hexValue":"30","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3113:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3101:13:1"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3135:3:1","subExpression":{"id":252,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"3135:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":254,"nodeType":"ExpressionStatement","src":"3135:3:1"},"nodeType":"ForStatement","src":"3096:101:1"}]},"id":267,"implemented":true,"kind":"function","modifiers":[{"id":225,"kind":"modifierInvocation","modifierName":{"id":224,"name":"onlyInitializing","nameLocations":["2898:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2898:16:1"},"nodeType":"ModifierInvocation","src":"2898:16:1"}],"name":"__PaymentSplitter_init_unchained","nameLocation":"2805:32:1","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"payees","nameLocation":"2855:6:1","nodeType":"VariableDeclaration","scope":267,"src":"2838:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"2838:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":218,"nodeType":"ArrayTypeName","src":"2838:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"shares_","nameLocation":"2880:7:1","nodeType":"VariableDeclaration","scope":267,"src":"2863:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":220,"name":"uint256","nodeType":"ElementaryTypeName","src":"2863:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":221,"nodeType":"ArrayTypeName","src":"2863:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2837:51:1"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[],"src":"2915:0:1"},"scope":633,"src":"2796:407:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":278,"nodeType":"Block","src":"3750:62:1","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":272,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"3781:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3781:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":274,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3795:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3799:5:1","memberName":"value","nodeType":"MemberAccess","src":"3795:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":271,"name":"PaymentReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"3765:15:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3765:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":277,"nodeType":"EmitStatement","src":"3760:45:1"}]},"documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"3209:501:1","text":" @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n reliability of the events, and not the actual splitting of Ether.\n To learn more about this see the Solidity documentation for\n https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n functions]."},"id":279,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":269,"nodeType":"ParameterList","parameters":[],"src":"3722:2:1"},"returnParameters":{"id":270,"nodeType":"ParameterList","parameters":[],"src":"3750:0:1"},"scope":633,"src":"3715:97:1","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":287,"nodeType":"Block","src":"3943:36:1","statements":[{"expression":{"id":285,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"3960:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":284,"id":286,"nodeType":"Return","src":"3953:19:1"}]},"documentation":{"id":280,"nodeType":"StructuredDocumentation","src":"3818:67:1","text":" @dev Getter for the total shares held by payees."},"functionSelector":"3a98ef39","id":288,"implemented":true,"kind":"function","modifiers":[],"name":"totalShares","nameLocation":"3899:11:1","nodeType":"FunctionDefinition","parameters":{"id":281,"nodeType":"ParameterList","parameters":[],"src":"3910:2:1"},"returnParameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":288,"src":"3934:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint256","nodeType":"ElementaryTypeName","src":"3934:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3933:9:1"},"scope":633,"src":"3890:89:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":296,"nodeType":"Block","src":"4123:38:1","statements":[{"expression":{"id":294,"name":"_totalReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"4140:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":293,"id":295,"nodeType":"Return","src":"4133:21:1"}]},"documentation":{"id":289,"nodeType":"StructuredDocumentation","src":"3985:78:1","text":" @dev Getter for the total amount of Ether already released."},"functionSelector":"e33b7de3","id":297,"implemented":true,"kind":"function","modifiers":[],"name":"totalReleased","nameLocation":"4077:13:1","nodeType":"FunctionDefinition","parameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"4090:2:1"},"returnParameters":{"id":293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":297,"src":"4114:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":291,"name":"uint256","nodeType":"ElementaryTypeName","src":"4114:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4113:9:1"},"scope":633,"src":"4068:93:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":310,"nodeType":"Block","src":"4390:50:1","statements":[{"expression":{"baseExpression":{"id":306,"name":"_erc20TotalReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"4407:19:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20Upgradeable_$2149_$_t_uint256_$","typeString":"mapping(contract IERC20Upgradeable => uint256)"}},"id":308,"indexExpression":{"id":307,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"4427:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4407:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":305,"id":309,"nodeType":"Return","src":"4400:33:1"}]},"documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"4167:140:1","text":" @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n contract."},"functionSelector":"d79779b2","id":311,"implemented":true,"kind":"function","modifiers":[],"name":"totalReleased","nameLocation":"4321:13:1","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"token","nameLocation":"4353:5:1","nodeType":"VariableDeclaration","scope":311,"src":"4335:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":300,"nodeType":"UserDefinedTypeName","pathNode":{"id":299,"name":"IERC20Upgradeable","nameLocations":["4335:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"4335:17:1"},"referencedDeclaration":2149,"src":"4335:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"}],"src":"4334:25:1"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":311,"src":"4381:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":303,"name":"uint256","nodeType":"ElementaryTypeName","src":"4381:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4380:9:1"},"scope":633,"src":"4312:128:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":323,"nodeType":"Block","src":"4589:40:1","statements":[{"expression":{"baseExpression":{"id":319,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"4606:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":321,"indexExpression":{"id":320,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"4614:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4606:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":318,"id":322,"nodeType":"Return","src":"4599:23:1"}]},"documentation":{"id":312,"nodeType":"StructuredDocumentation","src":"4446:75:1","text":" @dev Getter for the amount of shares held by an account."},"functionSelector":"ce7c2ac2","id":324,"implemented":true,"kind":"function","modifiers":[],"name":"shares","nameLocation":"4535:6:1","nodeType":"FunctionDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"mutability":"mutable","name":"account","nameLocation":"4550:7:1","nodeType":"VariableDeclaration","scope":324,"src":"4542:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":313,"name":"address","nodeType":"ElementaryTypeName","src":"4542:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4541:17:1"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":324,"src":"4580:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"4580:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4579:9:1"},"scope":633,"src":"4526:103:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":336,"nodeType":"Block","src":"4788:42:1","statements":[{"expression":{"baseExpression":{"id":332,"name":"_released","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"4805:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":334,"indexExpression":{"id":333,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"4815:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4805:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":331,"id":335,"nodeType":"Return","src":"4798:25:1"}]},"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"4635:83:1","text":" @dev Getter for the amount of Ether already released to a payee."},"functionSelector":"9852595c","id":337,"implemented":true,"kind":"function","modifiers":[],"name":"released","nameLocation":"4732:8:1","nodeType":"FunctionDefinition","parameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"account","nameLocation":"4749:7:1","nodeType":"VariableDeclaration","scope":337,"src":"4741:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":326,"name":"address","nodeType":"ElementaryTypeName","src":"4741:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4740:17:1"},"returnParameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":337,"src":"4779:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"4779:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4778:9:1"},"scope":633,"src":"4723:107:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":354,"nodeType":"Block","src":"5083:54:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":348,"name":"_erc20Released","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"5100:14:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20Upgradeable_$2149_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20Upgradeable => mapping(address => uint256))"}},"id":350,"indexExpression":{"id":349,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"5115:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5100:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":352,"indexExpression":{"id":351,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"5122:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5100:30:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":347,"id":353,"nodeType":"Return","src":"5093:37:1"}]},"documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"4836:152:1","text":" @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n IERC20 contract."},"functionSelector":"406072a9","id":355,"implemented":true,"kind":"function","modifiers":[],"name":"released","nameLocation":"5002:8:1","nodeType":"FunctionDefinition","parameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"mutability":"mutable","name":"token","nameLocation":"5029:5:1","nodeType":"VariableDeclaration","scope":355,"src":"5011:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":340,"nodeType":"UserDefinedTypeName","pathNode":{"id":339,"name":"IERC20Upgradeable","nameLocations":["5011:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"5011:17:1"},"referencedDeclaration":2149,"src":"5011:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":343,"mutability":"mutable","name":"account","nameLocation":"5044:7:1","nodeType":"VariableDeclaration","scope":355,"src":"5036:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"5036:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5010:42:1"},"returnParameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"5074:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":345,"name":"uint256","nodeType":"ElementaryTypeName","src":"5074:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5073:9:1"},"scope":633,"src":"4993:144:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":367,"nodeType":"Block","src":"5283:38:1","statements":[{"expression":{"baseExpression":{"id":363,"name":"_payees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"5300:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":365,"indexExpression":{"id":364,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"5308:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5300:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":362,"id":366,"nodeType":"Return","src":"5293:21:1"}]},"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"5143:75:1","text":" @dev Getter for the address of the payee number `index`."},"functionSelector":"8b83209b","id":368,"implemented":true,"kind":"function","modifiers":[],"name":"payee","nameLocation":"5232:5:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"index","nameLocation":"5246:5:1","nodeType":"VariableDeclaration","scope":368,"src":"5238:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":357,"name":"uint256","nodeType":"ElementaryTypeName","src":"5238:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5237:15:1"},"returnParameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":368,"src":"5274:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"5274:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5273:9:1"},"scope":633,"src":"5223:98:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":395,"nodeType":"Block","src":"5473:155:1","statements":[{"assignments":[377],"declarations":[{"constant":false,"id":377,"mutability":"mutable","name":"totalReceived","nameLocation":"5491:13:1","nodeType":"VariableDeclaration","scope":395,"src":"5483:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint256","nodeType":"ElementaryTypeName","src":"5483:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":386,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":380,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5515:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_PaymentSplitterUpgradeable_$633","typeString":"contract PaymentSplitterUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PaymentSplitterUpgradeable_$633","typeString":"contract PaymentSplitterUpgradeable"}],"id":379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5507:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"5507:7:1","typeDescriptions":{}}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5507:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5521:7:1","memberName":"balance","nodeType":"MemberAccess","src":"5507:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":383,"name":"totalReleased","nodeType":"Identifier","overloadedDeclarations":[297,311],"referencedDeclaration":297,"src":"5531:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5531:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5507:39:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5483:63:1"},{"expression":{"arguments":[{"id":388,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"5579:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":389,"name":"totalReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"5588:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":391,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"5612:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":390,"name":"released","nodeType":"Identifier","overloadedDeclarations":[337,355],"referencedDeclaration":337,"src":"5603:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5603:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":387,"name":"_pendingPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"5563:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256,uint256) view returns (uint256)"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5563:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":375,"id":394,"nodeType":"Return","src":"5556:65:1"}]},"documentation":{"id":369,"nodeType":"StructuredDocumentation","src":"5327:74:1","text":" @dev Getter for the amount of payee's releasable Ether."},"functionSelector":"a3f8eace","id":396,"implemented":true,"kind":"function","modifiers":[],"name":"releasable","nameLocation":"5415:10:1","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"account","nameLocation":"5434:7:1","nodeType":"VariableDeclaration","scope":396,"src":"5426:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":370,"name":"address","nodeType":"ElementaryTypeName","src":"5426:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5425:17:1"},"returnParameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":396,"src":"5464:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":373,"name":"uint256","nodeType":"ElementaryTypeName","src":"5464:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5463:9:1"},"scope":633,"src":"5406:222:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":430,"nodeType":"Block","src":"5874:176:1","statements":[{"assignments":[408],"declarations":[{"constant":false,"id":408,"mutability":"mutable","name":"totalReceived","nameLocation":"5892:13:1","nodeType":"VariableDeclaration","scope":430,"src":"5884:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":407,"name":"uint256","nodeType":"ElementaryTypeName","src":"5884:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":420,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":413,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5932:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_PaymentSplitterUpgradeable_$633","typeString":"contract PaymentSplitterUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PaymentSplitterUpgradeable_$633","typeString":"contract PaymentSplitterUpgradeable"}],"id":412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5924:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"5924:7:1","typeDescriptions":{}}},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5924:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":409,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"5908:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5914:9:1","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2106,"src":"5908:15:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5908:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"id":417,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"5955:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}],"id":416,"name":"totalReleased","nodeType":"Identifier","overloadedDeclarations":[297,311],"referencedDeclaration":311,"src":"5941:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20Upgradeable_$2149_$returns$_t_uint256_$","typeString":"function (contract IERC20Upgradeable) view returns (uint256)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5941:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5908:53:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5884:77:1"},{"expression":{"arguments":[{"id":422,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"5994:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":423,"name":"totalReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"6003:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":425,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"6027:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"id":426,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"6034:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_address","typeString":"address"}],"id":424,"name":"released","nodeType":"Identifier","overloadedDeclarations":[337,355],"referencedDeclaration":355,"src":"6018:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20Upgradeable_$2149_$_t_address_$returns$_t_uint256_$","typeString":"function (contract IERC20Upgradeable,address) view returns (uint256)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6018:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":421,"name":"_pendingPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"5978:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256,uint256) view returns (uint256)"}},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5978:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":406,"id":429,"nodeType":"Return","src":"5971:72:1"}]},"documentation":{"id":397,"nodeType":"StructuredDocumentation","src":"5634:143:1","text":" @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\n IERC20 contract."},"functionSelector":"c45ac050","id":431,"implemented":true,"kind":"function","modifiers":[],"name":"releasable","nameLocation":"5791:10:1","nodeType":"FunctionDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"token","nameLocation":"5820:5:1","nodeType":"VariableDeclaration","scope":431,"src":"5802:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":399,"nodeType":"UserDefinedTypeName","pathNode":{"id":398,"name":"IERC20Upgradeable","nameLocations":["5802:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"5802:17:1"},"referencedDeclaration":2149,"src":"5802:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":402,"mutability":"mutable","name":"account","nameLocation":"5835:7:1","nodeType":"VariableDeclaration","scope":431,"src":"5827:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5801:42:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":431,"src":"5865:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":404,"name":"uint256","nodeType":"ElementaryTypeName","src":"5865:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5864:9:1"},"scope":633,"src":"5782:268:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":482,"nodeType":"Block","src":"6301:609:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":438,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"6319:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":440,"indexExpression":{"id":439,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"6327:7:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6319:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6338:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6319:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e7420686173206e6f20736861726573","id":443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6341:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd","typeString":"literal_string \"PaymentSplitter: account has no shares\""},"value":"PaymentSplitter: account has no shares"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd","typeString":"literal_string \"PaymentSplitter: account has no shares\""}],"id":437,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6311:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6311:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":445,"nodeType":"ExpressionStatement","src":"6311:71:1"},{"assignments":[447],"declarations":[{"constant":false,"id":447,"mutability":"mutable","name":"payment","nameLocation":"6401:7:1","nodeType":"VariableDeclaration","scope":482,"src":"6393:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"6393:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":451,"initialValue":{"arguments":[{"id":449,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"6422:7:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":448,"name":"releasable","nodeType":"Identifier","overloadedDeclarations":[396,431],"referencedDeclaration":396,"src":"6411:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6411:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6393:37:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":453,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6449:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6460:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6449:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e74206973206e6f7420647565207061796d656e74","id":456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6463:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4","typeString":"literal_string \"PaymentSplitter: account is not due payment\""},"value":"PaymentSplitter: account is not due payment"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4","typeString":"literal_string \"PaymentSplitter: account is not due payment\""}],"id":452,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6441:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6441:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":458,"nodeType":"ExpressionStatement","src":"6441:68:1"},{"expression":{"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":459,"name":"_totalReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"6700:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":460,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6718:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6700:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":462,"nodeType":"ExpressionStatement","src":"6700:25:1"},{"id":469,"nodeType":"UncheckedBlock","src":"6735:64:1","statements":[{"expression":{"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":463,"name":"_released","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"6759:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":465,"indexExpression":{"id":464,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"6769:7:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6759:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":466,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6781:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6759:29:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":468,"nodeType":"ExpressionStatement","src":"6759:29:1"}]},{"expression":{"arguments":[{"id":473,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"6838:7:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":474,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6847:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":470,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"6809:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3126_$","typeString":"type(library AddressUpgradeable)"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6828:9:1","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":2848,"src":"6809:28:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$","typeString":"function (address payable,uint256)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6809:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":476,"nodeType":"ExpressionStatement","src":"6809:46:1"},{"eventCall":{"arguments":[{"id":478,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"6886:7:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":479,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6895:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":477,"name":"PaymentReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"6870:15:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6870:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":481,"nodeType":"EmitStatement","src":"6865:38:1"}]},"documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"6056:183:1","text":" @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n total shares and their previous withdrawals."},"functionSelector":"19165587","id":483,"implemented":true,"kind":"function","modifiers":[],"name":"release","nameLocation":"6253:7:1","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":434,"mutability":"mutable","name":"account","nameLocation":"6277:7:1","nodeType":"VariableDeclaration","scope":483,"src":"6261:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":433,"name":"address","nodeType":"ElementaryTypeName","src":"6261:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"6260:25:1"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[],"src":"6301:0:1"},"scope":633,"src":"6244:666:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":544,"nodeType":"Block","src":"7245:723:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":493,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"7263:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":495,"indexExpression":{"id":494,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"7271:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7263:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7282:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7263:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e7420686173206e6f20736861726573","id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7285:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd","typeString":"literal_string \"PaymentSplitter: account has no shares\""},"value":"PaymentSplitter: account has no shares"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd","typeString":"literal_string \"PaymentSplitter: account has no shares\""}],"id":492,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7255:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7255:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":500,"nodeType":"ExpressionStatement","src":"7255:71:1"},{"assignments":[502],"declarations":[{"constant":false,"id":502,"mutability":"mutable","name":"payment","nameLocation":"7345:7:1","nodeType":"VariableDeclaration","scope":544,"src":"7337:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint256","nodeType":"ElementaryTypeName","src":"7337:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":507,"initialValue":{"arguments":[{"id":504,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"7366:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"id":505,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"7373:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_address","typeString":"address"}],"id":503,"name":"releasable","nodeType":"Identifier","overloadedDeclarations":[396,431],"referencedDeclaration":431,"src":"7355:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20Upgradeable_$2149_$_t_address_$returns$_t_uint256_$","typeString":"function (contract IERC20Upgradeable,address) view returns (uint256)"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7337:44:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":509,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"7400:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7411:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7400:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e74206973206e6f7420647565207061796d656e74","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7414:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4","typeString":"literal_string \"PaymentSplitter: account is not due payment\""},"value":"PaymentSplitter: account is not due payment"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4","typeString":"literal_string \"PaymentSplitter: account is not due payment\""}],"id":508,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7392:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7392:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":514,"nodeType":"ExpressionStatement","src":"7392:68:1"},{"expression":{"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":515,"name":"_erc20TotalReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"7710:19:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20Upgradeable_$2149_$_t_uint256_$","typeString":"mapping(contract IERC20Upgradeable => uint256)"}},"id":517,"indexExpression":{"id":516,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"7730:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7710:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":518,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"7740:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7710:37:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":520,"nodeType":"ExpressionStatement","src":"7710:37:1"},{"id":529,"nodeType":"UncheckedBlock","src":"7757:76:1","statements":[{"expression":{"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":521,"name":"_erc20Released","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"7781:14:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20Upgradeable_$2149_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20Upgradeable => mapping(address => uint256))"}},"id":524,"indexExpression":{"id":522,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"7796:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7781:21:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":525,"indexExpression":{"id":523,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"7803:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7781:30:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":526,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"7815:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7781:41:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":528,"nodeType":"ExpressionStatement","src":"7781:41:1"}]},{"expression":{"arguments":[{"id":533,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"7877:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"id":534,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"7884:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":535,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"7893:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":530,"name":"SafeERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"7843:20:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeERC20Upgradeable_$2778_$","typeString":"type(library SafeERC20Upgradeable)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7864:12:1","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"7843:33:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7843:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":537,"nodeType":"ExpressionStatement","src":"7843:58:1"},{"eventCall":{"arguments":[{"id":539,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"7937:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"id":540,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"7944:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":541,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"7953:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":538,"name":"ERC20PaymentReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"7916:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":543,"nodeType":"EmitStatement","src":"7911:50:1"}]},"documentation":{"id":484,"nodeType":"StructuredDocumentation","src":"6916:250:1","text":" @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n contract."},"functionSelector":"48b75044","id":545,"implemented":true,"kind":"function","modifiers":[],"name":"release","nameLocation":"7180:7:1","nodeType":"FunctionDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":487,"mutability":"mutable","name":"token","nameLocation":"7206:5:1","nodeType":"VariableDeclaration","scope":545,"src":"7188:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":486,"nodeType":"UserDefinedTypeName","pathNode":{"id":485,"name":"IERC20Upgradeable","nameLocations":["7188:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"7188:17:1"},"referencedDeclaration":2149,"src":"7188:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":489,"mutability":"mutable","name":"account","nameLocation":"7221:7:1","nodeType":"VariableDeclaration","scope":545,"src":"7213:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":488,"name":"address","nodeType":"ElementaryTypeName","src":"7213:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7187:42:1"},"returnParameters":{"id":491,"nodeType":"ParameterList","parameters":[],"src":"7245:0:1"},"scope":633,"src":"7171:797:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":568,"nodeType":"Block","src":"8291:91:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":557,"name":"totalReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"8309:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"baseExpression":{"id":558,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"8325:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":560,"indexExpression":{"id":559,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"8333:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8325:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8309:32:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":562,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8308:34:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":563,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"8345:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8308:49:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":565,"name":"alreadyReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"8360:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8308:67:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":556,"id":567,"nodeType":"Return","src":"8301:74:1"}]},"documentation":{"id":546,"nodeType":"StructuredDocumentation","src":"7974:161:1","text":" @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n already released amounts."},"id":569,"implemented":true,"kind":"function","modifiers":[],"name":"_pendingPayment","nameLocation":"8149:15:1","nodeType":"FunctionDefinition","parameters":{"id":553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"account","nameLocation":"8182:7:1","nodeType":"VariableDeclaration","scope":569,"src":"8174:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":547,"name":"address","nodeType":"ElementaryTypeName","src":"8174:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":550,"mutability":"mutable","name":"totalReceived","nameLocation":"8207:13:1","nodeType":"VariableDeclaration","scope":569,"src":"8199:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"8199:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":552,"mutability":"mutable","name":"alreadyReleased","nameLocation":"8238:15:1","nodeType":"VariableDeclaration","scope":569,"src":"8230:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":551,"name":"uint256","nodeType":"ElementaryTypeName","src":"8230:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8164:95:1"},"returnParameters":{"id":556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":569,"src":"8282:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":554,"name":"uint256","nodeType":"ElementaryTypeName","src":"8282:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8281:9:1"},"scope":633,"src":"8140:242:1","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":626,"nodeType":"Block","src":"8628:403:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":578,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"8646:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8665:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8657:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":579,"name":"address","nodeType":"ElementaryTypeName","src":"8657:7:1","typeDescriptions":{}}},"id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8657:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8646:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e7420697320746865207a65726f2061646472657373","id":584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8669:46:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_22db6c622fd62a15ab5fca8fc78156905c4f1b5914d7d1db97b192b87e8c816b","typeString":"literal_string \"PaymentSplitter: account is the zero address\""},"value":"PaymentSplitter: account is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_22db6c622fd62a15ab5fca8fc78156905c4f1b5914d7d1db97b192b87e8c816b","typeString":"literal_string \"PaymentSplitter: account is the zero address\""}],"id":577,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8638:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8638:78:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":586,"nodeType":"ExpressionStatement","src":"8638:78:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":588,"name":"shares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"8734:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8744:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8734:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a20736861726573206172652030","id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8747:31:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f9c1be4d5245e2b1590d7367c9c09f1ac5365954d05fed4172915681bdc80ed4","typeString":"literal_string \"PaymentSplitter: shares are 0\""},"value":"PaymentSplitter: shares are 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f9c1be4d5245e2b1590d7367c9c09f1ac5365954d05fed4172915681bdc80ed4","typeString":"literal_string \"PaymentSplitter: shares are 0\""}],"id":587,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8726:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8726:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":593,"nodeType":"ExpressionStatement","src":"8726:53:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":595,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"8797:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":597,"indexExpression":{"id":596,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"8805:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8797:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8797:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e7420616c72656164792068617320736861726573","id":600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8820:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_df40dd957dfb1d655a61a3d20a7083773a63031454719eb1eb83074b56cf5635","typeString":"literal_string \"PaymentSplitter: account already has shares\""},"value":"PaymentSplitter: account already has shares"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df40dd957dfb1d655a61a3d20a7083773a63031454719eb1eb83074b56cf5635","typeString":"literal_string \"PaymentSplitter: account already has shares\""}],"id":594,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8789:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8789:77:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":602,"nodeType":"ExpressionStatement","src":"8789:77:1"},{"expression":{"arguments":[{"id":606,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"8890:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":603,"name":"_payees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"8877:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8885:4:1","memberName":"push","nodeType":"MemberAccess","src":"8877:12:1","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8877:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":608,"nodeType":"ExpressionStatement","src":"8877:21:1"},{"expression":{"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":609,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"8908:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":611,"indexExpression":{"id":610,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"8916:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8908:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":612,"name":"shares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"8927:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8908:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":614,"nodeType":"ExpressionStatement","src":"8908:26:1"},{"expression":{"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":615,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"8944:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":616,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"8959:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":617,"name":"shares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"8974:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8959:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8944:37:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":620,"nodeType":"ExpressionStatement","src":"8944:37:1"},{"eventCall":{"arguments":[{"id":622,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"9007:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":623,"name":"shares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"9016:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":621,"name":"PayeeAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"8996:10:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":625,"nodeType":"EmitStatement","src":"8991:33:1"}]},"documentation":{"id":570,"nodeType":"StructuredDocumentation","src":"8388:174:1","text":" @dev Add a new payee to the contract.\n @param account The address of the payee to add.\n @param shares_ The number of shares owned by the payee."},"id":627,"implemented":true,"kind":"function","modifiers":[],"name":"_addPayee","nameLocation":"8576:9:1","nodeType":"FunctionDefinition","parameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"account","nameLocation":"8594:7:1","nodeType":"VariableDeclaration","scope":627,"src":"8586:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":571,"name":"address","nodeType":"ElementaryTypeName","src":"8586:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"shares_","nameLocation":"8611:7:1","nodeType":"VariableDeclaration","scope":627,"src":"8603:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":573,"name":"uint256","nodeType":"ElementaryTypeName","src":"8603:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8585:34:1"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"8628:0:1"},"scope":633,"src":"8567:464:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":628,"nodeType":"StructuredDocumentation","src":"9037:254:1","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":632,"mutability":"mutable","name":"__gap","nameLocation":"9316:5:1","nodeType":"VariableDeclaration","scope":633,"src":"9296:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$43_storage","typeString":"uint256[43]"},"typeName":{"baseType":{"id":629,"name":"uint256","nodeType":"ElementaryTypeName","src":"9296:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":631,"length":{"hexValue":"3433","id":630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9304:2:1","typeDescriptions":{"typeIdentifier":"t_rational_43_by_1","typeString":"int_const 43"},"value":"43"},"nodeType":"ArrayTypeName","src":"9296:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$43_storage_ptr","typeString":"uint256[43]"}},"visibility":"private"}],"scope":634,"src":"1568:7756:1","usedErrors":[],"usedEvents":[150,156,165,171,1039]}],"src":"111:9214:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[654]},"id":655,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":635,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":636,"nodeType":"StructuredDocumentation","src":"132:133:2","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":654,"linearizedBaseContracts":[654],"name":"IERC1967Upgradeable","nameLocation":"276:19:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"302:68:2","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":641,"name":"Upgraded","nameLocation":"381:8:2","nodeType":"EventDefinition","parameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"406:14:2","nodeType":"VariableDeclaration","scope":641,"src":"390:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"389:32:2"},"src":"375:47:2"},{"anonymous":false,"documentation":{"id":642,"nodeType":"StructuredDocumentation","src":"428:67:2","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":648,"name":"AdminChanged","nameLocation":"506:12:2","nodeType":"EventDefinition","parameters":{"id":647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":644,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"527:13:2","nodeType":"VariableDeclaration","scope":648,"src":"519:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":643,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":646,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"550:8:2","nodeType":"VariableDeclaration","scope":648,"src":"542:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":645,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:41:2"},"src":"500:60:2"},{"anonymous":false,"documentation":{"id":649,"nodeType":"StructuredDocumentation","src":"566:59:2","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":653,"name":"BeaconUpgraded","nameLocation":"636:14:2","nodeType":"EventDefinition","parameters":{"id":652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"667:6:2","nodeType":"VariableDeclaration","scope":653,"src":"651:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"651:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"650:24:2"},"src":"630:45:2"}],"scope":655,"src":"266:411:2","usedErrors":[],"usedEvents":[641,648,653]}],"src":"107:571:2"},"id":2},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol","exportedSymbols":{"IERC5267Upgradeable":[679]},"id":680,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":656,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC5267Upgradeable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":679,"linearizedBaseContracts":[679],"name":"IERC5267Upgradeable","nameLocation":"142:19:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":657,"nodeType":"StructuredDocumentation","src":"168:84:3","text":" @dev MAY be emitted to signal that the domain could have changed."},"eventSelector":"0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31","id":659,"name":"EIP712DomainChanged","nameLocation":"263:19:3","nodeType":"EventDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[],"src":"282:2:3"},"src":"257:28:3"},{"documentation":{"id":660,"nodeType":"StructuredDocumentation","src":"291:140:3","text":" @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."},"functionSelector":"84b0196e","id":678,"implemented":false,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"445:12:3","nodeType":"FunctionDefinition","parameters":{"id":661,"nodeType":"ParameterList","parameters":[],"src":"457:2:3"},"returnParameters":{"id":677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"fields","nameLocation":"527:6:3","nodeType":"VariableDeclaration","scope":678,"src":"520:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":662,"name":"bytes1","nodeType":"ElementaryTypeName","src":"520:6:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"name","nameLocation":"561:4:3","nodeType":"VariableDeclaration","scope":678,"src":"547:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":664,"name":"string","nodeType":"ElementaryTypeName","src":"547:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":667,"mutability":"mutable","name":"version","nameLocation":"593:7:3","nodeType":"VariableDeclaration","scope":678,"src":"579:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":666,"name":"string","nodeType":"ElementaryTypeName","src":"579:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"chainId","nameLocation":"622:7:3","nodeType":"VariableDeclaration","scope":678,"src":"614:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"614:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":671,"mutability":"mutable","name":"verifyingContract","nameLocation":"651:17:3","nodeType":"VariableDeclaration","scope":678,"src":"643:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":670,"name":"address","nodeType":"ElementaryTypeName","src":"643:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":673,"mutability":"mutable","name":"salt","nameLocation":"690:4:3","nodeType":"VariableDeclaration","scope":678,"src":"682:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":672,"name":"bytes32","nodeType":"ElementaryTypeName","src":"682:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":676,"mutability":"mutable","name":"extensions","nameLocation":"725:10:3","nodeType":"VariableDeclaration","scope":678,"src":"708:27:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":674,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":675,"nodeType":"ArrayTypeName","src":"708:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"506:239:3"},"scope":679,"src":"436:310:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":680,"src":"132:616:3","usedErrors":[],"usedEvents":[659]}],"src":"107:642:3"},"id":3},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[689]},"id":690,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":681,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"138:203:4","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":689,"linearizedBaseContracts":[689],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":683,"nodeType":"StructuredDocumentation","src":"387:438:4","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":688,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:4","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[],"src":"852:2:4"},"returnParameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":688,"src":"878:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":685,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:4"},"scope":689,"src":"830:57:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":690,"src":"342:547:4","usedErrors":[],"usedEvents":[]}],"src":"113:777:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3126],"ERC1967UpgradeUpgradeable":[1014],"IBeaconUpgradeable":[1024],"IERC1822ProxiableUpgradeable":[689],"IERC1967Upgradeable":[654],"Initializable":[1193],"StorageSlotUpgradeable":[3361]},"id":1015,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":691,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":692,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1015,"sourceUnit":1025,"src":"141:42:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":693,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1015,"sourceUnit":655,"src":"184:50:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":694,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1015,"sourceUnit":690,"src":"235:56:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":695,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1015,"sourceUnit":3127,"src":"292:44:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":696,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1015,"sourceUnit":3362,"src":"337:48:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":698,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1015,"sourceUnit":1194,"src":"386:57:5","symbolAliases":[{"foreign":{"id":697,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"394:13:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":700,"name":"Initializable","nameLocations":["677:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"677:13:5"},"id":701,"nodeType":"InheritanceSpecifier","src":"677:13:5"},{"baseName":{"id":702,"name":"IERC1967Upgradeable","nameLocations":["692:19:5"],"nodeType":"IdentifierPath","referencedDeclaration":654,"src":"692:19:5"},"id":703,"nodeType":"InheritanceSpecifier","src":"692:19:5"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"445:184:5","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":1014,"linearizedBaseContracts":[1014,654,1193],"name":"ERC1967UpgradeUpgradeable","nameLocation":"648:25:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":706,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"822:14:5","nodeType":"VariableDeclaration","scope":1014,"src":"797:108:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":704,"name":"bytes32","nodeType":"ElementaryTypeName","src":"797:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"839:66:5","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":707,"nodeType":"StructuredDocumentation","src":"912:214:5","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":710,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1157:20:5","nodeType":"VariableDeclaration","scope":1014,"src":"1131:115:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":708,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1131:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1180:66:5","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":715,"nodeType":"Block","src":"1312:7:5","statements":[]},"id":716,"implemented":true,"kind":"function","modifiers":[{"id":713,"kind":"modifierInvocation","modifierName":{"id":712,"name":"onlyInitializing","nameLocations":["1295:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"1295:16:5"},"nodeType":"ModifierInvocation","src":"1295:16:5"}],"name":"__ERC1967Upgrade_init","nameLocation":"1262:21:5","nodeType":"FunctionDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[],"src":"1283:2:5"},"returnParameters":{"id":714,"nodeType":"ParameterList","parameters":[],"src":"1312:0:5"},"scope":1014,"src":"1253:66:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":721,"nodeType":"Block","src":"1394:7:5","statements":[]},"id":722,"implemented":true,"kind":"function","modifiers":[{"id":719,"kind":"modifierInvocation","modifierName":{"id":718,"name":"onlyInitializing","nameLocations":["1377:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"1377:16:5"},"nodeType":"ModifierInvocation","src":"1377:16:5"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"1334:31:5","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[],"src":"1365:2:5"},"returnParameters":{"id":720,"nodeType":"ParameterList","parameters":[],"src":"1394:0:5"},"scope":1014,"src":"1325:76:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":734,"nodeType":"Block","src":"1540:89:5","statements":[{"expression":{"expression":{"arguments":[{"id":730,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"1595:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":728,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"1557:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3361_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1580:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3283,"src":"1557:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3257_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1557:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3257_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1617:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"1557:65:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":727,"id":733,"nodeType":"Return","src":"1550:72:5"}]},"documentation":{"id":723,"nodeType":"StructuredDocumentation","src":"1406:67:5","text":" @dev Returns the current implementation address."},"id":735,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1487:18:5","nodeType":"FunctionDefinition","parameters":{"id":724,"nodeType":"ParameterList","parameters":[],"src":"1505:2:5"},"returnParameters":{"id":727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":735,"src":"1531:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":725,"name":"address","nodeType":"ElementaryTypeName","src":"1531:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1530:9:5"},"scope":1014,"src":"1478:151:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":758,"nodeType":"Block","src":"1783:218:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":744,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"1831:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":742,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"1801:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3126_$","typeString":"type(library AddressUpgradeable)"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1820:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"1801:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1801:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1851:47:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":741,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1793:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:106:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":748,"nodeType":"ExpressionStatement","src":"1793:106:5"},{"expression":{"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":752,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"1947:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":749,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"1909:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3361_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1932:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3283,"src":"1909:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3257_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1909:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3257_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":754,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1969:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"1909:65:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":755,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"1977:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1909:85:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":757,"nodeType":"ExpressionStatement","src":"1909:85:5"}]},"documentation":{"id":736,"nodeType":"StructuredDocumentation","src":"1635:80:5","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":759,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1729:18:5","nodeType":"FunctionDefinition","parameters":{"id":739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"newImplementation","nameLocation":"1756:17:5","nodeType":"VariableDeclaration","scope":759,"src":"1748:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":737,"name":"address","nodeType":"ElementaryTypeName","src":"1748:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1747:27:5"},"returnParameters":{"id":740,"nodeType":"ParameterList","parameters":[],"src":"1783:0:5"},"scope":1014,"src":"1720:281:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":773,"nodeType":"Block","src":"2163:96:5","statements":[{"expression":{"arguments":[{"id":766,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"2192:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":765,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"2173:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2173:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":768,"nodeType":"ExpressionStatement","src":"2173:37:5"},{"eventCall":{"arguments":[{"id":770,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"2234:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":769,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"2225:8:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2225:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":772,"nodeType":"EmitStatement","src":"2220:32:5"}]},"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"2007:95:5","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":774,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2116:10:5","nodeType":"FunctionDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"newImplementation","nameLocation":"2135:17:5","nodeType":"VariableDeclaration","scope":774,"src":"2127:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"2127:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2126:27:5"},"returnParameters":{"id":764,"nodeType":"ParameterList","parameters":[],"src":"2163:0:5"},"scope":1014,"src":"2107:152:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":803,"nodeType":"Block","src":"2491:178:5","statements":[{"expression":{"arguments":[{"id":785,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"2512:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":784,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"2501:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":787,"nodeType":"ExpressionStatement","src":"2501:29:5"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":788,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"2544:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2549:6:5","memberName":"length","nodeType":"MemberAccess","src":"2544:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2558:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2544:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":792,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"2563:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2544:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":802,"nodeType":"IfStatement","src":"2540:123:5","trueBody":{"id":801,"nodeType":"Block","src":"2574:89:5","statements":[{"expression":{"arguments":[{"id":797,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"2628:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":798,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"2647:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":794,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"2588:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3126_$","typeString":"type(library AddressUpgradeable)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2607:20:5","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"2588:39:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2588:64:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":800,"nodeType":"ExpressionStatement","src":"2588:64:5"}]}}]},"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"2265:123:5","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":804,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2402:17:5","nodeType":"FunctionDefinition","parameters":{"id":782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":777,"mutability":"mutable","name":"newImplementation","nameLocation":"2428:17:5","nodeType":"VariableDeclaration","scope":804,"src":"2420:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"2420:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":779,"mutability":"mutable","name":"data","nameLocation":"2460:4:5","nodeType":"VariableDeclaration","scope":804,"src":"2447:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":778,"name":"bytes","nodeType":"ElementaryTypeName","src":"2447:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":781,"mutability":"mutable","name":"forceCall","nameLocation":"2471:9:5","nodeType":"VariableDeclaration","scope":804,"src":"2466:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":780,"name":"bool","nodeType":"ElementaryTypeName","src":"2466:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2419:62:5"},"returnParameters":{"id":783,"nodeType":"ParameterList","parameters":[],"src":"2491:0:5"},"scope":1014,"src":"2393:276:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":856,"nodeType":"Block","src":"2943:842:5","statements":[{"condition":{"expression":{"arguments":[{"id":816,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"3295:14:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":814,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"3257:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3361_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3280:14:5","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":3294,"src":"3257:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$3260_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3257:53:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3260_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":818,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3311:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3259,"src":"3257:59:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":854,"nodeType":"Block","src":"3386:393:5","statements":[{"clauses":[{"block":{"id":839,"nodeType":"Block","src":"3491:115:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":833,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"3517:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":834,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"3525:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3517:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3547:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":832,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3509:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3509:82:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":838,"nodeType":"ExpressionStatement","src":"3509:82:5"}]},"errorName":"","id":840,"nodeType":"TryCatchClause","parameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":830,"mutability":"mutable","name":"slot","nameLocation":"3485:4:5","nodeType":"VariableDeclaration","scope":840,"src":"3477:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":829,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3477:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3476:14:5"},"src":"3468:138:5"},{"block":{"id":845,"nodeType":"Block","src":"3613:89:5","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3638:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":841,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3631:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:56:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":844,"nodeType":"ExpressionStatement","src":"3631:56:5"}]},"errorName":"","id":846,"nodeType":"TryCatchClause","src":"3607:95:5"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":825,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"3433:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":824,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"3404:28:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$689_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3404:47:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$689","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3452:13:5","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":688,"src":"3404:61:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3404:63:5","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":847,"nodeType":"TryStatement","src":"3400:302:5"},{"expression":{"arguments":[{"id":849,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"3733:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":850,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"3752:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":851,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"3758:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":848,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"3715:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3715:53:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":853,"nodeType":"ExpressionStatement","src":"3715:53:5"}]},"id":855,"nodeType":"IfStatement","src":"3253:526:5","trueBody":{"id":823,"nodeType":"Block","src":"3318:62:5","statements":[{"expression":{"arguments":[{"id":820,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"3351:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":819,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"3332:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3332:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":822,"nodeType":"ExpressionStatement","src":"3332:37:5"}]}}]},"documentation":{"id":805,"nodeType":"StructuredDocumentation","src":"2675:161:5","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":857,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2850:21:5","nodeType":"FunctionDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"newImplementation","nameLocation":"2880:17:5","nodeType":"VariableDeclaration","scope":857,"src":"2872:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":806,"name":"address","nodeType":"ElementaryTypeName","src":"2872:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":809,"mutability":"mutable","name":"data","nameLocation":"2912:4:5","nodeType":"VariableDeclaration","scope":857,"src":"2899:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":808,"name":"bytes","nodeType":"ElementaryTypeName","src":"2899:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":811,"mutability":"mutable","name":"forceCall","nameLocation":"2923:9:5","nodeType":"VariableDeclaration","scope":857,"src":"2918:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":810,"name":"bool","nodeType":"ElementaryTypeName","src":"2918:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2871:62:5"},"returnParameters":{"id":813,"nodeType":"ParameterList","parameters":[],"src":"2943:0:5"},"scope":1014,"src":"2841:944:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"3791:189:5","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":861,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4011:11:5","nodeType":"VariableDeclaration","scope":1014,"src":"3985:106:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3985:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4025:66:5","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":873,"nodeType":"Block","src":"4206:80:5","statements":[{"expression":{"expression":{"arguments":[{"id":869,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4261:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":867,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"4223:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3361_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4246:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3283,"src":"4223:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3257_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4223:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3257_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":871,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4274:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"4223:56:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":866,"id":872,"nodeType":"Return","src":"4216:63:5"}]},"documentation":{"id":862,"nodeType":"StructuredDocumentation","src":"4098:50:5","text":" @dev Returns the current admin."},"id":874,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4162:9:5","nodeType":"FunctionDefinition","parameters":{"id":863,"nodeType":"ParameterList","parameters":[],"src":"4171:2:5"},"returnParameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":874,"src":"4197:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":864,"name":"address","nodeType":"ElementaryTypeName","src":"4197:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4196:9:5"},"scope":1014,"src":"4153:133:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":899,"nodeType":"Block","src":"4413:167:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":881,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"4431:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4451:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4443:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"4443:7:5","typeDescriptions":{}}},"id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4443:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4431:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4455:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":880,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4423:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4423:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":889,"nodeType":"ExpressionStatement","src":"4423:73:5"},{"expression":{"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":893,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"4544:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":890,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"4506:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3361_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4529:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3283,"src":"4506:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3257_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4506:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3257_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":895,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4557:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"4506:56:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":896,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"4565:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4506:67:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":898,"nodeType":"ExpressionStatement","src":"4506:67:5"}]},"documentation":{"id":875,"nodeType":"StructuredDocumentation","src":"4292:71:5","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":900,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4377:9:5","nodeType":"FunctionDefinition","parameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"newAdmin","nameLocation":"4395:8:5","nodeType":"VariableDeclaration","scope":900,"src":"4387:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":876,"name":"address","nodeType":"ElementaryTypeName","src":"4387:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4386:18:5"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[],"src":"4413:0:5"},"scope":1014,"src":"4368:212:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":916,"nodeType":"Block","src":"4740:86:5","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":907,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"4768:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4768:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":909,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"4781:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":906,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"4755:12:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4755:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":911,"nodeType":"EmitStatement","src":"4750:40:5"},{"expression":{"arguments":[{"id":913,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"4810:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":912,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"4800:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4800:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":915,"nodeType":"ExpressionStatement","src":"4800:19:5"}]},"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"4586:100:5","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":917,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4700:12:5","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"newAdmin","nameLocation":"4721:8:5","nodeType":"VariableDeclaration","scope":917,"src":"4713:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"4713:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4712:18:5"},"returnParameters":{"id":905,"nodeType":"ParameterList","parameters":[],"src":"4740:0:5"},"scope":1014,"src":"4691:135:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":918,"nodeType":"StructuredDocumentation","src":"4832:232:5","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":921,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5095:12:5","nodeType":"VariableDeclaration","scope":1014,"src":"5069:107:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":919,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5069:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5110:66:5","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":933,"nodeType":"Block","src":"5293:81:5","statements":[{"expression":{"expression":{"arguments":[{"id":929,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"5348:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":927,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"5310:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3361_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5333:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3283,"src":"5310:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3257_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5310:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3257_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":931,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5362:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"5310:57:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":926,"id":932,"nodeType":"Return","src":"5303:64:5"}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"5183:51:5","text":" @dev Returns the current beacon."},"id":934,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5248:10:5","nodeType":"FunctionDefinition","parameters":{"id":923,"nodeType":"ParameterList","parameters":[],"src":"5258:2:5"},"returnParameters":{"id":926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":934,"src":"5284:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":924,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5283:9:5"},"scope":1014,"src":"5239:135:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":969,"nodeType":"Block","src":"5503:368:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":943,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"5551:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":941,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"5521:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3126_$","typeString":"type(library AddressUpgradeable)"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5540:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"5521:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5521:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5563:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":940,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5513:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5513:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":947,"nodeType":"ExpressionStatement","src":"5513:90:5"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":952,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"5683:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":951,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"5664:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$1024_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5664:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$1024","typeString":"contract IBeaconUpgradeable"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5694:14:5","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1023,"src":"5664:44:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5664:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":949,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"5634:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3126_$","typeString":"type(library AddressUpgradeable)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5653:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"5634:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5634:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5725:50:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":948,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5613:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:172:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":959,"nodeType":"ExpressionStatement","src":"5613:172:5"},{"expression":{"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":963,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"5833:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":960,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"5795:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3361_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5818:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3283,"src":"5795:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3257_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5795:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3257_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":965,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5847:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"5795:57:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":966,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"5855:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5795:69:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":968,"nodeType":"ExpressionStatement","src":"5795:69:5"}]},"documentation":{"id":935,"nodeType":"StructuredDocumentation","src":"5380:71:5","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":970,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5465:10:5","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":937,"mutability":"mutable","name":"newBeacon","nameLocation":"5484:9:5","nodeType":"VariableDeclaration","scope":970,"src":"5476:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":936,"name":"address","nodeType":"ElementaryTypeName","src":"5476:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5475:19:5"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[],"src":"5503:0:5"},"scope":1014,"src":"5456:415:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1007,"nodeType":"Block","src":"6270:239:5","statements":[{"expression":{"arguments":[{"id":981,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"6291:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":980,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"6280:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6280:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":983,"nodeType":"ExpressionStatement","src":"6280:21:5"},{"eventCall":{"arguments":[{"id":985,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"6331:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":984,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"6316:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6316:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":987,"nodeType":"EmitStatement","src":"6311:30:5"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":988,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"6355:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6360:6:5","memberName":"length","nodeType":"MemberAccess","src":"6355:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6355:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":992,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"6374:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6355:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1006,"nodeType":"IfStatement","src":"6351:152:5","trueBody":{"id":1005,"nodeType":"Block","src":"6385:118:5","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":998,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"6458:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":997,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"6439:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$1024_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6439:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$1024","typeString":"contract IBeaconUpgradeable"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6469:14:5","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1023,"src":"6439:44:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6439:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1002,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"6487:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":994,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"6399:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3126_$","typeString":"type(library AddressUpgradeable)"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6418:20:5","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"6399:39:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6399:93:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1004,"nodeType":"ExpressionStatement","src":"6399:93:5"}]}}]},"documentation":{"id":971,"nodeType":"StructuredDocumentation","src":"5877:292:5","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":1008,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6183:23:5","nodeType":"FunctionDefinition","parameters":{"id":978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":973,"mutability":"mutable","name":"newBeacon","nameLocation":"6215:9:5","nodeType":"VariableDeclaration","scope":1008,"src":"6207:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":972,"name":"address","nodeType":"ElementaryTypeName","src":"6207:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":975,"mutability":"mutable","name":"data","nameLocation":"6239:4:5","nodeType":"VariableDeclaration","scope":1008,"src":"6226:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":974,"name":"bytes","nodeType":"ElementaryTypeName","src":"6226:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"forceCall","nameLocation":"6250:9:5","nodeType":"VariableDeclaration","scope":1008,"src":"6245:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":976,"name":"bool","nodeType":"ElementaryTypeName","src":"6245:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6206:54:5"},"returnParameters":{"id":979,"nodeType":"ParameterList","parameters":[],"src":"6270:0:5"},"scope":1014,"src":"6174:335:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":1009,"nodeType":"StructuredDocumentation","src":"6515:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1013,"mutability":"mutable","name":"__gap","nameLocation":"6794:5:5","nodeType":"VariableDeclaration","scope":1014,"src":"6774:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1010,"name":"uint256","nodeType":"ElementaryTypeName","src":"6774:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1012,"length":{"hexValue":"3530","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6782:2:5","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"6774:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1015,"src":"630:6172:5","usedErrors":[],"usedEvents":[641,648,653,1039]}],"src":"116:6687:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[1024]},"id":1025,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1016,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"118:79:6","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":1024,"linearizedBaseContracts":[1024],"name":"IBeaconUpgradeable","nameLocation":"208:18:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1018,"nodeType":"StructuredDocumentation","src":"233:162:6","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":1023,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:6","nodeType":"FunctionDefinition","parameters":{"id":1019,"nodeType":"ParameterList","parameters":[],"src":"423:2:6"},"returnParameters":{"id":1022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1023,"src":"449:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1020,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:6"},"scope":1024,"src":"400:58:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1025,"src":"198:262:6","usedErrors":[],"usedEvents":[]}],"src":"93:368:6"},"id":6},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[3126],"Initializable":[1193]},"id":1194,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1026,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":1027,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1194,"sourceUnit":3127,"src":"138:44:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1028,"nodeType":"StructuredDocumentation","src":"184:2209:7","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1193,"linearizedBaseContracts":[1193],"name":"Initializable","nameLocation":"2412:13:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1029,"nodeType":"StructuredDocumentation","src":"2432:109:7","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":1031,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:7","nodeType":"VariableDeclaration","scope":1193,"src":"2546:26:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1030,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"2579:91:7","text":" @dev Indicates that the contract is in the process of being initialized."},"id":1034,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:7","nodeType":"VariableDeclaration","scope":1193,"src":"2675:26:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1033,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"2708:90:7","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":1039,"name":"Initialized","nameLocation":"2809:11:7","nodeType":"EventDefinition","parameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:7","nodeType":"VariableDeclaration","scope":1039,"src":"2821:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1036,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:7"},"src":"2803:33:7"},{"body":{"id":1094,"nodeType":"Block","src":"3269:483:7","statements":[{"assignments":[1043],"declarations":[{"constant":false,"id":1043,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:7","nodeType":"VariableDeclaration","scope":1094,"src":"3279:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1042,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1046,"initialValue":{"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:7","subExpression":{"id":1044,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"3302:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1048,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3347:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"3365:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1053,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:7","subExpression":{"arguments":[{"arguments":[{"id":1058,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1193","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1193","typeString":"contract Initializable"}],"id":1057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1056,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:7","typeDescriptions":{}}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1054,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"3388:18:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3126_$","typeString":"type(library AddressUpgradeable)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:7","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"3388:29:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"3436:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1066,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1047,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1070,"nodeType":"ExpressionStatement","src":"3325:201:7"},{"expression":{"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1071,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"3536:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1074,"nodeType":"ExpressionStatement","src":"3536:16:7"},{"condition":{"id":1075,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3566:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1081,"nodeType":"IfStatement","src":"3562:65:7","trueBody":{"id":1080,"nodeType":"Block","src":"3582:45:7","statements":[{"expression":{"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1076,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"3596:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1079,"nodeType":"ExpressionStatement","src":"3596:20:7"}]}},{"id":1082,"nodeType":"PlaceholderStatement","src":"3636:1:7"},{"condition":{"id":1083,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3651:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1093,"nodeType":"IfStatement","src":"3647:99:7","trueBody":{"id":1092,"nodeType":"Block","src":"3667:79:7","statements":[{"expression":{"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1084,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"3681:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1087,"nodeType":"ExpressionStatement","src":"3681:21:7"},{"eventCall":{"arguments":[{"hexValue":"31","id":1089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1088,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"3721:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1091,"nodeType":"EmitStatement","src":"3716:19:7"}]}}]},"documentation":{"id":1040,"nodeType":"StructuredDocumentation","src":"2842:399:7","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":1095,"name":"initializer","nameLocation":"3255:11:7","nodeType":"ModifierDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[],"src":"3266:2:7"},"src":"3246:506:7","virtual":false,"visibility":"internal"},{"body":{"id":1127,"nodeType":"Block","src":"4863:255:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:7","subExpression":{"id":1101,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"4882:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1103,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"4899:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1104,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"4914:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1100,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1109,"nodeType":"ExpressionStatement","src":"4873:99:7"},{"expression":{"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1110,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"4982:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1111,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"4997:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1113,"nodeType":"ExpressionStatement","src":"4982:22:7"},{"expression":{"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1114,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"5014:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1117,"nodeType":"ExpressionStatement","src":"5014:20:7"},{"id":1118,"nodeType":"PlaceholderStatement","src":"5044:1:7"},{"expression":{"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1119,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"5055:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1122,"nodeType":"ExpressionStatement","src":"5055:21:7"},{"eventCall":{"arguments":[{"id":1124,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"5103:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1123,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"5091:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1126,"nodeType":"EmitStatement","src":"5086:25:7"}]},"documentation":{"id":1096,"nodeType":"StructuredDocumentation","src":"3758:1062:7","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1128,"name":"reinitializer","nameLocation":"4834:13:7","nodeType":"ModifierDefinition","parameters":{"id":1099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1098,"mutability":"mutable","name":"version","nameLocation":"4854:7:7","nodeType":"VariableDeclaration","scope":1128,"src":"4848:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1097,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:7"},"src":"4825:293:7","virtual":false,"visibility":"internal"},{"body":{"id":1137,"nodeType":"Block","src":"5356:97:7","statements":[{"expression":{"arguments":[{"id":1132,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"5374:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":1131,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1135,"nodeType":"ExpressionStatement","src":"5366:69:7"},{"id":1136,"nodeType":"PlaceholderStatement","src":"5445:1:7"}]},"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"5124:199:7","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1138,"name":"onlyInitializing","nameLocation":"5337:16:7","nodeType":"ModifierDefinition","parameters":{"id":1130,"nodeType":"ParameterList","parameters":[],"src":"5353:2:7"},"src":"5328:125:7","virtual":false,"visibility":"internal"},{"body":{"id":1173,"nodeType":"Block","src":"5988:231:7","statements":[{"expression":{"arguments":[{"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:7","subExpression":{"id":1143,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"6007:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":1145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":1142,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1147,"nodeType":"ExpressionStatement","src":"5998:66:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1148,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"6078:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1150,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1149,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:7","memberName":"max","nodeType":"MemberAccess","src":"6094:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1172,"nodeType":"IfStatement","src":"6074:139:7","trueBody":{"id":1171,"nodeType":"Block","src":"6111:102:7","statements":[{"expression":{"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1155,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"6125:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1157,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1156,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:7","memberName":"max","nodeType":"MemberAccess","src":"6140:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1162,"nodeType":"ExpressionStatement","src":"6125:30:7"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1165,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1164,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:7","memberName":"max","nodeType":"MemberAccess","src":"6186:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1163,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"6174:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"EmitStatement","src":"6169:33:7"}]}}]},"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"5459:475:7","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1174,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:7","nodeType":"FunctionDefinition","parameters":{"id":1140,"nodeType":"ParameterList","parameters":[],"src":"5968:2:7"},"returnParameters":{"id":1141,"nodeType":"ParameterList","parameters":[],"src":"5988:0:7"},"scope":1193,"src":"5939:280:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1182,"nodeType":"Block","src":"6393:36:7","statements":[{"expression":{"id":1180,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"6410:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1179,"id":1181,"nodeType":"Return","src":"6403:19:7"}]},"documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"6225:99:7","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1183,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:7","nodeType":"FunctionDefinition","parameters":{"id":1176,"nodeType":"ParameterList","parameters":[],"src":"6360:2:7"},"returnParameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1183,"src":"6386:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1177,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:7"},"scope":1193,"src":"6329:100:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1191,"nodeType":"Block","src":"6601:37:7","statements":[{"expression":{"id":1189,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"6618:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1188,"id":1190,"nodeType":"Return","src":"6611:20:7"}]},"documentation":{"id":1184,"nodeType":"StructuredDocumentation","src":"6435:105:7","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1192,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:7","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[],"src":"6569:2:7"},"returnParameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1192,"src":"6595:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1186,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:7"},"scope":1193,"src":"6545:93:7","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1194,"src":"2394:4246:7","usedErrors":[],"usedEvents":[1039]}],"src":"113:6528:7"},"id":7},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3126],"ERC1967UpgradeUpgradeable":[1014],"IBeaconUpgradeable":[1024],"IERC1822ProxiableUpgradeable":[689],"IERC1967Upgradeable":[654],"Initializable":[1193],"StorageSlotUpgradeable":[3361],"UUPSUpgradeable":[1330]},"id":1331,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1195,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":1196,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1331,"sourceUnit":690,"src":"140:56:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":1197,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1331,"sourceUnit":1015,"src":"197:50:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":1199,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1331,"sourceUnit":1194,"src":"248:50:8","symbolAliases":[{"foreign":{"id":1198,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"256:13:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1201,"name":"Initializable","nameLocations":["986:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"986:13:8"},"id":1202,"nodeType":"InheritanceSpecifier","src":"986:13:8"},{"baseName":{"id":1203,"name":"IERC1822ProxiableUpgradeable","nameLocations":["1001:28:8"],"nodeType":"IdentifierPath","referencedDeclaration":689,"src":"1001:28:8"},"id":1204,"nodeType":"InheritanceSpecifier","src":"1001:28:8"},{"baseName":{"id":1205,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1031:25:8"],"nodeType":"IdentifierPath","referencedDeclaration":1014,"src":"1031:25:8"},"id":1206,"nodeType":"InheritanceSpecifier","src":"1031:25:8"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1200,"nodeType":"StructuredDocumentation","src":"300:648:8","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1330,"linearizedBaseContracts":[1330,1014,654,689,1193],"name":"UUPSUpgradeable","nameLocation":"967:15:8","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1207,"nodeType":"StructuredDocumentation","src":"1063:87:8","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":1213,"mutability":"immutable","name":"__self","nameLocation":"1181:6:8","nodeType":"VariableDeclaration","scope":1330,"src":"1155:48:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1208,"name":"address","nodeType":"ElementaryTypeName","src":"1155:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":1211,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1198:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1330","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1330","typeString":"contract UUPSUpgradeable"}],"id":1210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1190:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1209,"name":"address","nodeType":"ElementaryTypeName","src":"1190:7:8","typeDescriptions":{}}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1190:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":1235,"nodeType":"Block","src":"1729:205:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1219,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1755:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1330","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1330","typeString":"contract UUPSUpgradeable"}],"id":1218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1747:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"1747:7:8","typeDescriptions":{}}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1747:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1221,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"1764:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1747:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1772:46:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":1216,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1739:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:80:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"ExpressionStatement","src":"1739:80:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1227,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"1837:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1837:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1229,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"1861:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1837:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1869:46:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":1226,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1829:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1829:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1233,"nodeType":"ExpressionStatement","src":"1829:87:8"},{"id":1234,"nodeType":"PlaceholderStatement","src":"1926:1:8"}]},"documentation":{"id":1214,"nodeType":"StructuredDocumentation","src":"1210:493:8","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":1236,"name":"onlyProxy","nameLocation":"1717:9:8","nodeType":"ModifierDefinition","parameters":{"id":1215,"nodeType":"ParameterList","parameters":[],"src":"1726:2:8"},"src":"1708:226:8","virtual":false,"visibility":"internal"},{"body":{"id":1250,"nodeType":"Block","src":"2164:120:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1242,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2190:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1330","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1330","typeString":"contract UUPSUpgradeable"}],"id":1241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2182:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1240,"name":"address","nodeType":"ElementaryTypeName","src":"2182:7:8","typeDescriptions":{}}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2182:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1244,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"2199:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2182:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2207:58:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":1239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2174:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:92:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1248,"nodeType":"ExpressionStatement","src":"2174:92:8"},{"id":1249,"nodeType":"PlaceholderStatement","src":"2276:1:8"}]},"documentation":{"id":1237,"nodeType":"StructuredDocumentation","src":"1940:195:8","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1251,"name":"notDelegated","nameLocation":"2149:12:8","nodeType":"ModifierDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[],"src":"2161:2:8"},"src":"2140:144:8","virtual":false,"visibility":"internal"},{"body":{"id":1256,"nodeType":"Block","src":"2350:7:8","statements":[]},"id":1257,"implemented":true,"kind":"function","modifiers":[{"id":1254,"kind":"modifierInvocation","modifierName":{"id":1253,"name":"onlyInitializing","nameLocations":["2333:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2333:16:8"},"nodeType":"ModifierInvocation","src":"2333:16:8"}],"name":"__UUPSUpgradeable_init","nameLocation":"2299:22:8","nodeType":"FunctionDefinition","parameters":{"id":1252,"nodeType":"ParameterList","parameters":[],"src":"2321:2:8"},"returnParameters":{"id":1255,"nodeType":"ParameterList","parameters":[],"src":"2350:0:8"},"scope":1330,"src":"2290:67:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1262,"nodeType":"Block","src":"2433:7:8","statements":[]},"id":1263,"implemented":true,"kind":"function","modifiers":[{"id":1260,"kind":"modifierInvocation","modifierName":{"id":1259,"name":"onlyInitializing","nameLocations":["2416:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2416:16:8"},"nodeType":"ModifierInvocation","src":"2416:16:8"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"2372:32:8","nodeType":"FunctionDefinition","parameters":{"id":1258,"nodeType":"ParameterList","parameters":[],"src":"2404:2:8"},"returnParameters":{"id":1261,"nodeType":"ParameterList","parameters":[],"src":"2433:0:8"},"scope":1330,"src":"2363:77:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[688],"body":{"id":1274,"nodeType":"Block","src":"3114:44:8","statements":[{"expression":{"id":1272,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"3131:20:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1271,"id":1273,"nodeType":"Return","src":"3124:27:8"}]},"documentation":{"id":1264,"nodeType":"StructuredDocumentation","src":"2445:577:8","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1275,"implemented":true,"kind":"function","modifiers":[{"id":1268,"kind":"modifierInvocation","modifierName":{"id":1267,"name":"notDelegated","nameLocations":["3083:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1251,"src":"3083:12:8"},"nodeType":"ModifierInvocation","src":"3083:12:8"}],"name":"proxiableUUID","nameLocation":"3036:13:8","nodeType":"FunctionDefinition","overrides":{"id":1266,"nodeType":"OverrideSpecifier","overrides":[],"src":"3074:8:8"},"parameters":{"id":1265,"nodeType":"ParameterList","parameters":[],"src":"3049:2:8"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1275,"src":"3105:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1269,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3105:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3104:9:8"},"scope":1330,"src":"3027:131:8","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1296,"nodeType":"Block","src":"3479:124:8","statements":[{"expression":{"arguments":[{"id":1284,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"3507:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1283,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"3489:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3489:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1286,"nodeType":"ExpressionStatement","src":"3489:36:8"},{"expression":{"arguments":[{"id":1288,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"3557:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3586:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3576:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1289,"name":"bytes","nodeType":"ElementaryTypeName","src":"3580:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3576:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3590:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1287,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"3535:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3535:61:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1295,"nodeType":"ExpressionStatement","src":"3535:61:8"}]},"documentation":{"id":1276,"nodeType":"StructuredDocumentation","src":"3164:239:8","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"3659cfe6","id":1297,"implemented":true,"kind":"function","modifiers":[{"id":1281,"kind":"modifierInvocation","modifierName":{"id":1280,"name":"onlyProxy","nameLocations":["3469:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":1236,"src":"3469:9:8"},"nodeType":"ModifierInvocation","src":"3469:9:8"}],"name":"upgradeTo","nameLocation":"3417:9:8","nodeType":"FunctionDefinition","parameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"newImplementation","nameLocation":"3435:17:8","nodeType":"VariableDeclaration","scope":1297,"src":"3427:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1277,"name":"address","nodeType":"ElementaryTypeName","src":"3427:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3426:27:8"},"returnParameters":{"id":1282,"nodeType":"ParameterList","parameters":[],"src":"3479:0:8"},"scope":1330,"src":"3408:195:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1317,"nodeType":"Block","src":"4027:115:8","statements":[{"expression":{"arguments":[{"id":1308,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"4055:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1307,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"4037:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1310,"nodeType":"ExpressionStatement","src":"4037:36:8"},{"expression":{"arguments":[{"id":1312,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"4105:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1313,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"4124:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4130:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1311,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"4083:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4083:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1316,"nodeType":"ExpressionStatement","src":"4083:52:8"}]},"documentation":{"id":1298,"nodeType":"StructuredDocumentation","src":"3609:308:8","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":1318,"implemented":true,"kind":"function","modifiers":[{"id":1305,"kind":"modifierInvocation","modifierName":{"id":1304,"name":"onlyProxy","nameLocations":["4017:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":1236,"src":"4017:9:8"},"nodeType":"ModifierInvocation","src":"4017:9:8"}],"name":"upgradeToAndCall","nameLocation":"3931:16:8","nodeType":"FunctionDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"newImplementation","nameLocation":"3956:17:8","nodeType":"VariableDeclaration","scope":1318,"src":"3948:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1299,"name":"address","nodeType":"ElementaryTypeName","src":"3948:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"data","nameLocation":"3988:4:8","nodeType":"VariableDeclaration","scope":1318,"src":"3975:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1301,"name":"bytes","nodeType":"ElementaryTypeName","src":"3975:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3947:46:8"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[],"src":"4027:0:8"},"scope":1330,"src":"3922:220:8","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":1319,"nodeType":"StructuredDocumentation","src":"4148:397:8","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1324,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4559:17:8","nodeType":"FunctionDefinition","parameters":{"id":1322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1321,"mutability":"mutable","name":"newImplementation","nameLocation":"4585:17:8","nodeType":"VariableDeclaration","scope":1324,"src":"4577:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"4577:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4576:27:8"},"returnParameters":{"id":1323,"nodeType":"ParameterList","parameters":[],"src":"4620:0:8"},"scope":1330,"src":"4550:71:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1325,"nodeType":"StructuredDocumentation","src":"4627:254:8","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1329,"mutability":"mutable","name":"__gap","nameLocation":"4906:5:8","nodeType":"VariableDeclaration","scope":1330,"src":"4886:25:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1326,"name":"uint256","nodeType":"ElementaryTypeName","src":"4886:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1328,"length":{"hexValue":"3530","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4894:2:8","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4886:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1331,"src":"949:3965:8","usedErrors":[],"usedEvents":[641,648,653,1039]}],"src":"115:4800:8"},"id":8},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[3177],"Initializable":[1193],"PausableUpgradeable":[1458]},"id":1459,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1332,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":1333,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1459,"sourceUnit":3178,"src":"130:41:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1335,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1459,"sourceUnit":1194,"src":"172:63:9","symbolAliases":[{"foreign":{"id":1334,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"180:13:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1337,"name":"Initializable","nameLocations":["718:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"718:13:9"},"id":1338,"nodeType":"InheritanceSpecifier","src":"718:13:9"},{"baseName":{"id":1339,"name":"ContextUpgradeable","nameLocations":["733:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":3177,"src":"733:18:9"},"id":1340,"nodeType":"InheritanceSpecifier","src":"733:18:9"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1336,"nodeType":"StructuredDocumentation","src":"237:439:9","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":1458,"linearizedBaseContracts":[1458,3177,1193],"name":"PausableUpgradeable","nameLocation":"695:19:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1341,"nodeType":"StructuredDocumentation","src":"758:73:9","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":1345,"name":"Paused","nameLocation":"842:6:9","nodeType":"EventDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1343,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"857:7:9","nodeType":"VariableDeclaration","scope":1345,"src":"849:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1342,"name":"address","nodeType":"ElementaryTypeName","src":"849:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"848:17:9"},"src":"836:30:9"},{"anonymous":false,"documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"872:70:9","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":1350,"name":"Unpaused","nameLocation":"953:8:9","nodeType":"EventDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"970:7:9","nodeType":"VariableDeclaration","scope":1350,"src":"962:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"962:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"961:17:9"},"src":"947:32:9"},{"constant":false,"id":1352,"mutability":"mutable","name":"_paused","nameLocation":"998:7:9","nodeType":"VariableDeclaration","scope":1458,"src":"985:20:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1351,"name":"bool","nodeType":"ElementaryTypeName","src":"985:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":1361,"nodeType":"Block","src":"1137:44:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1358,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"1147:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1147:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1360,"nodeType":"ExpressionStatement","src":"1147:27:9"}]},"documentation":{"id":1353,"nodeType":"StructuredDocumentation","src":"1012:67:9","text":" @dev Initializes the contract in unpaused state."},"id":1362,"implemented":true,"kind":"function","modifiers":[{"id":1356,"kind":"modifierInvocation","modifierName":{"id":1355,"name":"onlyInitializing","nameLocations":["1120:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"1120:16:9"},"nodeType":"ModifierInvocation","src":"1120:16:9"}],"name":"__Pausable_init","nameLocation":"1093:15:9","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[],"src":"1108:2:9"},"returnParameters":{"id":1357,"nodeType":"ParameterList","parameters":[],"src":"1137:0:9"},"scope":1458,"src":"1084:97:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"1250:32:9","statements":[{"expression":{"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1367,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"1260:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1270:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1260:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1370,"nodeType":"ExpressionStatement","src":"1260:15:9"}]},"id":1372,"implemented":true,"kind":"function","modifiers":[{"id":1365,"kind":"modifierInvocation","modifierName":{"id":1364,"name":"onlyInitializing","nameLocations":["1233:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"1233:16:9"},"nodeType":"ModifierInvocation","src":"1233:16:9"}],"name":"__Pausable_init_unchained","nameLocation":"1196:25:9","nodeType":"FunctionDefinition","parameters":{"id":1363,"nodeType":"ParameterList","parameters":[],"src":"1221:2:9"},"returnParameters":{"id":1366,"nodeType":"ParameterList","parameters":[],"src":"1250:0:9"},"scope":1458,"src":"1187:95:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1379,"nodeType":"Block","src":"1493:47:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1375,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"1503:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1503:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1377,"nodeType":"ExpressionStatement","src":"1503:19:9"},{"id":1378,"nodeType":"PlaceholderStatement","src":"1532:1:9"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"1288:175:9","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":1380,"name":"whenNotPaused","nameLocation":"1477:13:9","nodeType":"ModifierDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[],"src":"1490:2:9"},"src":"1468:72:9","virtual":false,"visibility":"internal"},{"body":{"id":1387,"nodeType":"Block","src":"1740:44:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1383,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"1750:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1385,"nodeType":"ExpressionStatement","src":"1750:16:9"},{"id":1386,"nodeType":"PlaceholderStatement","src":"1776:1:9"}]},"documentation":{"id":1381,"nodeType":"StructuredDocumentation","src":"1546:167:9","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":1388,"name":"whenPaused","nameLocation":"1727:10:9","nodeType":"ModifierDefinition","parameters":{"id":1382,"nodeType":"ParameterList","parameters":[],"src":"1737:2:9"},"src":"1718:66:9","virtual":false,"visibility":"internal"},{"body":{"id":1396,"nodeType":"Block","src":"1932:31:9","statements":[{"expression":{"id":1394,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"1949:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1393,"id":1395,"nodeType":"Return","src":"1942:14:9"}]},"documentation":{"id":1389,"nodeType":"StructuredDocumentation","src":"1790:84:9","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":1397,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1888:6:9","nodeType":"FunctionDefinition","parameters":{"id":1390,"nodeType":"ParameterList","parameters":[],"src":"1894:2:9"},"returnParameters":{"id":1393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1397,"src":"1926:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1391,"name":"bool","nodeType":"ElementaryTypeName","src":"1926:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1925:6:9"},"scope":1458,"src":"1879:84:9","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1408,"nodeType":"Block","src":"2082:55:9","statements":[{"expression":{"arguments":[{"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2100:9:9","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1402,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"2101:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2101:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2111:18:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":1401,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2092:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1407,"nodeType":"ExpressionStatement","src":"2092:38:9"}]},"documentation":{"id":1398,"nodeType":"StructuredDocumentation","src":"1969:57:9","text":" @dev Throws if the contract is paused."},"id":1409,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2040:17:9","nodeType":"FunctionDefinition","parameters":{"id":1399,"nodeType":"ParameterList","parameters":[],"src":"2057:2:9"},"returnParameters":{"id":1400,"nodeType":"ParameterList","parameters":[],"src":"2082:0:9"},"scope":1458,"src":"2031:106:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1419,"nodeType":"Block","src":"2257:58:9","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1414,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"2275:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2275:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":1416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2285:22:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":1413,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2267:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2267:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1418,"nodeType":"ExpressionStatement","src":"2267:41:9"}]},"documentation":{"id":1410,"nodeType":"StructuredDocumentation","src":"2143:61:9","text":" @dev Throws if the contract is not paused."},"id":1420,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2218:14:9","nodeType":"FunctionDefinition","parameters":{"id":1411,"nodeType":"ParameterList","parameters":[],"src":"2232:2:9"},"returnParameters":{"id":1412,"nodeType":"ParameterList","parameters":[],"src":"2257:0:9"},"scope":1458,"src":"2209:106:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1435,"nodeType":"Block","src":"2499:66:9","statements":[{"expression":{"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1426,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"2509:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2519:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2509:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1429,"nodeType":"ExpressionStatement","src":"2509:14:9"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1431,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"2545:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2545:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1430,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"2538:6:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2538:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1434,"nodeType":"EmitStatement","src":"2533:25:9"}]},"documentation":{"id":1421,"nodeType":"StructuredDocumentation","src":"2321:124:9","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":1436,"implemented":true,"kind":"function","modifiers":[{"id":1424,"kind":"modifierInvocation","modifierName":{"id":1423,"name":"whenNotPaused","nameLocations":["2485:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"2485:13:9"},"nodeType":"ModifierInvocation","src":"2485:13:9"}],"name":"_pause","nameLocation":"2459:6:9","nodeType":"FunctionDefinition","parameters":{"id":1422,"nodeType":"ParameterList","parameters":[],"src":"2465:2:9"},"returnParameters":{"id":1425,"nodeType":"ParameterList","parameters":[],"src":"2499:0:9"},"scope":1458,"src":"2450:115:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1451,"nodeType":"Block","src":"2745:69:9","statements":[{"expression":{"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1442,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"2755:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2765:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2755:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1445,"nodeType":"ExpressionStatement","src":"2755:15:9"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1447,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"2794:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1446,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"2785:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2785:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1450,"nodeType":"EmitStatement","src":"2780:27:9"}]},"documentation":{"id":1437,"nodeType":"StructuredDocumentation","src":"2571:121:9","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":1452,"implemented":true,"kind":"function","modifiers":[{"id":1440,"kind":"modifierInvocation","modifierName":{"id":1439,"name":"whenPaused","nameLocations":["2734:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"2734:10:9"},"nodeType":"ModifierInvocation","src":"2734:10:9"}],"name":"_unpause","nameLocation":"2706:8:9","nodeType":"FunctionDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[],"src":"2714:2:9"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[],"src":"2745:0:9"},"scope":1458,"src":"2697:117:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1453,"nodeType":"StructuredDocumentation","src":"2820:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1457,"mutability":"mutable","name":"__gap","nameLocation":"3099:5:9","nodeType":"VariableDeclaration","scope":1458,"src":"3079:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1454,"name":"uint256","nodeType":"ElementaryTypeName","src":"3079:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1456,"length":{"hexValue":"3439","id":1455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3087:2:9","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3079:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1459,"src":"677:2430:9","usedErrors":[],"usedEvents":[1039,1345,1350]}],"src":"105:3003:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","exportedSymbols":{"ContextUpgradeable":[3177],"ERC20Upgradeable":[2071],"IERC20MetadataUpgradeable":[2366],"IERC20Upgradeable":[2149],"Initializable":[1193]},"id":2072,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1460,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"./IERC20Upgradeable.sol","id":1461,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2072,"sourceUnit":2150,"src":"130:33:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","file":"./extensions/IERC20MetadataUpgradeable.sol","id":1462,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2072,"sourceUnit":2367,"src":"164:52:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":1463,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2072,"sourceUnit":3178,"src":"217:44:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1465,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2072,"sourceUnit":1194,"src":"262:66:10","symbolAliases":[{"foreign":{"id":1464,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"270:13:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1467,"name":"Initializable","nameLocations":["1661:13:10"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"1661:13:10"},"id":1468,"nodeType":"InheritanceSpecifier","src":"1661:13:10"},{"baseName":{"id":1469,"name":"ContextUpgradeable","nameLocations":["1676:18:10"],"nodeType":"IdentifierPath","referencedDeclaration":3177,"src":"1676:18:10"},"id":1470,"nodeType":"InheritanceSpecifier","src":"1676:18:10"},{"baseName":{"id":1471,"name":"IERC20Upgradeable","nameLocations":["1696:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"1696:17:10"},"id":1472,"nodeType":"InheritanceSpecifier","src":"1696:17:10"},{"baseName":{"id":1473,"name":"IERC20MetadataUpgradeable","nameLocations":["1715:25:10"],"nodeType":"IdentifierPath","referencedDeclaration":2366,"src":"1715:25:10"},"id":1474,"nodeType":"InheritanceSpecifier","src":"1715:25:10"}],"canonicalName":"ERC20Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"330:1301:10","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":2071,"linearizedBaseContracts":[2071,2366,2149,3177,1193],"name":"ERC20Upgradeable","nameLocation":"1641:16:10","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1478,"mutability":"mutable","name":"_balances","nameLocation":"1783:9:10","nodeType":"VariableDeclaration","scope":2071,"src":"1747:45:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1477,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1475,"name":"address","nodeType":"ElementaryTypeName","src":"1755:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1747:27:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1476,"name":"uint256","nodeType":"ElementaryTypeName","src":"1766:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1484,"mutability":"mutable","name":"_allowances","nameLocation":"1855:11:10","nodeType":"VariableDeclaration","scope":2071,"src":"1799:67:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":1483,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"1807:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1799:47:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1482,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"1826:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1818:27:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1481,"name":"uint256","nodeType":"ElementaryTypeName","src":"1837:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":1486,"mutability":"mutable","name":"_totalSupply","nameLocation":"1889:12:10","nodeType":"VariableDeclaration","scope":2071,"src":"1873:28:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1485,"name":"uint256","nodeType":"ElementaryTypeName","src":"1873:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":1488,"mutability":"mutable","name":"_name","nameLocation":"1923:5:10","nodeType":"VariableDeclaration","scope":2071,"src":"1908:20:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1487,"name":"string","nodeType":"ElementaryTypeName","src":"1908:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1490,"mutability":"mutable","name":"_symbol","nameLocation":"1949:7:10","nodeType":"VariableDeclaration","scope":2071,"src":"1934:22:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1489,"name":"string","nodeType":"ElementaryTypeName","src":"1934:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":1505,"nodeType":"Block","src":"2231:55:10","statements":[{"expression":{"arguments":[{"id":1501,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"2264:5:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1502,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2271:7:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1500,"name":"__ERC20_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"2241:22:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2241:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1504,"nodeType":"ExpressionStatement","src":"2241:38:10"}]},"documentation":{"id":1491,"nodeType":"StructuredDocumentation","src":"1963:171:10","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":1506,"implemented":true,"kind":"function","modifiers":[{"id":1498,"kind":"modifierInvocation","modifierName":{"id":1497,"name":"onlyInitializing","nameLocations":["2214:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2214:16:10"},"nodeType":"ModifierInvocation","src":"2214:16:10"}],"name":"__ERC20_init","nameLocation":"2148:12:10","nodeType":"FunctionDefinition","parameters":{"id":1496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1493,"mutability":"mutable","name":"name_","nameLocation":"2175:5:10","nodeType":"VariableDeclaration","scope":1506,"src":"2161:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1492,"name":"string","nodeType":"ElementaryTypeName","src":"2161:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1495,"mutability":"mutable","name":"symbol_","nameLocation":"2196:7:10","nodeType":"VariableDeclaration","scope":1506,"src":"2182:21:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1494,"name":"string","nodeType":"ElementaryTypeName","src":"2182:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2160:44:10"},"returnParameters":{"id":1499,"nodeType":"ParameterList","parameters":[],"src":"2231:0:10"},"scope":2071,"src":"2139:147:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1523,"nodeType":"Block","src":"2394:57:10","statements":[{"expression":{"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1515,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"2404:5:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1516,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"2412:5:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2404:13:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1518,"nodeType":"ExpressionStatement","src":"2404:13:10"},{"expression":{"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1519,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"2427:7:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1520,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"2437:7:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2427:17:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1522,"nodeType":"ExpressionStatement","src":"2427:17:10"}]},"id":1524,"implemented":true,"kind":"function","modifiers":[{"id":1513,"kind":"modifierInvocation","modifierName":{"id":1512,"name":"onlyInitializing","nameLocations":["2377:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2377:16:10"},"nodeType":"ModifierInvocation","src":"2377:16:10"}],"name":"__ERC20_init_unchained","nameLocation":"2301:22:10","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"name_","nameLocation":"2338:5:10","nodeType":"VariableDeclaration","scope":1524,"src":"2324:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1507,"name":"string","nodeType":"ElementaryTypeName","src":"2324:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1510,"mutability":"mutable","name":"symbol_","nameLocation":"2359:7:10","nodeType":"VariableDeclaration","scope":1524,"src":"2345:21:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1509,"name":"string","nodeType":"ElementaryTypeName","src":"2345:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2323:44:10"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[],"src":"2394:0:10"},"scope":2071,"src":"2292:159:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2353],"body":{"id":1533,"nodeType":"Block","src":"2585:29:10","statements":[{"expression":{"id":1531,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"2602:5:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1530,"id":1532,"nodeType":"Return","src":"2595:12:10"}]},"documentation":{"id":1525,"nodeType":"StructuredDocumentation","src":"2457:54:10","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1534,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2525:4:10","nodeType":"FunctionDefinition","overrides":{"id":1527,"nodeType":"OverrideSpecifier","overrides":[],"src":"2552:8:10"},"parameters":{"id":1526,"nodeType":"ParameterList","parameters":[],"src":"2529:2:10"},"returnParameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1534,"src":"2570:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1528,"name":"string","nodeType":"ElementaryTypeName","src":"2570:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2569:15:10"},"scope":2071,"src":"2516:98:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2359],"body":{"id":1543,"nodeType":"Block","src":"2798:31:10","statements":[{"expression":{"id":1541,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"2815:7:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1540,"id":1542,"nodeType":"Return","src":"2808:14:10"}]},"documentation":{"id":1535,"nodeType":"StructuredDocumentation","src":"2620:102:10","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":1544,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2736:6:10","nodeType":"FunctionDefinition","overrides":{"id":1537,"nodeType":"OverrideSpecifier","overrides":[],"src":"2765:8:10"},"parameters":{"id":1536,"nodeType":"ParameterList","parameters":[],"src":"2742:2:10"},"returnParameters":{"id":1540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1544,"src":"2783:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1538,"name":"string","nodeType":"ElementaryTypeName","src":"2783:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2782:15:10"},"scope":2071,"src":"2727:102:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2365],"body":{"id":1553,"nodeType":"Block","src":"3527:26:10","statements":[{"expression":{"hexValue":"3138","id":1551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3544:2:10","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":1550,"id":1552,"nodeType":"Return","src":"3537:9:10"}]},"documentation":{"id":1545,"nodeType":"StructuredDocumentation","src":"2835:622:10","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":1554,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3471:8:10","nodeType":"FunctionDefinition","overrides":{"id":1547,"nodeType":"OverrideSpecifier","overrides":[],"src":"3502:8:10"},"parameters":{"id":1546,"nodeType":"ParameterList","parameters":[],"src":"3479:2:10"},"returnParameters":{"id":1550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1554,"src":"3520:5:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1548,"name":"uint8","nodeType":"ElementaryTypeName","src":"3520:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3519:7:10"},"scope":2071,"src":"3462:91:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2098],"body":{"id":1563,"nodeType":"Block","src":"3683:36:10","statements":[{"expression":{"id":1561,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3700:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1560,"id":1562,"nodeType":"Return","src":"3693:19:10"}]},"documentation":{"id":1555,"nodeType":"StructuredDocumentation","src":"3559:49:10","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":1564,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3622:11:10","nodeType":"FunctionDefinition","overrides":{"id":1557,"nodeType":"OverrideSpecifier","overrides":[],"src":"3656:8:10"},"parameters":{"id":1556,"nodeType":"ParameterList","parameters":[],"src":"3633:2:10"},"returnParameters":{"id":1560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1564,"src":"3674:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1558,"name":"uint256","nodeType":"ElementaryTypeName","src":"3674:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3673:9:10"},"scope":2071,"src":"3613:106:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2106],"body":{"id":1577,"nodeType":"Block","src":"3860:42:10","statements":[{"expression":{"baseExpression":{"id":1573,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"3877:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1575,"indexExpression":{"id":1574,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"3887:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3877:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1572,"id":1576,"nodeType":"Return","src":"3870:25:10"}]},"documentation":{"id":1565,"nodeType":"StructuredDocumentation","src":"3725:47:10","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":1578,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3786:9:10","nodeType":"FunctionDefinition","overrides":{"id":1569,"nodeType":"OverrideSpecifier","overrides":[],"src":"3833:8:10"},"parameters":{"id":1568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1567,"mutability":"mutable","name":"account","nameLocation":"3804:7:10","nodeType":"VariableDeclaration","scope":1578,"src":"3796:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1566,"name":"address","nodeType":"ElementaryTypeName","src":"3796:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3795:17:10"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1571,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1578,"src":"3851:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1570,"name":"uint256","nodeType":"ElementaryTypeName","src":"3851:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3850:9:10"},"scope":2071,"src":"3777:125:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2116],"body":{"id":1602,"nodeType":"Block","src":"4183:104:10","statements":[{"assignments":[1590],"declarations":[{"constant":false,"id":1590,"mutability":"mutable","name":"owner","nameLocation":"4201:5:10","nodeType":"VariableDeclaration","scope":1602,"src":"4193:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1589,"name":"address","nodeType":"ElementaryTypeName","src":"4193:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1593,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1591,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"4209:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4209:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4193:28:10"},{"expression":{"arguments":[{"id":1595,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"4241:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1596,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"4248:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1597,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"4252:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1594,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"4231:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4231:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1599,"nodeType":"ExpressionStatement","src":"4231:28:10"},{"expression":{"hexValue":"74727565","id":1600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4276:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1588,"id":1601,"nodeType":"Return","src":"4269:11:10"}]},"documentation":{"id":1579,"nodeType":"StructuredDocumentation","src":"3908:185:10","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":1603,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4107:8:10","nodeType":"FunctionDefinition","overrides":{"id":1585,"nodeType":"OverrideSpecifier","overrides":[],"src":"4159:8:10"},"parameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"mutability":"mutable","name":"to","nameLocation":"4124:2:10","nodeType":"VariableDeclaration","scope":1603,"src":"4116:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1580,"name":"address","nodeType":"ElementaryTypeName","src":"4116:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"amount","nameLocation":"4136:6:10","nodeType":"VariableDeclaration","scope":1603,"src":"4128:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"4128:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4115:28:10"},"returnParameters":{"id":1588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1603,"src":"4177:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1586,"name":"bool","nodeType":"ElementaryTypeName","src":"4177:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4176:6:10"},"scope":2071,"src":"4098:189:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2126],"body":{"id":1620,"nodeType":"Block","src":"4443:51:10","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1614,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"4460:11:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1616,"indexExpression":{"id":1615,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"4472:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4460:18:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1618,"indexExpression":{"id":1617,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"4479:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4460:27:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1613,"id":1619,"nodeType":"Return","src":"4453:34:10"}]},"documentation":{"id":1604,"nodeType":"StructuredDocumentation","src":"4293:47:10","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":1621,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"4354:9:10","nodeType":"FunctionDefinition","overrides":{"id":1610,"nodeType":"OverrideSpecifier","overrides":[],"src":"4416:8:10"},"parameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1606,"mutability":"mutable","name":"owner","nameLocation":"4372:5:10","nodeType":"VariableDeclaration","scope":1621,"src":"4364:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1605,"name":"address","nodeType":"ElementaryTypeName","src":"4364:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1608,"mutability":"mutable","name":"spender","nameLocation":"4387:7:10","nodeType":"VariableDeclaration","scope":1621,"src":"4379:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1607,"name":"address","nodeType":"ElementaryTypeName","src":"4379:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4363:32:10"},"returnParameters":{"id":1613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1621,"src":"4434:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1611,"name":"uint256","nodeType":"ElementaryTypeName","src":"4434:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4433:9:10"},"scope":2071,"src":"4345:149:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2136],"body":{"id":1645,"nodeType":"Block","src":"4891:108:10","statements":[{"assignments":[1633],"declarations":[{"constant":false,"id":1633,"mutability":"mutable","name":"owner","nameLocation":"4909:5:10","nodeType":"VariableDeclaration","scope":1645,"src":"4901:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1632,"name":"address","nodeType":"ElementaryTypeName","src":"4901:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1636,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1634,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"4917:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4917:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4901:28:10"},{"expression":{"arguments":[{"id":1638,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"4948:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1639,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"4955:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1640,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"4964:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1637,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"4939:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4939:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1642,"nodeType":"ExpressionStatement","src":"4939:32:10"},{"expression":{"hexValue":"74727565","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4988:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1631,"id":1644,"nodeType":"Return","src":"4981:11:10"}]},"documentation":{"id":1622,"nodeType":"StructuredDocumentation","src":"4500:297:10","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":1646,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4811:7:10","nodeType":"FunctionDefinition","overrides":{"id":1628,"nodeType":"OverrideSpecifier","overrides":[],"src":"4867:8:10"},"parameters":{"id":1627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"spender","nameLocation":"4827:7:10","nodeType":"VariableDeclaration","scope":1646,"src":"4819:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1623,"name":"address","nodeType":"ElementaryTypeName","src":"4819:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1626,"mutability":"mutable","name":"amount","nameLocation":"4844:6:10","nodeType":"VariableDeclaration","scope":1646,"src":"4836:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1625,"name":"uint256","nodeType":"ElementaryTypeName","src":"4836:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4818:33:10"},"returnParameters":{"id":1631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1646,"src":"4885:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1629,"name":"bool","nodeType":"ElementaryTypeName","src":"4885:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4884:6:10"},"scope":2071,"src":"4802:197:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2148],"body":{"id":1678,"nodeType":"Block","src":"5664:153:10","statements":[{"assignments":[1660],"declarations":[{"constant":false,"id":1660,"mutability":"mutable","name":"spender","nameLocation":"5682:7:10","nodeType":"VariableDeclaration","scope":1678,"src":"5674:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1659,"name":"address","nodeType":"ElementaryTypeName","src":"5674:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1663,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1661,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"5692:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5692:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5674:30:10"},{"expression":{"arguments":[{"id":1665,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"5730:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1666,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"5736:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1667,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"5745:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1664,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5714:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5714:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1669,"nodeType":"ExpressionStatement","src":"5714:38:10"},{"expression":{"arguments":[{"id":1671,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"5772:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1672,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"5778:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1673,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"5782:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1670,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"5762:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5762:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"5762:27:10"},{"expression":{"hexValue":"74727565","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5806:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1658,"id":1677,"nodeType":"Return","src":"5799:11:10"}]},"documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"5005:551:10","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":1679,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5570:12:10","nodeType":"FunctionDefinition","overrides":{"id":1655,"nodeType":"OverrideSpecifier","overrides":[],"src":"5640:8:10"},"parameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"from","nameLocation":"5591:4:10","nodeType":"VariableDeclaration","scope":1679,"src":"5583:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1648,"name":"address","nodeType":"ElementaryTypeName","src":"5583:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1651,"mutability":"mutable","name":"to","nameLocation":"5605:2:10","nodeType":"VariableDeclaration","scope":1679,"src":"5597:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1650,"name":"address","nodeType":"ElementaryTypeName","src":"5597:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1653,"mutability":"mutable","name":"amount","nameLocation":"5617:6:10","nodeType":"VariableDeclaration","scope":1679,"src":"5609:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1652,"name":"uint256","nodeType":"ElementaryTypeName","src":"5609:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5582:42:10"},"returnParameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1679,"src":"5658:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1656,"name":"bool","nodeType":"ElementaryTypeName","src":"5658:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5657:6:10"},"scope":2071,"src":"5561:256:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1707,"nodeType":"Block","src":"6306:140:10","statements":[{"assignments":[1690],"declarations":[{"constant":false,"id":1690,"mutability":"mutable","name":"owner","nameLocation":"6324:5:10","nodeType":"VariableDeclaration","scope":1707,"src":"6316:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1689,"name":"address","nodeType":"ElementaryTypeName","src":"6316:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1693,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1691,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"6332:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6332:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6316:28:10"},{"expression":{"arguments":[{"id":1695,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"6363:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1696,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"6370:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1698,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"6389:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1699,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"6396:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1697,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"6379:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1701,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"6407:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6379:38:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1694,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"6354:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6354:64:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1704,"nodeType":"ExpressionStatement","src":"6354:64:10"},{"expression":{"hexValue":"74727565","id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6435:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1688,"id":1706,"nodeType":"Return","src":"6428:11:10"}]},"documentation":{"id":1680,"nodeType":"StructuredDocumentation","src":"5823:384:10","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":1708,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6221:17:10","nodeType":"FunctionDefinition","parameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"spender","nameLocation":"6247:7:10","nodeType":"VariableDeclaration","scope":1708,"src":"6239:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1681,"name":"address","nodeType":"ElementaryTypeName","src":"6239:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"addedValue","nameLocation":"6264:10:10","nodeType":"VariableDeclaration","scope":1708,"src":"6256:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1683,"name":"uint256","nodeType":"ElementaryTypeName","src":"6256:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6238:37:10"},"returnParameters":{"id":1688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1708,"src":"6300:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1686,"name":"bool","nodeType":"ElementaryTypeName","src":"6300:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6299:6:10"},"scope":2071,"src":"6212:234:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1748,"nodeType":"Block","src":"7032:328:10","statements":[{"assignments":[1719],"declarations":[{"constant":false,"id":1719,"mutability":"mutable","name":"owner","nameLocation":"7050:5:10","nodeType":"VariableDeclaration","scope":1748,"src":"7042:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1718,"name":"address","nodeType":"ElementaryTypeName","src":"7042:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1722,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1720,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"7058:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7058:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7042:28:10"},{"assignments":[1724],"declarations":[{"constant":false,"id":1724,"mutability":"mutable","name":"currentAllowance","nameLocation":"7088:16:10","nodeType":"VariableDeclaration","scope":1748,"src":"7080:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1723,"name":"uint256","nodeType":"ElementaryTypeName","src":"7080:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1729,"initialValue":{"arguments":[{"id":1726,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"7117:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1727,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"7124:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1725,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"7107:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7107:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7080:52:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1731,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"7150:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1732,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"7170:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7150:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7187:39:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":1730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7142:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7142:85:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1736,"nodeType":"ExpressionStatement","src":"7142:85:10"},{"id":1745,"nodeType":"UncheckedBlock","src":"7237:95:10","statements":[{"expression":{"arguments":[{"id":1738,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"7270:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1739,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"7277:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1740,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"7286:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1741,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"7305:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7286:34:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1737,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"7261:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:60:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1744,"nodeType":"ExpressionStatement","src":"7261:60:10"}]},{"expression":{"hexValue":"74727565","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7349:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1717,"id":1747,"nodeType":"Return","src":"7342:11:10"}]},"documentation":{"id":1709,"nodeType":"StructuredDocumentation","src":"6452:476:10","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":1749,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6942:17:10","nodeType":"FunctionDefinition","parameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1711,"mutability":"mutable","name":"spender","nameLocation":"6968:7:10","nodeType":"VariableDeclaration","scope":1749,"src":"6960:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1710,"name":"address","nodeType":"ElementaryTypeName","src":"6960:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1713,"mutability":"mutable","name":"subtractedValue","nameLocation":"6985:15:10","nodeType":"VariableDeclaration","scope":1749,"src":"6977:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1712,"name":"uint256","nodeType":"ElementaryTypeName","src":"6977:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6959:42:10"},"returnParameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1749,"src":"7026:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1715,"name":"bool","nodeType":"ElementaryTypeName","src":"7026:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7025:6:10"},"scope":2071,"src":"6933:427:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1825,"nodeType":"Block","src":"7892:710:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1760,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"7910:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7926:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1762,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7918:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1761,"name":"address","nodeType":"ElementaryTypeName","src":"7918:7:10","typeDescriptions":{}}},"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7918:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7910:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":1766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7930:39:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":1759,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7902:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7902:68:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1768,"nodeType":"ExpressionStatement","src":"7902:68:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1770,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"7988:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8002:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7994:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1771,"name":"address","nodeType":"ElementaryTypeName","src":"7994:7:10","typeDescriptions":{}}},"id":1774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7994:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7988:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8006:37:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":1769,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7980:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7980:64:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1778,"nodeType":"ExpressionStatement","src":"7980:64:10"},{"expression":{"arguments":[{"id":1780,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"8076:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1781,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"8082:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1782,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"8086:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1779,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"8055:20:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8055:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1784,"nodeType":"ExpressionStatement","src":"8055:38:10"},{"assignments":[1786],"declarations":[{"constant":false,"id":1786,"mutability":"mutable","name":"fromBalance","nameLocation":"8112:11:10","nodeType":"VariableDeclaration","scope":1825,"src":"8104:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1785,"name":"uint256","nodeType":"ElementaryTypeName","src":"8104:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1790,"initialValue":{"baseExpression":{"id":1787,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8126:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1789,"indexExpression":{"id":1788,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"8136:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8126:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8104:37:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1792,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"8159:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1793,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"8174:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8159:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8182:40:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":1791,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8151:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8151:72:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1797,"nodeType":"ExpressionStatement","src":"8151:72:10"},{"id":1812,"nodeType":"UncheckedBlock","src":"8233:273:10","statements":[{"expression":{"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1798,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8257:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1800,"indexExpression":{"id":1799,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"8267:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8257:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1801,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"8275:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1802,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"8289:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8275:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8257:38:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1805,"nodeType":"ExpressionStatement","src":"8257:38:10"},{"expression":{"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1806,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8472:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1808,"indexExpression":{"id":1807,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"8482:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8472:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1809,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"8489:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8472:23:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1811,"nodeType":"ExpressionStatement","src":"8472:23:10"}]},{"eventCall":{"arguments":[{"id":1814,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"8530:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1815,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"8536:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1816,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"8540:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1813,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"8521:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8521:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1818,"nodeType":"EmitStatement","src":"8516:31:10"},{"expression":{"arguments":[{"id":1820,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"8578:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1821,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"8584:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1822,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"8588:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1819,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"8558:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8558:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1824,"nodeType":"ExpressionStatement","src":"8558:37:10"}]},"documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"7366:443:10","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":1826,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7823:9:10","nodeType":"FunctionDefinition","parameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"from","nameLocation":"7841:4:10","nodeType":"VariableDeclaration","scope":1826,"src":"7833:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1751,"name":"address","nodeType":"ElementaryTypeName","src":"7833:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1754,"mutability":"mutable","name":"to","nameLocation":"7855:2:10","nodeType":"VariableDeclaration","scope":1826,"src":"7847:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1753,"name":"address","nodeType":"ElementaryTypeName","src":"7847:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"amount","nameLocation":"7867:6:10","nodeType":"VariableDeclaration","scope":1826,"src":"7859:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1755,"name":"uint256","nodeType":"ElementaryTypeName","src":"7859:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7832:42:10"},"returnParameters":{"id":1758,"nodeType":"ParameterList","parameters":[],"src":"7892:0:10"},"scope":2071,"src":"7814:788:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1882,"nodeType":"Block","src":"8943:470:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1835,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"8961:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8972:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1836,"name":"address","nodeType":"ElementaryTypeName","src":"8972:7:10","typeDescriptions":{}}},"id":1839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8972:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8961:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":1841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8984:33:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":1834,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8953:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8953:65:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1843,"nodeType":"ExpressionStatement","src":"8953:65:10"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9058:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9050:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1845,"name":"address","nodeType":"ElementaryTypeName","src":"9050:7:10","typeDescriptions":{}}},"id":1848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9050:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1849,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"9062:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1850,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"9071:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1844,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9029:20:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9029:49:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1852,"nodeType":"ExpressionStatement","src":"9029:49:10"},{"expression":{"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1853,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"9089:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1854,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"9105:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9089:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1856,"nodeType":"ExpressionStatement","src":"9089:22:10"},{"id":1863,"nodeType":"UncheckedBlock","src":"9121:175:10","statements":[{"expression":{"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1857,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"9257:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1859,"indexExpression":{"id":1858,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"9267:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9257:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1860,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"9279:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9257:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1862,"nodeType":"ExpressionStatement","src":"9257:28:10"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9327:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9319:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1865,"name":"address","nodeType":"ElementaryTypeName","src":"9319:7:10","typeDescriptions":{}}},"id":1868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9319:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1869,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"9331:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1870,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"9340:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1864,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"9310:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9310:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1872,"nodeType":"EmitStatement","src":"9305:42:10"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9386:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9378:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1874,"name":"address","nodeType":"ElementaryTypeName","src":"9378:7:10","typeDescriptions":{}}},"id":1877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9378:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1878,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"9390:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1879,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"9399:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1873,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"9358:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9358:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1881,"nodeType":"ExpressionStatement","src":"9358:48:10"}]},"documentation":{"id":1827,"nodeType":"StructuredDocumentation","src":"8608:265:10","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":1883,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8887:5:10","nodeType":"FunctionDefinition","parameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"account","nameLocation":"8901:7:10","nodeType":"VariableDeclaration","scope":1883,"src":"8893:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1828,"name":"address","nodeType":"ElementaryTypeName","src":"8893:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"amount","nameLocation":"8918:6:10","nodeType":"VariableDeclaration","scope":1883,"src":"8910:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1830,"name":"uint256","nodeType":"ElementaryTypeName","src":"8910:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8892:33:10"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[],"src":"8943:0:10"},"scope":2071,"src":"8878:535:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1954,"nodeType":"Block","src":"9798:594:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1892,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"9816:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9835:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9827:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1893,"name":"address","nodeType":"ElementaryTypeName","src":"9827:7:10","typeDescriptions":{}}},"id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9827:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9816:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":1898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9839:35:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":1891,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9808:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9808:67:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1900,"nodeType":"ExpressionStatement","src":"9808:67:10"},{"expression":{"arguments":[{"id":1902,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"9907:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9924:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9916:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1903,"name":"address","nodeType":"ElementaryTypeName","src":"9916:7:10","typeDescriptions":{}}},"id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9916:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1907,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"9928:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1901,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9886:20:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9886:49:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1909,"nodeType":"ExpressionStatement","src":"9886:49:10"},{"assignments":[1911],"declarations":[{"constant":false,"id":1911,"mutability":"mutable","name":"accountBalance","nameLocation":"9954:14:10","nodeType":"VariableDeclaration","scope":1954,"src":"9946:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1910,"name":"uint256","nodeType":"ElementaryTypeName","src":"9946:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1915,"initialValue":{"baseExpression":{"id":1912,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"9971:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1914,"indexExpression":{"id":1913,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"9981:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9971:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9946:43:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1917,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"10007:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1918,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"10025:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10007:24:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10033:36:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":1916,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9999:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9999:71:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1922,"nodeType":"ExpressionStatement","src":"9999:71:10"},{"id":1935,"nodeType":"UncheckedBlock","src":"10080:194:10","statements":[{"expression":{"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1923,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"10104:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1925,"indexExpression":{"id":1924,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"10114:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10104:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1926,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"10125:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1927,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"10142:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10125:23:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10104:44:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1930,"nodeType":"ExpressionStatement","src":"10104:44:10"},{"expression":{"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1931,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"10241:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1932,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"10257:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10241:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1934,"nodeType":"ExpressionStatement","src":"10241:22:10"}]},{"eventCall":{"arguments":[{"id":1937,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"10298:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10315:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10307:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1938,"name":"address","nodeType":"ElementaryTypeName","src":"10307:7:10","typeDescriptions":{}}},"id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10307:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1942,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"10319:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1936,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"10289:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10289:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1944,"nodeType":"EmitStatement","src":"10284:42:10"},{"expression":{"arguments":[{"id":1946,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"10357:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10374:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10366:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1947,"name":"address","nodeType":"ElementaryTypeName","src":"10366:7:10","typeDescriptions":{}}},"id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10366:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1951,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"10378:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1945,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"10337:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10337:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1953,"nodeType":"ExpressionStatement","src":"10337:48:10"}]},"documentation":{"id":1884,"nodeType":"StructuredDocumentation","src":"9419:309:10","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":1955,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9742:5:10","nodeType":"FunctionDefinition","parameters":{"id":1889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1886,"mutability":"mutable","name":"account","nameLocation":"9756:7:10","nodeType":"VariableDeclaration","scope":1955,"src":"9748:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"9748:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1888,"mutability":"mutable","name":"amount","nameLocation":"9773:6:10","nodeType":"VariableDeclaration","scope":1955,"src":"9765:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"9765:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9747:33:10"},"returnParameters":{"id":1890,"nodeType":"ParameterList","parameters":[],"src":"9798:0:10"},"scope":2071,"src":"9733:659:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1999,"nodeType":"Block","src":"10898:257:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1966,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"10916:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10933:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10925:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1967,"name":"address","nodeType":"ElementaryTypeName","src":"10925:7:10","typeDescriptions":{}}},"id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10925:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10916:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10937:38:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1965,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10908:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10908:68:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1974,"nodeType":"ExpressionStatement","src":"10908:68:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1976,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"10994:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11005:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1977,"name":"address","nodeType":"ElementaryTypeName","src":"11005:7:10","typeDescriptions":{}}},"id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11005:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10994:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11017:36:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1975,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10986:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10986:68:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1984,"nodeType":"ExpressionStatement","src":"10986:68:10"},{"expression":{"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1985,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"11065:11:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1988,"indexExpression":{"id":1986,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"11077:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11065:18:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1989,"indexExpression":{"id":1987,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"11084:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11065:27:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1990,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"11095:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11065:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1992,"nodeType":"ExpressionStatement","src":"11065:36:10"},{"eventCall":{"arguments":[{"id":1994,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"11125:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1995,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"11132:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1996,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"11141:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1993,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"11116:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11116:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1998,"nodeType":"EmitStatement","src":"11111:37:10"}]},"documentation":{"id":1956,"nodeType":"StructuredDocumentation","src":"10398:412:10","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":2000,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10824:8:10","nodeType":"FunctionDefinition","parameters":{"id":1963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"owner","nameLocation":"10841:5:10","nodeType":"VariableDeclaration","scope":2000,"src":"10833:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1957,"name":"address","nodeType":"ElementaryTypeName","src":"10833:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1960,"mutability":"mutable","name":"spender","nameLocation":"10856:7:10","nodeType":"VariableDeclaration","scope":2000,"src":"10848:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1959,"name":"address","nodeType":"ElementaryTypeName","src":"10848:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1962,"mutability":"mutable","name":"amount","nameLocation":"10873:6:10","nodeType":"VariableDeclaration","scope":2000,"src":"10865:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1961,"name":"uint256","nodeType":"ElementaryTypeName","src":"10865:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10832:48:10"},"returnParameters":{"id":1964,"nodeType":"ParameterList","parameters":[],"src":"10898:0:10"},"scope":2071,"src":"10815:340:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2042,"nodeType":"Block","src":"11526:321:10","statements":[{"assignments":[2011],"declarations":[{"constant":false,"id":2011,"mutability":"mutable","name":"currentAllowance","nameLocation":"11544:16:10","nodeType":"VariableDeclaration","scope":2042,"src":"11536:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2010,"name":"uint256","nodeType":"ElementaryTypeName","src":"11536:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2016,"initialValue":{"arguments":[{"id":2013,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"11573:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2014,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"11580:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2012,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"11563:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11563:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11536:52:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2017,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"11602:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":2020,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11627:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2019,"name":"uint256","nodeType":"ElementaryTypeName","src":"11627:7:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2018,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11622:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11622:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11636:3:10","memberName":"max","nodeType":"MemberAccess","src":"11622:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11602:37:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2041,"nodeType":"IfStatement","src":"11598:243:10","trueBody":{"id":2040,"nodeType":"Block","src":"11641:200:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2025,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"11663:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2026,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"11683:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11663:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":2028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11691:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":2024,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11655:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11655:68:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2030,"nodeType":"ExpressionStatement","src":"11655:68:10"},{"id":2039,"nodeType":"UncheckedBlock","src":"11737:94:10","statements":[{"expression":{"arguments":[{"id":2032,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"11774:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2033,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"11781:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2034,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"11790:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2035,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"11809:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11790:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2031,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"11765:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11765:51:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2038,"nodeType":"ExpressionStatement","src":"11765:51:10"}]}]}}]},"documentation":{"id":2001,"nodeType":"StructuredDocumentation","src":"11161:270:10","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":2043,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11445:15:10","nodeType":"FunctionDefinition","parameters":{"id":2008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2003,"mutability":"mutable","name":"owner","nameLocation":"11469:5:10","nodeType":"VariableDeclaration","scope":2043,"src":"11461:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2002,"name":"address","nodeType":"ElementaryTypeName","src":"11461:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2005,"mutability":"mutable","name":"spender","nameLocation":"11484:7:10","nodeType":"VariableDeclaration","scope":2043,"src":"11476:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2004,"name":"address","nodeType":"ElementaryTypeName","src":"11476:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2007,"mutability":"mutable","name":"amount","nameLocation":"11501:6:10","nodeType":"VariableDeclaration","scope":2043,"src":"11493:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2006,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11460:48:10"},"returnParameters":{"id":2009,"nodeType":"ParameterList","parameters":[],"src":"11526:0:10"},"scope":2071,"src":"11436:411:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2053,"nodeType":"Block","src":"12520:2:10","statements":[]},"documentation":{"id":2044,"nodeType":"StructuredDocumentation","src":"11853:573:10","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2054,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12440:20:10","nodeType":"FunctionDefinition","parameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"from","nameLocation":"12469:4:10","nodeType":"VariableDeclaration","scope":2054,"src":"12461:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"12461:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2048,"mutability":"mutable","name":"to","nameLocation":"12483:2:10","nodeType":"VariableDeclaration","scope":2054,"src":"12475:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2047,"name":"address","nodeType":"ElementaryTypeName","src":"12475:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2050,"mutability":"mutable","name":"amount","nameLocation":"12495:6:10","nodeType":"VariableDeclaration","scope":2054,"src":"12487:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2049,"name":"uint256","nodeType":"ElementaryTypeName","src":"12487:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12460:42:10"},"returnParameters":{"id":2052,"nodeType":"ParameterList","parameters":[],"src":"12520:0:10"},"scope":2071,"src":"12431:91:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2064,"nodeType":"Block","src":"13198:2:10","statements":[]},"documentation":{"id":2055,"nodeType":"StructuredDocumentation","src":"12528:577:10","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2065,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"13119:19:10","nodeType":"FunctionDefinition","parameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"from","nameLocation":"13147:4:10","nodeType":"VariableDeclaration","scope":2065,"src":"13139:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2056,"name":"address","nodeType":"ElementaryTypeName","src":"13139:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2059,"mutability":"mutable","name":"to","nameLocation":"13161:2:10","nodeType":"VariableDeclaration","scope":2065,"src":"13153:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2058,"name":"address","nodeType":"ElementaryTypeName","src":"13153:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2061,"mutability":"mutable","name":"amount","nameLocation":"13173:6:10","nodeType":"VariableDeclaration","scope":2065,"src":"13165:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2060,"name":"uint256","nodeType":"ElementaryTypeName","src":"13165:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13138:42:10"},"returnParameters":{"id":2063,"nodeType":"ParameterList","parameters":[],"src":"13198:0:10"},"scope":2071,"src":"13110:90:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2066,"nodeType":"StructuredDocumentation","src":"13206:254:10","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2070,"mutability":"mutable","name":"__gap","nameLocation":"13485:5:10","nodeType":"VariableDeclaration","scope":2071,"src":"13465:25:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage","typeString":"uint256[45]"},"typeName":{"baseType":{"id":2067,"name":"uint256","nodeType":"ElementaryTypeName","src":"13465:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2069,"length":{"hexValue":"3435","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13473:2:10","typeDescriptions":{"typeIdentifier":"t_rational_45_by_1","typeString":"int_const 45"},"value":"45"},"nodeType":"ArrayTypeName","src":"13465:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage_ptr","typeString":"uint256[45]"}},"visibility":"private"}],"scope":2072,"src":"1632:11861:10","usedErrors":[],"usedEvents":[1039,2083,2092]}],"src":"105:13389:10"},"id":10},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[2149]},"id":2150,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2073,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2074,"nodeType":"StructuredDocumentation","src":"131:70:11","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2149,"linearizedBaseContracts":[2149],"name":"IERC20Upgradeable","nameLocation":"212:17:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2075,"nodeType":"StructuredDocumentation","src":"236:158:11","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2083,"name":"Transfer","nameLocation":"405:8:11","nodeType":"EventDefinition","parameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2077,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:11","nodeType":"VariableDeclaration","scope":2083,"src":"414:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2076,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2079,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:11","nodeType":"VariableDeclaration","scope":2083,"src":"436:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2078,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2081,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:11","nodeType":"VariableDeclaration","scope":2083,"src":"456:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2080,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:11"},"src":"399:72:11"},{"anonymous":false,"documentation":{"id":2084,"nodeType":"StructuredDocumentation","src":"477:148:11","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2092,"name":"Approval","nameLocation":"636:8:11","nodeType":"EventDefinition","parameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:11","nodeType":"VariableDeclaration","scope":2092,"src":"645:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2085,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2088,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:11","nodeType":"VariableDeclaration","scope":2092,"src":"668:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2087,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2090,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:11","nodeType":"VariableDeclaration","scope":2092,"src":"693:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2089,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:11"},"src":"630:78:11"},{"documentation":{"id":2093,"nodeType":"StructuredDocumentation","src":"714:66:11","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2098,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:11","nodeType":"FunctionDefinition","parameters":{"id":2094,"nodeType":"ParameterList","parameters":[],"src":"805:2:11"},"returnParameters":{"id":2097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2098,"src":"831:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2095,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:11"},"scope":2149,"src":"785:55:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"846:72:11","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2106,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:11","nodeType":"FunctionDefinition","parameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"account","nameLocation":"950:7:11","nodeType":"VariableDeclaration","scope":2106,"src":"942:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2100,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:11"},"returnParameters":{"id":2105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2106,"src":"982:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:11"},"scope":2149,"src":"923:68:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2107,"nodeType":"StructuredDocumentation","src":"997:202:11","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2116,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:11","nodeType":"FunctionDefinition","parameters":{"id":2112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2109,"mutability":"mutable","name":"to","nameLocation":"1230:2:11","nodeType":"VariableDeclaration","scope":2116,"src":"1222:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2108,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2111,"mutability":"mutable","name":"amount","nameLocation":"1242:6:11","nodeType":"VariableDeclaration","scope":2116,"src":"1234:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:11"},"returnParameters":{"id":2115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2116,"src":"1268:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2113,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:11"},"scope":2149,"src":"1204:70:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2117,"nodeType":"StructuredDocumentation","src":"1280:264:11","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2126,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:11","nodeType":"FunctionDefinition","parameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2119,"mutability":"mutable","name":"owner","nameLocation":"1576:5:11","nodeType":"VariableDeclaration","scope":2126,"src":"1568:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2118,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2121,"mutability":"mutable","name":"spender","nameLocation":"1591:7:11","nodeType":"VariableDeclaration","scope":2126,"src":"1583:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2120,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:11"},"returnParameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2126,"src":"1623:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:11"},"scope":2149,"src":"1549:83:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2127,"nodeType":"StructuredDocumentation","src":"1638:642:11","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2136,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:11","nodeType":"FunctionDefinition","parameters":{"id":2132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2129,"mutability":"mutable","name":"spender","nameLocation":"2310:7:11","nodeType":"VariableDeclaration","scope":2136,"src":"2302:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2128,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2131,"mutability":"mutable","name":"amount","nameLocation":"2327:6:11","nodeType":"VariableDeclaration","scope":2136,"src":"2319:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2130,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:11"},"returnParameters":{"id":2135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2136,"src":"2353:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2133,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:11"},"scope":2149,"src":"2285:74:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2137,"nodeType":"StructuredDocumentation","src":"2365:287:11","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2148,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:11","nodeType":"FunctionDefinition","parameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2139,"mutability":"mutable","name":"from","nameLocation":"2687:4:11","nodeType":"VariableDeclaration","scope":2148,"src":"2679:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2138,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2141,"mutability":"mutable","name":"to","nameLocation":"2701:2:11","nodeType":"VariableDeclaration","scope":2148,"src":"2693:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2140,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2143,"mutability":"mutable","name":"amount","nameLocation":"2713:6:11","nodeType":"VariableDeclaration","scope":2148,"src":"2705:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2142,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:11"},"returnParameters":{"id":2147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2146,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2148,"src":"2739:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2145,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:11"},"scope":2149,"src":"2657:88:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2150,"src":"202:2545:11","usedErrors":[],"usedEvents":[2083,2092]}],"src":"106:2642:11"},"id":11},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[3177],"CountersUpgradeable":[3251],"ECDSAUpgradeable":[3956],"EIP712Upgradeable":[4241],"ERC20PermitUpgradeable":[2341],"ERC20Upgradeable":[2071],"IERC20MetadataUpgradeable":[2366],"IERC20PermitUpgradeable":[2402],"IERC20Upgradeable":[2149],"IERC5267Upgradeable":[679],"Initializable":[1193],"MathUpgradeable":[5107],"SignedMathUpgradeable":[5524],"StringsUpgradeable":[3590]},"id":2342,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2151,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"122:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"./IERC20PermitUpgradeable.sol","id":2152,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":2403,"src":"147:39:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"../ERC20Upgradeable.sol","id":2153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":2072,"src":"187:33:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"../../../utils/cryptography/ECDSAUpgradeable.sol","id":2154,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":3957,"src":"221:58:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","file":"../../../utils/cryptography/EIP712Upgradeable.sol","id":2155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":4242,"src":"280:59:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","file":"../../../utils/CountersUpgradeable.sol","id":2156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":3252,"src":"340:48:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":2158,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":1194,"src":"389:69:12","symbolAliases":[{"foreign":{"id":2157,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"397:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2160,"name":"Initializable","nameLocations":["1052:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"1052:13:12"},"id":2161,"nodeType":"InheritanceSpecifier","src":"1052:13:12"},{"baseName":{"id":2162,"name":"ERC20Upgradeable","nameLocations":["1067:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":2071,"src":"1067:16:12"},"id":2163,"nodeType":"InheritanceSpecifier","src":"1067:16:12"},{"baseName":{"id":2164,"name":"IERC20PermitUpgradeable","nameLocations":["1085:23:12"],"nodeType":"IdentifierPath","referencedDeclaration":2402,"src":"1085:23:12"},"id":2165,"nodeType":"InheritanceSpecifier","src":"1085:23:12"},{"baseName":{"id":2166,"name":"EIP712Upgradeable","nameLocations":["1110:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":4241,"src":"1110:17:12"},"id":2167,"nodeType":"InheritanceSpecifier","src":"1110:17:12"}],"canonicalName":"ERC20PermitUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2159,"nodeType":"StructuredDocumentation","src":"460:547:12","text":" @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._\n @custom:storage-size 51"},"fullyImplemented":true,"id":2341,"linearizedBaseContracts":[2341,4241,679,2402,2071,2366,2149,3177,1193],"name":"ERC20PermitUpgradeable","nameLocation":"1026:22:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2171,"libraryName":{"id":2168,"name":"CountersUpgradeable","nameLocations":["1140:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":3251,"src":"1140:19:12"},"nodeType":"UsingForDirective","src":"1134:58:12","typeName":{"id":2170,"nodeType":"UserDefinedTypeName","pathNode":{"id":2169,"name":"CountersUpgradeable.Counter","nameLocations":["1164:19:12","1184:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3183,"src":"1164:27:12"},"referencedDeclaration":3183,"src":"1164:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},{"constant":false,"id":2176,"mutability":"mutable","name":"_nonces","nameLocation":"1254:7:12","nodeType":"VariableDeclaration","scope":2341,"src":"1198:63:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$3183_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter)"},"typeName":{"id":2175,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2172,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1198:47:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$3183_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2174,"nodeType":"UserDefinedTypeName","pathNode":{"id":2173,"name":"CountersUpgradeable.Counter","nameLocations":["1217:19:12","1237:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3183,"src":"1217:27:12"},"referencedDeclaration":3183,"src":"1217:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},"visibility":"private"},{"constant":true,"id":2181,"mutability":"constant","name":"_PERMIT_TYPEHASH","nameLocation":"1345:16:12","nodeType":"VariableDeclaration","scope":2341,"src":"1320:147:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1320:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1382:84:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":2178,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1372:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1372:95:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":2182,"nodeType":"StructuredDocumentation","src":"1473:254:12","text":" @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"},"id":2184,"mutability":"mutable","name":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","nameLocation":"1800:32:12","nodeType":"VariableDeclaration","scope":2341,"src":"1784:48:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1784:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":2197,"nodeType":"Block","src":"2138:51:12","statements":[{"expression":{"arguments":[{"id":2193,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"2172:4:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2178:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""}],"id":2192,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"2148:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2148:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2196,"nodeType":"ExpressionStatement","src":"2148:34:12"}]},"documentation":{"id":2185,"nodeType":"StructuredDocumentation","src":"1839:220:12","text":" @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."},"id":2198,"implemented":true,"kind":"function","modifiers":[{"id":2190,"kind":"modifierInvocation","modifierName":{"id":2189,"name":"onlyInitializing","nameLocations":["2121:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2121:16:12"},"nodeType":"ModifierInvocation","src":"2121:16:12"}],"name":"__ERC20Permit_init","nameLocation":"2073:18:12","nodeType":"FunctionDefinition","parameters":{"id":2188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2187,"mutability":"mutable","name":"name","nameLocation":"2106:4:12","nodeType":"VariableDeclaration","scope":2198,"src":"2092:18:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2186,"name":"string","nodeType":"ElementaryTypeName","src":"2092:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2091:20:12"},"returnParameters":{"id":2191,"nodeType":"ParameterList","parameters":[],"src":"2138:0:12"},"scope":2341,"src":"2064:125:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2205,"nodeType":"Block","src":"2274:2:12","statements":[]},"id":2206,"implemented":true,"kind":"function","modifiers":[{"id":2203,"kind":"modifierInvocation","modifierName":{"id":2202,"name":"onlyInitializing","nameLocations":["2257:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2257:16:12"},"nodeType":"ModifierInvocation","src":"2257:16:12"}],"name":"__ERC20Permit_init_unchained","nameLocation":"2204:28:12","nodeType":"FunctionDefinition","parameters":{"id":2201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2206,"src":"2233:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2199,"name":"string","nodeType":"ElementaryTypeName","src":"2233:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2232:15:12"},"returnParameters":{"id":2204,"nodeType":"ParameterList","parameters":[],"src":"2274:0:12"},"scope":2341,"src":"2195:81:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2387],"body":{"id":2278,"nodeType":"Block","src":"2539:439:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2226,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2557:5:12","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2563:9:12","memberName":"timestamp","nodeType":"MemberAccess","src":"2557:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2228,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"2576:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2557:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2586:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""},"value":"ERC20Permit: expired deadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""}],"id":2225,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2549:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2549:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2232,"nodeType":"ExpressionStatement","src":"2549:69:12"},{"assignments":[2234],"declarations":[{"constant":false,"id":2234,"mutability":"mutable","name":"structHash","nameLocation":"2637:10:12","nodeType":"VariableDeclaration","scope":2278,"src":"2629:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2629:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2248,"initialValue":{"arguments":[{"arguments":[{"id":2238,"name":"_PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"2671:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2239,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"2689:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2240,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2696:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2213,"src":"2705:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2243,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"2722:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2242,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"2712:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2712:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2245,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"2730:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2236,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2660:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2664:6:12","memberName":"encode","nodeType":"MemberAccess","src":"2660:10:12","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:79:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2235,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2650:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:90:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2629:111:12"},{"assignments":[2250],"declarations":[{"constant":false,"id":2250,"mutability":"mutable","name":"hash","nameLocation":"2759:4:12","nodeType":"VariableDeclaration","scope":2278,"src":"2751:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2249,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2751:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2254,"initialValue":{"arguments":[{"id":2252,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"2783:10:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2251,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"2766:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2751:43:12"},{"assignments":[2256],"declarations":[{"constant":false,"id":2256,"mutability":"mutable","name":"signer","nameLocation":"2813:6:12","nodeType":"VariableDeclaration","scope":2278,"src":"2805:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2255,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2264,"initialValue":{"arguments":[{"id":2259,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"2847:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2260,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"2853:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2261,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"2856:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2262,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2221,"src":"2859:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2257,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"2822:16:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3956_$","typeString":"type(library ECDSAUpgradeable)"}},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2839:7:12","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":3891,"src":"2822:24:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2822:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2805:56:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2266,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"2879:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2267,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"2889:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2879:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","id":2269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2896:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""},"value":"ERC20Permit: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""}],"id":2265,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2871:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2871:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2271,"nodeType":"ExpressionStatement","src":"2871:58:12"},{"expression":{"arguments":[{"id":2273,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"2949:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2274,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2956:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2213,"src":"2965:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2272,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"2940:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2940:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2277,"nodeType":"ExpressionStatement","src":"2940:31:12"}]},"documentation":{"id":2207,"nodeType":"StructuredDocumentation","src":"2282:54:12","text":" @inheritdoc IERC20PermitUpgradeable"},"functionSelector":"d505accf","id":2279,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"2350:6:12","nodeType":"FunctionDefinition","overrides":{"id":2223,"nodeType":"OverrideSpecifier","overrides":[],"src":"2530:8:12"},"parameters":{"id":2222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"owner","nameLocation":"2374:5:12","nodeType":"VariableDeclaration","scope":2279,"src":"2366:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2208,"name":"address","nodeType":"ElementaryTypeName","src":"2366:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2211,"mutability":"mutable","name":"spender","nameLocation":"2397:7:12","nodeType":"VariableDeclaration","scope":2279,"src":"2389:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2210,"name":"address","nodeType":"ElementaryTypeName","src":"2389:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2213,"mutability":"mutable","name":"value","nameLocation":"2422:5:12","nodeType":"VariableDeclaration","scope":2279,"src":"2414:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2212,"name":"uint256","nodeType":"ElementaryTypeName","src":"2414:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2215,"mutability":"mutable","name":"deadline","nameLocation":"2445:8:12","nodeType":"VariableDeclaration","scope":2279,"src":"2437:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2214,"name":"uint256","nodeType":"ElementaryTypeName","src":"2437:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2217,"mutability":"mutable","name":"v","nameLocation":"2469:1:12","nodeType":"VariableDeclaration","scope":2279,"src":"2463:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2216,"name":"uint8","nodeType":"ElementaryTypeName","src":"2463:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2219,"mutability":"mutable","name":"r","nameLocation":"2488:1:12","nodeType":"VariableDeclaration","scope":2279,"src":"2480:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2480:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2221,"mutability":"mutable","name":"s","nameLocation":"2507:1:12","nodeType":"VariableDeclaration","scope":2279,"src":"2499:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2220,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2499:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2356:158:12"},"returnParameters":{"id":2224,"nodeType":"ParameterList","parameters":[],"src":"2539:0:12"},"scope":2341,"src":"2341:637:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2395],"body":{"id":2294,"nodeType":"Block","src":"3121:48:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":2288,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"3138:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$3183_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter storage ref)"}},"id":2290,"indexExpression":{"id":2289,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"3146:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3138:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":2291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3153:7:12","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3195,"src":"3138:22:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3183_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$3183_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3138:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2287,"id":2293,"nodeType":"Return","src":"3131:31:12"}]},"documentation":{"id":2280,"nodeType":"StructuredDocumentation","src":"2984:54:12","text":" @inheritdoc IERC20PermitUpgradeable"},"functionSelector":"7ecebe00","id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3052:6:12","nodeType":"FunctionDefinition","overrides":{"id":2284,"nodeType":"OverrideSpecifier","overrides":[],"src":"3094:8:12"},"parameters":{"id":2283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2282,"mutability":"mutable","name":"owner","nameLocation":"3067:5:12","nodeType":"VariableDeclaration","scope":2295,"src":"3059:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2281,"name":"address","nodeType":"ElementaryTypeName","src":"3059:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3058:15:12"},"returnParameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2295,"src":"3112:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2285,"name":"uint256","nodeType":"ElementaryTypeName","src":"3112:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3111:9:12"},"scope":2341,"src":"3043:126:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2401],"body":{"id":2305,"nodeType":"Block","src":"3356:44:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2302,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"3373:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3373:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2301,"id":2304,"nodeType":"Return","src":"3366:27:12"}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"3175:54:12","text":" @inheritdoc IERC20PermitUpgradeable"},"functionSelector":"3644e515","id":2306,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3296:16:12","nodeType":"FunctionDefinition","overrides":{"id":2298,"nodeType":"OverrideSpecifier","overrides":[],"src":"3329:8:12"},"parameters":{"id":2297,"nodeType":"ParameterList","parameters":[],"src":"3312:2:12"},"returnParameters":{"id":2301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2306,"src":"3347:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3347:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3346:9:12"},"scope":2341,"src":"3287:113:12","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2334,"nodeType":"Block","src":"3608:137:12","statements":[{"assignments":[2318],"declarations":[{"constant":false,"id":2318,"mutability":"mutable","name":"nonce","nameLocation":"3654:5:12","nodeType":"VariableDeclaration","scope":2334,"src":"3618:41:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2317,"nodeType":"UserDefinedTypeName","pathNode":{"id":2316,"name":"CountersUpgradeable.Counter","nameLocations":["3618:19:12","3638:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3183,"src":"3618:27:12"},"referencedDeclaration":3183,"src":"3618:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"id":2322,"initialValue":{"baseExpression":{"id":2319,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"3662:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$3183_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter storage ref)"}},"id":2321,"indexExpression":{"id":2320,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"3670:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3662:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3618:58:12"},{"expression":{"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2323,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2312,"src":"3686:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2324,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"3696:5:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2325,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3702:7:12","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3195,"src":"3696:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3183_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$3183_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3696:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3686:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2328,"nodeType":"ExpressionStatement","src":"3686:25:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2329,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"3721:5:12","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3727:9:12","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3209,"src":"3721:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3183_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$3183_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer)"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2333,"nodeType":"ExpressionStatement","src":"3721:17:12"}]},"documentation":{"id":2307,"nodeType":"StructuredDocumentation","src":"3406:120:12","text":" @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"},"id":2335,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"3540:9:12","nodeType":"FunctionDefinition","parameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"owner","nameLocation":"3558:5:12","nodeType":"VariableDeclaration","scope":2335,"src":"3550:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2308,"name":"address","nodeType":"ElementaryTypeName","src":"3550:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3549:15:12"},"returnParameters":{"id":2313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"current","nameLocation":"3599:7:12","nodeType":"VariableDeclaration","scope":2335,"src":"3591:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2311,"name":"uint256","nodeType":"ElementaryTypeName","src":"3591:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3590:17:12"},"scope":2341,"src":"3531:214:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2336,"nodeType":"StructuredDocumentation","src":"3751:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2340,"mutability":"mutable","name":"__gap","nameLocation":"4030:5:12","nodeType":"VariableDeclaration","scope":2341,"src":"4010:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"4010:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2339,"length":{"hexValue":"3439","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4018:2:12","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"4010:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":2342,"src":"1008:3030:12","usedErrors":[],"usedEvents":[659,1039,2083,2092]}],"src":"122:3917:12"},"id":12},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","exportedSymbols":{"IERC20MetadataUpgradeable":[2366],"IERC20Upgradeable":[2149]},"id":2367,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2343,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":2344,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2367,"sourceUnit":2150,"src":"135:34:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2346,"name":"IERC20Upgradeable","nameLocations":["327:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"327:17:13"},"id":2347,"nodeType":"InheritanceSpecifier","src":"327:17:13"}],"canonicalName":"IERC20MetadataUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2345,"nodeType":"StructuredDocumentation","src":"171:116:13","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":2366,"linearizedBaseContracts":[2366,2149],"name":"IERC20MetadataUpgradeable","nameLocation":"298:25:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2348,"nodeType":"StructuredDocumentation","src":"351:54:13","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2353,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"419:4:13","nodeType":"FunctionDefinition","parameters":{"id":2349,"nodeType":"ParameterList","parameters":[],"src":"423:2:13"},"returnParameters":{"id":2352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2353,"src":"449:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2350,"name":"string","nodeType":"ElementaryTypeName","src":"449:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"448:15:13"},"scope":2366,"src":"410:54:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2354,"nodeType":"StructuredDocumentation","src":"470:56:13","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":2359,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"540:6:13","nodeType":"FunctionDefinition","parameters":{"id":2355,"nodeType":"ParameterList","parameters":[],"src":"546:2:13"},"returnParameters":{"id":2358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2359,"src":"572:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2356,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"571:15:13"},"scope":2366,"src":"531:56:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2360,"nodeType":"StructuredDocumentation","src":"593:65:13","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":2365,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"672:8:13","nodeType":"FunctionDefinition","parameters":{"id":2361,"nodeType":"ParameterList","parameters":[],"src":"680:2:13"},"returnParameters":{"id":2364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2365,"src":"706:5:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2362,"name":"uint8","nodeType":"ElementaryTypeName","src":"706:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"705:7:13"},"scope":2366,"src":"663:50:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2367,"src":"288:427:13","usedErrors":[],"usedEvents":[2083,2092]}],"src":"110:606:13"},"id":13},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[2402]},"id":2403,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2368,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"148:1963:14","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":2402,"linearizedBaseContracts":[2402],"name":"IERC20PermitUpgradeable","nameLocation":"2122:23:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2370,"nodeType":"StructuredDocumentation","src":"2152:850:14","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":2387,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3016:6:14","nodeType":"FunctionDefinition","parameters":{"id":2385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2372,"mutability":"mutable","name":"owner","nameLocation":"3040:5:14","nodeType":"VariableDeclaration","scope":2387,"src":"3032:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2371,"name":"address","nodeType":"ElementaryTypeName","src":"3032:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2374,"mutability":"mutable","name":"spender","nameLocation":"3063:7:14","nodeType":"VariableDeclaration","scope":2387,"src":"3055:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2373,"name":"address","nodeType":"ElementaryTypeName","src":"3055:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2376,"mutability":"mutable","name":"value","nameLocation":"3088:5:14","nodeType":"VariableDeclaration","scope":2387,"src":"3080:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2375,"name":"uint256","nodeType":"ElementaryTypeName","src":"3080:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2378,"mutability":"mutable","name":"deadline","nameLocation":"3111:8:14","nodeType":"VariableDeclaration","scope":2387,"src":"3103:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2377,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2380,"mutability":"mutable","name":"v","nameLocation":"3135:1:14","nodeType":"VariableDeclaration","scope":2387,"src":"3129:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2379,"name":"uint8","nodeType":"ElementaryTypeName","src":"3129:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2382,"mutability":"mutable","name":"r","nameLocation":"3154:1:14","nodeType":"VariableDeclaration","scope":2387,"src":"3146:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3146:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2384,"mutability":"mutable","name":"s","nameLocation":"3173:1:14","nodeType":"VariableDeclaration","scope":2387,"src":"3165:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3165:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3022:158:14"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[],"src":"3189:0:14"},"scope":2402,"src":"3007:183:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"3196:294:14","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":2395,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3504:6:14","nodeType":"FunctionDefinition","parameters":{"id":2391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"owner","nameLocation":"3519:5:14","nodeType":"VariableDeclaration","scope":2395,"src":"3511:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2389,"name":"address","nodeType":"ElementaryTypeName","src":"3511:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3510:15:14"},"returnParameters":{"id":2394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2395,"src":"3549:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2392,"name":"uint256","nodeType":"ElementaryTypeName","src":"3549:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3548:9:14"},"scope":2402,"src":"3495:63:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2396,"nodeType":"StructuredDocumentation","src":"3564:128:14","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":2401,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3759:16:14","nodeType":"FunctionDefinition","parameters":{"id":2397,"nodeType":"ParameterList","parameters":[],"src":"3775:2:14"},"returnParameters":{"id":2400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2401,"src":"3801:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3801:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3800:9:14"},"scope":2402,"src":"3750:60:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2403,"src":"2112:1700:14","usedErrors":[],"usedEvents":[]}],"src":"123:3690:14"},"id":14},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3126],"IERC20PermitUpgradeable":[2402],"IERC20Upgradeable":[2149],"SafeERC20Upgradeable":[2778]},"id":2779,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2404,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":2405,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2779,"sourceUnit":2150,"src":"140:34:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"../extensions/IERC20PermitUpgradeable.sol","id":2406,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2779,"sourceUnit":2403,"src":"175:51:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":2407,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2779,"sourceUnit":3127,"src":"227:47:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2408,"nodeType":"StructuredDocumentation","src":"276:457:15","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":2778,"linearizedBaseContracts":[2778],"name":"SafeERC20Upgradeable","nameLocation":"742:20:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2411,"libraryName":{"id":2409,"name":"AddressUpgradeable","nameLocations":["775:18:15"],"nodeType":"IdentifierPath","referencedDeclaration":3126,"src":"775:18:15"},"nodeType":"UsingForDirective","src":"769:37:15","typeName":{"id":2410,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":2434,"nodeType":"Block","src":"1079:103:15","statements":[{"expression":{"arguments":[{"id":2423,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"1109:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":2426,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"1139:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1145:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2116,"src":"1139:14:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:8:15","memberName":"selector","nodeType":"MemberAccess","src":"1139:23:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2429,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"1164:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2430,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1168:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2424,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1116:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:18:15","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1116:22:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:58:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2422,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"1089:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:86:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2433,"nodeType":"ExpressionStatement","src":"1089:86:15"}]},"documentation":{"id":2412,"nodeType":"StructuredDocumentation","src":"812:179:15","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":2435,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1005:12:15","nodeType":"FunctionDefinition","parameters":{"id":2420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2415,"mutability":"mutable","name":"token","nameLocation":"1036:5:15","nodeType":"VariableDeclaration","scope":2435,"src":"1018:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2414,"nodeType":"UserDefinedTypeName","pathNode":{"id":2413,"name":"IERC20Upgradeable","nameLocations":["1018:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"1018:17:15"},"referencedDeclaration":2149,"src":"1018:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":2417,"mutability":"mutable","name":"to","nameLocation":"1051:2:15","nodeType":"VariableDeclaration","scope":2435,"src":"1043:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2416,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2419,"mutability":"mutable","name":"value","nameLocation":"1063:5:15","nodeType":"VariableDeclaration","scope":2435,"src":"1055:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2418,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:52:15"},"returnParameters":{"id":2421,"nodeType":"ParameterList","parameters":[],"src":"1079:0:15"},"scope":2778,"src":"996:186:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2461,"nodeType":"Block","src":"1522:113:15","statements":[{"expression":{"arguments":[{"id":2449,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"1552:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":2452,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"1582:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1588:12:15","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2148,"src":"1582:18:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1601:8:15","memberName":"selector","nodeType":"MemberAccess","src":"1582:27:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2455,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"1611:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2456,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"1617:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"1621:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2450,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1559:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:18:15","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1559:22:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:68:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2448,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"1532:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:96:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2460,"nodeType":"ExpressionStatement","src":"1532:96:15"}]},"documentation":{"id":2436,"nodeType":"StructuredDocumentation","src":"1188:228:15","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":2462,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1430:16:15","nodeType":"FunctionDefinition","parameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2439,"mutability":"mutable","name":"token","nameLocation":"1465:5:15","nodeType":"VariableDeclaration","scope":2462,"src":"1447:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2438,"nodeType":"UserDefinedTypeName","pathNode":{"id":2437,"name":"IERC20Upgradeable","nameLocations":["1447:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"1447:17:15"},"referencedDeclaration":2149,"src":"1447:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"from","nameLocation":"1480:4:15","nodeType":"VariableDeclaration","scope":2462,"src":"1472:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2440,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"to","nameLocation":"1494:2:15","nodeType":"VariableDeclaration","scope":2462,"src":"1486:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2442,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2445,"mutability":"mutable","name":"value","nameLocation":"1506:5:15","nodeType":"VariableDeclaration","scope":2462,"src":"1498:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1446:66:15"},"returnParameters":{"id":2447,"nodeType":"ParameterList","parameters":[],"src":"1522:0:15"},"scope":2778,"src":"1421:214:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2505,"nodeType":"Block","src":"1982:497:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"2231:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2231:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2230:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2482,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2271:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2778","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2778","typeString":"library SafeERC20Upgradeable"}],"id":2481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2263:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2480,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:15","typeDescriptions":{}}},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2484,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"2278:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2478,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"2247:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:9:15","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2126,"src":"2247:15:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2247:44:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2488,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2246:46:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2230:62:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:56:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":2473,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:163:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2492,"nodeType":"ExpressionStatement","src":"2209:163:15"},{"expression":{"arguments":[{"id":2494,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"2402:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":2497,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"2432:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:7:15","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2136,"src":"2432:13:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:8:15","memberName":"selector","nodeType":"MemberAccess","src":"2432:22:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2500,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"2456:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"2465:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2495,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2409:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:18:15","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2409:22:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2409:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2493,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"2382:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:90:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2504,"nodeType":"ExpressionStatement","src":"2382:90:15"}]},"documentation":{"id":2463,"nodeType":"StructuredDocumentation","src":"1641:249:15","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":2506,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1904:11:15","nodeType":"FunctionDefinition","parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"token","nameLocation":"1934:5:15","nodeType":"VariableDeclaration","scope":2506,"src":"1916:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2465,"nodeType":"UserDefinedTypeName","pathNode":{"id":2464,"name":"IERC20Upgradeable","nameLocations":["1916:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"1916:17:15"},"referencedDeclaration":2149,"src":"1916:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"spender","nameLocation":"1949:7:15","nodeType":"VariableDeclaration","scope":2506,"src":"1941:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2467,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"value","nameLocation":"1966:5:15","nodeType":"VariableDeclaration","scope":2506,"src":"1958:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2469,"name":"uint256","nodeType":"ElementaryTypeName","src":"1958:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1915:57:15"},"returnParameters":{"id":2472,"nodeType":"ParameterList","parameters":[],"src":"1982:0:15"},"scope":2778,"src":"1895:584:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2542,"nodeType":"Block","src":"2767:194:15","statements":[{"assignments":[2518],"declarations":[{"constant":false,"id":2518,"mutability":"mutable","name":"oldAllowance","nameLocation":"2785:12:15","nodeType":"VariableDeclaration","scope":2542,"src":"2777:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2517,"name":"uint256","nodeType":"ElementaryTypeName","src":"2777:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2527,"initialValue":{"arguments":[{"arguments":[{"id":2523,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2824:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2778","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2778","typeString":"library SafeERC20Upgradeable"}],"id":2522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2521,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:15","typeDescriptions":{}}},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2525,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"2831:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2519,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"2800:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:9:15","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2126,"src":"2800:15:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2777:62:15"},{"expression":{"arguments":[{"id":2529,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"2869:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":2532,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"2899:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:7:15","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2136,"src":"2899:13:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:15","memberName":"selector","nodeType":"MemberAccess","src":"2899:22:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2535,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"2923:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2536,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"2932:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"2947:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2530,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2876:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2880:18:15","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2876:22:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2876:77:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2528,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"2849:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:105:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2541,"nodeType":"ExpressionStatement","src":"2849:105:15"}]},"documentation":{"id":2507,"nodeType":"StructuredDocumentation","src":"2485:180:15","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":2543,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2679:21:15","nodeType":"FunctionDefinition","parameters":{"id":2515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2510,"mutability":"mutable","name":"token","nameLocation":"2719:5:15","nodeType":"VariableDeclaration","scope":2543,"src":"2701:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2509,"nodeType":"UserDefinedTypeName","pathNode":{"id":2508,"name":"IERC20Upgradeable","nameLocations":["2701:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"2701:17:15"},"referencedDeclaration":2149,"src":"2701:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":2512,"mutability":"mutable","name":"spender","nameLocation":"2734:7:15","nodeType":"VariableDeclaration","scope":2543,"src":"2726:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2511,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2514,"mutability":"mutable","name":"value","nameLocation":"2751:5:15","nodeType":"VariableDeclaration","scope":2543,"src":"2743:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2513,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:57:15"},"returnParameters":{"id":2516,"nodeType":"ParameterList","parameters":[],"src":"2767:0:15"},"scope":2778,"src":"2670:291:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2587,"nodeType":"Block","src":"3249:321:15","statements":[{"id":2586,"nodeType":"UncheckedBlock","src":"3259:305:15","statements":[{"assignments":[2555],"declarations":[{"constant":false,"id":2555,"mutability":"mutable","name":"oldAllowance","nameLocation":"3291:12:15","nodeType":"VariableDeclaration","scope":2586,"src":"3283:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2554,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2564,"initialValue":{"arguments":[{"arguments":[{"id":2560,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3330:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2778","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2778","typeString":"library SafeERC20Upgradeable"}],"id":2559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3322:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2558,"name":"address","nodeType":"ElementaryTypeName","src":"3322:7:15","typeDescriptions":{}}},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3322:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2562,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"3337:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2556,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3306:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:9:15","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2126,"src":"3306:15:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3283:62:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2566,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"3367:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"3383:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3367:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:43:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":2565,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3359:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:75:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2571,"nodeType":"ExpressionStatement","src":"3359:75:15"},{"expression":{"arguments":[{"id":2573,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3468:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":2576,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3498:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3504:7:15","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2136,"src":"3498:13:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3512:8:15","memberName":"selector","nodeType":"MemberAccess","src":"3498:22:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2579,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"3522:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2580,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"3531:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"3546:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3531:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2574,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3475:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3479:18:15","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3475:22:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:77:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2572,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"3448:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:105:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2585,"nodeType":"ExpressionStatement","src":"3448:105:15"}]}]},"documentation":{"id":2544,"nodeType":"StructuredDocumentation","src":"2967:180:15","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":2588,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3161:21:15","nodeType":"FunctionDefinition","parameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"token","nameLocation":"3201:5:15","nodeType":"VariableDeclaration","scope":2588,"src":"3183:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2546,"nodeType":"UserDefinedTypeName","pathNode":{"id":2545,"name":"IERC20Upgradeable","nameLocations":["3183:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"3183:17:15"},"referencedDeclaration":2149,"src":"3183:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":2549,"mutability":"mutable","name":"spender","nameLocation":"3216:7:15","nodeType":"VariableDeclaration","scope":2588,"src":"3208:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2548,"name":"address","nodeType":"ElementaryTypeName","src":"3208:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2551,"mutability":"mutable","name":"value","nameLocation":"3233:5:15","nodeType":"VariableDeclaration","scope":2588,"src":"3225:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2550,"name":"uint256","nodeType":"ElementaryTypeName","src":"3225:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:57:15"},"returnParameters":{"id":2553,"nodeType":"ParameterList","parameters":[],"src":"3249:0:15"},"scope":2778,"src":"3152:418:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2634,"nodeType":"Block","src":"3977:333:15","statements":[{"assignments":[2600],"declarations":[{"constant":false,"id":2600,"mutability":"mutable","name":"approvalCall","nameLocation":"4000:12:15","nodeType":"VariableDeclaration","scope":2634,"src":"3987:25:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2599,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2609,"initialValue":{"arguments":[{"expression":{"expression":{"id":2603,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2592,"src":"4038:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4044:7:15","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2136,"src":"4038:13:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4052:8:15","memberName":"selector","nodeType":"MemberAccess","src":"4038:22:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2606,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"4062:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"4071:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2601,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4015:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4019:18:15","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4015:22:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:90:15"},{"condition":{"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4092:45:15","subExpression":{"arguments":[{"id":2611,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2592,"src":"4117:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"id":2612,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"4124:12:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2610,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"4093:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20Upgradeable,bytes memory) returns (bool)"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4093:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2633,"nodeType":"IfStatement","src":"4088:216:15","trueBody":{"id":2632,"nodeType":"Block","src":"4139:165:15","statements":[{"expression":{"arguments":[{"id":2616,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2592,"src":"4173:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":2619,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2592,"src":"4203:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4209:7:15","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2136,"src":"4203:13:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:8:15","memberName":"selector","nodeType":"MemberAccess","src":"4203:22:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2622,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"4227:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2617,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4180:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4184:18:15","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4180:22:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:58:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2615,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"4153:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:86:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2626,"nodeType":"ExpressionStatement","src":"4153:86:15"},{"expression":{"arguments":[{"id":2628,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2592,"src":"4273:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},{"id":2629,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"4280:12:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2627,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"4253:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2149_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2631,"nodeType":"ExpressionStatement","src":"4253:40:15"}]}}]},"documentation":{"id":2589,"nodeType":"StructuredDocumentation","src":"3576:308:15","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":2635,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3898:12:15","nodeType":"FunctionDefinition","parameters":{"id":2597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2592,"mutability":"mutable","name":"token","nameLocation":"3929:5:15","nodeType":"VariableDeclaration","scope":2635,"src":"3911:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2591,"nodeType":"UserDefinedTypeName","pathNode":{"id":2590,"name":"IERC20Upgradeable","nameLocations":["3911:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"3911:17:15"},"referencedDeclaration":2149,"src":"3911:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":2594,"mutability":"mutable","name":"spender","nameLocation":"3944:7:15","nodeType":"VariableDeclaration","scope":2635,"src":"3936:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2593,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2596,"mutability":"mutable","name":"value","nameLocation":"3961:5:15","nodeType":"VariableDeclaration","scope":2635,"src":"3953:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2595,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3910:57:15"},"returnParameters":{"id":2598,"nodeType":"ParameterList","parameters":[],"src":"3977:0:15"},"scope":2778,"src":"3889:421:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2691,"nodeType":"Block","src":"4688:257:15","statements":[{"assignments":[2657],"declarations":[{"constant":false,"id":2657,"mutability":"mutable","name":"nonceBefore","nameLocation":"4706:11:15","nodeType":"VariableDeclaration","scope":2691,"src":"4698:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2656,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2662,"initialValue":{"arguments":[{"id":2660,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"4733:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2658,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4720:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$2402","typeString":"contract IERC20PermitUpgradeable"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:6:15","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2395,"src":"4720:12:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4698:41:15"},{"expression":{"arguments":[{"id":2666,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"4762:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2667,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"4769:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2668,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"4778:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2669,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"4785:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2670,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"4795:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2671,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"4798:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2672,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"4801:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2663,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4749:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$2402","typeString":"contract IERC20PermitUpgradeable"}},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:15","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":2387,"src":"4749:12:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:54:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2674,"nodeType":"ExpressionStatement","src":"4749:54:15"},{"assignments":[2676],"declarations":[{"constant":false,"id":2676,"mutability":"mutable","name":"nonceAfter","nameLocation":"4821:10:15","nodeType":"VariableDeclaration","scope":2691,"src":"4813:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2675,"name":"uint256","nodeType":"ElementaryTypeName","src":"4813:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2681,"initialValue":{"arguments":[{"id":2679,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"4847:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2677,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4834:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$2402","typeString":"contract IERC20PermitUpgradeable"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4840:6:15","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2395,"src":"4834:12:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4813:40:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2683,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"4871:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2684,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"4885:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4885:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4871:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":2688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4902:35:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":2682,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4863:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:75:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2690,"nodeType":"ExpressionStatement","src":"4863:75:15"}]},"documentation":{"id":2636,"nodeType":"StructuredDocumentation","src":"4316:141:15","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":2692,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4471:10:15","nodeType":"FunctionDefinition","parameters":{"id":2654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"token","nameLocation":"4515:5:15","nodeType":"VariableDeclaration","scope":2692,"src":"4491:29:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$2402","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":2638,"nodeType":"UserDefinedTypeName","pathNode":{"id":2637,"name":"IERC20PermitUpgradeable","nameLocations":["4491:23:15"],"nodeType":"IdentifierPath","referencedDeclaration":2402,"src":"4491:23:15"},"referencedDeclaration":2402,"src":"4491:23:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$2402","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"owner","nameLocation":"4538:5:15","nodeType":"VariableDeclaration","scope":2692,"src":"4530:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2640,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2643,"mutability":"mutable","name":"spender","nameLocation":"4561:7:15","nodeType":"VariableDeclaration","scope":2692,"src":"4553:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2642,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2645,"mutability":"mutable","name":"value","nameLocation":"4586:5:15","nodeType":"VariableDeclaration","scope":2692,"src":"4578:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2644,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2647,"mutability":"mutable","name":"deadline","nameLocation":"4609:8:15","nodeType":"VariableDeclaration","scope":2692,"src":"4601:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2646,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"v","nameLocation":"4633:1:15","nodeType":"VariableDeclaration","scope":2692,"src":"4627:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2648,"name":"uint8","nodeType":"ElementaryTypeName","src":"4627:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"r","nameLocation":"4652:1:15","nodeType":"VariableDeclaration","scope":2692,"src":"4644:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2653,"mutability":"mutable","name":"s","nameLocation":"4671:1:15","nodeType":"VariableDeclaration","scope":2692,"src":"4663:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2652,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4663:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4481:197:15"},"returnParameters":{"id":2655,"nodeType":"ParameterList","parameters":[],"src":"4688:0:15"},"scope":2778,"src":"4462:483:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2728,"nodeType":"Block","src":"5409:572:15","statements":[{"assignments":[2702],"declarations":[{"constant":false,"id":2702,"mutability":"mutable","name":"returndata","nameLocation":"5771:10:15","nodeType":"VariableDeclaration","scope":2728,"src":"5758:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2701,"name":"bytes","nodeType":"ElementaryTypeName","src":"5758:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2711,"initialValue":{"arguments":[{"id":2708,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"5812:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5818:34:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":2705,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2696,"src":"5792:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}],"id":2704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5784:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2703,"name":"address","nodeType":"ElementaryTypeName","src":"5784:7:15","typeDescriptions":{}}},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5799:12:15","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":2886,"src":"5784:27:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:69:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5758:95:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2713,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"5871:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5882:6:15","memberName":"length","nodeType":"MemberAccess","src":"5871:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5892:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5871:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2719,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"5908:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5921:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2720,"name":"bool","nodeType":"ElementaryTypeName","src":"5921:4:15","typeDescriptions":{}}}],"id":2722,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5920:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":2717,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5897:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2718,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5901:6:15","memberName":"decode","nodeType":"MemberAccess","src":"5897:10:15","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5871:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5929:44:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":2712,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5863:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:111:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2727,"nodeType":"ExpressionStatement","src":"5863:111:15"}]},"documentation":{"id":2693,"nodeType":"StructuredDocumentation","src":"4951:372:15","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":2729,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5337:19:15","nodeType":"FunctionDefinition","parameters":{"id":2699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2696,"mutability":"mutable","name":"token","nameLocation":"5375:5:15","nodeType":"VariableDeclaration","scope":2729,"src":"5357:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2695,"nodeType":"UserDefinedTypeName","pathNode":{"id":2694,"name":"IERC20Upgradeable","nameLocations":["5357:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"5357:17:15"},"referencedDeclaration":2149,"src":"5357:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":2698,"mutability":"mutable","name":"data","nameLocation":"5395:4:15","nodeType":"VariableDeclaration","scope":2729,"src":"5382:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2697,"name":"bytes","nodeType":"ElementaryTypeName","src":"5382:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5356:44:15"},"returnParameters":{"id":2700,"nodeType":"ParameterList","parameters":[],"src":"5409:0:15"},"scope":2778,"src":"5328:653:15","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2776,"nodeType":"Block","src":"6582:516:15","statements":[{"assignments":[2741,2743],"declarations":[{"constant":false,"id":2741,"mutability":"mutable","name":"success","nameLocation":"6883:7:15","nodeType":"VariableDeclaration","scope":2776,"src":"6878:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2740,"name":"bool","nodeType":"ElementaryTypeName","src":"6878:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2743,"mutability":"mutable","name":"returndata","nameLocation":"6905:10:15","nodeType":"VariableDeclaration","scope":2776,"src":"6892:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2742,"name":"bytes","nodeType":"ElementaryTypeName","src":"6892:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2751,"initialValue":{"arguments":[{"id":2749,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"6939:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2746,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"6927:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}],"id":2745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6919:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2744,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:15","typeDescriptions":{}}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6934:4:15","memberName":"call","nodeType":"MemberAccess","src":"6919:19:15","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6877:67:15"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2752,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"6973:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2753,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"6985:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:6:15","memberName":"length","nodeType":"MemberAccess","src":"6985:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7006:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2759,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"7022:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7035:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2760,"name":"bool","nodeType":"ElementaryTypeName","src":"7035:4:15","typeDescriptions":{}}}],"id":2762,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7034:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":2757,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7011:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7015:6:15","memberName":"decode","nodeType":"MemberAccess","src":"7011:10:15","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7011:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6985:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2765,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6984:58:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:69:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":2771,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"7084:5:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}],"id":2770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7076:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2769,"name":"address","nodeType":"ElementaryTypeName","src":"7076:7:15","typeDescriptions":{}}},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7076:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2767,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"7046:18:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3126_$","typeString":"type(library AddressUpgradeable)"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:10:15","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"7046:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:118:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2739,"id":2775,"nodeType":"Return","src":"6954:137:15"}]},"documentation":{"id":2730,"nodeType":"StructuredDocumentation","src":"5987:490:15","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":2777,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6491:23:15","nodeType":"FunctionDefinition","parameters":{"id":2736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2733,"mutability":"mutable","name":"token","nameLocation":"6533:5:15","nodeType":"VariableDeclaration","scope":2777,"src":"6515:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2732,"nodeType":"UserDefinedTypeName","pathNode":{"id":2731,"name":"IERC20Upgradeable","nameLocations":["6515:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"6515:17:15"},"referencedDeclaration":2149,"src":"6515:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$2149","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":2735,"mutability":"mutable","name":"data","nameLocation":"6553:4:15","nodeType":"VariableDeclaration","scope":2777,"src":"6540:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2734,"name":"bytes","nodeType":"ElementaryTypeName","src":"6540:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6514:44:15"},"returnParameters":{"id":2739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2738,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2777,"src":"6576:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2737,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6575:6:15"},"scope":2778,"src":"6482:616:15","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2779,"src":"734:6366:15","usedErrors":[],"usedEvents":[]}],"src":"115:6986:15"},"id":15},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol","exportedSymbols":{"IERC721ReceiverUpgradeable":[2796]},"id":2797,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2780,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721ReceiverUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2781,"nodeType":"StructuredDocumentation","src":"141:152:16","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":2796,"linearizedBaseContracts":[2796],"name":"IERC721ReceiverUpgradeable","nameLocation":"304:26:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2782,"nodeType":"StructuredDocumentation","src":"337:493:16","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2795,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"844:16:16","nodeType":"FunctionDefinition","parameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2784,"mutability":"mutable","name":"operator","nameLocation":"878:8:16","nodeType":"VariableDeclaration","scope":2795,"src":"870:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2783,"name":"address","nodeType":"ElementaryTypeName","src":"870:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2786,"mutability":"mutable","name":"from","nameLocation":"904:4:16","nodeType":"VariableDeclaration","scope":2795,"src":"896:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2785,"name":"address","nodeType":"ElementaryTypeName","src":"896:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"tokenId","nameLocation":"926:7:16","nodeType":"VariableDeclaration","scope":2795,"src":"918:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"918:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2790,"mutability":"mutable","name":"data","nameLocation":"958:4:16","nodeType":"VariableDeclaration","scope":2795,"src":"943:19:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2789,"name":"bytes","nodeType":"ElementaryTypeName","src":"943:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"860:108:16"},"returnParameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2795,"src":"987:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2792,"name":"bytes4","nodeType":"ElementaryTypeName","src":"987:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"986:8:16"},"scope":2796,"src":"835:160:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2797,"src":"294:703:16","usedErrors":[],"usedEvents":[]}],"src":"116:882:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3126]},"id":3127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2798,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2799,"nodeType":"StructuredDocumentation","src":"126:67:17","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3126,"linearizedBaseContracts":[3126],"name":"AddressUpgradeable","nameLocation":"202:18:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":2813,"nodeType":"Block","src":"1489:254:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2807,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"1713:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:17","memberName":"code","nodeType":"MemberAccess","src":"1713:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:17","memberName":"length","nodeType":"MemberAccess","src":"1713:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2806,"id":2812,"nodeType":"Return","src":"1706:30:17"}]},"documentation":{"id":2800,"nodeType":"StructuredDocumentation","src":"227:1191:17","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2814,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:17","nodeType":"FunctionDefinition","parameters":{"id":2803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2802,"mutability":"mutable","name":"account","nameLocation":"1451:7:17","nodeType":"VariableDeclaration","scope":2814,"src":"1443:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2801,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:17"},"returnParameters":{"id":2806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2814,"src":"1483:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2804,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:17"},"scope":3126,"src":"1423:320:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2847,"nodeType":"Block","src":"2729:241:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2825,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$3126","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$3126","typeString":"library AddressUpgradeable"}],"id":2824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2823,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:17","typeDescriptions":{}}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:17","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2828,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"2772:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2822,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2832,"nodeType":"ExpressionStatement","src":"2739:73:17"},{"assignments":[2834,null],"declarations":[{"constant":false,"id":2834,"mutability":"mutable","name":"success","nameLocation":"2829:7:17","nodeType":"VariableDeclaration","scope":2847,"src":"2824:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2833,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2841,"initialValue":{"arguments":[{"hexValue":"","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2835,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"2842:9:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:17","memberName":"call","nodeType":"MemberAccess","src":"2842:14:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2837,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"2864:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:17"},{"expression":{"arguments":[{"id":2843,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"2893:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2842,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2846,"nodeType":"ExpressionStatement","src":"2885:78:17"}]},"documentation":{"id":2815,"nodeType":"StructuredDocumentation","src":"1749:904:17","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2848,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:17","nodeType":"FunctionDefinition","parameters":{"id":2820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2817,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:17","nodeType":"VariableDeclaration","scope":2848,"src":"2677:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2816,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2819,"mutability":"mutable","name":"amount","nameLocation":"2712:6:17","nodeType":"VariableDeclaration","scope":2848,"src":"2704:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:17"},"returnParameters":{"id":2821,"nodeType":"ParameterList","parameters":[],"src":"2729:0:17"},"scope":3126,"src":"2658:312:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2865,"nodeType":"Block","src":"3801:96:17","statements":[{"expression":{"arguments":[{"id":2859,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"3840:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2860,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"3848:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2858,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2906,2950],"referencedDeclaration":2950,"src":"3818:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2857,"id":2864,"nodeType":"Return","src":"3811:79:17"}]},"documentation":{"id":2849,"nodeType":"StructuredDocumentation","src":"2976:731:17","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2866,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:17","nodeType":"FunctionDefinition","parameters":{"id":2854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2851,"mutability":"mutable","name":"target","nameLocation":"3742:6:17","nodeType":"VariableDeclaration","scope":2866,"src":"3734:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2850,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2853,"mutability":"mutable","name":"data","nameLocation":"3763:4:17","nodeType":"VariableDeclaration","scope":2866,"src":"3750:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2852,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:17"},"returnParameters":{"id":2857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2866,"src":"3787:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2855,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:17"},"scope":3126,"src":"3712:185:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2885,"nodeType":"Block","src":"4266:76:17","statements":[{"expression":{"arguments":[{"id":2879,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"4305:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2880,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"4313:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2882,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"4322:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2878,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2906,2950],"referencedDeclaration":2950,"src":"4283:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2877,"id":2884,"nodeType":"Return","src":"4276:59:17"}]},"documentation":{"id":2867,"nodeType":"StructuredDocumentation","src":"3903:211:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2886,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:17","nodeType":"FunctionDefinition","parameters":{"id":2874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"target","nameLocation":"4158:6:17","nodeType":"VariableDeclaration","scope":2886,"src":"4150:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2868,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"data","nameLocation":"4187:4:17","nodeType":"VariableDeclaration","scope":2886,"src":"4174:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2870,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2873,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:17","nodeType":"VariableDeclaration","scope":2886,"src":"4201:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2872,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:17"},"returnParameters":{"id":2877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"4252:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2875,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:17"},"scope":3126,"src":"4119:223:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2905,"nodeType":"Block","src":"4817:111:17","statements":[{"expression":{"arguments":[{"id":2899,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"4856:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2900,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"4864:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2901,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"4870:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2898,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2906,2950],"referencedDeclaration":2950,"src":"4834:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2897,"id":2904,"nodeType":"Return","src":"4827:94:17"}]},"documentation":{"id":2887,"nodeType":"StructuredDocumentation","src":"4348:351:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2906,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:17","nodeType":"FunctionDefinition","parameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"target","nameLocation":"4743:6:17","nodeType":"VariableDeclaration","scope":2906,"src":"4735:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2888,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2891,"mutability":"mutable","name":"data","nameLocation":"4764:4:17","nodeType":"VariableDeclaration","scope":2906,"src":"4751:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2890,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2893,"mutability":"mutable","name":"value","nameLocation":"4778:5:17","nodeType":"VariableDeclaration","scope":2906,"src":"4770:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:17"},"returnParameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2906,"src":"4803:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2895,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:17"},"scope":3126,"src":"4704:224:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2949,"nodeType":"Block","src":"5355:267:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2923,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$3126","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$3126","typeString":"library AddressUpgradeable"}],"id":2922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2921,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:17","typeDescriptions":{}}},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:17","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"5398:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2920,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2930,"nodeType":"ExpressionStatement","src":"5365:81:17"},{"assignments":[2932,2934],"declarations":[{"constant":false,"id":2932,"mutability":"mutable","name":"success","nameLocation":"5462:7:17","nodeType":"VariableDeclaration","scope":2949,"src":"5457:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2931,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:17","nodeType":"VariableDeclaration","scope":2949,"src":"5471:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2933,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2941,"initialValue":{"arguments":[{"id":2939,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"5524:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2935,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"5498:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:17","memberName":"call","nodeType":"MemberAccess","src":"5498:11:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"5517:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:17"},{"expression":{"arguments":[{"id":2943,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"5573:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2944,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"5581:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2945,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"5590:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2946,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"5602:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2942,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"5546:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2919,"id":2948,"nodeType":"Return","src":"5539:76:17"}]},"documentation":{"id":2907,"nodeType":"StructuredDocumentation","src":"4934:237:17","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2950,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:17","nodeType":"FunctionDefinition","parameters":{"id":2916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"target","nameLocation":"5224:6:17","nodeType":"VariableDeclaration","scope":2950,"src":"5216:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2908,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2911,"mutability":"mutable","name":"data","nameLocation":"5253:4:17","nodeType":"VariableDeclaration","scope":2950,"src":"5240:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2910,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2913,"mutability":"mutable","name":"value","nameLocation":"5275:5:17","nodeType":"VariableDeclaration","scope":2950,"src":"5267:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2912,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2915,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:17","nodeType":"VariableDeclaration","scope":2950,"src":"5290:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2914,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:17"},"returnParameters":{"id":2919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2950,"src":"5341:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2917,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:17"},"scope":3126,"src":"5176:446:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2966,"nodeType":"Block","src":"5899:97:17","statements":[{"expression":{"arguments":[{"id":2961,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"5935:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2962,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"5943:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2960,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2967,2996],"referencedDeclaration":2996,"src":"5916:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2959,"id":2965,"nodeType":"Return","src":"5909:80:17"}]},"documentation":{"id":2951,"nodeType":"StructuredDocumentation","src":"5628:166:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2967,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:17","nodeType":"FunctionDefinition","parameters":{"id":2956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2953,"mutability":"mutable","name":"target","nameLocation":"5835:6:17","nodeType":"VariableDeclaration","scope":2967,"src":"5827:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2952,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2955,"mutability":"mutable","name":"data","nameLocation":"5856:4:17","nodeType":"VariableDeclaration","scope":2967,"src":"5843:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2954,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:17"},"returnParameters":{"id":2959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2967,"src":"5885:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2957,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:17"},"scope":3126,"src":"5799:197:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2995,"nodeType":"Block","src":"6338:168:17","statements":[{"assignments":[2980,2982],"declarations":[{"constant":false,"id":2980,"mutability":"mutable","name":"success","nameLocation":"6354:7:17","nodeType":"VariableDeclaration","scope":2995,"src":"6349:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2979,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2982,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:17","nodeType":"VariableDeclaration","scope":2995,"src":"6363:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2981,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2987,"initialValue":{"arguments":[{"id":2985,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"6408:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2983,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"6390:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:17","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:17","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:17"},{"expression":{"arguments":[{"id":2989,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"6457:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2990,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"6465:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2991,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"6474:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2992,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"6486:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2988,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"6430:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2978,"id":2994,"nodeType":"Return","src":"6423:76:17"}]},"documentation":{"id":2968,"nodeType":"StructuredDocumentation","src":"6002:173:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2996,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:17","nodeType":"FunctionDefinition","parameters":{"id":2975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2970,"mutability":"mutable","name":"target","nameLocation":"6225:6:17","nodeType":"VariableDeclaration","scope":2996,"src":"6217:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2969,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2972,"mutability":"mutable","name":"data","nameLocation":"6254:4:17","nodeType":"VariableDeclaration","scope":2996,"src":"6241:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2971,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:17","nodeType":"VariableDeclaration","scope":2996,"src":"6268:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2973,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:17"},"returnParameters":{"id":2978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2996,"src":"6324:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2976,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:17"},"scope":3126,"src":"6180:326:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3012,"nodeType":"Block","src":"6782:101:17","statements":[{"expression":{"arguments":[{"id":3007,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"6820:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3008,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"6828:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3006,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3013,3042],"referencedDeclaration":3042,"src":"6799:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3005,"id":3011,"nodeType":"Return","src":"6792:84:17"}]},"documentation":{"id":2997,"nodeType":"StructuredDocumentation","src":"6512:168:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3013,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:17","nodeType":"FunctionDefinition","parameters":{"id":3002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2999,"mutability":"mutable","name":"target","nameLocation":"6723:6:17","nodeType":"VariableDeclaration","scope":3013,"src":"6715:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2998,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3001,"mutability":"mutable","name":"data","nameLocation":"6744:4:17","nodeType":"VariableDeclaration","scope":3013,"src":"6731:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3000,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:17"},"returnParameters":{"id":3005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3013,"src":"6768:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3003,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:17"},"scope":3126,"src":"6685:198:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3041,"nodeType":"Block","src":"7224:170:17","statements":[{"assignments":[3026,3028],"declarations":[{"constant":false,"id":3026,"mutability":"mutable","name":"success","nameLocation":"7240:7:17","nodeType":"VariableDeclaration","scope":3041,"src":"7235:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3025,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3028,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:17","nodeType":"VariableDeclaration","scope":3041,"src":"7249:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3027,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3033,"initialValue":{"arguments":[{"id":3031,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"7296:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3029,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"7276:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:17","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:17","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:17"},{"expression":{"arguments":[{"id":3035,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"7345:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3036,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"7353:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3037,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"7362:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3038,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"7374:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3034,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"7318:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3024,"id":3040,"nodeType":"Return","src":"7311:76:17"}]},"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"6889:175:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3042,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:17","nodeType":"FunctionDefinition","parameters":{"id":3021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"target","nameLocation":"7116:6:17","nodeType":"VariableDeclaration","scope":3042,"src":"7108:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3015,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3018,"mutability":"mutable","name":"data","nameLocation":"7145:4:17","nodeType":"VariableDeclaration","scope":3042,"src":"7132:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3017,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3020,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:17","nodeType":"VariableDeclaration","scope":3042,"src":"7159:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3019,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:17"},"returnParameters":{"id":3024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3023,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3042,"src":"7210:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3022,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:17"},"scope":3126,"src":"7069:325:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3080,"nodeType":"Block","src":"7876:434:17","statements":[{"condition":{"id":3056,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"7890:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3078,"nodeType":"Block","src":"8246:58:17","statements":[{"expression":{"arguments":[{"id":3074,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"8268:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3075,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"8280:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3073,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"8260:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3077,"nodeType":"ExpressionStatement","src":"8260:33:17"}]},"id":3079,"nodeType":"IfStatement","src":"7886:418:17","trueBody":{"id":3072,"nodeType":"Block","src":"7899:341:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3057,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"7917:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:17","memberName":"length","nodeType":"MemberAccess","src":"7917:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3069,"nodeType":"IfStatement","src":"7913:286:17","trueBody":{"id":3068,"nodeType":"Block","src":"7941:258:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":3063,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"8143:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3062,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"8132:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3061,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3067,"nodeType":"ExpressionStatement","src":"8124:60:17"}]}},{"expression":{"id":3070,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"8219:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3055,"id":3071,"nodeType":"Return","src":"8212:17:17"}]}}]},"documentation":{"id":3043,"nodeType":"StructuredDocumentation","src":"7400:277:17","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3081,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:17","nodeType":"FunctionDefinition","parameters":{"id":3052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3045,"mutability":"mutable","name":"target","nameLocation":"7735:6:17","nodeType":"VariableDeclaration","scope":3081,"src":"7727:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3044,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3047,"mutability":"mutable","name":"success","nameLocation":"7756:7:17","nodeType":"VariableDeclaration","scope":3081,"src":"7751:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3046,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3049,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:17","nodeType":"VariableDeclaration","scope":3081,"src":"7773:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3048,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3051,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:17","nodeType":"VariableDeclaration","scope":3081,"src":"7806:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3050,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:17"},"returnParameters":{"id":3055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3081,"src":"7862:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3053,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:17"},"scope":3126,"src":"7682:628:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3104,"nodeType":"Block","src":"8691:135:17","statements":[{"condition":{"id":3093,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"8705:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3102,"nodeType":"Block","src":"8762:58:17","statements":[{"expression":{"arguments":[{"id":3098,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"8784:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3099,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"8796:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3097,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"8776:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3101,"nodeType":"ExpressionStatement","src":"8776:33:17"}]},"id":3103,"nodeType":"IfStatement","src":"8701:119:17","trueBody":{"id":3096,"nodeType":"Block","src":"8714:42:17","statements":[{"expression":{"id":3094,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"8735:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3092,"id":3095,"nodeType":"Return","src":"8728:17:17"}]}}]},"documentation":{"id":3082,"nodeType":"StructuredDocumentation","src":"8316:210:17","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3105,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:17","nodeType":"FunctionDefinition","parameters":{"id":3089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3084,"mutability":"mutable","name":"success","nameLocation":"8571:7:17","nodeType":"VariableDeclaration","scope":3105,"src":"8566:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3083,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3086,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:17","nodeType":"VariableDeclaration","scope":3105,"src":"8588:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3085,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3088,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:17","nodeType":"VariableDeclaration","scope":3105,"src":"8621:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3087,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:17"},"returnParameters":{"id":3092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3105,"src":"8677:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3090,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:17"},"scope":3126,"src":"8531:295:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3124,"nodeType":"Block","src":"8915:457:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3112,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"8991:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:17","memberName":"length","nodeType":"MemberAccess","src":"8991:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3122,"nodeType":"Block","src":"9321:45:17","statements":[{"expression":{"arguments":[{"id":3119,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"9342:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3118,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3121,"nodeType":"ExpressionStatement","src":"9335:20:17"}]},"id":3123,"nodeType":"IfStatement","src":"8987:379:17","trueBody":{"id":3117,"nodeType":"Block","src":"9014:301:17","statements":[{"AST":{"nativeSrc":"9172:133:17","nodeType":"YulBlock","src":"9172:133:17","statements":[{"nativeSrc":"9190:40:17","nodeType":"YulVariableDeclaration","src":"9190:40:17","value":{"arguments":[{"name":"returndata","nativeSrc":"9219:10:17","nodeType":"YulIdentifier","src":"9219:10:17"}],"functionName":{"name":"mload","nativeSrc":"9213:5:17","nodeType":"YulIdentifier","src":"9213:5:17"},"nativeSrc":"9213:17:17","nodeType":"YulFunctionCall","src":"9213:17:17"},"variables":[{"name":"returndata_size","nativeSrc":"9194:15:17","nodeType":"YulTypedName","src":"9194:15:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9258:2:17","nodeType":"YulLiteral","src":"9258:2:17","type":"","value":"32"},{"name":"returndata","nativeSrc":"9262:10:17","nodeType":"YulIdentifier","src":"9262:10:17"}],"functionName":{"name":"add","nativeSrc":"9254:3:17","nodeType":"YulIdentifier","src":"9254:3:17"},"nativeSrc":"9254:19:17","nodeType":"YulFunctionCall","src":"9254:19:17"},{"name":"returndata_size","nativeSrc":"9275:15:17","nodeType":"YulIdentifier","src":"9275:15:17"}],"functionName":{"name":"revert","nativeSrc":"9247:6:17","nodeType":"YulIdentifier","src":"9247:6:17"},"nativeSrc":"9247:44:17","nodeType":"YulFunctionCall","src":"9247:44:17"},"nativeSrc":"9247:44:17","nodeType":"YulExpressionStatement","src":"9247:44:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3107,"isOffset":false,"isSlot":false,"src":"9219:10:17","valueSize":1},{"declaration":3107,"isOffset":false,"isSlot":false,"src":"9262:10:17","valueSize":1}],"id":3116,"nodeType":"InlineAssembly","src":"9163:142:17"}]}}]},"id":3125,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:17","nodeType":"FunctionDefinition","parameters":{"id":3110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3107,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:17","nodeType":"VariableDeclaration","scope":3125,"src":"8849:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3106,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3109,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:17","nodeType":"VariableDeclaration","scope":3125,"src":"8874:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3108,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:17"},"returnParameters":{"id":3111,"nodeType":"ParameterList","parameters":[],"src":"8915:0:17"},"scope":3126,"src":"8832:540:17","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3127,"src":"194:9180:17","usedErrors":[],"usedEvents":[]}],"src":"101:9274:17"},"id":17},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[3177],"Initializable":[1193]},"id":3178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3128,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:18"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3130,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":1194,"src":"125:63:18","symbolAliases":[{"foreign":{"id":3129,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"133:13:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3132,"name":"Initializable","nameLocations":["727:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"727:13:18"},"id":3133,"nodeType":"InheritanceSpecifier","src":"727:13:18"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3131,"nodeType":"StructuredDocumentation","src":"190:496:18","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3177,"linearizedBaseContracts":[3177,1193],"name":"ContextUpgradeable","nameLocation":"705:18:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3138,"nodeType":"Block","src":"799:7:18","statements":[]},"id":3139,"implemented":true,"kind":"function","modifiers":[{"id":3136,"kind":"modifierInvocation","modifierName":{"id":3135,"name":"onlyInitializing","nameLocations":["782:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"782:16:18"},"nodeType":"ModifierInvocation","src":"782:16:18"}],"name":"__Context_init","nameLocation":"756:14:18","nodeType":"FunctionDefinition","parameters":{"id":3134,"nodeType":"ParameterList","parameters":[],"src":"770:2:18"},"returnParameters":{"id":3137,"nodeType":"ParameterList","parameters":[],"src":"799:0:18"},"scope":3177,"src":"747:59:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3144,"nodeType":"Block","src":"874:7:18","statements":[]},"id":3145,"implemented":true,"kind":"function","modifiers":[{"id":3142,"kind":"modifierInvocation","modifierName":{"id":3141,"name":"onlyInitializing","nameLocations":["857:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"857:16:18"},"nodeType":"ModifierInvocation","src":"857:16:18"}],"name":"__Context_init_unchained","nameLocation":"821:24:18","nodeType":"FunctionDefinition","parameters":{"id":3140,"nodeType":"ParameterList","parameters":[],"src":"845:2:18"},"returnParameters":{"id":3143,"nodeType":"ParameterList","parameters":[],"src":"874:0:18"},"scope":3177,"src":"812:69:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3153,"nodeType":"Block","src":"948:34:18","statements":[{"expression":{"expression":{"id":3150,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"965:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"969:6:18","memberName":"sender","nodeType":"MemberAccess","src":"965:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3149,"id":3152,"nodeType":"Return","src":"958:17:18"}]},"id":3154,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"895:10:18","nodeType":"FunctionDefinition","parameters":{"id":3146,"nodeType":"ParameterList","parameters":[],"src":"905:2:18"},"returnParameters":{"id":3149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3154,"src":"939:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3147,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"938:9:18"},"scope":3177,"src":"886:96:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3162,"nodeType":"Block","src":"1055:32:18","statements":[{"expression":{"expression":{"id":3159,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1072:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1076:4:18","memberName":"data","nodeType":"MemberAccess","src":"1072:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3158,"id":3161,"nodeType":"Return","src":"1065:15:18"}]},"id":3163,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"997:8:18","nodeType":"FunctionDefinition","parameters":{"id":3155,"nodeType":"ParameterList","parameters":[],"src":"1005:2:18"},"returnParameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3163,"src":"1039:14:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3156,"name":"bytes","nodeType":"ElementaryTypeName","src":"1039:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1038:16:18"},"scope":3177,"src":"988:99:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3170,"nodeType":"Block","src":"1165:25:18","statements":[{"expression":{"hexValue":"30","id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3167,"id":3169,"nodeType":"Return","src":"1175:8:18"}]},"id":3171,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1102:20:18","nodeType":"FunctionDefinition","parameters":{"id":3164,"nodeType":"ParameterList","parameters":[],"src":"1122:2:18"},"returnParameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3171,"src":"1156:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3165,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1155:9:18"},"scope":3177,"src":"1093:97:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3172,"nodeType":"StructuredDocumentation","src":"1196:254:18","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3176,"mutability":"mutable","name":"__gap","nameLocation":"1475:5:18","nodeType":"VariableDeclaration","scope":3177,"src":"1455:25:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3173,"name":"uint256","nodeType":"ElementaryTypeName","src":"1455:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3175,"length":{"hexValue":"3530","id":3174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:2:18","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1455:11:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3178,"src":"687:796:18","usedErrors":[],"usedEvents":[1039]}],"src":"101:1383:18"},"id":18},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","exportedSymbols":{"CountersUpgradeable":[3251]},"id":3252,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3179,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"CountersUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3180,"nodeType":"StructuredDocumentation","src":"112:311:19","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":3251,"linearizedBaseContracts":[3251],"name":"CountersUpgradeable","nameLocation":"432:19:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CountersUpgradeable.Counter","id":3183,"members":[{"constant":false,"id":3182,"mutability":"mutable","name":"_value","nameLocation":"805:6:19","nodeType":"VariableDeclaration","scope":3183,"src":"797:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3181,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"465:7:19","nodeType":"StructDefinition","scope":3251,"src":"458:374:19","visibility":"public"},{"body":{"id":3194,"nodeType":"Block","src":"912:38:19","statements":[{"expression":{"expression":{"id":3191,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"929:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":3192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"937:6:19","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"929:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3190,"id":3193,"nodeType":"Return","src":"922:21:19"}]},"id":3195,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"847:7:19","nodeType":"FunctionDefinition","parameters":{"id":3187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3186,"mutability":"mutable","name":"counter","nameLocation":"871:7:19","nodeType":"VariableDeclaration","scope":3195,"src":"855:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":3185,"nodeType":"UserDefinedTypeName","pathNode":{"id":3184,"name":"Counter","nameLocations":["855:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3183,"src":"855:7:19"},"referencedDeclaration":3183,"src":"855:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"854:25:19"},"returnParameters":{"id":3190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3195,"src":"903:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3188,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:9:19"},"scope":3251,"src":"838:112:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3208,"nodeType":"Block","src":"1009:70:19","statements":[{"id":3207,"nodeType":"UncheckedBlock","src":"1019:54:19","statements":[{"expression":{"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3201,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"1043:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":3203,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1051:6:19","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"1043:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1061:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1043:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3206,"nodeType":"ExpressionStatement","src":"1043:19:19"}]}]},"id":3209,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"965:9:19","nodeType":"FunctionDefinition","parameters":{"id":3199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3198,"mutability":"mutable","name":"counter","nameLocation":"991:7:19","nodeType":"VariableDeclaration","scope":3209,"src":"975:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":3197,"nodeType":"UserDefinedTypeName","pathNode":{"id":3196,"name":"Counter","nameLocations":["975:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3183,"src":"975:7:19"},"referencedDeclaration":3183,"src":"975:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"974:25:19"},"returnParameters":{"id":3200,"nodeType":"ParameterList","parameters":[],"src":"1009:0:19"},"scope":3251,"src":"956:123:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3236,"nodeType":"Block","src":"1138:176:19","statements":[{"assignments":[3216],"declarations":[{"constant":false,"id":3216,"mutability":"mutable","name":"value","nameLocation":"1156:5:19","nodeType":"VariableDeclaration","scope":3236,"src":"1148:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3215,"name":"uint256","nodeType":"ElementaryTypeName","src":"1148:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3219,"initialValue":{"expression":{"id":3217,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"1164:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":3218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1172:6:19","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"1164:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1148:30:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3221,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"1196:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1204:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1196:9:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1207:29:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":3220,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1188:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:49:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3226,"nodeType":"ExpressionStatement","src":"1188:49:19"},{"id":3235,"nodeType":"UncheckedBlock","src":"1247:61:19","statements":[{"expression":{"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3227,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"1271:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":3229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1279:6:19","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"1271:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"1288:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1296:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1288:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1271:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3234,"nodeType":"ExpressionStatement","src":"1271:26:19"}]}]},"id":3237,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1094:9:19","nodeType":"FunctionDefinition","parameters":{"id":3213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3212,"mutability":"mutable","name":"counter","nameLocation":"1120:7:19","nodeType":"VariableDeclaration","scope":3237,"src":"1104:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":3211,"nodeType":"UserDefinedTypeName","pathNode":{"id":3210,"name":"Counter","nameLocations":["1104:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3183,"src":"1104:7:19"},"referencedDeclaration":3183,"src":"1104:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1103:25:19"},"returnParameters":{"id":3214,"nodeType":"ParameterList","parameters":[],"src":"1138:0:19"},"scope":3251,"src":"1085:229:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3249,"nodeType":"Block","src":"1369:35:19","statements":[{"expression":{"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3243,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"1379:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":3245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1387:6:19","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"1379:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1396:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1379:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3248,"nodeType":"ExpressionStatement","src":"1379:18:19"}]},"id":3250,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1329:5:19","nodeType":"FunctionDefinition","parameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3240,"mutability":"mutable","name":"counter","nameLocation":"1351:7:19","nodeType":"VariableDeclaration","scope":3250,"src":"1335:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":3239,"nodeType":"UserDefinedTypeName","pathNode":{"id":3238,"name":"Counter","nameLocations":["1335:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3183,"src":"1335:7:19"},"referencedDeclaration":3183,"src":"1335:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3183_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1334:25:19"},"returnParameters":{"id":3242,"nodeType":"ParameterList","parameters":[],"src":"1369:0:19"},"scope":3251,"src":"1320:84:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3252,"src":"424:982:19","usedErrors":[],"usedEvents":[]}],"src":"87:1320:19"},"id":19},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[3361]},"id":3362,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3253,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3254,"nodeType":"StructuredDocumentation","src":"218:1201:20","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":3361,"linearizedBaseContracts":[3361],"name":"StorageSlotUpgradeable","nameLocation":"1428:22:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":3257,"members":[{"constant":false,"id":3256,"mutability":"mutable","name":"value","nameLocation":"1494:5:20","nodeType":"VariableDeclaration","scope":3257,"src":"1486:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3255,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1464:11:20","nodeType":"StructDefinition","scope":3361,"src":"1457:49:20","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":3260,"members":[{"constant":false,"id":3259,"mutability":"mutable","name":"value","nameLocation":"1546:5:20","nodeType":"VariableDeclaration","scope":3260,"src":"1541:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3258,"name":"bool","nodeType":"ElementaryTypeName","src":"1541:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1519:11:20","nodeType":"StructDefinition","scope":3361,"src":"1512:46:20","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":3263,"members":[{"constant":false,"id":3262,"mutability":"mutable","name":"value","nameLocation":"1601:5:20","nodeType":"VariableDeclaration","scope":3263,"src":"1593:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1571:11:20","nodeType":"StructDefinition","scope":3361,"src":"1564:49:20","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":3266,"members":[{"constant":false,"id":3265,"mutability":"mutable","name":"value","nameLocation":"1656:5:20","nodeType":"VariableDeclaration","scope":3266,"src":"1648:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1626:11:20","nodeType":"StructDefinition","scope":3361,"src":"1619:49:20","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.StringSlot","id":3269,"members":[{"constant":false,"id":3268,"mutability":"mutable","name":"value","nameLocation":"1709:5:20","nodeType":"VariableDeclaration","scope":3269,"src":"1702:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3267,"name":"string","nodeType":"ElementaryTypeName","src":"1702:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1681:10:20","nodeType":"StructDefinition","scope":3361,"src":"1674:47:20","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BytesSlot","id":3272,"members":[{"constant":false,"id":3271,"mutability":"mutable","name":"value","nameLocation":"1760:5:20","nodeType":"VariableDeclaration","scope":3272,"src":"1754:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3270,"name":"bytes","nodeType":"ElementaryTypeName","src":"1754:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1734:9:20","nodeType":"StructDefinition","scope":3361,"src":"1727:45:20","visibility":"public"},{"body":{"id":3282,"nodeType":"Block","src":"1954:106:20","statements":[{"AST":{"nativeSrc":"2016:38:20","nodeType":"YulBlock","src":"2016:38:20","statements":[{"nativeSrc":"2030:14:20","nodeType":"YulAssignment","src":"2030:14:20","value":{"name":"slot","nativeSrc":"2040:4:20","nodeType":"YulIdentifier","src":"2040:4:20"},"variableNames":[{"name":"r.slot","nativeSrc":"2030:6:20","nodeType":"YulIdentifier","src":"2030:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3279,"isOffset":false,"isSlot":true,"src":"2030:6:20","suffix":"slot","valueSize":1},{"declaration":3275,"isOffset":false,"isSlot":false,"src":"2040:4:20","valueSize":1}],"id":3281,"nodeType":"InlineAssembly","src":"2007:47:20"}]},"documentation":{"id":3273,"nodeType":"StructuredDocumentation","src":"1778:87:20","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":3283,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1879:14:20","nodeType":"FunctionDefinition","parameters":{"id":3276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3275,"mutability":"mutable","name":"slot","nameLocation":"1902:4:20","nodeType":"VariableDeclaration","scope":3283,"src":"1894:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1894:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1893:14:20"},"returnParameters":{"id":3280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3279,"mutability":"mutable","name":"r","nameLocation":"1951:1:20","nodeType":"VariableDeclaration","scope":3283,"src":"1931:21:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3257_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":3278,"nodeType":"UserDefinedTypeName","pathNode":{"id":3277,"name":"AddressSlot","nameLocations":["1931:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":3257,"src":"1931:11:20"},"referencedDeclaration":3257,"src":"1931:11:20","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3257_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1930:23:20"},"scope":3361,"src":"1870:190:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3293,"nodeType":"Block","src":"2242:106:20","statements":[{"AST":{"nativeSrc":"2304:38:20","nodeType":"YulBlock","src":"2304:38:20","statements":[{"nativeSrc":"2318:14:20","nodeType":"YulAssignment","src":"2318:14:20","value":{"name":"slot","nativeSrc":"2328:4:20","nodeType":"YulIdentifier","src":"2328:4:20"},"variableNames":[{"name":"r.slot","nativeSrc":"2318:6:20","nodeType":"YulIdentifier","src":"2318:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3290,"isOffset":false,"isSlot":true,"src":"2318:6:20","suffix":"slot","valueSize":1},{"declaration":3286,"isOffset":false,"isSlot":false,"src":"2328:4:20","valueSize":1}],"id":3292,"nodeType":"InlineAssembly","src":"2295:47:20"}]},"documentation":{"id":3284,"nodeType":"StructuredDocumentation","src":"2066:87:20","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":3294,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2167:14:20","nodeType":"FunctionDefinition","parameters":{"id":3287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3286,"mutability":"mutable","name":"slot","nameLocation":"2190:4:20","nodeType":"VariableDeclaration","scope":3294,"src":"2182:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2182:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2181:14:20"},"returnParameters":{"id":3291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3290,"mutability":"mutable","name":"r","nameLocation":"2239:1:20","nodeType":"VariableDeclaration","scope":3294,"src":"2219:21:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3260_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":3289,"nodeType":"UserDefinedTypeName","pathNode":{"id":3288,"name":"BooleanSlot","nameLocations":["2219:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":3260,"src":"2219:11:20"},"referencedDeclaration":3260,"src":"2219:11:20","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3260_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"2218:23:20"},"scope":3361,"src":"2158:190:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3304,"nodeType":"Block","src":"2530:106:20","statements":[{"AST":{"nativeSrc":"2592:38:20","nodeType":"YulBlock","src":"2592:38:20","statements":[{"nativeSrc":"2606:14:20","nodeType":"YulAssignment","src":"2606:14:20","value":{"name":"slot","nativeSrc":"2616:4:20","nodeType":"YulIdentifier","src":"2616:4:20"},"variableNames":[{"name":"r.slot","nativeSrc":"2606:6:20","nodeType":"YulIdentifier","src":"2606:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3301,"isOffset":false,"isSlot":true,"src":"2606:6:20","suffix":"slot","valueSize":1},{"declaration":3297,"isOffset":false,"isSlot":false,"src":"2616:4:20","valueSize":1}],"id":3303,"nodeType":"InlineAssembly","src":"2583:47:20"}]},"documentation":{"id":3295,"nodeType":"StructuredDocumentation","src":"2354:87:20","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":3305,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2455:14:20","nodeType":"FunctionDefinition","parameters":{"id":3298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3297,"mutability":"mutable","name":"slot","nameLocation":"2478:4:20","nodeType":"VariableDeclaration","scope":3305,"src":"2470:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2470:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2469:14:20"},"returnParameters":{"id":3302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3301,"mutability":"mutable","name":"r","nameLocation":"2527:1:20","nodeType":"VariableDeclaration","scope":3305,"src":"2507:21:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3263_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":3300,"nodeType":"UserDefinedTypeName","pathNode":{"id":3299,"name":"Bytes32Slot","nameLocations":["2507:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":3263,"src":"2507:11:20"},"referencedDeclaration":3263,"src":"2507:11:20","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3263_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2506:23:20"},"scope":3361,"src":"2446:190:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3315,"nodeType":"Block","src":"2818:106:20","statements":[{"AST":{"nativeSrc":"2880:38:20","nodeType":"YulBlock","src":"2880:38:20","statements":[{"nativeSrc":"2894:14:20","nodeType":"YulAssignment","src":"2894:14:20","value":{"name":"slot","nativeSrc":"2904:4:20","nodeType":"YulIdentifier","src":"2904:4:20"},"variableNames":[{"name":"r.slot","nativeSrc":"2894:6:20","nodeType":"YulIdentifier","src":"2894:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3312,"isOffset":false,"isSlot":true,"src":"2894:6:20","suffix":"slot","valueSize":1},{"declaration":3308,"isOffset":false,"isSlot":false,"src":"2904:4:20","valueSize":1}],"id":3314,"nodeType":"InlineAssembly","src":"2871:47:20"}]},"documentation":{"id":3306,"nodeType":"StructuredDocumentation","src":"2642:87:20","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":3316,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2743:14:20","nodeType":"FunctionDefinition","parameters":{"id":3309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3308,"mutability":"mutable","name":"slot","nameLocation":"2766:4:20","nodeType":"VariableDeclaration","scope":3316,"src":"2758:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2758:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2757:14:20"},"returnParameters":{"id":3313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3312,"mutability":"mutable","name":"r","nameLocation":"2815:1:20","nodeType":"VariableDeclaration","scope":3316,"src":"2795:21:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3266_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":3311,"nodeType":"UserDefinedTypeName","pathNode":{"id":3310,"name":"Uint256Slot","nameLocations":["2795:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":3266,"src":"2795:11:20"},"referencedDeclaration":3266,"src":"2795:11:20","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3266_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2794:23:20"},"scope":3361,"src":"2734:190:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3326,"nodeType":"Block","src":"3103:106:20","statements":[{"AST":{"nativeSrc":"3165:38:20","nodeType":"YulBlock","src":"3165:38:20","statements":[{"nativeSrc":"3179:14:20","nodeType":"YulAssignment","src":"3179:14:20","value":{"name":"slot","nativeSrc":"3189:4:20","nodeType":"YulIdentifier","src":"3189:4:20"},"variableNames":[{"name":"r.slot","nativeSrc":"3179:6:20","nodeType":"YulIdentifier","src":"3179:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3323,"isOffset":false,"isSlot":true,"src":"3179:6:20","suffix":"slot","valueSize":1},{"declaration":3319,"isOffset":false,"isSlot":false,"src":"3189:4:20","valueSize":1}],"id":3325,"nodeType":"InlineAssembly","src":"3156:47:20"}]},"documentation":{"id":3317,"nodeType":"StructuredDocumentation","src":"2930:86:20","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":3327,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3030:13:20","nodeType":"FunctionDefinition","parameters":{"id":3320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3319,"mutability":"mutable","name":"slot","nameLocation":"3052:4:20","nodeType":"VariableDeclaration","scope":3327,"src":"3044:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3044:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3043:14:20"},"returnParameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"mutability":"mutable","name":"r","nameLocation":"3100:1:20","nodeType":"VariableDeclaration","scope":3327,"src":"3081:20:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3269_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":3322,"nodeType":"UserDefinedTypeName","pathNode":{"id":3321,"name":"StringSlot","nameLocations":["3081:10:20"],"nodeType":"IdentifierPath","referencedDeclaration":3269,"src":"3081:10:20"},"referencedDeclaration":3269,"src":"3081:10:20","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3269_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3080:22:20"},"scope":3361,"src":"3021:188:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3337,"nodeType":"Block","src":"3411:112:20","statements":[{"AST":{"nativeSrc":"3473:44:20","nodeType":"YulBlock","src":"3473:44:20","statements":[{"nativeSrc":"3487:20:20","nodeType":"YulAssignment","src":"3487:20:20","value":{"name":"store.slot","nativeSrc":"3497:10:20","nodeType":"YulIdentifier","src":"3497:10:20"},"variableNames":[{"name":"r.slot","nativeSrc":"3487:6:20","nodeType":"YulIdentifier","src":"3487:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3334,"isOffset":false,"isSlot":true,"src":"3487:6:20","suffix":"slot","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":true,"src":"3497:10:20","suffix":"slot","valueSize":1}],"id":3336,"nodeType":"InlineAssembly","src":"3464:53:20"}]},"documentation":{"id":3328,"nodeType":"StructuredDocumentation","src":"3215:101:20","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":3338,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3330:13:20","nodeType":"FunctionDefinition","parameters":{"id":3331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3330,"mutability":"mutable","name":"store","nameLocation":"3359:5:20","nodeType":"VariableDeclaration","scope":3338,"src":"3344:20:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3329,"name":"string","nodeType":"ElementaryTypeName","src":"3344:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3343:22:20"},"returnParameters":{"id":3335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3334,"mutability":"mutable","name":"r","nameLocation":"3408:1:20","nodeType":"VariableDeclaration","scope":3338,"src":"3389:20:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3269_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":3333,"nodeType":"UserDefinedTypeName","pathNode":{"id":3332,"name":"StringSlot","nameLocations":["3389:10:20"],"nodeType":"IdentifierPath","referencedDeclaration":3269,"src":"3389:10:20"},"referencedDeclaration":3269,"src":"3389:10:20","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3269_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3388:22:20"},"scope":3361,"src":"3321:202:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3348,"nodeType":"Block","src":"3699:106:20","statements":[{"AST":{"nativeSrc":"3761:38:20","nodeType":"YulBlock","src":"3761:38:20","statements":[{"nativeSrc":"3775:14:20","nodeType":"YulAssignment","src":"3775:14:20","value":{"name":"slot","nativeSrc":"3785:4:20","nodeType":"YulIdentifier","src":"3785:4:20"},"variableNames":[{"name":"r.slot","nativeSrc":"3775:6:20","nodeType":"YulIdentifier","src":"3775:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3345,"isOffset":false,"isSlot":true,"src":"3775:6:20","suffix":"slot","valueSize":1},{"declaration":3341,"isOffset":false,"isSlot":false,"src":"3785:4:20","valueSize":1}],"id":3347,"nodeType":"InlineAssembly","src":"3752:47:20"}]},"documentation":{"id":3339,"nodeType":"StructuredDocumentation","src":"3529:85:20","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":3349,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3628:12:20","nodeType":"FunctionDefinition","parameters":{"id":3342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3341,"mutability":"mutable","name":"slot","nameLocation":"3649:4:20","nodeType":"VariableDeclaration","scope":3349,"src":"3641:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3641:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3640:14:20"},"returnParameters":{"id":3346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"r","nameLocation":"3696:1:20","nodeType":"VariableDeclaration","scope":3349,"src":"3678:19:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3272_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":3344,"nodeType":"UserDefinedTypeName","pathNode":{"id":3343,"name":"BytesSlot","nameLocations":["3678:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":3272,"src":"3678:9:20"},"referencedDeclaration":3272,"src":"3678:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3272_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3677:21:20"},"scope":3361,"src":"3619:186:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3359,"nodeType":"Block","src":"4002:112:20","statements":[{"AST":{"nativeSrc":"4064:44:20","nodeType":"YulBlock","src":"4064:44:20","statements":[{"nativeSrc":"4078:20:20","nodeType":"YulAssignment","src":"4078:20:20","value":{"name":"store.slot","nativeSrc":"4088:10:20","nodeType":"YulIdentifier","src":"4088:10:20"},"variableNames":[{"name":"r.slot","nativeSrc":"4078:6:20","nodeType":"YulIdentifier","src":"4078:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3356,"isOffset":false,"isSlot":true,"src":"4078:6:20","suffix":"slot","valueSize":1},{"declaration":3352,"isOffset":false,"isSlot":true,"src":"4088:10:20","suffix":"slot","valueSize":1}],"id":3358,"nodeType":"InlineAssembly","src":"4055:53:20"}]},"documentation":{"id":3350,"nodeType":"StructuredDocumentation","src":"3811:99:20","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":3360,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3924:12:20","nodeType":"FunctionDefinition","parameters":{"id":3353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3352,"mutability":"mutable","name":"store","nameLocation":"3951:5:20","nodeType":"VariableDeclaration","scope":3360,"src":"3937:19:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3351,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3936:21:20"},"returnParameters":{"id":3357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3356,"mutability":"mutable","name":"r","nameLocation":"3999:1:20","nodeType":"VariableDeclaration","scope":3360,"src":"3981:19:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3272_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":3355,"nodeType":"UserDefinedTypeName","pathNode":{"id":3354,"name":"BytesSlot","nameLocations":["3981:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":3272,"src":"3981:9:20"},"referencedDeclaration":3272,"src":"3981:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3272_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3980:21:20"},"scope":3361,"src":"3915:199:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3362,"src":"1420:2696:20","usedErrors":[],"usedEvents":[]}],"src":"193:3924:20"},"id":20},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[5107],"SignedMathUpgradeable":[5524],"StringsUpgradeable":[3590]},"id":3591,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3363,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:21"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":3364,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3591,"sourceUnit":5108,"src":"126:36:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":3365,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3591,"sourceUnit":5525,"src":"163:42:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3366,"nodeType":"StructuredDocumentation","src":"207:34:21","text":" @dev String operations."},"fullyImplemented":true,"id":3590,"linearizedBaseContracts":[3590],"name":"StringsUpgradeable","nameLocation":"250:18:21","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3369,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:21","nodeType":"VariableDeclaration","scope":3590,"src":"275:54:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3367,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:21","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3372,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:21","nodeType":"VariableDeclaration","scope":3590,"src":"335:43:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3370,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3419,"nodeType":"Block","src":"551:636:21","statements":[{"id":3418,"nodeType":"UncheckedBlock","src":"561:620:21","statements":[{"assignments":[3381],"declarations":[{"constant":false,"id":3381,"mutability":"mutable","name":"length","nameLocation":"593:6:21","nodeType":"VariableDeclaration","scope":3418,"src":"585:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3380,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3388,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3384,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"624:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3382,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5107,"src":"602:15:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$5107_$","typeString":"type(library MathUpgradeable)"}},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:21","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4944,"src":"602:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:21"},{"assignments":[3390],"declarations":[{"constant":false,"id":3390,"mutability":"mutable","name":"buffer","nameLocation":"662:6:21","nodeType":"VariableDeclaration","scope":3418,"src":"648:20:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3389,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3395,"initialValue":{"arguments":[{"id":3393,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3381,"src":"682:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3392,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3391,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:21"},{"assignments":[3397],"declarations":[{"constant":false,"id":3397,"mutability":"mutable","name":"ptr","nameLocation":"711:3:21","nodeType":"VariableDeclaration","scope":3418,"src":"703:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3396,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3398,"nodeType":"VariableDeclarationStatement","src":"703:11:21"},{"AST":{"nativeSrc":"784:67:21","nodeType":"YulBlock","src":"784:67:21","statements":[{"nativeSrc":"802:35:21","nodeType":"YulAssignment","src":"802:35:21","value":{"arguments":[{"name":"buffer","nativeSrc":"813:6:21","nodeType":"YulIdentifier","src":"813:6:21"},{"arguments":[{"kind":"number","nativeSrc":"825:2:21","nodeType":"YulLiteral","src":"825:2:21","type":"","value":"32"},{"name":"length","nativeSrc":"829:6:21","nodeType":"YulIdentifier","src":"829:6:21"}],"functionName":{"name":"add","nativeSrc":"821:3:21","nodeType":"YulIdentifier","src":"821:3:21"},"nativeSrc":"821:15:21","nodeType":"YulFunctionCall","src":"821:15:21"}],"functionName":{"name":"add","nativeSrc":"809:3:21","nodeType":"YulIdentifier","src":"809:3:21"},"nativeSrc":"809:28:21","nodeType":"YulFunctionCall","src":"809:28:21"},"variableNames":[{"name":"ptr","nativeSrc":"802:3:21","nodeType":"YulIdentifier","src":"802:3:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3390,"isOffset":false,"isSlot":false,"src":"813:6:21","valueSize":1},{"declaration":3381,"isOffset":false,"isSlot":false,"src":"829:6:21","valueSize":1},{"declaration":3397,"isOffset":false,"isSlot":false,"src":"802:3:21","valueSize":1}],"id":3399,"nodeType":"InlineAssembly","src":"775:76:21"},{"body":{"id":3414,"nodeType":"Block","src":"877:267:21","statements":[{"expression":{"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:21","subExpression":{"id":3401,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"895:3:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3403,"nodeType":"ExpressionStatement","src":"895:5:21"},{"AST":{"nativeSrc":"978:84:21","nodeType":"YulBlock","src":"978:84:21","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1008:3:21","nodeType":"YulIdentifier","src":"1008:3:21"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1022:5:21","nodeType":"YulIdentifier","src":"1022:5:21"},{"kind":"number","nativeSrc":"1029:2:21","nodeType":"YulLiteral","src":"1029:2:21","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1018:3:21","nodeType":"YulIdentifier","src":"1018:3:21"},"nativeSrc":"1018:14:21","nodeType":"YulFunctionCall","src":"1018:14:21"},{"name":"_SYMBOLS","nativeSrc":"1034:8:21","nodeType":"YulIdentifier","src":"1034:8:21"}],"functionName":{"name":"byte","nativeSrc":"1013:4:21","nodeType":"YulIdentifier","src":"1013:4:21"},"nativeSrc":"1013:30:21","nodeType":"YulFunctionCall","src":"1013:30:21"}],"functionName":{"name":"mstore8","nativeSrc":"1000:7:21","nodeType":"YulIdentifier","src":"1000:7:21"},"nativeSrc":"1000:44:21","nodeType":"YulFunctionCall","src":"1000:44:21"},"nativeSrc":"1000:44:21","nodeType":"YulExpressionStatement","src":"1000:44:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3369,"isOffset":false,"isSlot":false,"src":"1034:8:21","valueSize":1},{"declaration":3397,"isOffset":false,"isSlot":false,"src":"1008:3:21","valueSize":1},{"declaration":3375,"isOffset":false,"isSlot":false,"src":"1022:5:21","valueSize":1}],"id":3404,"nodeType":"InlineAssembly","src":"969:93:21"},{"expression":{"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"1079:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3408,"nodeType":"ExpressionStatement","src":"1079:11:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3409,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"1112:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3413,"nodeType":"IfStatement","src":"1108:21:21","trueBody":{"id":3412,"nodeType":"Break","src":"1124:5:21"}}]},"condition":{"hexValue":"74727565","id":3400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3415,"nodeType":"WhileStatement","src":"864:280:21"},{"expression":{"id":3416,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"1164:6:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3379,"id":3417,"nodeType":"Return","src":"1157:13:21"}]}]},"documentation":{"id":3373,"nodeType":"StructuredDocumentation","src":"385:90:21","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3420,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:21","nodeType":"FunctionDefinition","parameters":{"id":3376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3375,"mutability":"mutable","name":"value","nameLocation":"506:5:21","nodeType":"VariableDeclaration","scope":3420,"src":"498:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:21"},"returnParameters":{"id":3379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3420,"src":"536:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3377,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:21"},"scope":3590,"src":"480:707:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3447,"nodeType":"Block","src":"1357:114:21","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"1398:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:21","trueExpression":{"hexValue":"2d","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":3441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"1455:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":3439,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"1429:21:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$5524_$","typeString":"type(library SignedMathUpgradeable)"}},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:21","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5523,"src":"1429:25:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3438,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[3420,3448],"referencedDeclaration":3420,"src":"1420:8:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3430,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:21","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:21","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3428,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:21","typeDescriptions":{}}},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3427,"id":3446,"nodeType":"Return","src":"1367:97:21"}]},"documentation":{"id":3421,"nodeType":"StructuredDocumentation","src":"1193:89:21","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":3448,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:21","nodeType":"FunctionDefinition","parameters":{"id":3424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3423,"mutability":"mutable","name":"value","nameLocation":"1312:5:21","nodeType":"VariableDeclaration","scope":3448,"src":"1305:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3422,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:21"},"returnParameters":{"id":3427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3448,"src":"1342:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3425,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:21"},"scope":3590,"src":"1287:184:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3467,"nodeType":"Block","src":"1650:111:21","statements":[{"id":3466,"nodeType":"UncheckedBlock","src":"1660:95:21","statements":[{"expression":{"arguments":[{"id":3457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"1703:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"1733:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3458,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5107,"src":"1710:15:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$5107_$","typeString":"type(library MathUpgradeable)"}},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:21","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":5067,"src":"1710:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3456,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3468,3544,3564],"referencedDeclaration":3544,"src":"1691:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3455,"id":3465,"nodeType":"Return","src":"1684:60:21"}]}]},"documentation":{"id":3449,"nodeType":"StructuredDocumentation","src":"1477:94:21","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3468,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:21","nodeType":"FunctionDefinition","parameters":{"id":3452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3451,"mutability":"mutable","name":"value","nameLocation":"1605:5:21","nodeType":"VariableDeclaration","scope":3468,"src":"1597:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3450,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:21"},"returnParameters":{"id":3455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3468,"src":"1635:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3453,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:21"},"scope":3590,"src":"1576:185:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3543,"nodeType":"Block","src":"1974:347:21","statements":[{"assignments":[3479],"declarations":[{"constant":false,"id":3479,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:21","nodeType":"VariableDeclaration","scope":3543,"src":"1984:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3478,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3488,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3483,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"2020:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3480,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:21"},{"expression":{"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3489,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2041:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3491,"indexExpression":{"hexValue":"30","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3494,"nodeType":"ExpressionStatement","src":"2041:15:21"},{"expression":{"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3495,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2066:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3497,"indexExpression":{"hexValue":"31","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3500,"nodeType":"ExpressionStatement","src":"2066:15:21"},{"body":{"id":3529,"nodeType":"Block","src":"2136:83:21","statements":[{"expression":{"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3515,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2150:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3517,"indexExpression":{"id":3516,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"2157:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3518,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"2162:8:21","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3522,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3519,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"2171:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:21","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3524,"nodeType":"ExpressionStatement","src":"2150:33:21"},{"expression":{"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"2197:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3528,"nodeType":"ExpressionStatement","src":"2197:11:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3509,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"2124:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3530,"initializationExpression":{"assignments":[3502],"declarations":[{"constant":false,"id":3502,"mutability":"mutable","name":"i","nameLocation":"2104:1:21","nodeType":"VariableDeclaration","scope":3530,"src":"2096:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3501,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3508,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3504,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"2112:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:21"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:21","subExpression":{"id":3512,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"2133:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3514,"nodeType":"ExpressionStatement","src":"2131:3:21"},"nodeType":"ForStatement","src":"2091:128:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"2236:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3531,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3537,"nodeType":"ExpressionStatement","src":"2228:55:21"},{"expression":{"arguments":[{"id":3540,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2307:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3538,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:21","typeDescriptions":{}}},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3477,"id":3542,"nodeType":"Return","src":"2293:21:21"}]},"documentation":{"id":3469,"nodeType":"StructuredDocumentation","src":"1767:112:21","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3544,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:21","nodeType":"FunctionDefinition","parameters":{"id":3474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3471,"mutability":"mutable","name":"value","nameLocation":"1913:5:21","nodeType":"VariableDeclaration","scope":3544,"src":"1905:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3470,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3473,"mutability":"mutable","name":"length","nameLocation":"1928:6:21","nodeType":"VariableDeclaration","scope":3544,"src":"1920:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3472,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:21"},"returnParameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3544,"src":"1959:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3475,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:21"},"scope":3590,"src":"1884:437:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3563,"nodeType":"Block","src":"2546:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3557,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"2591:4:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3555,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:21","typeDescriptions":{}}},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3553,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:21","typeDescriptions":{}}},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3560,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"2599:15:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3552,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3468,3544,3564],"referencedDeclaration":3544,"src":"2563:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3551,"id":3562,"nodeType":"Return","src":"2556:59:21"}]},"documentation":{"id":3545,"nodeType":"StructuredDocumentation","src":"2327:141:21","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3564,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:21","nodeType":"FunctionDefinition","parameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3547,"mutability":"mutable","name":"addr","nameLocation":"2502:4:21","nodeType":"VariableDeclaration","scope":3564,"src":"2494:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3546,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:21"},"returnParameters":{"id":3551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3564,"src":"2531:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3549,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:21"},"scope":3590,"src":"2473:149:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3588,"nodeType":"Block","src":"2777:66:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3577,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"2810:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3575,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:21","typeDescriptions":{}}},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3574,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3583,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"2833:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3581,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:21","typeDescriptions":{}}},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3580,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3573,"id":3587,"nodeType":"Return","src":"2787:49:21"}]},"documentation":{"id":3565,"nodeType":"StructuredDocumentation","src":"2628:66:21","text":" @dev Returns true if the two strings are equal."},"id":3589,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:21","nodeType":"FunctionDefinition","parameters":{"id":3570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3567,"mutability":"mutable","name":"a","nameLocation":"2728:1:21","nodeType":"VariableDeclaration","scope":3589,"src":"2714:15:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3566,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3569,"mutability":"mutable","name":"b","nameLocation":"2745:1:21","nodeType":"VariableDeclaration","scope":3589,"src":"2731:15:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3568,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:21"},"returnParameters":{"id":3573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3589,"src":"2771:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3571,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:21"},"scope":3590,"src":"2699:144:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3591,"src":"242:2603:21","usedErrors":[],"usedEvents":[]}],"src":"101:2745:21"},"id":21},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[3956],"MathUpgradeable":[5107],"SignedMathUpgradeable":[5524],"StringsUpgradeable":[3590]},"id":3957,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3592,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:22"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":3593,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3957,"sourceUnit":3591,"src":"137:35:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3594,"nodeType":"StructuredDocumentation","src":"174:205:22","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":3956,"linearizedBaseContracts":[3956],"name":"ECDSAUpgradeable","nameLocation":"388:16:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":3600,"members":[{"id":3595,"name":"NoError","nameLocation":"439:7:22","nodeType":"EnumValue","src":"439:7:22"},{"id":3596,"name":"InvalidSignature","nameLocation":"456:16:22","nodeType":"EnumValue","src":"456:16:22"},{"id":3597,"name":"InvalidSignatureLength","nameLocation":"482:22:22","nodeType":"EnumValue","src":"482:22:22"},{"id":3598,"name":"InvalidSignatureS","nameLocation":"514:17:22","nodeType":"EnumValue","src":"514:17:22"},{"id":3599,"name":"InvalidSignatureV","nameLocation":"541:17:22","nodeType":"EnumValue","src":"541:17:22"}],"name":"RecoverError","nameLocation":"416:12:22","nodeType":"EnumDefinition","src":"411:175:22"},{"body":{"id":3643,"nodeType":"Block","src":"646:457:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3606,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"660:5:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3607,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"669:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3600_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:22","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3595,"src":"669:20:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3612,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"756:5:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3613,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"765:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3600_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:22","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3596,"src":"765:29:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3621,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"865:5:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3622,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"874:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3600_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:22","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3597,"src":"874:35:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3630,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"987:5:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3631,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"996:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3600_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:22","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3598,"src":"996:30:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3639,"nodeType":"IfStatement","src":"983:114:22","trueBody":{"id":3638,"nodeType":"Block","src":"1028:69:22","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":3635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":3634,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3637,"nodeType":"ExpressionStatement","src":"1042:44:22"}]}},"id":3640,"nodeType":"IfStatement","src":"861:236:22","trueBody":{"id":3629,"nodeType":"Block","src":"911:66:22","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":3626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":3625,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3628,"nodeType":"ExpressionStatement","src":"925:41:22"}]}},"id":3641,"nodeType":"IfStatement","src":"752:345:22","trueBody":{"id":3620,"nodeType":"Block","src":"796:59:22","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":3616,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3619,"nodeType":"ExpressionStatement","src":"810:34:22"}]}},"id":3642,"nodeType":"IfStatement","src":"656:441:22","trueBody":{"id":3611,"nodeType":"Block","src":"691:55:22","statements":[{"functionReturnParameters":3605,"id":3610,"nodeType":"Return","src":"705:7:22"}]}}]},"id":3644,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:22","nodeType":"FunctionDefinition","parameters":{"id":3604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3603,"mutability":"mutable","name":"error","nameLocation":"626:5:22","nodeType":"VariableDeclaration","scope":3644,"src":"613:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3602,"nodeType":"UserDefinedTypeName","pathNode":{"id":3601,"name":"RecoverError","nameLocations":["613:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"613:12:22"},"referencedDeclaration":3600,"src":"613:12:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:22"},"returnParameters":{"id":3605,"nodeType":"ParameterList","parameters":[],"src":"646:0:22"},"scope":3956,"src":"592:511:22","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3689,"nodeType":"Block","src":"2271:626:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3657,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"2285:9:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:22","memberName":"length","nodeType":"MemberAccess","src":"2285:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:22","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3687,"nodeType":"Block","src":"2810:81:22","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3679,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:22","typeDescriptions":{}}},"id":3682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3683,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"2844:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3600_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:22","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3597,"src":"2844:35:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3685,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3656,"id":3686,"nodeType":"Return","src":"2824:56:22"}]},"id":3688,"nodeType":"IfStatement","src":"2281:610:22","trueBody":{"id":3678,"nodeType":"Block","src":"2309:495:22","statements":[{"assignments":[3662],"declarations":[{"constant":false,"id":3662,"mutability":"mutable","name":"r","nameLocation":"2331:1:22","nodeType":"VariableDeclaration","scope":3678,"src":"2323:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3661,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3663,"nodeType":"VariableDeclarationStatement","src":"2323:9:22"},{"assignments":[3665],"declarations":[{"constant":false,"id":3665,"mutability":"mutable","name":"s","nameLocation":"2354:1:22","nodeType":"VariableDeclaration","scope":3678,"src":"2346:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3666,"nodeType":"VariableDeclarationStatement","src":"2346:9:22"},{"assignments":[3668],"declarations":[{"constant":false,"id":3668,"mutability":"mutable","name":"v","nameLocation":"2375:1:22","nodeType":"VariableDeclaration","scope":3678,"src":"2369:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3667,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3669,"nodeType":"VariableDeclarationStatement","src":"2369:7:22"},{"AST":{"nativeSrc":"2577:171:22","nodeType":"YulBlock","src":"2577:171:22","statements":[{"nativeSrc":"2595:32:22","nodeType":"YulAssignment","src":"2595:32:22","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2610:9:22","nodeType":"YulIdentifier","src":"2610:9:22"},{"kind":"number","nativeSrc":"2621:4:22","nodeType":"YulLiteral","src":"2621:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2606:3:22","nodeType":"YulIdentifier","src":"2606:3:22"},"nativeSrc":"2606:20:22","nodeType":"YulFunctionCall","src":"2606:20:22"}],"functionName":{"name":"mload","nativeSrc":"2600:5:22","nodeType":"YulIdentifier","src":"2600:5:22"},"nativeSrc":"2600:27:22","nodeType":"YulFunctionCall","src":"2600:27:22"},"variableNames":[{"name":"r","nativeSrc":"2595:1:22","nodeType":"YulIdentifier","src":"2595:1:22"}]},{"nativeSrc":"2644:32:22","nodeType":"YulAssignment","src":"2644:32:22","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2659:9:22","nodeType":"YulIdentifier","src":"2659:9:22"},{"kind":"number","nativeSrc":"2670:4:22","nodeType":"YulLiteral","src":"2670:4:22","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2655:3:22","nodeType":"YulIdentifier","src":"2655:3:22"},"nativeSrc":"2655:20:22","nodeType":"YulFunctionCall","src":"2655:20:22"}],"functionName":{"name":"mload","nativeSrc":"2649:5:22","nodeType":"YulIdentifier","src":"2649:5:22"},"nativeSrc":"2649:27:22","nodeType":"YulFunctionCall","src":"2649:27:22"},"variableNames":[{"name":"s","nativeSrc":"2644:1:22","nodeType":"YulIdentifier","src":"2644:1:22"}]},{"nativeSrc":"2693:41:22","nodeType":"YulAssignment","src":"2693:41:22","value":{"arguments":[{"kind":"number","nativeSrc":"2703:1:22","nodeType":"YulLiteral","src":"2703:1:22","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2716:9:22","nodeType":"YulIdentifier","src":"2716:9:22"},{"kind":"number","nativeSrc":"2727:4:22","nodeType":"YulLiteral","src":"2727:4:22","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"2712:3:22","nodeType":"YulIdentifier","src":"2712:3:22"},"nativeSrc":"2712:20:22","nodeType":"YulFunctionCall","src":"2712:20:22"}],"functionName":{"name":"mload","nativeSrc":"2706:5:22","nodeType":"YulIdentifier","src":"2706:5:22"},"nativeSrc":"2706:27:22","nodeType":"YulFunctionCall","src":"2706:27:22"}],"functionName":{"name":"byte","nativeSrc":"2698:4:22","nodeType":"YulIdentifier","src":"2698:4:22"},"nativeSrc":"2698:36:22","nodeType":"YulFunctionCall","src":"2698:36:22"},"variableNames":[{"name":"v","nativeSrc":"2693:1:22","nodeType":"YulIdentifier","src":"2693:1:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3662,"isOffset":false,"isSlot":false,"src":"2595:1:22","valueSize":1},{"declaration":3665,"isOffset":false,"isSlot":false,"src":"2644:1:22","valueSize":1},{"declaration":3649,"isOffset":false,"isSlot":false,"src":"2610:9:22","valueSize":1},{"declaration":3649,"isOffset":false,"isSlot":false,"src":"2659:9:22","valueSize":1},{"declaration":3649,"isOffset":false,"isSlot":false,"src":"2716:9:22","valueSize":1},{"declaration":3668,"isOffset":false,"isSlot":false,"src":"2693:1:22","valueSize":1}],"id":3670,"nodeType":"InlineAssembly","src":"2568:180:22"},{"expression":{"arguments":[{"id":3672,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"2779:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3673,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"2785:1:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3674,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"2788:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3675,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"2791:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3671,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3690,3764,3858],"referencedDeclaration":3858,"src":"2768:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3656,"id":3677,"nodeType":"Return","src":"2761:32:22"}]}}]},"documentation":{"id":3645,"nodeType":"StructuredDocumentation","src":"1109:1053:22","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":3690,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:22","nodeType":"FunctionDefinition","parameters":{"id":3650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3647,"mutability":"mutable","name":"hash","nameLocation":"2195:4:22","nodeType":"VariableDeclaration","scope":3690,"src":"2187:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3649,"mutability":"mutable","name":"signature","nameLocation":"2214:9:22","nodeType":"VariableDeclaration","scope":3690,"src":"2201:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3648,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:22"},"returnParameters":{"id":3656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3690,"src":"2248:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3651,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3690,"src":"2257:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3654,"nodeType":"UserDefinedTypeName","pathNode":{"id":3653,"name":"RecoverError","nameLocations":["2257:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"2257:12:22"},"referencedDeclaration":3600,"src":"2257:12:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:22"},"scope":3956,"src":"2167:730:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3716,"nodeType":"Block","src":"3770:140:22","statements":[{"assignments":[3701,3704],"declarations":[{"constant":false,"id":3701,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:22","nodeType":"VariableDeclaration","scope":3716,"src":"3781:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3700,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3704,"mutability":"mutable","name":"error","nameLocation":"3813:5:22","nodeType":"VariableDeclaration","scope":3716,"src":"3800:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3703,"nodeType":"UserDefinedTypeName","pathNode":{"id":3702,"name":"RecoverError","nameLocations":["3800:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"3800:12:22"},"referencedDeclaration":3600,"src":"3800:12:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3709,"initialValue":{"arguments":[{"id":3706,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3833:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3707,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"3839:9:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3705,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3690,3764,3858],"referencedDeclaration":3690,"src":"3822:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:22"},{"expression":{"arguments":[{"id":3711,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"3871:5:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3710,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"3859:11:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3600_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3713,"nodeType":"ExpressionStatement","src":"3859:18:22"},{"expression":{"id":3714,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"3894:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3699,"id":3715,"nodeType":"Return","src":"3887:16:22"}]},"documentation":{"id":3691,"nodeType":"StructuredDocumentation","src":"2903:775:22","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":3717,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:22","nodeType":"FunctionDefinition","parameters":{"id":3696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3693,"mutability":"mutable","name":"hash","nameLocation":"3708:4:22","nodeType":"VariableDeclaration","scope":3717,"src":"3700:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3692,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3695,"mutability":"mutable","name":"signature","nameLocation":"3727:9:22","nodeType":"VariableDeclaration","scope":3717,"src":"3714:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3694,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:22"},"returnParameters":{"id":3699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3717,"src":"3761:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3697,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:22"},"scope":3956,"src":"3683:227:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3763,"nodeType":"Block","src":"4267:203:22","statements":[{"assignments":[3733],"declarations":[{"constant":false,"id":3733,"mutability":"mutable","name":"s","nameLocation":"4285:1:22","nodeType":"VariableDeclaration","scope":3763,"src":"4277:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3732,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3740,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3734,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"4289:2:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:22","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":3736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:22","typeDescriptions":{}}},"id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:22"},{"assignments":[3742],"declarations":[{"constant":false,"id":3742,"mutability":"mutable","name":"v","nameLocation":"4385:1:22","nodeType":"VariableDeclaration","scope":3763,"src":"4379:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3741,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3755,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3747,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"4404:2:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3745,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:22","typeDescriptions":{}}},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:22","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3751,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":3752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:22","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3743,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:22","typeDescriptions":{}}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:22"},{"expression":{"arguments":[{"id":3757,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"4449:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3758,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"4455:1:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3759,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4458:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3760,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"4461:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3756,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3690,3764,3858],"referencedDeclaration":3858,"src":"4438:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3731,"id":3762,"nodeType":"Return","src":"4431:32:22"}]},"documentation":{"id":3718,"nodeType":"StructuredDocumentation","src":"3916:243:22","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":3764,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:22","nodeType":"FunctionDefinition","parameters":{"id":3725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3720,"mutability":"mutable","name":"hash","nameLocation":"4192:4:22","nodeType":"VariableDeclaration","scope":3764,"src":"4184:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3722,"mutability":"mutable","name":"r","nameLocation":"4206:1:22","nodeType":"VariableDeclaration","scope":3764,"src":"4198:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3724,"mutability":"mutable","name":"vs","nameLocation":"4217:2:22","nodeType":"VariableDeclaration","scope":3764,"src":"4209:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3723,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:22"},"returnParameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3764,"src":"4244:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3726,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3764,"src":"4253:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3729,"nodeType":"UserDefinedTypeName","pathNode":{"id":3728,"name":"RecoverError","nameLocations":["4253:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"4253:12:22"},"referencedDeclaration":3600,"src":"4253:12:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:22"},"scope":3956,"src":"4164:306:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3793,"nodeType":"Block","src":"4721:136:22","statements":[{"assignments":[3777,3780],"declarations":[{"constant":false,"id":3777,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:22","nodeType":"VariableDeclaration","scope":3793,"src":"4732:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3776,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3780,"mutability":"mutable","name":"error","nameLocation":"4764:5:22","nodeType":"VariableDeclaration","scope":3793,"src":"4751:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3779,"nodeType":"UserDefinedTypeName","pathNode":{"id":3778,"name":"RecoverError","nameLocations":["4751:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"4751:12:22"},"referencedDeclaration":3600,"src":"4751:12:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3786,"initialValue":{"arguments":[{"id":3782,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"4784:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3783,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3769,"src":"4790:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3784,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"4793:2:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3781,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3690,3764,3858],"referencedDeclaration":3764,"src":"4773:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:22"},{"expression":{"arguments":[{"id":3788,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"4818:5:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3787,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"4806:11:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3600_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3790,"nodeType":"ExpressionStatement","src":"4806:18:22"},{"expression":{"id":3791,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"4841:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3775,"id":3792,"nodeType":"Return","src":"4834:16:22"}]},"documentation":{"id":3765,"nodeType":"StructuredDocumentation","src":"4476:154:22","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":3794,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:22","nodeType":"FunctionDefinition","parameters":{"id":3772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3767,"mutability":"mutable","name":"hash","nameLocation":"4660:4:22","nodeType":"VariableDeclaration","scope":3794,"src":"4652:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3766,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3769,"mutability":"mutable","name":"r","nameLocation":"4674:1:22","nodeType":"VariableDeclaration","scope":3794,"src":"4666:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3771,"mutability":"mutable","name":"vs","nameLocation":"4685:2:22","nodeType":"VariableDeclaration","scope":3794,"src":"4677:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:22"},"returnParameters":{"id":3775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3794,"src":"4712:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3773,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:22"},"scope":3956,"src":"4635:222:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3857,"nodeType":"Block","src":"5142:1345:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3813,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3803,"src":"6038:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3811,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:22","typeDescriptions":{}}},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":3815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:22","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3826,"nodeType":"IfStatement","src":"6026:161:22","trueBody":{"id":3825,"nodeType":"Block","src":"6111:76:22","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3817,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:22","typeDescriptions":{}}},"id":3820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3821,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"6145:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3600_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:22","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3598,"src":"6145:30:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3823,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3810,"id":3824,"nodeType":"Return","src":"6125:51:22"}]}},{"assignments":[3828],"declarations":[{"constant":false,"id":3828,"mutability":"mutable","name":"signer","nameLocation":"6289:6:22","nodeType":"VariableDeclaration","scope":3857,"src":"6281:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3827,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3835,"initialValue":{"arguments":[{"id":3830,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"6308:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3831,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3799,"src":"6314:1:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3832,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3801,"src":"6317:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3833,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3803,"src":"6320:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3829,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:22","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:22"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3836,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"6336:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3837,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:22","typeDescriptions":{}}},"id":3840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3851,"nodeType":"IfStatement","src":"6332:101:22","trueBody":{"id":3850,"nodeType":"Block","src":"6358:75:22","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3842,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:22","typeDescriptions":{}}},"id":3845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3846,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"6392:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3600_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:22","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3596,"src":"6392:29:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3848,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3810,"id":3849,"nodeType":"Return","src":"6372:50:22"}]}},{"expression":{"components":[{"id":3852,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"6451:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3853,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"6459:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3600_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:22","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3595,"src":"6459:20:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3855,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3810,"id":3856,"nodeType":"Return","src":"6443:37:22"}]},"documentation":{"id":3795,"nodeType":"StructuredDocumentation","src":"4863:163:22","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":3858,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:22","nodeType":"FunctionDefinition","parameters":{"id":3804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3797,"mutability":"mutable","name":"hash","nameLocation":"5059:4:22","nodeType":"VariableDeclaration","scope":3858,"src":"5051:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3796,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3799,"mutability":"mutable","name":"v","nameLocation":"5071:1:22","nodeType":"VariableDeclaration","scope":3858,"src":"5065:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3798,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3801,"mutability":"mutable","name":"r","nameLocation":"5082:1:22","nodeType":"VariableDeclaration","scope":3858,"src":"5074:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3800,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3803,"mutability":"mutable","name":"s","nameLocation":"5093:1:22","nodeType":"VariableDeclaration","scope":3858,"src":"5085:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3802,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:22"},"returnParameters":{"id":3810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3806,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3858,"src":"5119:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3805,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3858,"src":"5128:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3808,"nodeType":"UserDefinedTypeName","pathNode":{"id":3807,"name":"RecoverError","nameLocations":["5128:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"5128:12:22"},"referencedDeclaration":3600,"src":"5128:12:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:22"},"scope":3956,"src":"5031:1456:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3890,"nodeType":"Block","src":"6714:138:22","statements":[{"assignments":[3873,3876],"declarations":[{"constant":false,"id":3873,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:22","nodeType":"VariableDeclaration","scope":3890,"src":"6725:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3872,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3876,"mutability":"mutable","name":"error","nameLocation":"6757:5:22","nodeType":"VariableDeclaration","scope":3890,"src":"6744:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3875,"nodeType":"UserDefinedTypeName","pathNode":{"id":3874,"name":"RecoverError","nameLocations":["6744:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"6744:12:22"},"referencedDeclaration":3600,"src":"6744:12:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3883,"initialValue":{"arguments":[{"id":3878,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"6777:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3879,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"6783:1:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3880,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"6786:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3881,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"6789:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3877,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3690,3764,3858],"referencedDeclaration":3858,"src":"6766:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3600_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:22"},{"expression":{"arguments":[{"id":3885,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"6813:5:22","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3600","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3884,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"6801:11:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3600_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3887,"nodeType":"ExpressionStatement","src":"6801:18:22"},{"expression":{"id":3888,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"6836:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3871,"id":3889,"nodeType":"Return","src":"6829:16:22"}]},"documentation":{"id":3859,"nodeType":"StructuredDocumentation","src":"6493:122:22","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3891,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:22","nodeType":"FunctionDefinition","parameters":{"id":3868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3861,"mutability":"mutable","name":"hash","nameLocation":"6645:4:22","nodeType":"VariableDeclaration","scope":3891,"src":"6637:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3860,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3863,"mutability":"mutable","name":"v","nameLocation":"6657:1:22","nodeType":"VariableDeclaration","scope":3891,"src":"6651:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3862,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3865,"mutability":"mutable","name":"r","nameLocation":"6668:1:22","nodeType":"VariableDeclaration","scope":3891,"src":"6660:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3864,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3867,"mutability":"mutable","name":"s","nameLocation":"6679:1:22","nodeType":"VariableDeclaration","scope":3891,"src":"6671:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3866,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:22"},"returnParameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3891,"src":"6705:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3869,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:22"},"scope":3956,"src":"6620:232:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3900,"nodeType":"Block","src":"7228:310:22","statements":[{"AST":{"nativeSrc":"7384:148:22","nodeType":"YulBlock","src":"7384:148:22","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7405:4:22","nodeType":"YulLiteral","src":"7405:4:22","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"7411:34:22","nodeType":"YulLiteral","src":"7411:34:22","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"7398:6:22","nodeType":"YulIdentifier","src":"7398:6:22"},"nativeSrc":"7398:48:22","nodeType":"YulFunctionCall","src":"7398:48:22"},"nativeSrc":"7398:48:22","nodeType":"YulExpressionStatement","src":"7398:48:22"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7466:4:22","nodeType":"YulLiteral","src":"7466:4:22","type":"","value":"0x1c"},{"name":"hash","nativeSrc":"7472:4:22","nodeType":"YulIdentifier","src":"7472:4:22"}],"functionName":{"name":"mstore","nativeSrc":"7459:6:22","nodeType":"YulIdentifier","src":"7459:6:22"},"nativeSrc":"7459:18:22","nodeType":"YulFunctionCall","src":"7459:18:22"},"nativeSrc":"7459:18:22","nodeType":"YulExpressionStatement","src":"7459:18:22"},{"nativeSrc":"7490:32:22","nodeType":"YulAssignment","src":"7490:32:22","value":{"arguments":[{"kind":"number","nativeSrc":"7511:4:22","nodeType":"YulLiteral","src":"7511:4:22","type":"","value":"0x00"},{"kind":"number","nativeSrc":"7517:4:22","nodeType":"YulLiteral","src":"7517:4:22","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"7501:9:22","nodeType":"YulIdentifier","src":"7501:9:22"},"nativeSrc":"7501:21:22","nodeType":"YulFunctionCall","src":"7501:21:22"},"variableNames":[{"name":"message","nativeSrc":"7490:7:22","nodeType":"YulIdentifier","src":"7490:7:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3894,"isOffset":false,"isSlot":false,"src":"7472:4:22","valueSize":1},{"declaration":3897,"isOffset":false,"isSlot":false,"src":"7490:7:22","valueSize":1}],"id":3899,"nodeType":"InlineAssembly","src":"7375:157:22"}]},"documentation":{"id":3892,"nodeType":"StructuredDocumentation","src":"6858:279:22","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3901,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:22","nodeType":"FunctionDefinition","parameters":{"id":3895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3894,"mutability":"mutable","name":"hash","nameLocation":"7182:4:22","nodeType":"VariableDeclaration","scope":3901,"src":"7174:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3893,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:22"},"returnParameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3897,"mutability":"mutable","name":"message","nameLocation":"7219:7:22","nodeType":"VariableDeclaration","scope":3901,"src":"7211:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3896,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:22"},"scope":3956,"src":"7142:396:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3922,"nodeType":"Block","src":"7903:127:22","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":3915,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"8009:1:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:22","memberName":"length","nodeType":"MemberAccess","src":"8009:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3913,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"7981:18:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$3590_$","typeString":"type(library StringsUpgradeable)"}},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:22","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3420,"src":"7981:27:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3918,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"8020:1:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3910,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:22","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:22","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3909,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3908,"id":3921,"nodeType":"Return","src":"7913:110:22"}]},"documentation":{"id":3902,"nodeType":"StructuredDocumentation","src":"7544:274:22","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3923,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:22","nodeType":"FunctionDefinition","parameters":{"id":3905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"s","nameLocation":"7868:1:22","nodeType":"VariableDeclaration","scope":3923,"src":"7855:14:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3903,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:22"},"returnParameters":{"id":3908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3923,"src":"7894:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3906,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:22"},"scope":3956,"src":"7823:207:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3934,"nodeType":"Block","src":"8476:290:22","statements":[{"AST":{"nativeSrc":"8538:222:22","nodeType":"YulBlock","src":"8538:222:22","statements":[{"nativeSrc":"8552:22:22","nodeType":"YulVariableDeclaration","src":"8552:22:22","value":{"arguments":[{"kind":"number","nativeSrc":"8569:4:22","nodeType":"YulLiteral","src":"8569:4:22","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"8563:5:22","nodeType":"YulIdentifier","src":"8563:5:22"},"nativeSrc":"8563:11:22","nodeType":"YulFunctionCall","src":"8563:11:22"},"variables":[{"name":"ptr","nativeSrc":"8556:3:22","nodeType":"YulTypedName","src":"8556:3:22","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"8594:3:22","nodeType":"YulIdentifier","src":"8594:3:22"},{"hexValue":"1901","kind":"string","nativeSrc":"8599:10:22","nodeType":"YulLiteral","src":"8599:10:22","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"8587:6:22","nodeType":"YulIdentifier","src":"8587:6:22"},"nativeSrc":"8587:23:22","nodeType":"YulFunctionCall","src":"8587:23:22"},"nativeSrc":"8587:23:22","nodeType":"YulExpressionStatement","src":"8587:23:22"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"8634:3:22","nodeType":"YulIdentifier","src":"8634:3:22"},{"kind":"number","nativeSrc":"8639:4:22","nodeType":"YulLiteral","src":"8639:4:22","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"8630:3:22","nodeType":"YulIdentifier","src":"8630:3:22"},"nativeSrc":"8630:14:22","nodeType":"YulFunctionCall","src":"8630:14:22"},{"name":"domainSeparator","nativeSrc":"8646:15:22","nodeType":"YulIdentifier","src":"8646:15:22"}],"functionName":{"name":"mstore","nativeSrc":"8623:6:22","nodeType":"YulIdentifier","src":"8623:6:22"},"nativeSrc":"8623:39:22","nodeType":"YulFunctionCall","src":"8623:39:22"},"nativeSrc":"8623:39:22","nodeType":"YulExpressionStatement","src":"8623:39:22"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"8686:3:22","nodeType":"YulIdentifier","src":"8686:3:22"},{"kind":"number","nativeSrc":"8691:4:22","nodeType":"YulLiteral","src":"8691:4:22","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"8682:3:22","nodeType":"YulIdentifier","src":"8682:3:22"},"nativeSrc":"8682:14:22","nodeType":"YulFunctionCall","src":"8682:14:22"},{"name":"structHash","nativeSrc":"8698:10:22","nodeType":"YulIdentifier","src":"8698:10:22"}],"functionName":{"name":"mstore","nativeSrc":"8675:6:22","nodeType":"YulIdentifier","src":"8675:6:22"},"nativeSrc":"8675:34:22","nodeType":"YulFunctionCall","src":"8675:34:22"},"nativeSrc":"8675:34:22","nodeType":"YulExpressionStatement","src":"8675:34:22"},{"nativeSrc":"8722:28:22","nodeType":"YulAssignment","src":"8722:28:22","value":{"arguments":[{"name":"ptr","nativeSrc":"8740:3:22","nodeType":"YulIdentifier","src":"8740:3:22"},{"kind":"number","nativeSrc":"8745:4:22","nodeType":"YulLiteral","src":"8745:4:22","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"8730:9:22","nodeType":"YulIdentifier","src":"8730:9:22"},"nativeSrc":"8730:20:22","nodeType":"YulFunctionCall","src":"8730:20:22"},"variableNames":[{"name":"data","nativeSrc":"8722:4:22","nodeType":"YulIdentifier","src":"8722:4:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3931,"isOffset":false,"isSlot":false,"src":"8722:4:22","valueSize":1},{"declaration":3926,"isOffset":false,"isSlot":false,"src":"8646:15:22","valueSize":1},{"declaration":3928,"isOffset":false,"isSlot":false,"src":"8698:10:22","valueSize":1}],"id":3933,"nodeType":"InlineAssembly","src":"8529:231:22"}]},"documentation":{"id":3924,"nodeType":"StructuredDocumentation","src":"8036:328:22","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":3935,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:22","nodeType":"FunctionDefinition","parameters":{"id":3929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3926,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:22","nodeType":"VariableDeclaration","scope":3935,"src":"8394:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3925,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3928,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:22","nodeType":"VariableDeclaration","scope":3935,"src":"8419:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3927,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:22"},"returnParameters":{"id":3932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3931,"mutability":"mutable","name":"data","nameLocation":"8470:4:22","nodeType":"VariableDeclaration","scope":3935,"src":"8462:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3930,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:22"},"scope":3956,"src":"8369:397:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3954,"nodeType":"Block","src":"9081:80:22","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":3948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":3949,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"9137:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3950,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"9148:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3946,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:22","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:22","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3945,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3944,"id":3953,"nodeType":"Return","src":"9091:63:22"}]},"documentation":{"id":3936,"nodeType":"StructuredDocumentation","src":"8772:193:22","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":3955,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:22","nodeType":"FunctionDefinition","parameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3938,"mutability":"mutable","name":"validator","nameLocation":"9019:9:22","nodeType":"VariableDeclaration","scope":3955,"src":"9011:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3937,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3940,"mutability":"mutable","name":"data","nameLocation":"9043:4:22","nodeType":"VariableDeclaration","scope":3955,"src":"9030:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3939,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:22"},"returnParameters":{"id":3944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3955,"src":"9072:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3942,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:22"},"scope":3956,"src":"8970:191:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3957,"src":"380:8783:22","usedErrors":[],"usedEvents":[]}],"src":"112:9052:22"},"id":22},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[3956],"EIP712Upgradeable":[4241],"IERC5267Upgradeable":[679],"Initializable":[1193],"MathUpgradeable":[5107],"SignedMathUpgradeable":[5524],"StringsUpgradeable":[3590]},"id":4242,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3958,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"113:23:23"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"./ECDSAUpgradeable.sol","id":3959,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4242,"sourceUnit":3957,"src":"138:32:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol","file":"../../interfaces/IERC5267Upgradeable.sol","id":3960,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4242,"sourceUnit":680,"src":"171:50:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":3962,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4242,"sourceUnit":1194,"src":"222:66:23","symbolAliases":[{"foreign":{"id":3961,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"230:13:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3964,"name":"Initializable","nameLocations":["1847:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"1847:13:23"},"id":3965,"nodeType":"InheritanceSpecifier","src":"1847:13:23"},{"baseName":{"id":3966,"name":"IERC5267Upgradeable","nameLocations":["1862:19:23"],"nodeType":"IdentifierPath","referencedDeclaration":679,"src":"1862:19:23"},"id":3967,"nodeType":"InheritanceSpecifier","src":"1862:19:23"}],"canonicalName":"EIP712Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3963,"nodeType":"StructuredDocumentation","src":"290:1517:23","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n _Available since v3.4._\n @custom:storage-size 52"},"fullyImplemented":true,"id":4241,"linearizedBaseContracts":[4241,679,1193],"name":"EIP712Upgradeable","nameLocation":"1826:17:23","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3972,"mutability":"constant","name":"_TYPE_HASH","nameLocation":"1913:10:23","nodeType":"VariableDeclaration","scope":4241,"src":"1888:141:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3968,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1888:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":3970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1944:84:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":3969,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1934:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1934:95:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":3973,"nodeType":"StructuredDocumentation","src":"2036:40:23","text":"@custom:oz-renamed-from _HASHED_NAME"},"id":3975,"mutability":"mutable","name":"_hashedName","nameLocation":"2097:11:23","nodeType":"VariableDeclaration","scope":4241,"src":"2081:27:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3974,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2081:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":3976,"nodeType":"StructuredDocumentation","src":"2114:43:23","text":"@custom:oz-renamed-from _HASHED_VERSION"},"id":3978,"mutability":"mutable","name":"_hashedVersion","nameLocation":"2178:14:23","nodeType":"VariableDeclaration","scope":4241,"src":"2162:30:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3977,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2162:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3980,"mutability":"mutable","name":"_name","nameLocation":"2214:5:23","nodeType":"VariableDeclaration","scope":4241,"src":"2199:20:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3979,"name":"string","nodeType":"ElementaryTypeName","src":"2199:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":3982,"mutability":"mutable","name":"_version","nameLocation":"2240:8:23","nodeType":"VariableDeclaration","scope":4241,"src":"2225:23:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3981,"name":"string","nodeType":"ElementaryTypeName","src":"2225:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":3997,"nodeType":"Block","src":"2911:55:23","statements":[{"expression":{"arguments":[{"id":3993,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"2945:4:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3994,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"2951:7:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3992,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"2921:23:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2921:38:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3996,"nodeType":"ExpressionStatement","src":"2921:38:23"}]},"documentation":{"id":3983,"nodeType":"StructuredDocumentation","src":"2255:559:23","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":3998,"implemented":true,"kind":"function","modifiers":[{"id":3990,"kind":"modifierInvocation","modifierName":{"id":3989,"name":"onlyInitializing","nameLocations":["2894:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"2894:16:23"},"nodeType":"ModifierInvocation","src":"2894:16:23"}],"name":"__EIP712_init","nameLocation":"2828:13:23","nodeType":"FunctionDefinition","parameters":{"id":3988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3985,"mutability":"mutable","name":"name","nameLocation":"2856:4:23","nodeType":"VariableDeclaration","scope":3998,"src":"2842:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3984,"name":"string","nodeType":"ElementaryTypeName","src":"2842:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3987,"mutability":"mutable","name":"version","nameLocation":"2876:7:23","nodeType":"VariableDeclaration","scope":3998,"src":"2862:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3986,"name":"string","nodeType":"ElementaryTypeName","src":"2862:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2841:43:23"},"returnParameters":{"id":3991,"nodeType":"ParameterList","parameters":[],"src":"2911:0:23"},"scope":4241,"src":"2819:147:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4023,"nodeType":"Block","src":"3074:165:23","statements":[{"expression":{"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4007,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"3084:5:23","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4008,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"3092:4:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3084:12:23","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4010,"nodeType":"ExpressionStatement","src":"3084:12:23"},{"expression":{"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4011,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"3106:8:23","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4012,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"3117:7:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3106:18:23","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4014,"nodeType":"ExpressionStatement","src":"3106:18:23"},{"expression":{"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4015,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"3189:11:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3203:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3189:15:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4018,"nodeType":"ExpressionStatement","src":"3189:15:23"},{"expression":{"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4019,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3978,"src":"3214:14:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3231:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3214:18:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4022,"nodeType":"ExpressionStatement","src":"3214:18:23"}]},"id":4024,"implemented":true,"kind":"function","modifiers":[{"id":4005,"kind":"modifierInvocation","modifierName":{"id":4004,"name":"onlyInitializing","nameLocations":["3057:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":1138,"src":"3057:16:23"},"nodeType":"ModifierInvocation","src":"3057:16:23"}],"name":"__EIP712_init_unchained","nameLocation":"2981:23:23","nodeType":"FunctionDefinition","parameters":{"id":4003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4000,"mutability":"mutable","name":"name","nameLocation":"3019:4:23","nodeType":"VariableDeclaration","scope":4024,"src":"3005:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3999,"name":"string","nodeType":"ElementaryTypeName","src":"3005:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4002,"mutability":"mutable","name":"version","nameLocation":"3039:7:23","nodeType":"VariableDeclaration","scope":4024,"src":"3025:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4001,"name":"string","nodeType":"ElementaryTypeName","src":"3025:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3004:43:23"},"returnParameters":{"id":4006,"nodeType":"ParameterList","parameters":[],"src":"3074:0:23"},"scope":4241,"src":"2972:267:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4033,"nodeType":"Block","src":"3387:47:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4030,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"3404:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3404:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4029,"id":4032,"nodeType":"Return","src":"3397:30:23"}]},"documentation":{"id":4025,"nodeType":"StructuredDocumentation","src":"3245:75:23","text":" @dev Returns the domain separator for the current chain."},"id":4034,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3334:18:23","nodeType":"FunctionDefinition","parameters":{"id":4026,"nodeType":"ParameterList","parameters":[],"src":"3352:2:23"},"returnParameters":{"id":4029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4034,"src":"3378:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3378:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3377:9:23"},"scope":4241,"src":"3325:109:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4056,"nodeType":"Block","src":"3504:128:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":4042,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"3542:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4043,"name":"_EIP712NameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"3554:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3554:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4045,"name":"_EIP712VersionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"3573:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3573:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4047,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3595:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3601:7:23","memberName":"chainid","nodeType":"MemberAccess","src":"3595:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4051,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3618:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$4241","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$4241","typeString":"contract EIP712Upgradeable"}],"id":4050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3610:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4049,"name":"address","nodeType":"ElementaryTypeName","src":"3610:7:23","typeDescriptions":{}}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3610:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4040,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3531:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3535:6:23","memberName":"encode","nodeType":"MemberAccess","src":"3531:10:23","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3531:93:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4039,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3521:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3521:104:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4038,"id":4055,"nodeType":"Return","src":"3514:111:23"}]},"id":4057,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3449:21:23","nodeType":"FunctionDefinition","parameters":{"id":4035,"nodeType":"ParameterList","parameters":[],"src":"3470:2:23"},"returnParameters":{"id":4038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4057,"src":"3495:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3495:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3494:9:23"},"scope":4241,"src":"3440:192:23","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4072,"nodeType":"Block","src":"4343:90:23","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4067,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"4393:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4393:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4069,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"4415:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4065,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"4360:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3956_$","typeString":"type(library ECDSAUpgradeable)"}},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4377:15:23","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":3935,"src":"4360:32:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4360:66:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4064,"id":4071,"nodeType":"Return","src":"4353:73:23"}]},"documentation":{"id":4058,"nodeType":"StructuredDocumentation","src":"3638:614:23","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":4073,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4266:16:23","nodeType":"FunctionDefinition","parameters":{"id":4061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4060,"mutability":"mutable","name":"structHash","nameLocation":"4291:10:23","nodeType":"VariableDeclaration","scope":4073,"src":"4283:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4059,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4283:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4282:20:23"},"returnParameters":{"id":4064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4073,"src":"4334:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4334:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4333:9:23"},"scope":4241,"src":"4257:176:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[678],"body":{"id":4126,"nodeType":"Block","src":"4866:516:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4094,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"5087:11:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5102:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5087:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4097,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3978,"src":"5107:14:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5125:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5107:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5087:39:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4549503731323a20556e696e697469616c697a6564","id":4101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5128:23:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade","typeString":"literal_string \"EIP712: Uninitialized\""},"value":"EIP712: Uninitialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade","typeString":"literal_string \"EIP712: Uninitialized\""}],"id":4093,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5079:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5079:73:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4103,"nodeType":"ExpressionStatement","src":"5079:73:23"},{"expression":{"components":[{"hexValue":"0f","id":4104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5184:7:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c","typeString":"literal_string hex\"0f\""},"value":"\u000f"},{"arguments":[],"expression":{"argumentTypes":[],"id":4105,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"5214:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5214:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4107,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"5241:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5241:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4109,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5271:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5277:7:23","memberName":"chainid","nodeType":"MemberAccess","src":"5271:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4113,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5306:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$4241","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$4241","typeString":"contract EIP712Upgradeable"}],"id":4112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5298:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4111,"name":"address","nodeType":"ElementaryTypeName","src":"5298:7:23","typeDescriptions":{}}},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5298:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5333:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5325:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5325:7:23","typeDescriptions":{}}},"id":4118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5325:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":4122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5363:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5349:13:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4119,"name":"uint256","nodeType":"ElementaryTypeName","src":"5353:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4120,"nodeType":"ArrayTypeName","src":"5353:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5349:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":4124,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5170:205:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"}},"functionReturnParameters":4092,"id":4125,"nodeType":"Return","src":"5163:212:23"}]},"documentation":{"id":4074,"nodeType":"StructuredDocumentation","src":"4439:77:23","text":" @dev See {EIP-5267}.\n _Available since v4.9._"},"functionSelector":"84b0196e","id":4127,"implemented":true,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"4530:12:23","nodeType":"FunctionDefinition","overrides":{"id":4076,"nodeType":"OverrideSpecifier","overrides":[],"src":"4597:8:23"},"parameters":{"id":4075,"nodeType":"ParameterList","parameters":[],"src":"4542:2:23"},"returnParameters":{"id":4092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4078,"mutability":"mutable","name":"fields","nameLocation":"4643:6:23","nodeType":"VariableDeclaration","scope":4127,"src":"4636:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":4077,"name":"bytes1","nodeType":"ElementaryTypeName","src":"4636:6:23","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":4080,"mutability":"mutable","name":"name","nameLocation":"4677:4:23","nodeType":"VariableDeclaration","scope":4127,"src":"4663:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4079,"name":"string","nodeType":"ElementaryTypeName","src":"4663:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4082,"mutability":"mutable","name":"version","nameLocation":"4709:7:23","nodeType":"VariableDeclaration","scope":4127,"src":"4695:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4081,"name":"string","nodeType":"ElementaryTypeName","src":"4695:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4084,"mutability":"mutable","name":"chainId","nameLocation":"4738:7:23","nodeType":"VariableDeclaration","scope":4127,"src":"4730:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4083,"name":"uint256","nodeType":"ElementaryTypeName","src":"4730:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4086,"mutability":"mutable","name":"verifyingContract","nameLocation":"4767:17:23","nodeType":"VariableDeclaration","scope":4127,"src":"4759:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4085,"name":"address","nodeType":"ElementaryTypeName","src":"4759:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4088,"mutability":"mutable","name":"salt","nameLocation":"4806:4:23","nodeType":"VariableDeclaration","scope":4127,"src":"4798:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4087,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4798:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4091,"mutability":"mutable","name":"extensions","nameLocation":"4841:10:23","nodeType":"VariableDeclaration","scope":4127,"src":"4824:27:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4089,"name":"uint256","nodeType":"ElementaryTypeName","src":"4824:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4090,"nodeType":"ArrayTypeName","src":"4824:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4622:239:23"},"scope":4241,"src":"4521:861:23","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4135,"nodeType":"Block","src":"5675:29:23","statements":[{"expression":{"id":4133,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"5692:5:23","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4132,"id":4134,"nodeType":"Return","src":"5685:12:23"}]},"documentation":{"id":4128,"nodeType":"StructuredDocumentation","src":"5388:213:23","text":" @dev The name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":4136,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Name","nameLocation":"5615:11:23","nodeType":"FunctionDefinition","parameters":{"id":4129,"nodeType":"ParameterList","parameters":[],"src":"5626:2:23"},"returnParameters":{"id":4132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4136,"src":"5660:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4130,"name":"string","nodeType":"ElementaryTypeName","src":"5660:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5659:15:23"},"scope":4241,"src":"5606:98:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4144,"nodeType":"Block","src":"6003:32:23","statements":[{"expression":{"id":4142,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"6020:8:23","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4141,"id":4143,"nodeType":"Return","src":"6013:15:23"}]},"documentation":{"id":4137,"nodeType":"StructuredDocumentation","src":"5710:216:23","text":" @dev The version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":4145,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Version","nameLocation":"5940:14:23","nodeType":"FunctionDefinition","parameters":{"id":4138,"nodeType":"ParameterList","parameters":[],"src":"5954:2:23"},"returnParameters":{"id":4141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4145,"src":"5988:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4139,"name":"string","nodeType":"ElementaryTypeName","src":"5988:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5987:15:23"},"scope":4241,"src":"5931:104:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4189,"nodeType":"Block","src":"6309:571:23","statements":[{"assignments":[4152],"declarations":[{"constant":false,"id":4152,"mutability":"mutable","name":"name","nameLocation":"6333:4:23","nodeType":"VariableDeclaration","scope":4189,"src":"6319:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4151,"name":"string","nodeType":"ElementaryTypeName","src":"6319:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4155,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4153,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"6340:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6340:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"6319:34:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4158,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"6373:4:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6367:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4156,"name":"bytes","nodeType":"ElementaryTypeName","src":"6367:5:23","typeDescriptions":{}}},"id":4159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6367:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6379:6:23","memberName":"length","nodeType":"MemberAccess","src":"6367:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6367:22:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4187,"nodeType":"Block","src":"6451:423:23","statements":[{"assignments":[4172],"declarations":[{"constant":false,"id":4172,"mutability":"mutable","name":"hashedName","nameLocation":"6696:10:23","nodeType":"VariableDeclaration","scope":4187,"src":"6688:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6688:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4174,"initialValue":{"id":4173,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"6709:11:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6688:32:23"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4175,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4172,"src":"6738:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6752:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6738:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4185,"nodeType":"Block","src":"6811:53:23","statements":[{"expression":{"arguments":[{"hexValue":"","id":4182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6846:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4181,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6836:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6836:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4150,"id":4184,"nodeType":"Return","src":"6829:20:23"}]},"id":4186,"nodeType":"IfStatement","src":"6734:130:23","trueBody":{"id":4180,"nodeType":"Block","src":"6755:50:23","statements":[{"expression":{"id":4178,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4172,"src":"6780:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4150,"id":4179,"nodeType":"Return","src":"6773:17:23"}]}}]},"id":4188,"nodeType":"IfStatement","src":"6363:511:23","trueBody":{"id":4170,"nodeType":"Block","src":"6391:54:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":4166,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"6428:4:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6422:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4164,"name":"bytes","nodeType":"ElementaryTypeName","src":"6422:5:23","typeDescriptions":{}}},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6422:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6412:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6412:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4150,"id":4169,"nodeType":"Return","src":"6405:29:23"}]}}]},"documentation":{"id":4146,"nodeType":"StructuredDocumentation","src":"6041:204:23","text":" @dev The hash of the name parameter for the EIP712 domain.\n NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead."},"id":4190,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712NameHash","nameLocation":"6259:15:23","nodeType":"FunctionDefinition","parameters":{"id":4147,"nodeType":"ParameterList","parameters":[],"src":"6274:2:23"},"returnParameters":{"id":4150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4190,"src":"6300:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6300:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6299:9:23"},"scope":4241,"src":"6250:630:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4234,"nodeType":"Block","src":"7163:604:23","statements":[{"assignments":[4197],"declarations":[{"constant":false,"id":4197,"mutability":"mutable","name":"version","nameLocation":"7187:7:23","nodeType":"VariableDeclaration","scope":4234,"src":"7173:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4196,"name":"string","nodeType":"ElementaryTypeName","src":"7173:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4200,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4198,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"7197:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7197:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"7173:40:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4203,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"7233:7:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7227:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4201,"name":"bytes","nodeType":"ElementaryTypeName","src":"7227:5:23","typeDescriptions":{}}},"id":4204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7227:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7242:6:23","memberName":"length","nodeType":"MemberAccess","src":"7227:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7227:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4232,"nodeType":"Block","src":"7317:444:23","statements":[{"assignments":[4217],"declarations":[{"constant":false,"id":4217,"mutability":"mutable","name":"hashedVersion","nameLocation":"7571:13:23","nodeType":"VariableDeclaration","scope":4232,"src":"7563:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4216,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7563:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4219,"initialValue":{"id":4218,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3978,"src":"7587:14:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7563:38:23"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4220,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4217,"src":"7619:13:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7636:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7619:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4230,"nodeType":"Block","src":"7698:53:23","statements":[{"expression":{"arguments":[{"hexValue":"","id":4227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7733:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4226,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7723:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7723:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4195,"id":4229,"nodeType":"Return","src":"7716:20:23"}]},"id":4231,"nodeType":"IfStatement","src":"7615:136:23","trueBody":{"id":4225,"nodeType":"Block","src":"7639:53:23","statements":[{"expression":{"id":4223,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4217,"src":"7664:13:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4195,"id":4224,"nodeType":"Return","src":"7657:20:23"}]}}]},"id":4233,"nodeType":"IfStatement","src":"7223:538:23","trueBody":{"id":4215,"nodeType":"Block","src":"7254:57:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":4211,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"7291:7:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7285:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4209,"name":"bytes","nodeType":"ElementaryTypeName","src":"7285:5:23","typeDescriptions":{}}},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7285:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4208,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7275:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7275:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4195,"id":4214,"nodeType":"Return","src":"7268:32:23"}]}}]},"documentation":{"id":4191,"nodeType":"StructuredDocumentation","src":"6886:210:23","text":" @dev The hash of the version parameter for the EIP712 domain.\n NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead."},"id":4235,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712VersionHash","nameLocation":"7110:18:23","nodeType":"FunctionDefinition","parameters":{"id":4192,"nodeType":"ParameterList","parameters":[],"src":"7128:2:23"},"returnParameters":{"id":4195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4235,"src":"7154:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7154:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7153:9:23"},"scope":4241,"src":"7101:666:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":4236,"nodeType":"StructuredDocumentation","src":"7773:254:23","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":4240,"mutability":"mutable","name":"__gap","nameLocation":"8052:5:23","nodeType":"VariableDeclaration","scope":4241,"src":"8032:25:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$48_storage","typeString":"uint256[48]"},"typeName":{"baseType":{"id":4237,"name":"uint256","nodeType":"ElementaryTypeName","src":"8032:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4239,"length":{"hexValue":"3438","id":4238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8040:2:23","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"ArrayTypeName","src":"8032:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$48_storage_ptr","typeString":"uint256[48]"}},"visibility":"private"}],"scope":4242,"src":"1808:6252:23","usedErrors":[],"usedEvents":[659,1039]}],"src":"113:7948:23"},"id":23},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[5107]},"id":5108,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4243,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":4244,"nodeType":"StructuredDocumentation","src":"128:73:24","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5107,"linearizedBaseContracts":[5107],"name":"MathUpgradeable","nameLocation":"210:15:24","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":4248,"members":[{"id":4245,"name":"Down","nameLocation":"256:4:24","nodeType":"EnumValue","src":"256:4:24"},{"id":4246,"name":"Up","nameLocation":"298:2:24","nodeType":"EnumValue","src":"298:2:24"},{"id":4247,"name":"Zero","nameLocation":"329:4:24","nodeType":"EnumValue","src":"329:4:24"}],"name":"Rounding","nameLocation":"237:8:24","nodeType":"EnumDefinition","src":"232:122:24"},{"body":{"id":4265,"nodeType":"Block","src":"491:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4258,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"508:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4259,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4253,"src":"512:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4262,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4253,"src":"520:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:24","trueExpression":{"id":4261,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"516:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4257,"id":4264,"nodeType":"Return","src":"501:20:24"}]},"documentation":{"id":4249,"nodeType":"StructuredDocumentation","src":"360:59:24","text":" @dev Returns the largest of two numbers."},"id":4266,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:24","nodeType":"FunctionDefinition","parameters":{"id":4254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4251,"mutability":"mutable","name":"a","nameLocation":"445:1:24","nodeType":"VariableDeclaration","scope":4266,"src":"437:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4250,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4253,"mutability":"mutable","name":"b","nameLocation":"456:1:24","nodeType":"VariableDeclaration","scope":4266,"src":"448:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4252,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:24"},"returnParameters":{"id":4257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4266,"src":"482:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4255,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:24"},"scope":5107,"src":"424:104:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4283,"nodeType":"Block","src":"666:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4276,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"683:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4277,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"687:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4280,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"695:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:24","trueExpression":{"id":4279,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"691:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4275,"id":4282,"nodeType":"Return","src":"676:20:24"}]},"documentation":{"id":4267,"nodeType":"StructuredDocumentation","src":"534:60:24","text":" @dev Returns the smallest of two numbers."},"id":4284,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:24","nodeType":"FunctionDefinition","parameters":{"id":4272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4269,"mutability":"mutable","name":"a","nameLocation":"620:1:24","nodeType":"VariableDeclaration","scope":4284,"src":"612:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4268,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4271,"mutability":"mutable","name":"b","nameLocation":"631:1:24","nodeType":"VariableDeclaration","scope":4284,"src":"623:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4270,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:24"},"returnParameters":{"id":4275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4284,"src":"657:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4273,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:24"},"scope":5107,"src":"599:104:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4306,"nodeType":"Block","src":"887:82:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4294,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"942:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4295,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"946:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4297,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4298,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"952:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4299,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"956:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4301,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4293,"id":4305,"nodeType":"Return","src":"934:28:24"}]},"documentation":{"id":4285,"nodeType":"StructuredDocumentation","src":"709:102:24","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4307,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:24","nodeType":"FunctionDefinition","parameters":{"id":4290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4287,"mutability":"mutable","name":"a","nameLocation":"841:1:24","nodeType":"VariableDeclaration","scope":4307,"src":"833:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4286,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4289,"mutability":"mutable","name":"b","nameLocation":"852:1:24","nodeType":"VariableDeclaration","scope":4307,"src":"844:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4288,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:24"},"returnParameters":{"id":4293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4307,"src":"878:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4291,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:24"},"scope":5107,"src":"816:153:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4331,"nodeType":"Block","src":"1239:123:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4317,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"1327:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4321,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"1341:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4324,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4325,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4312,"src":"1350:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:24","trueExpression":{"hexValue":"30","id":4320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4316,"id":4330,"nodeType":"Return","src":"1320:35:24"}]},"documentation":{"id":4308,"nodeType":"StructuredDocumentation","src":"975:188:24","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":4332,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:24","nodeType":"FunctionDefinition","parameters":{"id":4313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4310,"mutability":"mutable","name":"a","nameLocation":"1193:1:24","nodeType":"VariableDeclaration","scope":4332,"src":"1185:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4309,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4312,"mutability":"mutable","name":"b","nameLocation":"1204:1:24","nodeType":"VariableDeclaration","scope":4332,"src":"1196:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4311,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:24"},"returnParameters":{"id":4316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4332,"src":"1230:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4314,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:24"},"scope":5107,"src":"1168:194:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4454,"nodeType":"Block","src":"1776:4115:24","statements":[{"id":4453,"nodeType":"UncheckedBlock","src":"1786:4099:24","statements":[{"assignments":[4345],"declarations":[{"constant":false,"id":4345,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:24","nodeType":"VariableDeclaration","scope":4453,"src":"2107:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4344,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4346,"nodeType":"VariableDeclarationStatement","src":"2107:13:24"},{"assignments":[4348],"declarations":[{"constant":false,"id":4348,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:24","nodeType":"VariableDeclaration","scope":4453,"src":"2179:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4347,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4349,"nodeType":"VariableDeclarationStatement","src":"2179:13:24"},{"AST":{"nativeSrc":"2259:157:24","nodeType":"YulBlock","src":"2259:157:24","statements":[{"nativeSrc":"2277:30:24","nodeType":"YulVariableDeclaration","src":"2277:30:24","value":{"arguments":[{"name":"x","nativeSrc":"2294:1:24","nodeType":"YulIdentifier","src":"2294:1:24"},{"name":"y","nativeSrc":"2297:1:24","nodeType":"YulIdentifier","src":"2297:1:24"},{"arguments":[{"kind":"number","nativeSrc":"2304:1:24","nodeType":"YulLiteral","src":"2304:1:24","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2300:3:24","nodeType":"YulIdentifier","src":"2300:3:24"},"nativeSrc":"2300:6:24","nodeType":"YulFunctionCall","src":"2300:6:24"}],"functionName":{"name":"mulmod","nativeSrc":"2287:6:24","nodeType":"YulIdentifier","src":"2287:6:24"},"nativeSrc":"2287:20:24","nodeType":"YulFunctionCall","src":"2287:20:24"},"variables":[{"name":"mm","nativeSrc":"2281:2:24","nodeType":"YulTypedName","src":"2281:2:24","type":""}]},{"nativeSrc":"2324:18:24","nodeType":"YulAssignment","src":"2324:18:24","value":{"arguments":[{"name":"x","nativeSrc":"2337:1:24","nodeType":"YulIdentifier","src":"2337:1:24"},{"name":"y","nativeSrc":"2340:1:24","nodeType":"YulIdentifier","src":"2340:1:24"}],"functionName":{"name":"mul","nativeSrc":"2333:3:24","nodeType":"YulIdentifier","src":"2333:3:24"},"nativeSrc":"2333:9:24","nodeType":"YulFunctionCall","src":"2333:9:24"},"variableNames":[{"name":"prod0","nativeSrc":"2324:5:24","nodeType":"YulIdentifier","src":"2324:5:24"}]},{"nativeSrc":"2359:43:24","nodeType":"YulAssignment","src":"2359:43:24","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2376:2:24","nodeType":"YulIdentifier","src":"2376:2:24"},{"name":"prod0","nativeSrc":"2380:5:24","nodeType":"YulIdentifier","src":"2380:5:24"}],"functionName":{"name":"sub","nativeSrc":"2372:3:24","nodeType":"YulIdentifier","src":"2372:3:24"},"nativeSrc":"2372:14:24","nodeType":"YulFunctionCall","src":"2372:14:24"},{"arguments":[{"name":"mm","nativeSrc":"2391:2:24","nodeType":"YulIdentifier","src":"2391:2:24"},{"name":"prod0","nativeSrc":"2395:5:24","nodeType":"YulIdentifier","src":"2395:5:24"}],"functionName":{"name":"lt","nativeSrc":"2388:2:24","nodeType":"YulIdentifier","src":"2388:2:24"},"nativeSrc":"2388:13:24","nodeType":"YulFunctionCall","src":"2388:13:24"}],"functionName":{"name":"sub","nativeSrc":"2368:3:24","nodeType":"YulIdentifier","src":"2368:3:24"},"nativeSrc":"2368:34:24","nodeType":"YulFunctionCall","src":"2368:34:24"},"variableNames":[{"name":"prod1","nativeSrc":"2359:5:24","nodeType":"YulIdentifier","src":"2359:5:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4345,"isOffset":false,"isSlot":false,"src":"2324:5:24","valueSize":1},{"declaration":4345,"isOffset":false,"isSlot":false,"src":"2380:5:24","valueSize":1},{"declaration":4345,"isOffset":false,"isSlot":false,"src":"2395:5:24","valueSize":1},{"declaration":4348,"isOffset":false,"isSlot":false,"src":"2359:5:24","valueSize":1},{"declaration":4335,"isOffset":false,"isSlot":false,"src":"2294:1:24","valueSize":1},{"declaration":4335,"isOffset":false,"isSlot":false,"src":"2337:1:24","valueSize":1},{"declaration":4337,"isOffset":false,"isSlot":false,"src":"2297:1:24","valueSize":1},{"declaration":4337,"isOffset":false,"isSlot":false,"src":"2340:1:24","valueSize":1}],"id":4350,"nodeType":"InlineAssembly","src":"2250:166:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4351,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"2497:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4359,"nodeType":"IfStatement","src":"2493:368:24","trueBody":{"id":4358,"nodeType":"Block","src":"2509:352:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4354,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4345,"src":"2827:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4355,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"2835:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4343,"id":4357,"nodeType":"Return","src":"2820:26:24"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4361,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"2971:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4362,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"2985:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":4364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":4360,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4366,"nodeType":"ExpressionStatement","src":"2963:53:24"},{"assignments":[4368],"declarations":[{"constant":false,"id":4368,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:24","nodeType":"VariableDeclaration","scope":4453,"src":"3272:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4367,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4369,"nodeType":"VariableDeclarationStatement","src":"3272:17:24"},{"AST":{"nativeSrc":"3312:291:24","nodeType":"YulBlock","src":"3312:291:24","statements":[{"nativeSrc":"3381:38:24","nodeType":"YulAssignment","src":"3381:38:24","value":{"arguments":[{"name":"x","nativeSrc":"3401:1:24","nodeType":"YulIdentifier","src":"3401:1:24"},{"name":"y","nativeSrc":"3404:1:24","nodeType":"YulIdentifier","src":"3404:1:24"},{"name":"denominator","nativeSrc":"3407:11:24","nodeType":"YulIdentifier","src":"3407:11:24"}],"functionName":{"name":"mulmod","nativeSrc":"3394:6:24","nodeType":"YulIdentifier","src":"3394:6:24"},"nativeSrc":"3394:25:24","nodeType":"YulFunctionCall","src":"3394:25:24"},"variableNames":[{"name":"remainder","nativeSrc":"3381:9:24","nodeType":"YulIdentifier","src":"3381:9:24"}]},{"nativeSrc":"3501:41:24","nodeType":"YulAssignment","src":"3501:41:24","value":{"arguments":[{"name":"prod1","nativeSrc":"3514:5:24","nodeType":"YulIdentifier","src":"3514:5:24"},{"arguments":[{"name":"remainder","nativeSrc":"3524:9:24","nodeType":"YulIdentifier","src":"3524:9:24"},{"name":"prod0","nativeSrc":"3535:5:24","nodeType":"YulIdentifier","src":"3535:5:24"}],"functionName":{"name":"gt","nativeSrc":"3521:2:24","nodeType":"YulIdentifier","src":"3521:2:24"},"nativeSrc":"3521:20:24","nodeType":"YulFunctionCall","src":"3521:20:24"}],"functionName":{"name":"sub","nativeSrc":"3510:3:24","nodeType":"YulIdentifier","src":"3510:3:24"},"nativeSrc":"3510:32:24","nodeType":"YulFunctionCall","src":"3510:32:24"},"variableNames":[{"name":"prod1","nativeSrc":"3501:5:24","nodeType":"YulIdentifier","src":"3501:5:24"}]},{"nativeSrc":"3559:30:24","nodeType":"YulAssignment","src":"3559:30:24","value":{"arguments":[{"name":"prod0","nativeSrc":"3572:5:24","nodeType":"YulIdentifier","src":"3572:5:24"},{"name":"remainder","nativeSrc":"3579:9:24","nodeType":"YulIdentifier","src":"3579:9:24"}],"functionName":{"name":"sub","nativeSrc":"3568:3:24","nodeType":"YulIdentifier","src":"3568:3:24"},"nativeSrc":"3568:21:24","nodeType":"YulFunctionCall","src":"3568:21:24"},"variableNames":[{"name":"prod0","nativeSrc":"3559:5:24","nodeType":"YulIdentifier","src":"3559:5:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4339,"isOffset":false,"isSlot":false,"src":"3407:11:24","valueSize":1},{"declaration":4345,"isOffset":false,"isSlot":false,"src":"3535:5:24","valueSize":1},{"declaration":4345,"isOffset":false,"isSlot":false,"src":"3559:5:24","valueSize":1},{"declaration":4345,"isOffset":false,"isSlot":false,"src":"3572:5:24","valueSize":1},{"declaration":4348,"isOffset":false,"isSlot":false,"src":"3501:5:24","valueSize":1},{"declaration":4348,"isOffset":false,"isSlot":false,"src":"3514:5:24","valueSize":1},{"declaration":4368,"isOffset":false,"isSlot":false,"src":"3381:9:24","valueSize":1},{"declaration":4368,"isOffset":false,"isSlot":false,"src":"3524:9:24","valueSize":1},{"declaration":4368,"isOffset":false,"isSlot":false,"src":"3579:9:24","valueSize":1},{"declaration":4335,"isOffset":false,"isSlot":false,"src":"3401:1:24","valueSize":1},{"declaration":4337,"isOffset":false,"isSlot":false,"src":"3404:1:24","valueSize":1}],"id":4370,"nodeType":"InlineAssembly","src":"3303:300:24"},{"assignments":[4372],"declarations":[{"constant":false,"id":4372,"mutability":"mutable","name":"twos","nameLocation":"3918:4:24","nodeType":"VariableDeclaration","scope":4453,"src":"3910:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4371,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4380,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4373,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"3925:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:24","subExpression":{"id":4374,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"3941:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4378,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:24"},{"AST":{"nativeSrc":"3980:362:24","nodeType":"YulBlock","src":"3980:362:24","statements":[{"nativeSrc":"4045:37:24","nodeType":"YulAssignment","src":"4045:37:24","value":{"arguments":[{"name":"denominator","nativeSrc":"4064:11:24","nodeType":"YulIdentifier","src":"4064:11:24"},{"name":"twos","nativeSrc":"4077:4:24","nodeType":"YulIdentifier","src":"4077:4:24"}],"functionName":{"name":"div","nativeSrc":"4060:3:24","nodeType":"YulIdentifier","src":"4060:3:24"},"nativeSrc":"4060:22:24","nodeType":"YulFunctionCall","src":"4060:22:24"},"variableNames":[{"name":"denominator","nativeSrc":"4045:11:24","nodeType":"YulIdentifier","src":"4045:11:24"}]},{"nativeSrc":"4149:25:24","nodeType":"YulAssignment","src":"4149:25:24","value":{"arguments":[{"name":"prod0","nativeSrc":"4162:5:24","nodeType":"YulIdentifier","src":"4162:5:24"},{"name":"twos","nativeSrc":"4169:4:24","nodeType":"YulIdentifier","src":"4169:4:24"}],"functionName":{"name":"div","nativeSrc":"4158:3:24","nodeType":"YulIdentifier","src":"4158:3:24"},"nativeSrc":"4158:16:24","nodeType":"YulFunctionCall","src":"4158:16:24"},"variableNames":[{"name":"prod0","nativeSrc":"4149:5:24","nodeType":"YulIdentifier","src":"4149:5:24"}]},{"nativeSrc":"4289:39:24","nodeType":"YulAssignment","src":"4289:39:24","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4309:1:24","nodeType":"YulLiteral","src":"4309:1:24","type":"","value":"0"},{"name":"twos","nativeSrc":"4312:4:24","nodeType":"YulIdentifier","src":"4312:4:24"}],"functionName":{"name":"sub","nativeSrc":"4305:3:24","nodeType":"YulIdentifier","src":"4305:3:24"},"nativeSrc":"4305:12:24","nodeType":"YulFunctionCall","src":"4305:12:24"},{"name":"twos","nativeSrc":"4319:4:24","nodeType":"YulIdentifier","src":"4319:4:24"}],"functionName":{"name":"div","nativeSrc":"4301:3:24","nodeType":"YulIdentifier","src":"4301:3:24"},"nativeSrc":"4301:23:24","nodeType":"YulFunctionCall","src":"4301:23:24"},{"kind":"number","nativeSrc":"4326:1:24","nodeType":"YulLiteral","src":"4326:1:24","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4297:3:24","nodeType":"YulIdentifier","src":"4297:3:24"},"nativeSrc":"4297:31:24","nodeType":"YulFunctionCall","src":"4297:31:24"},"variableNames":[{"name":"twos","nativeSrc":"4289:4:24","nodeType":"YulIdentifier","src":"4289:4:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4339,"isOffset":false,"isSlot":false,"src":"4045:11:24","valueSize":1},{"declaration":4339,"isOffset":false,"isSlot":false,"src":"4064:11:24","valueSize":1},{"declaration":4345,"isOffset":false,"isSlot":false,"src":"4149:5:24","valueSize":1},{"declaration":4345,"isOffset":false,"isSlot":false,"src":"4162:5:24","valueSize":1},{"declaration":4372,"isOffset":false,"isSlot":false,"src":"4077:4:24","valueSize":1},{"declaration":4372,"isOffset":false,"isSlot":false,"src":"4169:4:24","valueSize":1},{"declaration":4372,"isOffset":false,"isSlot":false,"src":"4289:4:24","valueSize":1},{"declaration":4372,"isOffset":false,"isSlot":false,"src":"4312:4:24","valueSize":1},{"declaration":4372,"isOffset":false,"isSlot":false,"src":"4319:4:24","valueSize":1}],"id":4381,"nodeType":"InlineAssembly","src":"3971:371:24"},{"expression":{"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4382,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4345,"src":"4408:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4383,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"4417:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4384,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"4425:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4387,"nodeType":"ExpressionStatement","src":"4408:21:24"},{"assignments":[4389],"declarations":[{"constant":false,"id":4389,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:24","nodeType":"VariableDeclaration","scope":4453,"src":"4747:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4396,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4391,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"4770:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:24"},{"expression":{"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4397,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5003:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4399,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"5018:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4400,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5032:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4404,"nodeType":"ExpressionStatement","src":"5003:36:24"},{"expression":{"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4405,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5072:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4407,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"5087:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4408,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5101:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4412,"nodeType":"ExpressionStatement","src":"5072:36:24"},{"expression":{"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4413,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5142:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4415,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"5157:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4416,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5171:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4420,"nodeType":"ExpressionStatement","src":"5142:36:24"},{"expression":{"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4421,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5212:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4423,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"5227:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4424,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5241:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4428,"nodeType":"ExpressionStatement","src":"5212:36:24"},{"expression":{"id":4435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4429,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5282:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4431,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"5297:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4432,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5311:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4436,"nodeType":"ExpressionStatement","src":"5282:36:24"},{"expression":{"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4437,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5353:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4439,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"5368:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4440,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5382:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4444,"nodeType":"ExpressionStatement","src":"5353:36:24"},{"expression":{"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4445,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4342,"src":"5823:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4446,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4345,"src":"5832:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4447,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"5840:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4450,"nodeType":"ExpressionStatement","src":"5823:24:24"},{"expression":{"id":4451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4342,"src":"5868:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4343,"id":4452,"nodeType":"Return","src":"5861:13:24"}]}]},"documentation":{"id":4333,"nodeType":"StructuredDocumentation","src":"1368:305:24","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":4455,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:24","nodeType":"FunctionDefinition","parameters":{"id":4340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4335,"mutability":"mutable","name":"x","nameLocation":"1702:1:24","nodeType":"VariableDeclaration","scope":4455,"src":"1694:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4334,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4337,"mutability":"mutable","name":"y","nameLocation":"1713:1:24","nodeType":"VariableDeclaration","scope":4455,"src":"1705:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4336,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4339,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:24","nodeType":"VariableDeclaration","scope":4455,"src":"1716:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4338,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:24"},"returnParameters":{"id":4343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4342,"mutability":"mutable","name":"result","nameLocation":"1768:6:24","nodeType":"VariableDeclaration","scope":4455,"src":"1760:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4341,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:24"},"scope":5107,"src":"1678:4213:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4498,"nodeType":"Block","src":"6133:189:24","statements":[{"assignments":[4471],"declarations":[{"constant":false,"id":4471,"mutability":"mutable","name":"result","nameLocation":"6151:6:24","nodeType":"VariableDeclaration","scope":4498,"src":"6143:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4470,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4477,"initialValue":{"arguments":[{"id":4473,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"6167:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4474,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4460,"src":"6170:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4475,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4462,"src":"6173:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4472,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4455,4499],"referencedDeclaration":4455,"src":"6160:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:24"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4478,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4465,"src":"6199:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4479,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"6211:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4248_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4246,"src":"6211:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4483,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"6233:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4484,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4460,"src":"6236:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4485,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4462,"src":"6239:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4482,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4495,"nodeType":"IfStatement","src":"6195:98:24","trueBody":{"id":4494,"nodeType":"Block","src":"6257:36:24","statements":[{"expression":{"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4490,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"6271:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4493,"nodeType":"ExpressionStatement","src":"6271:11:24"}]}},{"expression":{"id":4496,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"6309:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4469,"id":4497,"nodeType":"Return","src":"6302:13:24"}]},"documentation":{"id":4456,"nodeType":"StructuredDocumentation","src":"5897:121:24","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4499,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:24","nodeType":"FunctionDefinition","parameters":{"id":4466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4458,"mutability":"mutable","name":"x","nameLocation":"6047:1:24","nodeType":"VariableDeclaration","scope":4499,"src":"6039:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4457,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4460,"mutability":"mutable","name":"y","nameLocation":"6058:1:24","nodeType":"VariableDeclaration","scope":4499,"src":"6050:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4459,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4462,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:24","nodeType":"VariableDeclaration","scope":4499,"src":"6061:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4461,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4465,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:24","nodeType":"VariableDeclaration","scope":4499,"src":"6082:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4464,"nodeType":"UserDefinedTypeName","pathNode":{"id":4463,"name":"Rounding","nameLocations":["6082:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"6082:8:24"},"referencedDeclaration":4248,"src":"6082:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:24"},"returnParameters":{"id":4469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4499,"src":"6124:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4467,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:24"},"scope":5107,"src":"6023:299:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4610,"nodeType":"Block","src":"6598:1585:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4507,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"6612:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4513,"nodeType":"IfStatement","src":"6608:45:24","trueBody":{"id":4512,"nodeType":"Block","src":"6620:33:24","statements":[{"expression":{"hexValue":"30","id":4510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4506,"id":4511,"nodeType":"Return","src":"6634:8:24"}]}},{"assignments":[4515],"declarations":[{"constant":false,"id":4515,"mutability":"mutable","name":"result","nameLocation":"7340:6:24","nodeType":"VariableDeclaration","scope":4610,"src":"7332:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4514,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4524,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4518,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"7360:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4517,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4779,4815],"referencedDeclaration":4779,"src":"7355:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4522,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:24"},{"id":4609,"nodeType":"UncheckedBlock","src":"7769:408:24","statements":[{"expression":{"id":4534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4525,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7793:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4526,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7803:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4527,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"7812:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4528,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7816:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4531,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4535,"nodeType":"ExpressionStatement","src":"7793:35:24"},{"expression":{"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4536,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7842:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4537,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7852:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4538,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"7861:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4539,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7865:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4546,"nodeType":"ExpressionStatement","src":"7842:35:24"},{"expression":{"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7891:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4548,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7901:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4549,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"7910:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4550,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7914:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4553,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4557,"nodeType":"ExpressionStatement","src":"7891:35:24"},{"expression":{"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4558,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7940:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4559,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7950:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4560,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"7959:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7963:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4568,"nodeType":"ExpressionStatement","src":"7940:35:24"},{"expression":{"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4569,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7989:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4570,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"7999:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4571,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"8008:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4572,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8012:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4575,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4579,"nodeType":"ExpressionStatement","src":"7989:35:24"},{"expression":{"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8038:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4581,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8048:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4582,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"8057:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4583,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8061:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4586,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4590,"nodeType":"ExpressionStatement","src":"8038:35:24"},{"expression":{"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4591,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8087:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4592,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8097:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4593,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"8106:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4594,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8110:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4597,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4601,"nodeType":"ExpressionStatement","src":"8087:35:24"},{"expression":{"arguments":[{"id":4603,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8147:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4604,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"8155:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4605,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8159:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4602,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8143:3:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4506,"id":4608,"nodeType":"Return","src":"8136:30:24"}]}]},"documentation":{"id":4500,"nodeType":"StructuredDocumentation","src":"6328:208:24","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4611,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:24","nodeType":"FunctionDefinition","parameters":{"id":4503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4502,"mutability":"mutable","name":"a","nameLocation":"6563:1:24","nodeType":"VariableDeclaration","scope":4611,"src":"6555:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4501,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:24"},"returnParameters":{"id":4506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4611,"src":"6589:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4504,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:24"},"scope":5107,"src":"6541:1642:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4646,"nodeType":"Block","src":"8359:161:24","statements":[{"id":4645,"nodeType":"UncheckedBlock","src":"8369:145:24","statements":[{"assignments":[4623],"declarations":[{"constant":false,"id":4623,"mutability":"mutable","name":"result","nameLocation":"8401:6:24","nodeType":"VariableDeclaration","scope":4645,"src":"8393:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4622,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4627,"initialValue":{"arguments":[{"id":4625,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4614,"src":"8415:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4624,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4611,4647],"referencedDeclaration":4611,"src":"8410:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4628,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"8438:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4629,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"8448:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4630,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"8460:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4248_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4246,"src":"8460:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4633,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"8475:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4634,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"8484:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4636,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4614,"src":"8493:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:24","trueExpression":{"hexValue":"31","id":4639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4642,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4621,"id":4644,"nodeType":"Return","src":"8431:72:24"}]}]},"documentation":{"id":4612,"nodeType":"StructuredDocumentation","src":"8189:89:24","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4647,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:24","nodeType":"FunctionDefinition","parameters":{"id":4618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4614,"mutability":"mutable","name":"a","nameLocation":"8305:1:24","nodeType":"VariableDeclaration","scope":4647,"src":"8297:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4613,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4617,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:24","nodeType":"VariableDeclaration","scope":4647,"src":"8308:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4616,"nodeType":"UserDefinedTypeName","pathNode":{"id":4615,"name":"Rounding","nameLocations":["8308:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"8308:8:24"},"referencedDeclaration":4248,"src":"8308:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:24"},"returnParameters":{"id":4621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4647,"src":"8350:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4619,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:24"},"scope":5107,"src":"8283:237:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4778,"nodeType":"Block","src":"8705:922:24","statements":[{"assignments":[4656],"declarations":[{"constant":false,"id":4656,"mutability":"mutable","name":"result","nameLocation":"8723:6:24","nodeType":"VariableDeclaration","scope":4778,"src":"8715:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4655,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4658,"initialValue":{"hexValue":"30","id":4657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:24"},{"id":4775,"nodeType":"UncheckedBlock","src":"8743:855:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4659,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"8771:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4673,"nodeType":"IfStatement","src":"8767:99:24","trueBody":{"id":4672,"nodeType":"Block","src":"8789:77:24","statements":[{"expression":{"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"8807:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4667,"nodeType":"ExpressionStatement","src":"8807:13:24"},{"expression":{"id":4670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4668,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"8838:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4671,"nodeType":"ExpressionStatement","src":"8838:13:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4674,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"8883:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4688,"nodeType":"IfStatement","src":"8879:96:24","trueBody":{"id":4687,"nodeType":"Block","src":"8900:75:24","statements":[{"expression":{"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"8918:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4682,"nodeType":"ExpressionStatement","src":"8918:12:24"},{"expression":{"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4683,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"8948:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4686,"nodeType":"ExpressionStatement","src":"8948:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4689,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"8992:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4703,"nodeType":"IfStatement","src":"8988:96:24","trueBody":{"id":4702,"nodeType":"Block","src":"9009:75:24","statements":[{"expression":{"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9027:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4697,"nodeType":"ExpressionStatement","src":"9027:12:24"},{"expression":{"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4698,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"9057:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4701,"nodeType":"ExpressionStatement","src":"9057:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4704,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9101:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4718,"nodeType":"IfStatement","src":"9097:96:24","trueBody":{"id":4717,"nodeType":"Block","src":"9118:75:24","statements":[{"expression":{"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9136:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4712,"nodeType":"ExpressionStatement","src":"9136:12:24"},{"expression":{"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4713,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"9166:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4716,"nodeType":"ExpressionStatement","src":"9166:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4719,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9210:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4733,"nodeType":"IfStatement","src":"9206:93:24","trueBody":{"id":4732,"nodeType":"Block","src":"9226:73:24","statements":[{"expression":{"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9244:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4727,"nodeType":"ExpressionStatement","src":"9244:11:24"},{"expression":{"id":4730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4728,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"9273:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4731,"nodeType":"ExpressionStatement","src":"9273:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4734,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9316:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4748,"nodeType":"IfStatement","src":"9312:93:24","trueBody":{"id":4747,"nodeType":"Block","src":"9332:73:24","statements":[{"expression":{"id":4741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9350:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4742,"nodeType":"ExpressionStatement","src":"9350:11:24"},{"expression":{"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"9379:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4746,"nodeType":"ExpressionStatement","src":"9379:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9422:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4763,"nodeType":"IfStatement","src":"9418:93:24","trueBody":{"id":4762,"nodeType":"Block","src":"9438:73:24","statements":[{"expression":{"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9456:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4757,"nodeType":"ExpressionStatement","src":"9456:11:24"},{"expression":{"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4758,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"9485:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4761,"nodeType":"ExpressionStatement","src":"9485:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4764,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"9528:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4774,"nodeType":"IfStatement","src":"9524:64:24","trueBody":{"id":4773,"nodeType":"Block","src":"9544:44:24","statements":[{"expression":{"id":4771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"9562:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4772,"nodeType":"ExpressionStatement","src":"9562:11:24"}]}}]},{"expression":{"id":4776,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"9614:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4654,"id":4777,"nodeType":"Return","src":"9607:13:24"}]},"documentation":{"id":4648,"nodeType":"StructuredDocumentation","src":"8526:113:24","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4779,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:24","nodeType":"FunctionDefinition","parameters":{"id":4651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4650,"mutability":"mutable","name":"value","nameLocation":"8666:5:24","nodeType":"VariableDeclaration","scope":4779,"src":"8658:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4649,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:24"},"returnParameters":{"id":4654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4779,"src":"8696:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4652,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:24"},"scope":5107,"src":"8644:983:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4814,"nodeType":"Block","src":"9860:165:24","statements":[{"id":4813,"nodeType":"UncheckedBlock","src":"9870:149:24","statements":[{"assignments":[4791],"declarations":[{"constant":false,"id":4791,"mutability":"mutable","name":"result","nameLocation":"9902:6:24","nodeType":"VariableDeclaration","scope":4813,"src":"9894:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4790,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4795,"initialValue":{"arguments":[{"id":4793,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"9916:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4792,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4779,4815],"referencedDeclaration":4779,"src":"9911:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4796,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"9943:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4797,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"9953:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4798,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"9965:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4248_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4246,"src":"9965:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4802,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"9985:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"9994:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:24","trueExpression":{"hexValue":"31","id":4807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4810,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4789,"id":4812,"nodeType":"Return","src":"9936:72:24"}]}]},"documentation":{"id":4780,"nodeType":"StructuredDocumentation","src":"9633:142:24","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4815,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:24","nodeType":"FunctionDefinition","parameters":{"id":4786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4782,"mutability":"mutable","name":"value","nameLocation":"9802:5:24","nodeType":"VariableDeclaration","scope":4815,"src":"9794:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4781,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4785,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:24","nodeType":"VariableDeclaration","scope":4815,"src":"9809:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4784,"nodeType":"UserDefinedTypeName","pathNode":{"id":4783,"name":"Rounding","nameLocations":["9809:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"9809:8:24"},"referencedDeclaration":4248,"src":"9809:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:24"},"returnParameters":{"id":4789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4815,"src":"9851:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4787,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:24"},"scope":5107,"src":"9780:245:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4943,"nodeType":"Block","src":"10212:854:24","statements":[{"assignments":[4824],"declarations":[{"constant":false,"id":4824,"mutability":"mutable","name":"result","nameLocation":"10230:6:24","nodeType":"VariableDeclaration","scope":4943,"src":"10222:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4823,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4826,"initialValue":{"hexValue":"30","id":4825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:24"},{"id":4940,"nodeType":"UncheckedBlock","src":"10250:787:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4827,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10278:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4843,"nodeType":"IfStatement","src":"10274:103:24","trueBody":{"id":4842,"nodeType":"Block","src":"10297:80:24","statements":[{"expression":{"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4832,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10315:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4837,"nodeType":"ExpressionStatement","src":"10315:17:24"},{"expression":{"id":4840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"10350:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4841,"nodeType":"ExpressionStatement","src":"10350:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10394:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4860,"nodeType":"IfStatement","src":"10390:103:24","trueBody":{"id":4859,"nodeType":"Block","src":"10413:80:24","statements":[{"expression":{"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4849,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10431:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4854,"nodeType":"ExpressionStatement","src":"10431:17:24"},{"expression":{"id":4857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4855,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"10466:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4858,"nodeType":"ExpressionStatement","src":"10466:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4861,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10510:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4877,"nodeType":"IfStatement","src":"10506:103:24","trueBody":{"id":4876,"nodeType":"Block","src":"10529:80:24","statements":[{"expression":{"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10547:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4871,"nodeType":"ExpressionStatement","src":"10547:17:24"},{"expression":{"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4872,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"10582:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4875,"nodeType":"ExpressionStatement","src":"10582:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10626:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4894,"nodeType":"IfStatement","src":"10622:100:24","trueBody":{"id":4893,"nodeType":"Block","src":"10644:78:24","statements":[{"expression":{"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10662:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4888,"nodeType":"ExpressionStatement","src":"10662:16:24"},{"expression":{"id":4891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4889,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"10696:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4892,"nodeType":"ExpressionStatement","src":"10696:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10739:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4911,"nodeType":"IfStatement","src":"10735:100:24","trueBody":{"id":4910,"nodeType":"Block","src":"10757:78:24","statements":[{"expression":{"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4900,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10775:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4905,"nodeType":"ExpressionStatement","src":"10775:16:24"},{"expression":{"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4906,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"10809:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4909,"nodeType":"ExpressionStatement","src":"10809:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4912,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10852:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4928,"nodeType":"IfStatement","src":"10848:100:24","trueBody":{"id":4927,"nodeType":"Block","src":"10870:78:24","statements":[{"expression":{"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10888:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4922,"nodeType":"ExpressionStatement","src":"10888:16:24"},{"expression":{"id":4925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4923,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"10922:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4926,"nodeType":"ExpressionStatement","src":"10922:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4929,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"10965:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4939,"nodeType":"IfStatement","src":"10961:66:24","trueBody":{"id":4938,"nodeType":"Block","src":"10983:44:24","statements":[{"expression":{"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4934,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"11001:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4937,"nodeType":"ExpressionStatement","src":"11001:11:24"}]}}]},{"expression":{"id":4941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"11053:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4822,"id":4942,"nodeType":"Return","src":"11046:13:24"}]},"documentation":{"id":4816,"nodeType":"StructuredDocumentation","src":"10031:114:24","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4944,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:24","nodeType":"FunctionDefinition","parameters":{"id":4819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4818,"mutability":"mutable","name":"value","nameLocation":"10173:5:24","nodeType":"VariableDeclaration","scope":4944,"src":"10165:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4817,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:24"},"returnParameters":{"id":4822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4944,"src":"10203:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4820,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:24"},"scope":5107,"src":"10150:916:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4979,"nodeType":"Block","src":"11301:167:24","statements":[{"id":4978,"nodeType":"UncheckedBlock","src":"11311:151:24","statements":[{"assignments":[4956],"declarations":[{"constant":false,"id":4956,"mutability":"mutable","name":"result","nameLocation":"11343:6:24","nodeType":"VariableDeclaration","scope":4978,"src":"11335:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4955,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4960,"initialValue":{"arguments":[{"id":4958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4947,"src":"11358:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4957,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4944,4980],"referencedDeclaration":4944,"src":"11352:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4956,"src":"11385:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"id":4965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4962,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"11395:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4963,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"11407:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4248_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4246,"src":"11407:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4967,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4956,"src":"11428:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4947,"src":"11437:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:24","trueExpression":{"hexValue":"31","id":4972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4975,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4954,"id":4977,"nodeType":"Return","src":"11378:73:24"}]}]},"documentation":{"id":4945,"nodeType":"StructuredDocumentation","src":"11072:143:24","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4980,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:24","nodeType":"FunctionDefinition","parameters":{"id":4951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4947,"mutability":"mutable","name":"value","nameLocation":"11243:5:24","nodeType":"VariableDeclaration","scope":4980,"src":"11235:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4946,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4950,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:24","nodeType":"VariableDeclaration","scope":4980,"src":"11250:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4949,"nodeType":"UserDefinedTypeName","pathNode":{"id":4948,"name":"Rounding","nameLocations":["11250:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"11250:8:24"},"referencedDeclaration":4248,"src":"11250:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:24"},"returnParameters":{"id":4954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4980,"src":"11292:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4952,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:24"},"scope":5107,"src":"11220:248:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5066,"nodeType":"Block","src":"11782:600:24","statements":[{"assignments":[4989],"declarations":[{"constant":false,"id":4989,"mutability":"mutable","name":"result","nameLocation":"11800:6:24","nodeType":"VariableDeclaration","scope":5066,"src":"11792:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4988,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4991,"initialValue":{"hexValue":"30","id":4990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:24"},{"id":5063,"nodeType":"UncheckedBlock","src":"11820:533:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4992,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"11848:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5006,"nodeType":"IfStatement","src":"11844:98:24","trueBody":{"id":5005,"nodeType":"Block","src":"11866:76:24","statements":[{"expression":{"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"11884:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5000,"nodeType":"ExpressionStatement","src":"11884:13:24"},{"expression":{"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5001,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"11915:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5004,"nodeType":"ExpressionStatement","src":"11915:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"11959:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":5008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5021,"nodeType":"IfStatement","src":"11955:95:24","trueBody":{"id":5020,"nodeType":"Block","src":"11976:74:24","statements":[{"expression":{"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"11994:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":5013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5015,"nodeType":"ExpressionStatement","src":"11994:12:24"},{"expression":{"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5016,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"12024:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5019,"nodeType":"ExpressionStatement","src":"12024:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"12067:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":5023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5036,"nodeType":"IfStatement","src":"12063:95:24","trueBody":{"id":5035,"nodeType":"Block","src":"12084:74:24","statements":[{"expression":{"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"12102:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":5028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5030,"nodeType":"ExpressionStatement","src":"12102:12:24"},{"expression":{"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5031,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"12132:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5034,"nodeType":"ExpressionStatement","src":"12132:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5037,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"12175:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":5038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5051,"nodeType":"IfStatement","src":"12171:95:24","trueBody":{"id":5050,"nodeType":"Block","src":"12192:74:24","statements":[{"expression":{"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"12210:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":5043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5045,"nodeType":"ExpressionStatement","src":"12210:12:24"},{"expression":{"id":5048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5046,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"12240:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5049,"nodeType":"ExpressionStatement","src":"12240:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5052,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"12283:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5062,"nodeType":"IfStatement","src":"12279:64:24","trueBody":{"id":5061,"nodeType":"Block","src":"12299:44:24","statements":[{"expression":{"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5057,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"12317:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5060,"nodeType":"ExpressionStatement","src":"12317:11:24"}]}}]},{"expression":{"id":5064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"12369:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4987,"id":5065,"nodeType":"Return","src":"12362:13:24"}]},"documentation":{"id":4981,"nodeType":"StructuredDocumentation","src":"11474:240:24","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":5067,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:24","nodeType":"FunctionDefinition","parameters":{"id":4984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4983,"mutability":"mutable","name":"value","nameLocation":"11743:5:24","nodeType":"VariableDeclaration","scope":5067,"src":"11735:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4982,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:24"},"returnParameters":{"id":4987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5067,"src":"11773:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4985,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:24"},"scope":5107,"src":"11719:663:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5105,"nodeType":"Block","src":"12619:174:24","statements":[{"id":5104,"nodeType":"UncheckedBlock","src":"12629:158:24","statements":[{"assignments":[5079],"declarations":[{"constant":false,"id":5079,"mutability":"mutable","name":"result","nameLocation":"12661:6:24","nodeType":"VariableDeclaration","scope":5104,"src":"12653:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5078,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5083,"initialValue":{"arguments":[{"id":5081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"12677:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5080,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[5067,5106],"referencedDeclaration":5067,"src":"12670:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5084,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"12704:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5085,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"12714:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5086,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"12726:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4248_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":5087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4246,"src":"12726:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5090,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"12747:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":5091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5093,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"12762:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:24","trueExpression":{"hexValue":"31","id":5098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5101,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5077,"id":5103,"nodeType":"Return","src":"12697:79:24"}]}]},"documentation":{"id":5068,"nodeType":"StructuredDocumentation","src":"12388:144:24","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5106,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:24","nodeType":"FunctionDefinition","parameters":{"id":5074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5070,"mutability":"mutable","name":"value","nameLocation":"12561:5:24","nodeType":"VariableDeclaration","scope":5106,"src":"12553:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5069,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5073,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:24","nodeType":"VariableDeclaration","scope":5106,"src":"12568:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":5072,"nodeType":"UserDefinedTypeName","pathNode":{"id":5071,"name":"Rounding","nameLocations":["12568:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"12568:8:24"},"referencedDeclaration":4248,"src":"12568:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4248","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:24"},"returnParameters":{"id":5077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5106,"src":"12610:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5075,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:24"},"scope":5107,"src":"12537:256:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5108,"src":"202:12593:24","usedErrors":[],"usedEvents":[]}],"src":"103:12693:24"},"id":24},"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol","exportedSymbols":{"SafeMathUpgradeable":[5419]},"id":5420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5109,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":5110,"nodeType":"StructuredDocumentation","src":"285:196:25","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":5419,"linearizedBaseContracts":[5419],"name":"SafeMathUpgradeable","nameLocation":"490:19:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":5141,"nodeType":"Block","src":"728:140:25","statements":[{"id":5140,"nodeType":"UncheckedBlock","src":"738:124:25","statements":[{"assignments":[5123],"declarations":[{"constant":false,"id":5123,"mutability":"mutable","name":"c","nameLocation":"770:1:25","nodeType":"VariableDeclaration","scope":5140,"src":"762:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5122,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5127,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5124,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"774:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5125,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5115,"src":"778:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"774:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"762:17:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5128,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"797:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5129,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"801:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"797:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5135,"nodeType":"IfStatement","src":"793:28:25","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"812:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":5132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"819:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"811:10:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5121,"id":5134,"nodeType":"Return","src":"804:17:25"}},{"expression":{"components":[{"hexValue":"74727565","id":5136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"843:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":5137,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"849:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5138,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"842:9:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":5121,"id":5139,"nodeType":"Return","src":"835:16:25"}]}]},"documentation":{"id":5111,"nodeType":"StructuredDocumentation","src":"516:131:25","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":5142,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"661:6:25","nodeType":"FunctionDefinition","parameters":{"id":5116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5113,"mutability":"mutable","name":"a","nameLocation":"676:1:25","nodeType":"VariableDeclaration","scope":5142,"src":"668:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5112,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5115,"mutability":"mutable","name":"b","nameLocation":"687:1:25","nodeType":"VariableDeclaration","scope":5142,"src":"679:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5114,"name":"uint256","nodeType":"ElementaryTypeName","src":"679:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"667:22:25"},"returnParameters":{"id":5121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5142,"src":"713:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5117,"name":"bool","nodeType":"ElementaryTypeName","src":"713:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5142,"src":"719:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5119,"name":"uint256","nodeType":"ElementaryTypeName","src":"719:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"712:15:25"},"scope":5419,"src":"652:216:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5169,"nodeType":"Block","src":"1089:113:25","statements":[{"id":5168,"nodeType":"UncheckedBlock","src":"1099:97:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5154,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"1127:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5155,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"1131:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1127:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5161,"nodeType":"IfStatement","src":"1123:28:25","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1142:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":5158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1149:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5159,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1141:10:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5153,"id":5160,"nodeType":"Return","src":"1134:17:25"}},{"expression":{"components":[{"hexValue":"74727565","id":5162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1173:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5163,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"1179:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5164,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"1183:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1179:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1172:13:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":5153,"id":5167,"nodeType":"Return","src":"1165:20:25"}]}]},"documentation":{"id":5143,"nodeType":"StructuredDocumentation","src":"874:134:25","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":5170,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1022:6:25","nodeType":"FunctionDefinition","parameters":{"id":5148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5145,"mutability":"mutable","name":"a","nameLocation":"1037:1:25","nodeType":"VariableDeclaration","scope":5170,"src":"1029:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5144,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5147,"mutability":"mutable","name":"b","nameLocation":"1048:1:25","nodeType":"VariableDeclaration","scope":5170,"src":"1040:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1040:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1028:22:25"},"returnParameters":{"id":5153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5170,"src":"1074:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5149,"name":"bool","nodeType":"ElementaryTypeName","src":"1074:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5170,"src":"1080:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5151,"name":"uint256","nodeType":"ElementaryTypeName","src":"1080:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1073:15:25"},"scope":5419,"src":"1013:189:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5211,"nodeType":"Block","src":"1426:417:25","statements":[{"id":5210,"nodeType":"UncheckedBlock","src":"1436:401:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5182,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"1694:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1699:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1694:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5189,"nodeType":"IfStatement","src":"1690:28:25","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":5185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1710:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":5186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5187,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1709:9:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5181,"id":5188,"nodeType":"Return","src":"1702:16:25"}},{"assignments":[5191],"declarations":[{"constant":false,"id":5191,"mutability":"mutable","name":"c","nameLocation":"1740:1:25","nodeType":"VariableDeclaration","scope":5210,"src":"1732:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1732:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5195,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"1744:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5193,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"1748:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1744:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1732:17:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5196,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"1767:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5197,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"1771:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1767:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5199,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"1776:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1767:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5205,"nodeType":"IfStatement","src":"1763:33:25","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1787:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":5202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1786:10:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5181,"id":5204,"nodeType":"Return","src":"1779:17:25"}},{"expression":{"components":[{"hexValue":"74727565","id":5206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1818:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":5207,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"1824:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5208,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1817:9:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":5181,"id":5209,"nodeType":"Return","src":"1810:16:25"}]}]},"documentation":{"id":5171,"nodeType":"StructuredDocumentation","src":"1208:137:25","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":5212,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1359:6:25","nodeType":"FunctionDefinition","parameters":{"id":5176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5173,"mutability":"mutable","name":"a","nameLocation":"1374:1:25","nodeType":"VariableDeclaration","scope":5212,"src":"1366:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5172,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5175,"mutability":"mutable","name":"b","nameLocation":"1385:1:25","nodeType":"VariableDeclaration","scope":5212,"src":"1377:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1377:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1365:22:25"},"returnParameters":{"id":5181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5212,"src":"1411:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5177,"name":"bool","nodeType":"ElementaryTypeName","src":"1411:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5212,"src":"1417:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5179,"name":"uint256","nodeType":"ElementaryTypeName","src":"1417:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1410:15:25"},"scope":5419,"src":"1350:493:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5239,"nodeType":"Block","src":"2068:114:25","statements":[{"id":5238,"nodeType":"UncheckedBlock","src":"2078:98:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5224,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5217,"src":"2106:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2111:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2106:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5231,"nodeType":"IfStatement","src":"2102:29:25","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2122:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":5228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2129:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5229,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2121:10:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5223,"id":5230,"nodeType":"Return","src":"2114:17:25"}},{"expression":{"components":[{"hexValue":"74727565","id":5232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2153:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5233,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5215,"src":"2159:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5234,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5217,"src":"2163:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2159:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5236,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2152:13:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":5223,"id":5237,"nodeType":"Return","src":"2145:20:25"}]}]},"documentation":{"id":5213,"nodeType":"StructuredDocumentation","src":"1849:138:25","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":5240,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"2001:6:25","nodeType":"FunctionDefinition","parameters":{"id":5218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5215,"mutability":"mutable","name":"a","nameLocation":"2016:1:25","nodeType":"VariableDeclaration","scope":5240,"src":"2008:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5214,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5217,"mutability":"mutable","name":"b","nameLocation":"2027:1:25","nodeType":"VariableDeclaration","scope":5240,"src":"2019:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5216,"name":"uint256","nodeType":"ElementaryTypeName","src":"2019:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:22:25"},"returnParameters":{"id":5223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5240,"src":"2053:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5219,"name":"bool","nodeType":"ElementaryTypeName","src":"2053:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5240,"src":"2059:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5221,"name":"uint256","nodeType":"ElementaryTypeName","src":"2059:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2052:15:25"},"scope":5419,"src":"1992:190:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5267,"nodeType":"Block","src":"2417:114:25","statements":[{"id":5266,"nodeType":"UncheckedBlock","src":"2427:98:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5252,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5245,"src":"2455:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2460:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2455:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5259,"nodeType":"IfStatement","src":"2451:29:25","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2471:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":5256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2478:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5257,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2470:10:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5251,"id":5258,"nodeType":"Return","src":"2463:17:25"}},{"expression":{"components":[{"hexValue":"74727565","id":5260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2502:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5261,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5243,"src":"2508:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":5262,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5245,"src":"2512:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2508:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5264,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2501:13:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":5251,"id":5265,"nodeType":"Return","src":"2494:20:25"}]}]},"documentation":{"id":5241,"nodeType":"StructuredDocumentation","src":"2188:148:25","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":5268,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2350:6:25","nodeType":"FunctionDefinition","parameters":{"id":5246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5243,"mutability":"mutable","name":"a","nameLocation":"2365:1:25","nodeType":"VariableDeclaration","scope":5268,"src":"2357:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5242,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5245,"mutability":"mutable","name":"b","nameLocation":"2376:1:25","nodeType":"VariableDeclaration","scope":5268,"src":"2368:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5244,"name":"uint256","nodeType":"ElementaryTypeName","src":"2368:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2356:22:25"},"returnParameters":{"id":5251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5268,"src":"2402:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5247,"name":"bool","nodeType":"ElementaryTypeName","src":"2402:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5250,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5268,"src":"2408:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5249,"name":"uint256","nodeType":"ElementaryTypeName","src":"2408:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2401:15:25"},"scope":5419,"src":"2341:190:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5282,"nodeType":"Block","src":"2833:29:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5278,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"2850:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5279,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5273,"src":"2854:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2850:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5277,"id":5281,"nodeType":"Return","src":"2843:12:25"}]},"documentation":{"id":5269,"nodeType":"StructuredDocumentation","src":"2537:224:25","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":5283,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2775:3:25","nodeType":"FunctionDefinition","parameters":{"id":5274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5271,"mutability":"mutable","name":"a","nameLocation":"2787:1:25","nodeType":"VariableDeclaration","scope":5283,"src":"2779:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5270,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5273,"mutability":"mutable","name":"b","nameLocation":"2798:1:25","nodeType":"VariableDeclaration","scope":5283,"src":"2790:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5272,"name":"uint256","nodeType":"ElementaryTypeName","src":"2790:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2778:22:25"},"returnParameters":{"id":5277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5283,"src":"2824:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5275,"name":"uint256","nodeType":"ElementaryTypeName","src":"2824:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2823:9:25"},"scope":5419,"src":"2766:96:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5297,"nodeType":"Block","src":"3200:29:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5293,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"3217:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5294,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5288,"src":"3221:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3217:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5292,"id":5296,"nodeType":"Return","src":"3210:12:25"}]},"documentation":{"id":5284,"nodeType":"StructuredDocumentation","src":"2868:260:25","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":5298,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3142:3:25","nodeType":"FunctionDefinition","parameters":{"id":5289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5286,"mutability":"mutable","name":"a","nameLocation":"3154:1:25","nodeType":"VariableDeclaration","scope":5298,"src":"3146:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5285,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5288,"mutability":"mutable","name":"b","nameLocation":"3165:1:25","nodeType":"VariableDeclaration","scope":5298,"src":"3157:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5287,"name":"uint256","nodeType":"ElementaryTypeName","src":"3157:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3145:22:25"},"returnParameters":{"id":5292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5298,"src":"3191:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5290,"name":"uint256","nodeType":"ElementaryTypeName","src":"3191:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3190:9:25"},"scope":5419,"src":"3133:96:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5312,"nodeType":"Block","src":"3543:29:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5308,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"3560:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5309,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"3564:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3560:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5307,"id":5311,"nodeType":"Return","src":"3553:12:25"}]},"documentation":{"id":5299,"nodeType":"StructuredDocumentation","src":"3235:236:25","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":5313,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3485:3:25","nodeType":"FunctionDefinition","parameters":{"id":5304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5301,"mutability":"mutable","name":"a","nameLocation":"3497:1:25","nodeType":"VariableDeclaration","scope":5313,"src":"3489:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5300,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5303,"mutability":"mutable","name":"b","nameLocation":"3508:1:25","nodeType":"VariableDeclaration","scope":5313,"src":"3500:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5302,"name":"uint256","nodeType":"ElementaryTypeName","src":"3500:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3488:22:25"},"returnParameters":{"id":5307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5313,"src":"3534:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5305,"name":"uint256","nodeType":"ElementaryTypeName","src":"3534:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3533:9:25"},"scope":5419,"src":"3476:96:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5327,"nodeType":"Block","src":"3928:29:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5323,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"3945:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5324,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5318,"src":"3949:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3945:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5322,"id":5326,"nodeType":"Return","src":"3938:12:25"}]},"documentation":{"id":5314,"nodeType":"StructuredDocumentation","src":"3578:278:25","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":5328,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3870:3:25","nodeType":"FunctionDefinition","parameters":{"id":5319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5316,"mutability":"mutable","name":"a","nameLocation":"3882:1:25","nodeType":"VariableDeclaration","scope":5328,"src":"3874:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5315,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5318,"mutability":"mutable","name":"b","nameLocation":"3893:1:25","nodeType":"VariableDeclaration","scope":5328,"src":"3885:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5317,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3873:22:25"},"returnParameters":{"id":5322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5328,"src":"3919:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5320,"name":"uint256","nodeType":"ElementaryTypeName","src":"3919:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3918:9:25"},"scope":5419,"src":"3861:96:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5342,"nodeType":"Block","src":"4477:29:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5338,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5331,"src":"4494:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":5339,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"4498:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4494:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5337,"id":5341,"nodeType":"Return","src":"4487:12:25"}]},"documentation":{"id":5329,"nodeType":"StructuredDocumentation","src":"3963:442:25","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":5343,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4419:3:25","nodeType":"FunctionDefinition","parameters":{"id":5334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5331,"mutability":"mutable","name":"a","nameLocation":"4431:1:25","nodeType":"VariableDeclaration","scope":5343,"src":"4423:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5330,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5333,"mutability":"mutable","name":"b","nameLocation":"4442:1:25","nodeType":"VariableDeclaration","scope":5343,"src":"4434:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5332,"name":"uint256","nodeType":"ElementaryTypeName","src":"4434:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4422:22:25"},"returnParameters":{"id":5337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5343,"src":"4468:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5335,"name":"uint256","nodeType":"ElementaryTypeName","src":"4468:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4467:9:25"},"scope":5419,"src":"4410:96:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5367,"nodeType":"Block","src":"5065:106:25","statements":[{"id":5366,"nodeType":"UncheckedBlock","src":"5075:90:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5356,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"5107:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5357,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"5112:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5107:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5359,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5350,"src":"5115:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5355,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5099:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5099:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5361,"nodeType":"ExpressionStatement","src":"5099:29:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5362,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"5149:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5363,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"5153:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5149:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5354,"id":5365,"nodeType":"Return","src":"5142:12:25"}]}]},"documentation":{"id":5344,"nodeType":"StructuredDocumentation","src":"4512:453:25","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":5368,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4979:3:25","nodeType":"FunctionDefinition","parameters":{"id":5351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5346,"mutability":"mutable","name":"a","nameLocation":"4991:1:25","nodeType":"VariableDeclaration","scope":5368,"src":"4983:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5345,"name":"uint256","nodeType":"ElementaryTypeName","src":"4983:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5348,"mutability":"mutable","name":"b","nameLocation":"5002:1:25","nodeType":"VariableDeclaration","scope":5368,"src":"4994:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5347,"name":"uint256","nodeType":"ElementaryTypeName","src":"4994:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5350,"mutability":"mutable","name":"errorMessage","nameLocation":"5019:12:25","nodeType":"VariableDeclaration","scope":5368,"src":"5005:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5349,"name":"string","nodeType":"ElementaryTypeName","src":"5005:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4982:50:25"},"returnParameters":{"id":5354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5368,"src":"5056:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5352,"name":"uint256","nodeType":"ElementaryTypeName","src":"5056:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5055:9:25"},"scope":5419,"src":"4970:201:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5392,"nodeType":"Block","src":"5750:105:25","statements":[{"id":5391,"nodeType":"UncheckedBlock","src":"5760:89:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5381,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5373,"src":"5792:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5796:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5792:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5384,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"5799:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5380,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5784:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5386,"nodeType":"ExpressionStatement","src":"5784:28:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5387,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5371,"src":"5833:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5388,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5373,"src":"5837:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5833:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5379,"id":5390,"nodeType":"Return","src":"5826:12:25"}]}]},"documentation":{"id":5369,"nodeType":"StructuredDocumentation","src":"5177:473:25","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":5393,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5664:3:25","nodeType":"FunctionDefinition","parameters":{"id":5376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5371,"mutability":"mutable","name":"a","nameLocation":"5676:1:25","nodeType":"VariableDeclaration","scope":5393,"src":"5668:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5370,"name":"uint256","nodeType":"ElementaryTypeName","src":"5668:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5373,"mutability":"mutable","name":"b","nameLocation":"5687:1:25","nodeType":"VariableDeclaration","scope":5393,"src":"5679:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5372,"name":"uint256","nodeType":"ElementaryTypeName","src":"5679:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5375,"mutability":"mutable","name":"errorMessage","nameLocation":"5704:12:25","nodeType":"VariableDeclaration","scope":5393,"src":"5690:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5374,"name":"string","nodeType":"ElementaryTypeName","src":"5690:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5667:50:25"},"returnParameters":{"id":5379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5393,"src":"5741:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5377,"name":"uint256","nodeType":"ElementaryTypeName","src":"5741:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5740:9:25"},"scope":5419,"src":"5655:200:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5417,"nodeType":"Block","src":"6596:105:25","statements":[{"id":5416,"nodeType":"UncheckedBlock","src":"6606:89:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5406,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"6638:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6642:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6638:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5409,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"6645:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5405,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6630:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6630:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5411,"nodeType":"ExpressionStatement","src":"6630:28:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5412,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5396,"src":"6679:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":5413,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"6683:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6679:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5404,"id":5415,"nodeType":"Return","src":"6672:12:25"}]}]},"documentation":{"id":5394,"nodeType":"StructuredDocumentation","src":"5861:635:25","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":5418,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6510:3:25","nodeType":"FunctionDefinition","parameters":{"id":5401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5396,"mutability":"mutable","name":"a","nameLocation":"6522:1:25","nodeType":"VariableDeclaration","scope":5418,"src":"6514:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5395,"name":"uint256","nodeType":"ElementaryTypeName","src":"6514:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5398,"mutability":"mutable","name":"b","nameLocation":"6533:1:25","nodeType":"VariableDeclaration","scope":5418,"src":"6525:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5397,"name":"uint256","nodeType":"ElementaryTypeName","src":"6525:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5400,"mutability":"mutable","name":"errorMessage","nameLocation":"6550:12:25","nodeType":"VariableDeclaration","scope":5418,"src":"6536:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5399,"name":"string","nodeType":"ElementaryTypeName","src":"6536:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6513:50:25"},"returnParameters":{"id":5404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5418,"src":"6587:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5402,"name":"uint256","nodeType":"ElementaryTypeName","src":"6587:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6586:9:25"},"scope":5419,"src":"6501:200:25","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5420,"src":"482:6221:25","usedErrors":[],"usedEvents":[]}],"src":"107:6597:25"},"id":25},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[5524]},"id":5525,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5421,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":5422,"nodeType":"StructuredDocumentation","src":"134:80:26","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5524,"linearizedBaseContracts":[5524],"name":"SignedMathUpgradeable","nameLocation":"223:21:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":5439,"nodeType":"Block","src":"386:37:26","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5432,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"403:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5433,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5427,"src":"407:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5436,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5427,"src":"415:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:26","trueExpression":{"id":5435,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"411:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5431,"id":5438,"nodeType":"Return","src":"396:20:26"}]},"documentation":{"id":5423,"nodeType":"StructuredDocumentation","src":"251:66:26","text":" @dev Returns the largest of two signed numbers."},"id":5440,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:26","nodeType":"FunctionDefinition","parameters":{"id":5428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5425,"mutability":"mutable","name":"a","nameLocation":"342:1:26","nodeType":"VariableDeclaration","scope":5440,"src":"335:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5424,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5427,"mutability":"mutable","name":"b","nameLocation":"352:1:26","nodeType":"VariableDeclaration","scope":5440,"src":"345:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5426,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:26"},"returnParameters":{"id":5431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5440,"src":"378:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5429,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:26"},"scope":5524,"src":"322:101:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5457,"nodeType":"Block","src":"565:37:26","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5450,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"582:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5451,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"586:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5454,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"594:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:26","trueExpression":{"id":5453,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"590:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5449,"id":5456,"nodeType":"Return","src":"575:20:26"}]},"documentation":{"id":5441,"nodeType":"StructuredDocumentation","src":"429:67:26","text":" @dev Returns the smallest of two signed numbers."},"id":5458,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:26","nodeType":"FunctionDefinition","parameters":{"id":5446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5443,"mutability":"mutable","name":"a","nameLocation":"521:1:26","nodeType":"VariableDeclaration","scope":5458,"src":"514:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5442,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5445,"mutability":"mutable","name":"b","nameLocation":"531:1:26","nodeType":"VariableDeclaration","scope":5458,"src":"524:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5444,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:26"},"returnParameters":{"id":5449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5458,"src":"557:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5447,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:26"},"scope":5524,"src":"501:101:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5501,"nodeType":"Block","src":"807:162:26","statements":[{"assignments":[5469],"declarations":[{"constant":false,"id":5469,"mutability":"mutable","name":"x","nameLocation":"876:1:26","nodeType":"VariableDeclaration","scope":5501,"src":"869:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5468,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5482,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5470,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"881:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5471,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"885:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5473,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5474,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"892:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5475,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"896:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5480,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:26"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5483,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"921:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5488,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"941:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5486,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:26","typeDescriptions":{}}},"id":5489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:26","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5484,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:26","typeDescriptions":{}}},"id":5492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5493,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"955:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5494,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"959:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5498,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5467,"id":5500,"nodeType":"Return","src":"914:48:26"}]},"documentation":{"id":5459,"nodeType":"StructuredDocumentation","src":"608:126:26","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":5502,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:26","nodeType":"FunctionDefinition","parameters":{"id":5464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5461,"mutability":"mutable","name":"a","nameLocation":"763:1:26","nodeType":"VariableDeclaration","scope":5502,"src":"756:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5460,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5463,"mutability":"mutable","name":"b","nameLocation":"773:1:26","nodeType":"VariableDeclaration","scope":5502,"src":"766:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5462,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:26"},"returnParameters":{"id":5467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5502,"src":"799:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5465,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:26"},"scope":5524,"src":"739:230:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5522,"nodeType":"Block","src":"1113:158:26","statements":[{"id":5521,"nodeType":"UncheckedBlock","src":"1123:142:26","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5512,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"1238:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":5513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:26","subExpression":{"id":5516,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"1252:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:26","trueExpression":{"id":5515,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"1247:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5510,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:26","typeDescriptions":{}}},"id":5519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5509,"id":5520,"nodeType":"Return","src":"1223:31:26"}]}]},"documentation":{"id":5503,"nodeType":"StructuredDocumentation","src":"975:78:26","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5523,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:26","nodeType":"FunctionDefinition","parameters":{"id":5506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5505,"mutability":"mutable","name":"n","nameLocation":"1078:1:26","nodeType":"VariableDeclaration","scope":5523,"src":"1071:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5504,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:26"},"returnParameters":{"id":5509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5523,"src":"1104:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5507,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:26"},"scope":5524,"src":"1058:213:26","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5525,"src":"215:1058:26","usedErrors":[],"usedEvents":[]}],"src":"109:1165:26"},"id":26},"contracts/HatcherV1.sol":{"ast":{"absolutePath":"contracts/HatcherV1.sol","exportedSymbols":{"AddressUpgradeable":[3126],"ClaimablePlanet":[5623],"ContextUpgradeable":[3177],"CountersUpgradeable":[3251],"ECDSAUpgradeable":[3956],"EIP712Upgradeable":[4241],"ERC1967UpgradeUpgradeable":[1014],"ERC20PermitUpgradeable":[2341],"ERC20Upgradeable":[2071],"HatcherV1":[6567],"IBeaconUpgradeable":[1024],"IBreedContract":[5605],"IERC1822ProxiableUpgradeable":[689],"IERC1967Upgradeable":[654],"IERC20MetadataUpgradeable":[2366],"IERC20PermitUpgradeable":[2402],"IERC20Upgradeable":[2149],"IERC5267Upgradeable":[679],"IERC721":[5591],"IERC721ReceiverUpgradeable":[2796],"Initializable":[1193],"ListedPlanet":[5612],"MathUpgradeable":[5107],"OwnableUpgradeable":[132],"PausableUpgradeable":[1458],"PaymentSplitterUpgradeable":[633],"PlanetData":[5649],"SafeERC20Upgradeable":[2778],"SafeMathUpgradeable":[5419],"SignedMathUpgradeable":[5524],"StorageSlotUpgradeable":[3361],"StringsUpgradeable":[3590],"UUPSUpgradeable":[1330]},"id":6568,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5526,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":5527,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":133,"src":"57:75:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":5528,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":1459,"src":"133:78:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":5529,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":1194,"src":"212:75:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":5530,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":1331,"src":"288:77:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol","id":5531,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":5420,"src":"366:80:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","id":5532,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":3127,"src":"447:74:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol","id":5533,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":2342,"src":"523:95:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol","id":5534,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":634,"src":"619:84:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol","id":5535,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":2797,"src":"704:89:27","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5591,"linearizedBaseContracts":[5591],"name":"IERC721","nameLocation":"805:7:27","nodeType":"ContractDefinition","nodes":[{"functionSelector":"23b872dd","id":5544,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"826:12:27","nodeType":"FunctionDefinition","parameters":{"id":5542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5537,"mutability":"mutable","name":"from","nameLocation":"847:4:27","nodeType":"VariableDeclaration","scope":5544,"src":"839:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5536,"name":"address","nodeType":"ElementaryTypeName","src":"839:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5539,"mutability":"mutable","name":"to","nameLocation":"861:2:27","nodeType":"VariableDeclaration","scope":5544,"src":"853:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5538,"name":"address","nodeType":"ElementaryTypeName","src":"853:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5541,"mutability":"mutable","name":"tokenId","nameLocation":"873:7:27","nodeType":"VariableDeclaration","scope":5544,"src":"865:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5540,"name":"uint256","nodeType":"ElementaryTypeName","src":"865:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"838:43:27"},"returnParameters":{"id":5543,"nodeType":"ParameterList","parameters":[],"src":"890:0:27"},"scope":5591,"src":"817:74:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b88d4fde","id":5555,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"903:16:27","nodeType":"FunctionDefinition","parameters":{"id":5553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5546,"mutability":"mutable","name":"from","nameLocation":"933:4:27","nodeType":"VariableDeclaration","scope":5555,"src":"925:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5545,"name":"address","nodeType":"ElementaryTypeName","src":"925:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5548,"mutability":"mutable","name":"to","nameLocation":"951:2:27","nodeType":"VariableDeclaration","scope":5555,"src":"943:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5547,"name":"address","nodeType":"ElementaryTypeName","src":"943:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5550,"mutability":"mutable","name":"tokenId","nameLocation":"967:7:27","nodeType":"VariableDeclaration","scope":5555,"src":"959:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5549,"name":"uint256","nodeType":"ElementaryTypeName","src":"959:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5552,"mutability":"mutable","name":"data","nameLocation":"995:4:27","nodeType":"VariableDeclaration","scope":5555,"src":"980:19:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5551,"name":"bytes","nodeType":"ElementaryTypeName","src":"980:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"919:84:27"},"returnParameters":{"id":5554,"nodeType":"ParameterList","parameters":[],"src":"1012:0:27"},"scope":5591,"src":"894:119:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"42842e0e","id":5564,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1025:16:27","nodeType":"FunctionDefinition","parameters":{"id":5562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5557,"mutability":"mutable","name":"from","nameLocation":"1050:4:27","nodeType":"VariableDeclaration","scope":5564,"src":"1042:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5556,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5559,"mutability":"mutable","name":"to","nameLocation":"1064:2:27","nodeType":"VariableDeclaration","scope":5564,"src":"1056:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5558,"name":"address","nodeType":"ElementaryTypeName","src":"1056:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5561,"mutability":"mutable","name":"tokenId","nameLocation":"1076:7:27","nodeType":"VariableDeclaration","scope":5564,"src":"1068:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5560,"name":"uint256","nodeType":"ElementaryTypeName","src":"1068:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1041:43:27"},"returnParameters":{"id":5563,"nodeType":"ParameterList","parameters":[],"src":"1093:0:27"},"scope":5591,"src":"1016:78:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e985e9c5","id":5573,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"1106:16:27","nodeType":"FunctionDefinition","parameters":{"id":5569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5566,"mutability":"mutable","name":"owner","nameLocation":"1136:5:27","nodeType":"VariableDeclaration","scope":5573,"src":"1128:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5565,"name":"address","nodeType":"ElementaryTypeName","src":"1128:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5568,"mutability":"mutable","name":"operator","nameLocation":"1155:8:27","nodeType":"VariableDeclaration","scope":5573,"src":"1147:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5567,"name":"address","nodeType":"ElementaryTypeName","src":"1147:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1122:45:27"},"returnParameters":{"id":5572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5571,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5573,"src":"1191:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5570,"name":"bool","nodeType":"ElementaryTypeName","src":"1191:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1190:6:27"},"scope":5591,"src":"1097:100:27","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dc9ce7a5","id":5583,"implemented":false,"kind":"function","modifiers":[],"name":"getPlanetData","nameLocation":"1210:13:27","nodeType":"FunctionDefinition","parameters":{"id":5576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5575,"mutability":"mutable","name":"tokenId","nameLocation":"1237:7:27","nodeType":"VariableDeclaration","scope":5583,"src":"1229:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5574,"name":"uint256","nodeType":"ElementaryTypeName","src":"1229:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1223:25:27"},"returnParameters":{"id":5582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5583,"src":"1272:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PlanetData_$5649_memory_ptr","typeString":"struct PlanetData"},"typeName":{"id":5578,"nodeType":"UserDefinedTypeName","pathNode":{"id":5577,"name":"PlanetData","nameLocations":["1272:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":5649,"src":"1272:10:27"},"referencedDeclaration":5649,"src":"1272:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_PlanetData_$5649_storage_ptr","typeString":"struct PlanetData"}},"visibility":"internal"},{"constant":false,"id":5581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5583,"src":"1291:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5580,"name":"bool","nodeType":"ElementaryTypeName","src":"1291:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1271:25:27"},"scope":5591,"src":"1201:96:27","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a22cb465","id":5590,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1309:17:27","nodeType":"FunctionDefinition","parameters":{"id":5588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5585,"mutability":"mutable","name":"operator","nameLocation":"1335:8:27","nodeType":"VariableDeclaration","scope":5590,"src":"1327:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5584,"name":"address","nodeType":"ElementaryTypeName","src":"1327:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5587,"mutability":"mutable","name":"approved","nameLocation":"1350:8:27","nodeType":"VariableDeclaration","scope":5590,"src":"1345:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5586,"name":"bool","nodeType":"ElementaryTypeName","src":"1345:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1326:33:27"},"returnParameters":{"id":5589,"nodeType":"ParameterList","parameters":[],"src":"1368:0:27"},"scope":5591,"src":"1300:69:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6568,"src":"795:576:27","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IBreedContract","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5605,"linearizedBaseContracts":[5605],"name":"IBreedContract","nameLocation":"1383:14:27","nodeType":"ContractDefinition","nodes":[{"functionSelector":"bf0e57a3","id":5604,"implemented":false,"kind":"function","modifiers":[],"name":"requestBreed","nameLocation":"1411:12:27","nodeType":"FunctionDefinition","parameters":{"id":5600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5593,"mutability":"mutable","name":"planetAId","nameLocation":"1437:9:27","nodeType":"VariableDeclaration","scope":5604,"src":"1429:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5592,"name":"uint256","nodeType":"ElementaryTypeName","src":"1429:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5595,"mutability":"mutable","name":"planetBId","nameLocation":"1460:9:27","nodeType":"VariableDeclaration","scope":5604,"src":"1452:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5594,"name":"uint256","nodeType":"ElementaryTypeName","src":"1452:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5597,"mutability":"mutable","name":"shouldUseMiniBlackhole","nameLocation":"1480:22:27","nodeType":"VariableDeclaration","scope":5604,"src":"1475:27:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5596,"name":"bool","nodeType":"ElementaryTypeName","src":"1475:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5599,"mutability":"mutable","name":"value","nameLocation":"1513:5:27","nodeType":"VariableDeclaration","scope":5604,"src":"1508:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5598,"name":"uint","nodeType":"ElementaryTypeName","src":"1508:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1423:99:27"},"returnParameters":{"id":5603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5604,"src":"1549:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1549:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1548:9:27"},"scope":5605,"src":"1402:156:27","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":6568,"src":"1373:187:27","usedErrors":[],"usedEvents":[]},{"canonicalName":"ListedPlanet","id":5612,"members":[{"constant":false,"id":5607,"mutability":"mutable","name":"planet","nameLocation":"1594:6:27","nodeType":"VariableDeclaration","scope":5612,"src":"1586:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5606,"name":"uint256","nodeType":"ElementaryTypeName","src":"1586:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5609,"mutability":"mutable","name":"price","nameLocation":"1612:5:27","nodeType":"VariableDeclaration","scope":5612,"src":"1604:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1604:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5611,"mutability":"mutable","name":"ownerAddress","nameLocation":"1629:12:27","nodeType":"VariableDeclaration","scope":5612,"src":"1621:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5610,"name":"address","nodeType":"ElementaryTypeName","src":"1621:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"ListedPlanet","nameLocation":"1569:12:27","nodeType":"StructDefinition","scope":6568,"src":"1562:82:27","visibility":"public"},{"canonicalName":"ClaimablePlanet","id":5623,"members":[{"constant":false,"id":5614,"mutability":"mutable","name":"ownerParentAddress","nameLocation":"1681:18:27","nodeType":"VariableDeclaration","scope":5623,"src":"1673:26:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5613,"name":"address","nodeType":"ElementaryTypeName","src":"1673:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5616,"mutability":"mutable","name":"ownerTokenId","nameLocation":"1711:12:27","nodeType":"VariableDeclaration","scope":5623,"src":"1703:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5615,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5618,"mutability":"mutable","name":"delivered","nameLocation":"1732:9:27","nodeType":"VariableDeclaration","scope":5623,"src":"1727:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5617,"name":"bool","nodeType":"ElementaryTypeName","src":"1727:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5620,"mutability":"mutable","name":"otherParent","nameLocation":"1753:11:27","nodeType":"VariableDeclaration","scope":5623,"src":"1745:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5619,"name":"address","nodeType":"ElementaryTypeName","src":"1745:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5622,"mutability":"mutable","name":"otherTokenId","nameLocation":"1776:12:27","nodeType":"VariableDeclaration","scope":5623,"src":"1768:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5621,"name":"uint256","nodeType":"ElementaryTypeName","src":"1768:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ClaimablePlanet","nameLocation":"1653:15:27","nodeType":"StructDefinition","scope":6568,"src":"1646:145:27","visibility":"public"},{"canonicalName":"PlanetData","id":5649,"members":[{"constant":false,"id":5625,"mutability":"mutable","name":"gene","nameLocation":"1823:4:27","nodeType":"VariableDeclaration","scope":5649,"src":"1815:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5624,"name":"uint256","nodeType":"ElementaryTypeName","src":"1815:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5627,"mutability":"mutable","name":"baseAge","nameLocation":"1839:7:27","nodeType":"VariableDeclaration","scope":5649,"src":"1831:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5626,"name":"uint256","nodeType":"ElementaryTypeName","src":"1831:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5629,"mutability":"mutable","name":"evolve","nameLocation":"1858:6:27","nodeType":"VariableDeclaration","scope":5649,"src":"1850:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1850:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5631,"mutability":"mutable","name":"breedCount","nameLocation":"1876:10:27","nodeType":"VariableDeclaration","scope":5649,"src":"1868:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5630,"name":"uint256","nodeType":"ElementaryTypeName","src":"1868:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5633,"mutability":"mutable","name":"breedCountMax","nameLocation":"1898:13:27","nodeType":"VariableDeclaration","scope":5649,"src":"1890:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5632,"name":"uint256","nodeType":"ElementaryTypeName","src":"1890:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5635,"mutability":"mutable","name":"createTime","nameLocation":"1923:10:27","nodeType":"VariableDeclaration","scope":5649,"src":"1915:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5634,"name":"uint256","nodeType":"ElementaryTypeName","src":"1915:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5637,"mutability":"mutable","name":"bornTime","nameLocation":"1961:8:27","nodeType":"VariableDeclaration","scope":5649,"src":"1953:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5636,"name":"uint256","nodeType":"ElementaryTypeName","src":"1953:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5639,"mutability":"mutable","name":"lastBreedTime","nameLocation":"1996:13:27","nodeType":"VariableDeclaration","scope":5649,"src":"1988:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5638,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5642,"mutability":"mutable","name":"relicsTokenIDs","nameLocation":"2023:14:27","nodeType":"VariableDeclaration","scope":5649,"src":"2013:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5640,"name":"uint256","nodeType":"ElementaryTypeName","src":"2013:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5641,"nodeType":"ArrayTypeName","src":"2013:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5645,"mutability":"mutable","name":"parents","nameLocation":"2051:7:27","nodeType":"VariableDeclaration","scope":5649,"src":"2041:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5643,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5644,"nodeType":"ArrayTypeName","src":"2041:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5648,"mutability":"mutable","name":"children","nameLocation":"2091:8:27","nodeType":"VariableDeclaration","scope":5649,"src":"2081:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5646,"name":"uint256","nodeType":"ElementaryTypeName","src":"2081:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5647,"nodeType":"ArrayTypeName","src":"2081:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"PlanetData","nameLocation":"1800:10:27","nodeType":"StructDefinition","scope":6568,"src":"1793:330:27","visibility":"public"},{"abstract":false,"baseContracts":[{"baseName":{"id":5651,"name":"Initializable","nameLocations":["2403:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1193,"src":"2403:13:27"},"id":5652,"nodeType":"InheritanceSpecifier","src":"2403:13:27"},{"baseName":{"id":5653,"name":"PausableUpgradeable","nameLocations":["2420:19:27"],"nodeType":"IdentifierPath","referencedDeclaration":1458,"src":"2420:19:27"},"id":5654,"nodeType":"InheritanceSpecifier","src":"2420:19:27"},{"baseName":{"id":5655,"name":"UUPSUpgradeable","nameLocations":["2443:15:27"],"nodeType":"IdentifierPath","referencedDeclaration":1330,"src":"2443:15:27"},"id":5656,"nodeType":"InheritanceSpecifier","src":"2443:15:27"},{"baseName":{"id":5657,"name":"EIP712Upgradeable","nameLocations":["2462:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":4241,"src":"2462:17:27"},"id":5658,"nodeType":"InheritanceSpecifier","src":"2462:17:27"},{"baseName":{"id":5659,"name":"ERC20PermitUpgradeable","nameLocations":["2483:22:27"],"nodeType":"IdentifierPath","referencedDeclaration":2341,"src":"2483:22:27"},"id":5660,"nodeType":"InheritanceSpecifier","src":"2483:22:27"},{"baseName":{"id":5661,"name":"PaymentSplitterUpgradeable","nameLocations":["2509:26:27"],"nodeType":"IdentifierPath","referencedDeclaration":633,"src":"2509:26:27"},"id":5662,"nodeType":"InheritanceSpecifier","src":"2509:26:27"},{"baseName":{"id":5663,"name":"IERC721ReceiverUpgradeable","nameLocations":["2539:26:27"],"nodeType":"IdentifierPath","referencedDeclaration":2796,"src":"2539:26:27"},"id":5664,"nodeType":"InheritanceSpecifier","src":"2539:26:27"},{"baseName":{"id":5665,"name":"OwnableUpgradeable","nameLocations":["2569:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":132,"src":"2569:18:27"},"id":5666,"nodeType":"InheritanceSpecifier","src":"2569:18:27"}],"canonicalName":"HatcherV1","contractDependencies":[],"contractKind":"contract","documentation":{"id":5650,"nodeType":"StructuredDocumentation","src":"2125:254:27","text":"@title HatcherGG\n @author Caecus\n @notice This contract allows for escrowed NFT breeding\n @dev Contract is liable to be updated without warning\n @dev Homo faber suae quisque fortunae\n @custom:security-contact security@earnalliance.com"},"fullyImplemented":true,"id":6567,"linearizedBaseContracts":[6567,132,2796,633,2341,4241,679,2402,2071,2366,2149,1330,1014,654,689,1458,3177,1193],"name":"HatcherV1","nameLocation":"2388:9:27","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5669,"libraryName":{"id":5667,"name":"AddressUpgradeable","nameLocations":["2598:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":3126,"src":"2598:18:27"},"nodeType":"UsingForDirective","src":"2592:45:27","typeName":{"id":5668,"name":"address","nodeType":"ElementaryTypeName","src":"2621:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"anonymous":false,"eventSelector":"13c6ec2a463a35f898a457814a782f1f567808293fa783a31fa4dac8868e6011","id":5681,"name":"NftReceived","nameLocation":"2647:11:27","nodeType":"EventDefinition","parameters":{"id":5680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5671,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"2672:8:27","nodeType":"VariableDeclaration","scope":5681,"src":"2664:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5670,"name":"address","nodeType":"ElementaryTypeName","src":"2664:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5673,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"2694:4:27","nodeType":"VariableDeclaration","scope":5681,"src":"2686:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5672,"name":"address","nodeType":"ElementaryTypeName","src":"2686:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5675,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"2712:7:27","nodeType":"VariableDeclaration","scope":5681,"src":"2704:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5674,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5677,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"2731:4:27","nodeType":"VariableDeclaration","scope":5681,"src":"2725:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5676,"name":"bytes","nodeType":"ElementaryTypeName","src":"2725:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5679,"indexed":false,"mutability":"mutable","name":"typeOfReceival","nameLocation":"2748:14:27","nodeType":"VariableDeclaration","scope":5681,"src":"2741:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5678,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2658:108:27"},"src":"2641:126:27"},{"anonymous":false,"eventSelector":"b30319a217488a3ed441c348e935a48d16091e33109bab0c79a353b979752883","id":5691,"name":"ListedAPlanet","nameLocation":"2776:13:27","nodeType":"EventDefinition","parameters":{"id":5690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5683,"indexed":false,"mutability":"mutable","name":"sentFromUser","nameLocation":"2803:12:27","nodeType":"VariableDeclaration","scope":5691,"src":"2795:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5682,"name":"address","nodeType":"ElementaryTypeName","src":"2795:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5685,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"2829:5:27","nodeType":"VariableDeclaration","scope":5691,"src":"2821:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5684,"name":"address","nodeType":"ElementaryTypeName","src":"2821:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5687,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"2848:7:27","nodeType":"VariableDeclaration","scope":5691,"src":"2840:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5686,"name":"uint256","nodeType":"ElementaryTypeName","src":"2840:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5689,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"2869:5:27","nodeType":"VariableDeclaration","scope":5691,"src":"2861:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5688,"name":"uint256","nodeType":"ElementaryTypeName","src":"2861:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2789:89:27"},"src":"2770:109:27"},{"anonymous":false,"eventSelector":"0ece05e698e9e143fb75b2ad0aba7f141238c27b6d3e9728898183ee0d68498b","id":5699,"name":"DeListedAPlanet","nameLocation":"2888:15:27","nodeType":"EventDefinition","parameters":{"id":5698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5693,"indexed":false,"mutability":"mutable","name":"sentToUser","nameLocation":"2912:10:27","nodeType":"VariableDeclaration","scope":5699,"src":"2904:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5692,"name":"address","nodeType":"ElementaryTypeName","src":"2904:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5695,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"2932:5:27","nodeType":"VariableDeclaration","scope":5699,"src":"2924:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5694,"name":"address","nodeType":"ElementaryTypeName","src":"2924:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5697,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"2947:7:27","nodeType":"VariableDeclaration","scope":5699,"src":"2939:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5696,"name":"uint256","nodeType":"ElementaryTypeName","src":"2939:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2903:52:27"},"src":"2882:74:27"},{"anonymous":false,"eventSelector":"8557df6951fbdd47fe9027516fc896be40f285ed55a6acac460352adbab730cd","id":5709,"name":"PlanetsConjoining","nameLocation":"2966:17:27","nodeType":"EventDefinition","parameters":{"id":5708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5701,"indexed":false,"mutability":"mutable","name":"planetAsking","nameLocation":"2997:12:27","nodeType":"VariableDeclaration","scope":5709,"src":"2989:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5700,"name":"uint256","nodeType":"ElementaryTypeName","src":"2989:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5703,"indexed":false,"mutability":"mutable","name":"askingUser","nameLocation":"3023:10:27","nodeType":"VariableDeclaration","scope":5709,"src":"3015:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5702,"name":"address","nodeType":"ElementaryTypeName","src":"3015:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5705,"indexed":false,"mutability":"mutable","name":"planetJoining","nameLocation":"3047:13:27","nodeType":"VariableDeclaration","scope":5709,"src":"3039:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5704,"name":"uint256","nodeType":"ElementaryTypeName","src":"3039:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5707,"indexed":false,"mutability":"mutable","name":"joiningUser","nameLocation":"3074:11:27","nodeType":"VariableDeclaration","scope":5709,"src":"3066:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5706,"name":"address","nodeType":"ElementaryTypeName","src":"3066:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2983:106:27"},"src":"2960:130:27"},{"constant":false,"id":5712,"mutability":"mutable","name":"breedContract","nameLocation":"3109:13:27","nodeType":"VariableDeclaration","scope":6567,"src":"3094:28:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBreedContract_$5605","typeString":"contract IBreedContract"},"typeName":{"id":5711,"nodeType":"UserDefinedTypeName","pathNode":{"id":5710,"name":"IBreedContract","nameLocations":["3094:14:27"],"nodeType":"IdentifierPath","referencedDeclaration":5605,"src":"3094:14:27"},"referencedDeclaration":5605,"src":"3094:14:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBreedContract_$5605","typeString":"contract IBreedContract"}},"visibility":"internal"},{"constant":false,"id":5714,"mutability":"mutable","name":"treasuryAddr","nameLocation":"3151:12:27","nodeType":"VariableDeclaration","scope":6567,"src":"3127:36:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5713,"name":"address","nodeType":"ElementaryTypeName","src":"3127:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"private"},{"constant":false,"id":5717,"mutability":"mutable","name":"nftPlanetContract","nameLocation":"3176:17:27","nodeType":"VariableDeclaration","scope":6567,"src":"3168:25:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"},"typeName":{"id":5716,"nodeType":"UserDefinedTypeName","pathNode":{"id":5715,"name":"IERC721","nameLocations":["3168:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":5591,"src":"3168:7:27"},"referencedDeclaration":5591,"src":"3168:7:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}},"visibility":"internal"},{"constant":false,"id":5719,"mutability":"mutable","name":"vrfValue","nameLocation":"3206:8:27","nodeType":"VariableDeclaration","scope":6567,"src":"3198:16:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5718,"name":"uint256","nodeType":"ElementaryTypeName","src":"3198:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"functionSelector":"85fe7243","id":5725,"mutability":"mutable","name":"userToListedPlanets","nameLocation":"3261:19:27","nodeType":"VariableDeclaration","scope":6567,"src":"3219:61:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_$","typeString":"mapping(address => struct ListedPlanet[])"},"typeName":{"id":5724,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5720,"name":"address","nodeType":"ElementaryTypeName","src":"3227:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3219:34:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_$","typeString":"mapping(address => struct ListedPlanet[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":5722,"nodeType":"UserDefinedTypeName","pathNode":{"id":5721,"name":"ListedPlanet","nameLocations":["3238:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":5612,"src":"3238:12:27"},"referencedDeclaration":5612,"src":"3238:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage_ptr","typeString":"struct ListedPlanet"}},"id":5723,"nodeType":"ArrayTypeName","src":"3238:14:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr","typeString":"struct ListedPlanet[]"}}},"visibility":"public"},{"constant":false,"id":5729,"mutability":"mutable","name":"planetsListed","nameLocation":"3300:13:27","nodeType":"VariableDeclaration","scope":6567,"src":"3285:28:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet[]"},"typeName":{"baseType":{"id":5727,"nodeType":"UserDefinedTypeName","pathNode":{"id":5726,"name":"ListedPlanet","nameLocations":["3285:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":5612,"src":"3285:12:27"},"referencedDeclaration":5612,"src":"3285:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage_ptr","typeString":"struct ListedPlanet"}},"id":5728,"nodeType":"ArrayTypeName","src":"3285:14:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr","typeString":"struct ListedPlanet[]"}},"visibility":"internal"},{"constant":false,"functionSelector":"064db874","id":5733,"mutability":"mutable","name":"claimableTokenIdToOwnerAddress","nameLocation":"3387:30:27","nodeType":"VariableDeclaration","scope":6567,"src":"3352:65:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":5732,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5730,"name":"uint256","nodeType":"ElementaryTypeName","src":"3360:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3352:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5731,"name":"address","nodeType":"ElementaryTypeName","src":"3371:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"e22aecb4","id":5739,"mutability":"mutable","name":"claimablePlanets","nameLocation":"3511:16:27","nodeType":"VariableDeclaration","scope":6567,"src":"3466:61:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet[])"},"typeName":{"id":5738,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5734,"name":"address","nodeType":"ElementaryTypeName","src":"3474:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3466:37:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":5736,"nodeType":"UserDefinedTypeName","pathNode":{"id":5735,"name":"ClaimablePlanet","nameLocations":["3485:15:27"],"nodeType":"IdentifierPath","referencedDeclaration":5623,"src":"3485:15:27"},"referencedDeclaration":5623,"src":"3485:15:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimablePlanet_$5623_storage_ptr","typeString":"struct ClaimablePlanet"}},"id":5737,"nodeType":"ArrayTypeName","src":"3485:17:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_ptr","typeString":"struct ClaimablePlanet[]"}}},"visibility":"public"},{"documentation":{"id":5740,"nodeType":"StructuredDocumentation","src":"3532:78:27","text":"@notice error given if user other than minter tries to use forbidden funcs"},"errorSelector":"82b42900","id":5742,"name":"Unauthorized","nameLocation":"3619:12:27","nodeType":"ErrorDefinition","parameters":{"id":5741,"nodeType":"ParameterList","parameters":[],"src":"3631:2:27"},"src":"3613:21:27"},{"body":{"id":5756,"nodeType":"Block","src":"3865:33:27","statements":[{"expression":{"id":5754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5752,"name":"treasuryAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5714,"src":"3871:12:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5753,"name":"newTAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5745,"src":"3886:7:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3871:22:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5755,"nodeType":"ExpressionStatement","src":"3871:22:27"}]},"documentation":{"id":5743,"nodeType":"StructuredDocumentation","src":"3638:151:27","text":"@notice set URI.  Where metadata and images will come from per tokenId\n @param newTAdd the address that the owner would like the new URI to be"},"functionSelector":"cdb82a37","id":5757,"implemented":true,"kind":"function","modifiers":[{"id":5748,"kind":"modifierInvocation","modifierName":{"id":5747,"name":"onlyOwner","nameLocations":["3841:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"3841:9:27"},"nodeType":"ModifierInvocation","src":"3841:9:27"},{"id":5750,"kind":"modifierInvocation","modifierName":{"id":5749,"name":"whenNotPaused","nameLocations":["3851:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"3851:13:27"},"nodeType":"ModifierInvocation","src":"3851:13:27"}],"name":"setTAdd","nameLocation":"3801:7:27","nodeType":"FunctionDefinition","parameters":{"id":5746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5745,"mutability":"mutable","name":"newTAdd","nameLocation":"3825:7:27","nodeType":"VariableDeclaration","scope":5757,"src":"3809:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5744,"name":"address","nodeType":"ElementaryTypeName","src":"3809:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3808:25:27"},"returnParameters":{"id":5751,"nodeType":"ParameterList","parameters":[],"src":"3865:0:27"},"scope":6567,"src":"3792:106:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5787,"nodeType":"Block","src":"4115:140:27","statements":[{"expression":{"id":5773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5771,"name":"vrfValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"4121:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5772,"name":"_vrfValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5762,"src":"4132:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4121:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5774,"nodeType":"ExpressionStatement","src":"4121:20:27"},{"expression":{"id":5779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5775,"name":"breedContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5712,"src":"4147:13:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBreedContract_$5605","typeString":"contract IBreedContract"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5777,"name":"_breederContractAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5760,"src":"4178:20:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5776,"name":"IBreedContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5605,"src":"4163:14:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBreedContract_$5605_$","typeString":"type(contract IBreedContract)"}},"id":5778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4163:36:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBreedContract_$5605","typeString":"contract IBreedContract"}},"src":"4147:52:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBreedContract_$5605","typeString":"contract IBreedContract"}},"id":5780,"nodeType":"ExpressionStatement","src":"4147:52:27"},{"expression":{"id":5785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5781,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"4205:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5783,"name":"_nftContractAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5764,"src":"4233:16:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5782,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5591,"src":"4225:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$5591_$","typeString":"type(contract IERC721)"}},"id":5784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4225:25:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}},"src":"4205:45:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}},"id":5786,"nodeType":"ExpressionStatement","src":"4205:45:27"}]},"documentation":{"id":5758,"nodeType":"StructuredDocumentation","src":"3902:70:27","text":"@notice function should be run after deployment to set up defaults"},"functionSelector":"4a02099b","id":5788,"implemented":true,"kind":"function","modifiers":[{"id":5767,"kind":"modifierInvocation","modifierName":{"id":5766,"name":"onlyOwner","nameLocations":["4091:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"4091:9:27"},"nodeType":"ModifierInvocation","src":"4091:9:27"},{"id":5769,"kind":"modifierInvocation","modifierName":{"id":5768,"name":"whenNotPaused","nameLocations":["4101:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"4101:13:27"},"nodeType":"ModifierInvocation","src":"4101:13:27"}],"name":"setAllOf","nameLocation":"3984:8:27","nodeType":"FunctionDefinition","parameters":{"id":5765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5760,"mutability":"mutable","name":"_breederContractAddr","nameLocation":"4006:20:27","nodeType":"VariableDeclaration","scope":5788,"src":"3998:28:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5759,"name":"address","nodeType":"ElementaryTypeName","src":"3998:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5762,"mutability":"mutable","name":"_vrfValue","nameLocation":"4040:9:27","nodeType":"VariableDeclaration","scope":5788,"src":"4032:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5761,"name":"uint256","nodeType":"ElementaryTypeName","src":"4032:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5764,"mutability":"mutable","name":"_nftContractAddr","nameLocation":"4063:16:27","nodeType":"VariableDeclaration","scope":5788,"src":"4055:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5763,"name":"address","nodeType":"ElementaryTypeName","src":"4055:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3992:91:27"},"returnParameters":{"id":5770,"nodeType":"ParameterList","parameters":[],"src":"4115:0:27"},"scope":6567,"src":"3975:280:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5803,"nodeType":"Block","src":"4573:166:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5794,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"4579:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4579:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5796,"nodeType":"ExpressionStatement","src":"4579:16:27"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5797,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"4601:15:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4601:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5799,"nodeType":"ExpressionStatement","src":"4601:17:27"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5800,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"4657:22:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4657:24:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5802,"nodeType":"ExpressionStatement","src":"4657:24:27"}]},"documentation":{"id":5789,"nodeType":"StructuredDocumentation","src":"4373:156:27","text":"@notice Initialization of contract, called upon deployment\n @dev implements EIP712, is upgradeable, pausable, burn function is custom to save space"},"functionSelector":"8129fc1c","id":5804,"implemented":true,"kind":"function","modifiers":[{"id":5792,"kind":"modifierInvocation","modifierName":{"id":5791,"name":"initializer","nameLocations":["4561:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":1095,"src":"4561:11:27"},"nodeType":"ModifierInvocation","src":"4561:11:27"}],"name":"initialize","nameLocation":"4541:10:27","nodeType":"FunctionDefinition","parameters":{"id":5790,"nodeType":"ParameterList","parameters":[],"src":"4551:2:27"},"returnParameters":{"id":5793,"nodeType":"ParameterList","parameters":[],"src":"4573:0:27"},"scope":6567,"src":"4532:207:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5817,"nodeType":"Block","src":"4814:28:27","statements":[{"expression":{"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5813,"name":"vrfValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"4820:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5814,"name":"newVRF","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5806,"src":"4831:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4820:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5816,"nodeType":"ExpressionStatement","src":"4820:17:27"}]},"functionSelector":"c7c0e6b1","id":5818,"implemented":true,"kind":"function","modifiers":[{"id":5809,"kind":"modifierInvocation","modifierName":{"id":5808,"name":"onlyOwner","nameLocations":["4790:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"4790:9:27"},"nodeType":"ModifierInvocation","src":"4790:9:27"},{"id":5811,"kind":"modifierInvocation","modifierName":{"id":5810,"name":"whenNotPaused","nameLocations":["4800:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"4800:13:27"},"nodeType":"ModifierInvocation","src":"4800:13:27"}],"name":"changeVRFValue","nameLocation":"4752:14:27","nodeType":"FunctionDefinition","parameters":{"id":5807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5806,"mutability":"mutable","name":"newVRF","nameLocation":"4775:6:27","nodeType":"VariableDeclaration","scope":5818,"src":"4767:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5805,"name":"uint256","nodeType":"ElementaryTypeName","src":"4767:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4766:16:27"},"returnParameters":{"id":5812,"nodeType":"ParameterList","parameters":[],"src":"4814:0:27"},"scope":6567,"src":"4743:99:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5860,"nodeType":"Block","src":"4923:645:27","statements":[{"assignments":[5829],"declarations":[{"constant":false,"id":5829,"mutability":"mutable","name":"newPlanetToList","nameLocation":"5267:15:27","nodeType":"VariableDeclaration","scope":5860,"src":"5247:35:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet"},"typeName":{"id":5828,"nodeType":"UserDefinedTypeName","pathNode":{"id":5827,"name":"ListedPlanet","nameLocations":["5247:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":5612,"src":"5247:12:27"},"referencedDeclaration":5612,"src":"5247:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage_ptr","typeString":"struct ListedPlanet"}},"visibility":"internal"}],"id":5835,"initialValue":{"arguments":[{"id":5831,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"5305:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5832,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"5320:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5833,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5824,"src":"5333:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5830,"name":"ListedPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5612,"src":"5285:12:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ListedPlanet_$5612_storage_ptr_$","typeString":"type(struct ListedPlanet storage pointer)"}},"id":5834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5285:66:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}},"nodeType":"VariableDeclarationStatement","src":"5247:104:27"},{"expression":{"arguments":[{"id":5840,"name":"newPlanetToList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5829,"src":"5396:15:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}],"expression":{"baseExpression":{"id":5836,"name":"userToListedPlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5725,"src":"5357:19:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_$","typeString":"mapping(address => struct ListedPlanet storage ref[] storage ref)"}},"id":5838,"indexExpression":{"id":5837,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5824,"src":"5377:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5357:33:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":5839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:4:27","memberName":"push","nodeType":"MemberAccess","src":"5357:38:27","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr_$_t_struct$_ListedPlanet_$5612_storage_$returns$__$attached_to$_t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr_$","typeString":"function (struct ListedPlanet storage ref[] storage pointer,struct ListedPlanet storage ref)"}},"id":5841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5357:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5842,"nodeType":"ExpressionStatement","src":"5357:55:27"},{"expression":{"arguments":[{"id":5846,"name":"newPlanetToList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5829,"src":"5466:15:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}],"expression":{"id":5843,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"5447:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":5845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5461:4:27","memberName":"push","nodeType":"MemberAccess","src":"5447:18:27","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr_$_t_struct$_ListedPlanet_$5612_storage_$returns$__$attached_to$_t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr_$","typeString":"function (struct ListedPlanet storage ref[] storage pointer,struct ListedPlanet storage ref)"}},"id":5847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5447:35:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5848,"nodeType":"ExpressionStatement","src":"5447:35:27"},{"eventCall":{"arguments":[{"expression":{"id":5850,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5508:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5512:6:27","memberName":"sender","nodeType":"MemberAccess","src":"5508:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5854,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"5528:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}],"id":5853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5520:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5852,"name":"address","nodeType":"ElementaryTypeName","src":"5520:7:27","typeDescriptions":{}}},"id":5855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5520:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5856,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"5548:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5857,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"5557:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5849,"name":"ListedAPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5691,"src":"5494:13:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5494:69:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5859,"nodeType":"EmitStatement","src":"5489:74:27"}]},"id":5861,"implemented":true,"kind":"function","modifiers":[],"name":"list","nameLocation":"4855:4:27","nodeType":"FunctionDefinition","parameters":{"id":5825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5820,"mutability":"mutable","name":"tokenId","nameLocation":"4868:7:27","nodeType":"VariableDeclaration","scope":5861,"src":"4860:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5819,"name":"uint256","nodeType":"ElementaryTypeName","src":"4860:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5822,"mutability":"mutable","name":"price","nameLocation":"4885:5:27","nodeType":"VariableDeclaration","scope":5861,"src":"4877:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5821,"name":"uint256","nodeType":"ElementaryTypeName","src":"4877:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5824,"mutability":"mutable","name":"ownerAddress","nameLocation":"4900:12:27","nodeType":"VariableDeclaration","scope":5861,"src":"4892:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5823,"name":"address","nodeType":"ElementaryTypeName","src":"4892:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4859:54:27"},"returnParameters":{"id":5826,"nodeType":"ParameterList","parameters":[],"src":"4923:0:27"},"scope":6567,"src":"4846:722:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5971,"nodeType":"Block","src":"5910:835:27","statements":[{"assignments":[5869],"declarations":[{"constant":false,"id":5869,"mutability":"mutable","name":"parentA","nameLocation":"5924:7:27","nodeType":"VariableDeclaration","scope":5971,"src":"5916:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5868,"name":"address","nodeType":"ElementaryTypeName","src":"5916:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5873,"initialValue":{"baseExpression":{"id":5870,"name":"parents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5865,"src":"5934:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_memory_ptr","typeString":"address[2] memory"}},"id":5872,"indexExpression":{"hexValue":"30","id":5871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5942:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5934:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5916:28:27"},{"assignments":[5875],"declarations":[{"constant":false,"id":5875,"mutability":"mutable","name":"parentB","nameLocation":"5958:7:27","nodeType":"VariableDeclaration","scope":5971,"src":"5950:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5874,"name":"address","nodeType":"ElementaryTypeName","src":"5950:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5879,"initialValue":{"baseExpression":{"id":5876,"name":"parents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5865,"src":"5968:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_memory_ptr","typeString":"address[2] memory"}},"id":5878,"indexExpression":{"hexValue":"31","id":5877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5976:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5968:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5950:28:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5880,"name":"claimablePlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"5989:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet storage ref[] storage ref)"}},"id":5882,"indexExpression":{"id":5881,"name":"parentA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"6006:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5989:25:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage","typeString":"struct ClaimablePlanet storage ref[] storage ref"}},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6015:6:27","memberName":"length","nodeType":"MemberAccess","src":"5989:32:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6024:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5989:36:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5921,"name":"claimablePlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"6342:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet storage ref[] storage ref)"}},"id":5925,"indexExpression":{"baseExpression":{"id":5922,"name":"parents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5865,"src":"6359:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_memory_ptr","typeString":"address[2] memory"}},"id":5924,"indexExpression":{"hexValue":"31","id":5923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6359:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6342:28:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage","typeString":"struct ClaimablePlanet storage ref[] storage ref"}},"id":5926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6371:6:27","memberName":"length","nodeType":"MemberAccess","src":"6342:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6342:39:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5968,"nodeType":"Block","src":"6679:62:27","statements":[{"expression":{"arguments":[{"hexValue":"706c616e65742073656e7420657272616e746c792c206e6f206f6e6520746f20636c61696d","id":5965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6694:39:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_5406e50ea7864718d453083f078f6e8ce8b9eb471a337acbc04c0fadffe18ffe","typeString":"literal_string \"planet sent errantly, no one to claim\""},"value":"planet sent errantly, no one to claim"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5406e50ea7864718d453083f078f6e8ce8b9eb471a337acbc04c0fadffe18ffe","typeString":"literal_string \"planet sent errantly, no one to claim\""}],"id":5964,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"6687:6:27","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6687:47:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5967,"nodeType":"ExpressionStatement","src":"6687:47:27"}]},"id":5969,"nodeType":"IfStatement","src":"6338:403:27","trueBody":{"id":5963,"nodeType":"Block","src":"6383:290:27","statements":[{"body":{"id":5961,"nodeType":"Block","src":"6477:190:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":5942,"name":"claimablePlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"6491:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet storage ref[] storage ref)"}},"id":5944,"indexExpression":{"id":5943,"name":"parentB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5875,"src":"6508:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6491:25:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage","typeString":"struct ClaimablePlanet storage ref[] storage ref"}},"id":5946,"indexExpression":{"id":5945,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"6517:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6491:28:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimablePlanet_$5623_storage","typeString":"struct ClaimablePlanet storage ref"}},"id":5947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6520:11:27","memberName":"otherParent","nodeType":"MemberAccess","referencedDeclaration":5620,"src":"6491:40:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5948,"name":"parentA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"6535:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6491:51:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5960,"nodeType":"IfStatement","src":"6487:172:27","trueBody":{"id":5959,"nodeType":"Block","src":"6544:115:27","statements":[{"expression":{"id":5957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":5950,"name":"claimablePlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"6603:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet storage ref[] storage ref)"}},"id":5953,"indexExpression":{"id":5951,"name":"parentB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5875,"src":"6620:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6603:25:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage","typeString":"struct ClaimablePlanet storage ref[] storage ref"}},"id":5954,"indexExpression":{"id":5952,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"6629:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6603:28:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimablePlanet_$5623_storage","typeString":"struct ClaimablePlanet storage ref"}},"id":5955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6632:9:27","memberName":"delivered","nodeType":"MemberAccess","referencedDeclaration":5618,"src":"6603:38:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6644:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6603:45:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5958,"nodeType":"ExpressionStatement","src":"6603:45:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5933,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"6434:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":5934,"name":"claimablePlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"6438:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet storage ref[] storage ref)"}},"id":5936,"indexExpression":{"id":5935,"name":"parentB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5875,"src":"6455:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6438:25:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage","typeString":"struct ClaimablePlanet storage ref[] storage ref"}},"id":5937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6464:6:27","memberName":"length","nodeType":"MemberAccess","src":"6438:32:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6434:36:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5962,"initializationExpression":{"assignments":[5930],"declarations":[{"constant":false,"id":5930,"mutability":"mutable","name":"i","nameLocation":"6427:1:27","nodeType":"VariableDeclaration","scope":5962,"src":"6422:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5929,"name":"uint","nodeType":"ElementaryTypeName","src":"6422:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5932,"initialValue":{"hexValue":"30","id":5931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6431:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6422:10:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6472:3:27","subExpression":{"id":5939,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"6472:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5941,"nodeType":"ExpressionStatement","src":"6472:3:27"},"nodeType":"ForStatement","src":"6417:250:27"}]}},"id":5970,"nodeType":"IfStatement","src":"5985:756:27","trueBody":{"id":5920,"nodeType":"Block","src":"6027:305:27","statements":[{"body":{"id":5918,"nodeType":"Block","src":"6136:190:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":5899,"name":"claimablePlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"6150:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet storage ref[] storage ref)"}},"id":5901,"indexExpression":{"id":5900,"name":"parentA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"6167:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6150:25:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage","typeString":"struct ClaimablePlanet storage ref[] storage ref"}},"id":5903,"indexExpression":{"id":5902,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5887,"src":"6176:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6150:28:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimablePlanet_$5623_storage","typeString":"struct ClaimablePlanet storage ref"}},"id":5904,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6179:11:27","memberName":"otherParent","nodeType":"MemberAccess","referencedDeclaration":5620,"src":"6150:40:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5905,"name":"parentB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5875,"src":"6194:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6150:51:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5917,"nodeType":"IfStatement","src":"6146:172:27","trueBody":{"id":5916,"nodeType":"Block","src":"6203:115:27","statements":[{"expression":{"id":5914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":5907,"name":"claimablePlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"6262:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet storage ref[] storage ref)"}},"id":5910,"indexExpression":{"id":5908,"name":"parentA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"6279:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:25:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage","typeString":"struct ClaimablePlanet storage ref[] storage ref"}},"id":5911,"indexExpression":{"id":5909,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5887,"src":"6288:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:28:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimablePlanet_$5623_storage","typeString":"struct ClaimablePlanet storage ref"}},"id":5912,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6291:9:27","memberName":"delivered","nodeType":"MemberAccess","referencedDeclaration":5618,"src":"6262:38:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6303:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6262:45:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5915,"nodeType":"ExpressionStatement","src":"6262:45:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5890,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5887,"src":"6093:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":5891,"name":"claimablePlanets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"6097:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage_$","typeString":"mapping(address => struct ClaimablePlanet storage ref[] storage ref)"}},"id":5893,"indexExpression":{"id":5892,"name":"parentA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"6114:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6097:25:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimablePlanet_$5623_storage_$dyn_storage","typeString":"struct ClaimablePlanet storage ref[] storage ref"}},"id":5894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6123:6:27","memberName":"length","nodeType":"MemberAccess","src":"6097:32:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6093:36:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5919,"initializationExpression":{"assignments":[5887],"declarations":[{"constant":false,"id":5887,"mutability":"mutable","name":"i","nameLocation":"6086:1:27","nodeType":"VariableDeclaration","scope":5919,"src":"6081:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5886,"name":"uint","nodeType":"ElementaryTypeName","src":"6081:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5889,"initialValue":{"hexValue":"30","id":5888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6090:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6081:10:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6131:3:27","subExpression":{"id":5896,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5887,"src":"6131:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5898,"nodeType":"ExpressionStatement","src":"6131:3:27"},"nodeType":"ForStatement","src":"6076:250:27"}]}}]},"id":5972,"implemented":true,"kind":"function","modifiers":[],"name":"setDeliveryToTrue","nameLocation":"5856:17:27","nodeType":"FunctionDefinition","parameters":{"id":5866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5865,"mutability":"mutable","name":"parents","nameLocation":"5892:7:27","nodeType":"VariableDeclaration","scope":5972,"src":"5874:25:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_memory_ptr","typeString":"address[2]"},"typeName":{"baseType":{"id":5862,"name":"address","nodeType":"ElementaryTypeName","src":"5874:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5864,"length":{"hexValue":"32","id":5863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5882:1:27","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"5874:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_storage_ptr","typeString":"address[2]"}},"visibility":"internal"}],"src":"5873:27:27"},"returnParameters":{"id":5867,"nodeType":"ParameterList","parameters":[],"src":"5910:0:27"},"scope":6567,"src":"5847:898:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2795],"body":{"id":6106,"nodeType":"Block","src":"6896:1424:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5986,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6935:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6939:6:27","memberName":"sender","nodeType":"MemberAccess","src":"6935:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6957:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6949:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5988,"name":"address","nodeType":"ElementaryTypeName","src":"6949:7:27","typeDescriptions":{}}},"id":5991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6949:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6935:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5993,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"6963:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5996,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"6983:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}],"id":5995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6975:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5994,"name":"address","nodeType":"ElementaryTypeName","src":"6975:7:27","typeDescriptions":{}}},"id":5997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6975:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6963:38:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6935:66:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6055,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5980,"src":"7761:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7766:6:27","memberName":"length","nodeType":"MemberAccess","src":"7761:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7775:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7761:15:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6059,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"7780:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6062,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"7800:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}],"id":6061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7792:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6060,"name":"address","nodeType":"ElementaryTypeName","src":"7792:7:27","typeDescriptions":{}}},"id":6063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7792:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7780:38:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7761:57:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6099,"nodeType":"Block","src":"8112:138:27","statements":[{"eventCall":{"arguments":[{"id":6092,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"8196:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6093,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"8206:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6094,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5978,"src":"8212:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6095,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5980,"src":"8221:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"756e63617465676f72697a6564","id":6096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8227:15:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_91f8baf9efb51cfab6fd65a63f4dc181a441df51c27a087b6c0bda584f32be41","typeString":"literal_string \"uncategorized\""},"value":"uncategorized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_91f8baf9efb51cfab6fd65a63f4dc181a441df51c27a087b6c0bda584f32be41","typeString":"literal_string \"uncategorized\""}],"id":6091,"name":"NftReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"8184:11:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory,string memory)"}},"id":6097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8184:59:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6098,"nodeType":"EmitStatement","src":"8179:64:27"}]},"id":6100,"nodeType":"IfStatement","src":"7757:493:27","trueBody":{"id":6090,"nodeType":"Block","src":"7820:286:27","statements":[{"assignments":[6067],"declarations":[{"constant":false,"id":6067,"mutability":"mutable","name":"priceData","nameLocation":"7836:9:27","nodeType":"VariableDeclaration","scope":6090,"src":"7828:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6066,"name":"uint256","nodeType":"ElementaryTypeName","src":"7828:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6075,"initialValue":{"arguments":[{"id":6070,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5980,"src":"7859:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7866:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6071,"name":"uint256","nodeType":"ElementaryTypeName","src":"7866:7:27","typeDescriptions":{}}}],"id":6073,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7865:9:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":6068,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7848:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7852:6:27","memberName":"decode","nodeType":"MemberAccess","src":"7848:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7848:27:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7828:47:27"},{"expression":{"arguments":[{"id":6077,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5978,"src":"7888:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6078,"name":"priceData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6067,"src":"7897:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6079,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"7908:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6076,"name":"list","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5861,"src":"7883:4:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":6080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7883:30:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6081,"nodeType":"ExpressionStatement","src":"7883:30:27"},{"eventCall":{"arguments":[{"id":6083,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"8051:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6084,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"8061:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6085,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5978,"src":"8067:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6086,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5980,"src":"8076:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"6c697374696e6720706c616e6574","id":6087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8082:16:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_023f9cd908fc44c67a48322a2e671798c9e64d33ee119cc3c32d0b4c10f8f0a4","typeString":"literal_string \"listing planet\""},"value":"listing planet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_023f9cd908fc44c67a48322a2e671798c9e64d33ee119cc3c32d0b4c10f8f0a4","typeString":"literal_string \"listing planet\""}],"id":6082,"name":"NftReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"8039:11:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory,string memory)"}},"id":6088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8039:60:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6089,"nodeType":"EmitStatement","src":"8034:65:27"}]}},"id":6101,"nodeType":"IfStatement","src":"6931:1319:27","trueBody":{"id":6054,"nodeType":"Block","src":"7003:748:27","statements":[{"assignments":[6002,null],"declarations":[{"constant":false,"id":6002,"mutability":"mutable","name":"newPlanetData","nameLocation":"7051:13:27","nodeType":"VariableDeclaration","scope":6054,"src":"7033:31:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PlanetData_$5649_memory_ptr","typeString":"struct PlanetData"},"typeName":{"id":6001,"nodeType":"UserDefinedTypeName","pathNode":{"id":6000,"name":"PlanetData","nameLocations":["7033:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":5649,"src":"7033:10:27"},"referencedDeclaration":5649,"src":"7033:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_PlanetData_$5649_storage_ptr","typeString":"struct PlanetData"}},"visibility":"internal"},null],"id":6007,"initialValue":{"arguments":[{"id":6005,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5978,"src":"7111:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6003,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"7070:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}},"id":6004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7088:13:27","memberName":"getPlanetData","nodeType":"MemberAccess","referencedDeclaration":5583,"src":"7070:31:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_struct$_PlanetData_$5649_memory_ptr_$_t_bool_$","typeString":"function (uint256) view external returns (struct PlanetData memory,bool)"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7070:56:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_PlanetData_$5649_memory_ptr_$_t_bool_$","typeString":"tuple(struct PlanetData memory,bool)"}},"nodeType":"VariableDeclarationStatement","src":"7032:94:27"},{"assignments":[6012],"declarations":[{"constant":false,"id":6012,"mutability":"mutable","name":"parentsIDs","nameLocation":"7196:10:27","nodeType":"VariableDeclaration","scope":6054,"src":"7179:27:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6010,"name":"uint256","nodeType":"ElementaryTypeName","src":"7179:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6011,"nodeType":"ArrayTypeName","src":"7179:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":6015,"initialValue":{"expression":{"id":6013,"name":"newPlanetData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6002,"src":"7209:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PlanetData_$5649_memory_ptr","typeString":"struct PlanetData memory"}},"id":6014,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7223:7:27","memberName":"parents","nodeType":"MemberAccess","referencedDeclaration":5645,"src":"7209:21:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7179:51:27"},{"assignments":[6017],"declarations":[{"constant":false,"id":6017,"mutability":"mutable","name":"addressParentA","nameLocation":"7294:14:27","nodeType":"VariableDeclaration","scope":6054,"src":"7286:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6016,"name":"address","nodeType":"ElementaryTypeName","src":"7286:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6023,"initialValue":{"baseExpression":{"id":6018,"name":"claimableTokenIdToOwnerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"7311:30:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":6022,"indexExpression":{"baseExpression":{"id":6019,"name":"parentsIDs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6012,"src":"7342:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":6021,"indexExpression":{"hexValue":"30","id":6020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7353:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7342:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7311:45:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7286:70:27"},{"assignments":[6025],"declarations":[{"constant":false,"id":6025,"mutability":"mutable","name":"addressParentB","nameLocation":"7372:14:27","nodeType":"VariableDeclaration","scope":6054,"src":"7364:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6024,"name":"address","nodeType":"ElementaryTypeName","src":"7364:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6031,"initialValue":{"baseExpression":{"id":6026,"name":"claimableTokenIdToOwnerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"7389:30:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":6030,"indexExpression":{"baseExpression":{"id":6027,"name":"parentsIDs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6012,"src":"7420:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":6029,"indexExpression":{"hexValue":"31","id":6028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7431:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7420:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7389:45:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7364:70:27"},{"assignments":[6037],"declarations":[{"constant":false,"id":6037,"mutability":"mutable","name":"parents","nameLocation":"7488:7:27","nodeType":"VariableDeclaration","scope":6054,"src":"7470:25:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_memory_ptr","typeString":"address[2]"},"typeName":{"baseType":{"id":6035,"name":"address","nodeType":"ElementaryTypeName","src":"7470:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6036,"length":{"hexValue":"32","id":6034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7478:1:27","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"7470:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_storage_ptr","typeString":"address[2]"}},"visibility":"internal"}],"id":6041,"initialValue":{"components":[{"id":6038,"name":"addressParentA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6017,"src":"7499:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6039,"name":"addressParentB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6025,"src":"7515:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6040,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7498:32:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_memory_ptr","typeString":"address[2] memory"}},"nodeType":"VariableDeclarationStatement","src":"7470:60:27"},{"expression":{"arguments":[{"id":6043,"name":"parents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"7608:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$2_memory_ptr","typeString":"address[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$2_memory_ptr","typeString":"address[2] memory"}],"id":6042,"name":"setDeliveryToTrue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"7590:17:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$2_memory_ptr_$returns$__$","typeString":"function (address[2] memory)"}},"id":6044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6045,"nodeType":"ExpressionStatement","src":"7590:26:27"},{"eventCall":{"arguments":[{"id":6047,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"7700:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6048,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"7710:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6049,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5978,"src":"7716:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6050,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5980,"src":"7725:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"6e657720706c616e6574","id":6051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7731:12:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca181fe5e4c063d04ec53e8a75cc85eb34077458a0a7c765eb51999ac22c9153","typeString":"literal_string \"new planet\""},"value":"new planet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_ca181fe5e4c063d04ec53e8a75cc85eb34077458a0a7c765eb51999ac22c9153","typeString":"literal_string \"new planet\""}],"id":6046,"name":"NftReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"7688:11:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory,string memory)"}},"id":6052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7688:56:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6053,"nodeType":"EmitStatement","src":"7683:61:27"}]}},{"expression":{"expression":{"expression":{"id":6102,"name":"IERC721ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"8263:26:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721ReceiverUpgradeable_$2796_$","typeString":"type(contract IERC721ReceiverUpgradeable)"}},"id":6103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8290:16:27","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2795,"src":"8263:43:27","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721ReceiverUpgradeable.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":6104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8307:8:27","memberName":"selector","nodeType":"MemberAccess","src":"8263:52:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":5985,"id":6105,"nodeType":"Return","src":"8256:59:27"}]},"functionSelector":"150b7a02","id":6107,"implemented":true,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"6758:16:27","nodeType":"FunctionDefinition","overrides":{"id":5982,"nodeType":"OverrideSpecifier","overrides":[],"src":"6870:8:27"},"parameters":{"id":5981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5974,"mutability":"mutable","name":"operator","nameLocation":"6788:8:27","nodeType":"VariableDeclaration","scope":6107,"src":"6780:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5973,"name":"address","nodeType":"ElementaryTypeName","src":"6780:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5976,"mutability":"mutable","name":"from","nameLocation":"6810:4:27","nodeType":"VariableDeclaration","scope":6107,"src":"6802:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5975,"name":"address","nodeType":"ElementaryTypeName","src":"6802:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5978,"mutability":"mutable","name":"tokenId","nameLocation":"6828:7:27","nodeType":"VariableDeclaration","scope":6107,"src":"6820:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5977,"name":"uint256","nodeType":"ElementaryTypeName","src":"6820:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5980,"mutability":"mutable","name":"data","nameLocation":"6854:4:27","nodeType":"VariableDeclaration","scope":6107,"src":"6841:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5979,"name":"bytes","nodeType":"ElementaryTypeName","src":"6841:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6774:88:27"},"returnParameters":{"id":5985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6107,"src":"6888:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5983,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6888:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"6887:8:27"},"scope":6567,"src":"6749:1571:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6171,"nodeType":"Block","src":"8477:326:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6119,"name":"endIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6111,"src":"8491:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6120,"name":"startIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6109,"src":"8502:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8491:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420696e646578","id":6122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8514:15:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_32cc480c4f0e15e5ce7060ec5e004886ed5a15831cba1ff1aa7cb787be55bb60","typeString":"literal_string \"Invalid index\""},"value":"Invalid index"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_32cc480c4f0e15e5ce7060ec5e004886ed5a15831cba1ff1aa7cb787be55bb60","typeString":"literal_string \"Invalid index\""}],"id":6118,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8483:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8483:47:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6124,"nodeType":"ExpressionStatement","src":"8483:47:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6126,"name":"endIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6111,"src":"8544:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":6127,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"8556:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8570:6:27","memberName":"length","nodeType":"MemberAccess","src":"8556:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8544:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e646578206f7574206f6620626f756e6473","id":6130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8578:21:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""},"value":"Index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""}],"id":6125,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8536:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8536:64:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6132,"nodeType":"ExpressionStatement","src":"8536:64:27"},{"assignments":[6137],"declarations":[{"constant":false,"id":6137,"mutability":"mutable","name":"page","nameLocation":"8629:4:27","nodeType":"VariableDeclaration","scope":6171,"src":"8607:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr","typeString":"struct ListedPlanet[]"},"typeName":{"baseType":{"id":6135,"nodeType":"UserDefinedTypeName","pathNode":{"id":6134,"name":"ListedPlanet","nameLocations":["8607:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":5612,"src":"8607:12:27"},"referencedDeclaration":5612,"src":"8607:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage_ptr","typeString":"struct ListedPlanet"}},"id":6136,"nodeType":"ArrayTypeName","src":"8607:14:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr","typeString":"struct ListedPlanet[]"}},"visibility":"internal"}],"id":6146,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6142,"name":"endIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6111,"src":"8655:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6143,"name":"startIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6109,"src":"8666:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8655:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8636:18:27","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct ListedPlanet memory[] memory)"},"typeName":{"baseType":{"id":6139,"nodeType":"UserDefinedTypeName","pathNode":{"id":6138,"name":"ListedPlanet","nameLocations":["8640:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":5612,"src":"8640:12:27"},"referencedDeclaration":5612,"src":"8640:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage_ptr","typeString":"struct ListedPlanet"}},"id":6140,"nodeType":"ArrayTypeName","src":"8640:14:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr","typeString":"struct ListedPlanet[]"}}},"id":6145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8636:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr","typeString":"struct ListedPlanet memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8607:70:27"},{"body":{"id":6167,"nodeType":"Block","src":"8728:54:27","statements":[{"expression":{"id":6165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6157,"name":"page","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6137,"src":"8736:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr","typeString":"struct ListedPlanet memory[] memory"}},"id":6161,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6158,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"8741:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6159,"name":"startIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6109,"src":"8745:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8741:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8736:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":6162,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"8759:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6164,"indexExpression":{"id":6163,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"8773:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8759:16:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage","typeString":"struct ListedPlanet storage ref"}},"src":"8736:39:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}},"id":6166,"nodeType":"ExpressionStatement","src":"8736:39:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6151,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"8709:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6152,"name":"endIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6111,"src":"8713:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8709:12:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6168,"initializationExpression":{"assignments":[6148],"declarations":[{"constant":false,"id":6148,"mutability":"mutable","name":"i","nameLocation":"8693:1:27","nodeType":"VariableDeclaration","scope":6168,"src":"8688:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6147,"name":"uint","nodeType":"ElementaryTypeName","src":"8688:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6150,"initialValue":{"id":6149,"name":"startIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6109,"src":"8697:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8688:19:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":6155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8723:3:27","subExpression":{"id":6154,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"8723:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6156,"nodeType":"ExpressionStatement","src":"8723:3:27"},"nodeType":"ForStatement","src":"8683:99:27"},{"expression":{"id":6169,"name":"page","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6137,"src":"8794:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr","typeString":"struct ListedPlanet memory[] memory"}},"functionReturnParameters":6117,"id":6170,"nodeType":"Return","src":"8787:11:27"}]},"functionSelector":"25947818","id":6172,"implemented":true,"kind":"function","modifiers":[],"name":"getPlanetsPaginated","nameLocation":"8369:19:27","nodeType":"FunctionDefinition","parameters":{"id":6112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6109,"mutability":"mutable","name":"startIndex","nameLocation":"8399:10:27","nodeType":"VariableDeclaration","scope":6172,"src":"8394:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6108,"name":"uint","nodeType":"ElementaryTypeName","src":"8394:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6111,"mutability":"mutable","name":"endIndex","nameLocation":"8420:8:27","nodeType":"VariableDeclaration","scope":6172,"src":"8415:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6110,"name":"uint","nodeType":"ElementaryTypeName","src":"8415:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8388:44:27"},"returnParameters":{"id":6117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6172,"src":"8454:21:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr","typeString":"struct ListedPlanet[]"},"typeName":{"baseType":{"id":6114,"nodeType":"UserDefinedTypeName","pathNode":{"id":6113,"name":"ListedPlanet","nameLocations":["8454:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":5612,"src":"8454:12:27"},"referencedDeclaration":5612,"src":"8454:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage_ptr","typeString":"struct ListedPlanet"}},"id":6115,"nodeType":"ArrayTypeName","src":"8454:14:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr","typeString":"struct ListedPlanet[]"}},"visibility":"internal"}],"src":"8453:23:27"},"scope":6567,"src":"8360:443:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6181,"nodeType":"Block","src":"8908:31:27","statements":[{"expression":{"id":6179,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"8921:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"functionReturnParameters":6178,"id":6180,"nodeType":"Return","src":"8914:20:27"}]},"functionSelector":"6a23befb","id":6182,"implemented":true,"kind":"function","modifiers":[],"name":"getAllPlanets","nameLocation":"8848:13:27","nodeType":"FunctionDefinition","parameters":{"id":6173,"nodeType":"ParameterList","parameters":[],"src":"8861:2:27"},"returnParameters":{"id":6178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6177,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6182,"src":"8885:21:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr","typeString":"struct ListedPlanet[]"},"typeName":{"baseType":{"id":6175,"nodeType":"UserDefinedTypeName","pathNode":{"id":6174,"name":"ListedPlanet","nameLocations":["8885:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":5612,"src":"8885:12:27"},"referencedDeclaration":5612,"src":"8885:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage_ptr","typeString":"struct ListedPlanet"}},"id":6176,"nodeType":"ArrayTypeName","src":"8885:14:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage_ptr","typeString":"struct ListedPlanet[]"}},"visibility":"internal"}],"src":"8884:23:27"},"scope":6567,"src":"8839:100:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6185,"nodeType":"Block","src":"8980:107:27","statements":[]},"functionSelector":"1ac9a91e","id":6186,"implemented":true,"kind":"function","modifiers":[],"name":"listAllYourPlanets","nameLocation":"8952:18:27","nodeType":"FunctionDefinition","parameters":{"id":6183,"nodeType":"ParameterList","parameters":[],"src":"8970:2:27"},"returnParameters":{"id":6184,"nodeType":"ParameterList","parameters":[],"src":"8980:0:27"},"scope":6567,"src":"8943:144:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6253,"nodeType":"Block","src":"9161:987:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6196,"name":"idIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6188,"src":"9175:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6197,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"9185:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9199:6:27","memberName":"length","nodeType":"MemberAccess","src":"9185:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9175:30:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e646578206f7574206f6620626f756e6473","id":6200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9207:21:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""},"value":"Index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""}],"id":6195,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9167:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9167:62:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6202,"nodeType":"ExpressionStatement","src":"9167:62:27"},{"assignments":[6204],"declarations":[{"constant":false,"id":6204,"mutability":"mutable","name":"user","nameLocation":"9244:4:27","nodeType":"VariableDeclaration","scope":6253,"src":"9236:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6203,"name":"address","nodeType":"ElementaryTypeName","src":"9236:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6207,"initialValue":{"expression":{"id":6205,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9251:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9255:6:27","memberName":"sender","nodeType":"MemberAccess","src":"9251:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9236:25:27"},{"assignments":[6210],"declarations":[{"constant":false,"id":6210,"mutability":"mutable","name":"planetToDeList","nameLocation":"9287:14:27","nodeType":"VariableDeclaration","scope":6253,"src":"9267:34:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet"},"typeName":{"id":6209,"nodeType":"UserDefinedTypeName","pathNode":{"id":6208,"name":"ListedPlanet","nameLocations":["9267:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":5612,"src":"9267:12:27"},"referencedDeclaration":5612,"src":"9267:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage_ptr","typeString":"struct ListedPlanet"}},"visibility":"internal"}],"id":6214,"initialValue":{"baseExpression":{"id":6211,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"9304:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6213,"indexExpression":{"id":6212,"name":"idIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6188,"src":"9318:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9304:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage","typeString":"struct ListedPlanet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9267:59:27"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6215,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9432:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9436:6:27","memberName":"sender","nodeType":"MemberAccess","src":"9432:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":6217,"name":"planetToDeList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"9446:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}},"id":6218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9461:12:27","memberName":"ownerAddress","nodeType":"MemberAccess","referencedDeclaration":5611,"src":"9446:27:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9432:41:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6224,"nodeType":"IfStatement","src":"9428:83:27","trueBody":{"id":6223,"nodeType":"Block","src":"9488:23:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6220,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9496:6:27","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$__$returns$__$","typeString":"function () pure"}},"id":6221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9496:8:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6222,"nodeType":"ExpressionStatement","src":"9496:8:27"}]}},{"expression":{"id":6236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6225,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"9809:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6227,"indexExpression":{"id":6226,"name":"idIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6188,"src":"9823:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9809:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage","typeString":"struct ListedPlanet storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":6229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9863:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":6230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9879:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"hexValue":"30","id":6233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9910:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9902:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6231,"name":"address","nodeType":"ElementaryTypeName","src":"9902:7:27","typeDescriptions":{}}},"id":6234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9902:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6228,"name":"ListedPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5612,"src":"9834:12:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ListedPlanet_$5612_storage_ptr_$","typeString":"type(struct ListedPlanet storage pointer)"}},"id":6235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["9855:6:27","9872:5:27","9888:12:27"],"names":["planet","price","ownerAddress"],"nodeType":"FunctionCall","src":"9834:85:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}},"src":"9809:110:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage","typeString":"struct ListedPlanet storage ref"}},"id":6237,"nodeType":"ExpressionStatement","src":"9809:110:27"},{"expression":{"arguments":[{"id":6239,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6190,"src":"9994:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6240,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"10003:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6238,"name":"_sendNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6467,"src":"9985:8:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":6241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9985:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6242,"nodeType":"ExpressionStatement","src":"9985:23:27"},{"eventCall":{"arguments":[{"id":6244,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"10070:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6247,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"10090:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}],"id":6246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10082:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6245,"name":"address","nodeType":"ElementaryTypeName","src":"10082:7:27","typeDescriptions":{}}},"id":6248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10082:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6249,"name":"planetToDeList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"10116:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_memory_ptr","typeString":"struct ListedPlanet memory"}},"id":6250,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10131:6:27","memberName":"planet","nodeType":"MemberAccess","referencedDeclaration":5607,"src":"10116:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6243,"name":"DeListedAPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"10047:15:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":6251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10047:96:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6252,"nodeType":"EmitStatement","src":"10042:101:27"}]},"functionSelector":"cbdf1b5a","id":6254,"implemented":true,"kind":"function","modifiers":[{"id":6193,"kind":"modifierInvocation","modifierName":{"id":6192,"name":"whenNotPaused","nameLocations":["9147:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"9147:13:27"},"nodeType":"ModifierInvocation","src":"9147:13:27"}],"name":"deList","nameLocation":"9099:6:27","nodeType":"FunctionDefinition","parameters":{"id":6191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6188,"mutability":"mutable","name":"idIndex","nameLocation":"9114:7:27","nodeType":"VariableDeclaration","scope":6254,"src":"9106:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6187,"name":"uint256","nodeType":"ElementaryTypeName","src":"9106:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6190,"mutability":"mutable","name":"tokenId","nameLocation":"9131:7:27","nodeType":"VariableDeclaration","scope":6254,"src":"9123:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6189,"name":"uint256","nodeType":"ElementaryTypeName","src":"9123:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:34:27"},"returnParameters":{"id":6194,"nodeType":"ParameterList","parameters":[],"src":"9161:0:27"},"scope":6567,"src":"9090:1058:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6257,"nodeType":"Block","src":"10191:110:27","statements":[]},"functionSelector":"50842cf3","id":6258,"implemented":true,"kind":"function","modifiers":[],"name":"deListAllYourPlanets","nameLocation":"10161:20:27","nodeType":"FunctionDefinition","parameters":{"id":6255,"nodeType":"ParameterList","parameters":[],"src":"10181:2:27"},"returnParameters":{"id":6256,"nodeType":"ParameterList","parameters":[],"src":"10191:0:27"},"scope":6567,"src":"10152:149:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6308,"nodeType":"Block","src":"10422:337:27","statements":[{"body":{"id":6306,"nodeType":"Block","src":"10476:279:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6278,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"10512:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6280,"indexExpression":{"id":6279,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"10526:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10512:16:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage","typeString":"struct ListedPlanet storage ref"}},"id":6281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10529:6:27","memberName":"planet","nodeType":"MemberAccess","referencedDeclaration":5607,"src":"10512:23:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6282,"name":"tokenIdOfListedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6260,"src":"10539:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10512:47:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6290,"nodeType":"IfStatement","src":"10508:101:27","trueBody":{"id":6289,"nodeType":"Block","src":"10561:48:27","statements":[{"expression":{"expression":{"baseExpression":{"id":6284,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"10578:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6286,"indexExpression":{"id":6285,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"10592:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10578:16:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage","typeString":"struct ListedPlanet storage ref"}},"id":6287,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10595:5:27","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":5609,"src":"10578:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6266,"id":6288,"nodeType":"Return","src":"10571:29:27"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6291,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"10673:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6292,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"10679:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10693:6:27","memberName":"length","nodeType":"MemberAccess","src":"10679:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":6294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10702:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10679:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6296,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10678:26:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10673:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6305,"nodeType":"IfStatement","src":"10669:80:27","trueBody":{"id":6304,"nodeType":"Block","src":"10706:43:27","statements":[{"expression":{"expression":{"arguments":[{"id":6300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10728:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6299,"name":"uint256","nodeType":"ElementaryTypeName","src":"10728:7:27","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":6298,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10723:4:27","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10723:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":6302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10737:3:27","memberName":"max","nodeType":"MemberAccess","src":"10723:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6266,"id":6303,"nodeType":"Return","src":"10716:24:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6271,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"10445:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6272,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"10449:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10463:6:27","memberName":"length","nodeType":"MemberAccess","src":"10449:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10445:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6307,"initializationExpression":{"assignments":[6268],"declarations":[{"constant":false,"id":6268,"mutability":"mutable","name":"i","nameLocation":"10438:1:27","nodeType":"VariableDeclaration","scope":6307,"src":"10433:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6267,"name":"uint","nodeType":"ElementaryTypeName","src":"10433:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6270,"initialValue":{"hexValue":"30","id":6269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10442:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10433:10:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":6276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10471:3:27","subExpression":{"id":6275,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"10471:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6277,"nodeType":"ExpressionStatement","src":"10471:3:27"},"nodeType":"ForStatement","src":"10428:327:27"}]},"id":6309,"implemented":true,"kind":"function","modifiers":[{"id":6263,"kind":"modifierInvocation","modifierName":{"id":6262,"name":"whenNotPaused","nameLocations":["10390:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"10390:13:27"},"nodeType":"ModifierInvocation","src":"10390:13:27"}],"name":"priceOfListingRetrieval","nameLocation":"10314:23:27","nodeType":"FunctionDefinition","parameters":{"id":6261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6260,"mutability":"mutable","name":"tokenIdOfListedToken","nameLocation":"10351:20:27","nodeType":"VariableDeclaration","scope":6309,"src":"10343:28:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6259,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10337:38:27"},"returnParameters":{"id":6266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6309,"src":"10413:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6264,"name":"uint256","nodeType":"ElementaryTypeName","src":"10413:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10412:9:27"},"scope":6567,"src":"10305:454:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6447,"nodeType":"Block","src":"11173:1655:27","statements":[{"assignments":[6319],"declarations":[{"constant":false,"id":6319,"mutability":"mutable","name":"userAsking","nameLocation":"11258:10:27","nodeType":"VariableDeclaration","scope":6447,"src":"11250:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6318,"name":"address","nodeType":"ElementaryTypeName","src":"11250:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6324,"initialValue":{"arguments":[{"hexValue":"30","id":6322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11279:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11271:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6320,"name":"address","nodeType":"ElementaryTypeName","src":"11271:7:27","typeDescriptions":{}}},"id":6323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11271:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11250:31:27"},{"assignments":[6326],"declarations":[{"constant":false,"id":6326,"mutability":"mutable","name":"joiningUser","nameLocation":"11296:11:27","nodeType":"VariableDeclaration","scope":6447,"src":"11288:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6325,"name":"address","nodeType":"ElementaryTypeName","src":"11288:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6331,"initialValue":{"arguments":[{"hexValue":"30","id":6329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11318:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11310:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6327,"name":"address","nodeType":"ElementaryTypeName","src":"11310:7:27","typeDescriptions":{}}},"id":6330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11310:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11288:32:27"},{"assignments":[6333],"declarations":[{"constant":false,"id":6333,"mutability":"mutable","name":"price","nameLocation":"11334:5:27","nodeType":"VariableDeclaration","scope":6447,"src":"11326:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6332,"name":"uint256","nodeType":"ElementaryTypeName","src":"11326:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6337,"initialValue":{"arguments":[{"id":6335,"name":"withListedPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6313,"src":"11366:16:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6334,"name":"priceOfListingRetrieval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6309,"src":"11342:23:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":6336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11342:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11326:57:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6338,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11606:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11610:5:27","memberName":"value","nodeType":"MemberAccess","src":"11606:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6340,"name":"vrfValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"11618:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6341,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"11629:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11618:16:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11606:28:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6348,"nodeType":"IfStatement","src":"11602:57:27","trueBody":{"id":6347,"nodeType":"Block","src":"11636:23:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6344,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"11644:6:27","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$__$returns$__$","typeString":"function () pure"}},"id":6345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11644:8:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6346,"nodeType":"ExpressionStatement","src":"11644:8:27"}]}},{"assignments":[6350],"declarations":[{"constant":false,"id":6350,"mutability":"mutable","name":"ownerOfListedPlanet","nameLocation":"11830:19:27","nodeType":"VariableDeclaration","scope":6447,"src":"11814:35:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":6349,"name":"address","nodeType":"ElementaryTypeName","src":"11814:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":6351,"nodeType":"VariableDeclarationStatement","src":"11814:35:27"},{"body":{"id":6382,"nodeType":"Block","src":"11903:157:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6363,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"11915:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6365,"indexExpression":{"id":6364,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6353,"src":"11929:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11915:16:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage","typeString":"struct ListedPlanet storage ref"}},"id":6366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11932:6:27","memberName":"planet","nodeType":"MemberAccess","referencedDeclaration":5607,"src":"11915:23:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6367,"name":"withListedPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6313,"src":"11942:16:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11915:43:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6381,"nodeType":"IfStatement","src":"11911:143:27","trueBody":{"id":6380,"nodeType":"Block","src":"11960:94:27","statements":[{"expression":{"id":6377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6369,"name":"ownerOfListedPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6350,"src":"11970:19:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":6372,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"12000:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6374,"indexExpression":{"id":6373,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6353,"src":"12014:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12000:16:27","typeDescriptions":{"typeIdentifier":"t_struct$_ListedPlanet_$5612_storage","typeString":"struct ListedPlanet storage ref"}},"id":6375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12017:12:27","memberName":"ownerAddress","nodeType":"MemberAccess","referencedDeclaration":5611,"src":"12000:29:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11992:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":6370,"name":"address","nodeType":"ElementaryTypeName","src":"11992:8:27","stateMutability":"payable","typeDescriptions":{}}},"id":6376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11992:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"11970:60:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6378,"nodeType":"ExpressionStatement","src":"11970:60:27"},{"id":6379,"nodeType":"Break","src":"12040:5:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6356,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6353,"src":"11872:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6357,"name":"planetsListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"11876:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ListedPlanet_$5612_storage_$dyn_storage","typeString":"struct ListedPlanet storage ref[] storage ref"}},"id":6358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11890:6:27","memberName":"length","nodeType":"MemberAccess","src":"11876:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11872:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6383,"initializationExpression":{"assignments":[6353],"declarations":[{"constant":false,"id":6353,"mutability":"mutable","name":"i","nameLocation":"11865:1:27","nodeType":"VariableDeclaration","scope":6383,"src":"11860:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6352,"name":"uint","nodeType":"ElementaryTypeName","src":"11860:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6355,"initialValue":{"hexValue":"30","id":6354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11869:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11860:10:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":6361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"11898:3:27","subExpression":{"id":6360,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6353,"src":"11898:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6362,"nodeType":"ExpressionStatement","src":"11898:3:27"},"nodeType":"ForStatement","src":"11855:205:27"},{"assignments":[6385],"declarations":[{"constant":false,"id":6385,"mutability":"mutable","name":"amountToSend","nameLocation":"12095:12:27","nodeType":"VariableDeclaration","scope":6447,"src":"12087:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6384,"name":"uint256","nodeType":"ElementaryTypeName","src":"12087:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6387,"initialValue":{"hexValue":"3131","id":6386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12110:2:27","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"nodeType":"VariableDeclarationStatement","src":"12087:25:27"},{"assignments":[6389,null],"declarations":[{"constant":false,"id":6389,"mutability":"mutable","name":"sent","nameLocation":"12202:4:27","nodeType":"VariableDeclaration","scope":6447,"src":"12197:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6388,"name":"bool","nodeType":"ElementaryTypeName","src":"12197:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":6396,"initialValue":{"arguments":[{"hexValue":"","id":6394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12260:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":6390,"name":"ownerOfListedPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6350,"src":"12212:19:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12232:4:27","memberName":"call","nodeType":"MemberAccess","src":"12212:24:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6392,"name":"amountToSend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6385,"src":"12245:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"12212:47:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12212:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"12196:67:27"},{"expression":{"arguments":[{"id":6398,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"12277:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4661696c656420746f2073656e64204574686572","id":6399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12283:22:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""},"value":"Failed to send Ether"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""}],"id":6397,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12269:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12269:37:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6401,"nodeType":"ExpressionStatement","src":"12269:37:27"},{"expression":{"arguments":[{"id":6405,"name":"yourPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6311,"src":"12365:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6406,"name":"withListedPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6313,"src":"12377:16:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":6407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12395:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"expression":{"id":6408,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12402:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12406:5:27","memberName":"value","nodeType":"MemberAccess","src":"12402:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6402,"name":"breedContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5712,"src":"12338:13:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBreedContract_$5605","typeString":"contract IBreedContract"}},"id":6404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12352:12:27","memberName":"requestBreed","nodeType":"MemberAccess","referencedDeclaration":5604,"src":"12338:26:27","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$_t_uint256_$_t_bool_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256,uint256,bool,uint256) payable external returns (bytes32)"}},"id":6410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12338:74:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6411,"nodeType":"ExpressionStatement","src":"12338:74:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6412,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12423:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12427:5:27","memberName":"value","nodeType":"MemberAccess","src":"12423:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6414,"name":"vrfValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"12435:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6415,"name":"amountToSend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6385,"src":"12446:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12435:23:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12423:35:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6439,"nodeType":"IfStatement","src":"12419:213:27","trueBody":{"id":6438,"nodeType":"Block","src":"12460:172:27","statements":[{"assignments":[6419,null],"declarations":[{"constant":false,"id":6419,"mutability":"mutable","name":"refunded","nameLocation":"12474:8:27","nodeType":"VariableDeclaration","scope":6438,"src":"12469:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6418,"name":"bool","nodeType":"ElementaryTypeName","src":"12469:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":6432,"initialValue":{"arguments":[{"hexValue":"","id":6430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12564:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":6420,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12488:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12492:6:27","memberName":"sender","nodeType":"MemberAccess","src":"12488:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12499:4:27","memberName":"call","nodeType":"MemberAccess","src":"12488:15:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6423,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12520:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12524:5:27","memberName":"value","nodeType":"MemberAccess","src":"12520:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6425,"name":"vrfValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"12532:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12520:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6427,"name":"amountToSend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6385,"src":"12543:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12520:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"12488:75:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12488:79:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"12468:99:27"},{"expression":{"arguments":[{"id":6434,"name":"refunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6419,"src":"12583:8:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4661696c656420746f20726566756e6420657863657373204574686572","id":6435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12593:31:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_d9cb5a535dd6e8649f5b16f2bf5320a3bd41435311ffe94f95d27e82891f029d","typeString":"literal_string \"Failed to refund excess Ether\""},"value":"Failed to refund excess Ether"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d9cb5a535dd6e8649f5b16f2bf5320a3bd41435311ffe94f95d27e82891f029d","typeString":"literal_string \"Failed to refund excess Ether\""}],"id":6433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12575:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12575:50:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6437,"nodeType":"ExpressionStatement","src":"12575:50:27"}]}},{"eventCall":{"arguments":[{"id":6441,"name":"yourPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6311,"src":"12746:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6442,"name":"userAsking","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6319,"src":"12764:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6443,"name":"withListedPlanet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6313,"src":"12782:16:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6444,"name":"joiningUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6326,"src":"12806:11:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6440,"name":"PlanetsConjoining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5709,"src":"12721:17:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address,uint256,address)"}},"id":6445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12721:102:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6446,"nodeType":"EmitStatement","src":"12716:107:27"}]},"functionSelector":"8230a784","id":6448,"implemented":true,"kind":"function","modifiers":[{"id":6316,"kind":"modifierInvocation","modifierName":{"id":6315,"name":"whenNotPaused","nameLocations":["11159:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"11159:13:27"},"nodeType":"ModifierInvocation","src":"11159:13:27"}],"name":"conjunct","nameLocation":"11077:8:27","nodeType":"FunctionDefinition","parameters":{"id":6314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6311,"mutability":"mutable","name":"yourPlanet","nameLocation":"11099:10:27","nodeType":"VariableDeclaration","scope":6448,"src":"11091:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6310,"name":"uint256","nodeType":"ElementaryTypeName","src":"11091:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6313,"mutability":"mutable","name":"withListedPlanet","nameLocation":"11123:16:27","nodeType":"VariableDeclaration","scope":6448,"src":"11115:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6312,"name":"uint256","nodeType":"ElementaryTypeName","src":"11115:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11085:58:27"},"returnParameters":{"id":6317,"nodeType":"ParameterList","parameters":[],"src":"11173:0:27"},"scope":6567,"src":"11068:1760:27","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":6466,"nodeType":"Block","src":"12890:71:27","statements":[{"expression":{"arguments":[{"arguments":[{"id":6460,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12935:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_HatcherV1_$6567","typeString":"contract HatcherV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HatcherV1_$6567","typeString":"contract HatcherV1"}],"id":6459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12927:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6458,"name":"address","nodeType":"ElementaryTypeName","src":"12927:7:27","typeDescriptions":{}}},"id":6461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12927:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6462,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"12942:3:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6463,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6450,"src":"12947:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6455,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"12896:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}},"id":6457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12914:12:27","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":5544,"src":"12896:30:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":6464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12896:60:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6465,"nodeType":"ExpressionStatement","src":"12896:60:27"}]},"id":6467,"implemented":true,"kind":"function","modifiers":[],"name":"_sendNFT","nameLocation":"12841:8:27","nodeType":"FunctionDefinition","parameters":{"id":6453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6450,"mutability":"mutable","name":"_tokenId","nameLocation":"12858:8:27","nodeType":"VariableDeclaration","scope":6467,"src":"12850:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6449,"name":"uint256","nodeType":"ElementaryTypeName","src":"12850:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6452,"mutability":"mutable","name":"_to","nameLocation":"12876:3:27","nodeType":"VariableDeclaration","scope":6467,"src":"12868:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6451,"name":"address","nodeType":"ElementaryTypeName","src":"12868:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12849:31:27"},"returnParameters":{"id":6454,"nodeType":"ParameterList","parameters":[],"src":"12890:0:27"},"scope":6567,"src":"12832:129:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6475,"nodeType":"Block","src":"13000:19:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6472,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"13006:6:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13006:8:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6474,"nodeType":"ExpressionStatement","src":"13006:8:27"}]},"functionSelector":"200d2ed2","id":6476,"implemented":true,"kind":"function","modifiers":[{"id":6470,"kind":"modifierInvocation","modifierName":{"id":6469,"name":"onlyOwner","nameLocations":["12990:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"12990:9:27"},"nodeType":"ModifierInvocation","src":"12990:9:27"}],"name":"status","nameLocation":"12974:6:27","nodeType":"FunctionDefinition","parameters":{"id":6468,"nodeType":"ParameterList","parameters":[],"src":"12980:2:27"},"returnParameters":{"id":6471,"nodeType":"ParameterList","parameters":[],"src":"13000:0:27"},"scope":6567,"src":"12965:54:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6485,"nodeType":"Block","src":"13162:19:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6482,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"13168:6:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13168:8:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6484,"nodeType":"ExpressionStatement","src":"13168:8:27"}]},"documentation":{"id":6477,"nodeType":"StructuredDocumentation","src":"13023:102:27","text":"@notice pause any token transfers including mints and burns\n @dev can only be called by owner"},"functionSelector":"8456cb59","id":6486,"implemented":true,"kind":"function","modifiers":[{"id":6480,"kind":"modifierInvocation","modifierName":{"id":6479,"name":"onlyOwner","nameLocations":["13152:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"13152:9:27"},"nodeType":"ModifierInvocation","src":"13152:9:27"}],"name":"pause","nameLocation":"13137:5:27","nodeType":"FunctionDefinition","parameters":{"id":6478,"nodeType":"ParameterList","parameters":[],"src":"13142:2:27"},"returnParameters":{"id":6481,"nodeType":"ParameterList","parameters":[],"src":"13162:0:27"},"scope":6567,"src":"13128:53:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6495,"nodeType":"Block","src":"13328:21:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6492,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"13334:8:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13334:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6494,"nodeType":"ExpressionStatement","src":"13334:10:27"}]},"documentation":{"id":6487,"nodeType":"StructuredDocumentation","src":"13185:104:27","text":"@notice unpause any token transfers including mints and burns\n @dev can only be called by owner"},"functionSelector":"3f4ba83a","id":6496,"implemented":true,"kind":"function","modifiers":[{"id":6490,"kind":"modifierInvocation","modifierName":{"id":6489,"name":"onlyOwner","nameLocations":["13318:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"13318:9:27"},"nodeType":"ModifierInvocation","src":"13318:9:27"}],"name":"unpause","nameLocation":"13301:7:27","nodeType":"FunctionDefinition","parameters":{"id":6488,"nodeType":"ParameterList","parameters":[],"src":"13308:2:27"},"returnParameters":{"id":6491,"nodeType":"ParameterList","parameters":[],"src":"13328:0:27"},"scope":6567,"src":"13292:57:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6512,"nodeType":"Block","src":"13528:66:27","statements":[{"expression":{"arguments":[{"id":6508,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6498,"src":"13570:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6509,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6500,"src":"13580:8:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":6505,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"13534:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}},"id":6507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13552:17:27","memberName":"setApprovalForAll","nodeType":"MemberAccess","referencedDeclaration":5590,"src":"13534:35:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) external"}},"id":6510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13534:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6511,"nodeType":"ExpressionStatement","src":"13534:55:27"}]},"functionSelector":"d28eb2dc","id":6513,"implemented":true,"kind":"function","modifiers":[{"id":6503,"kind":"modifierInvocation","modifierName":{"id":6502,"name":"onlyOwner","nameLocations":["13518:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"13518:9:27"},"nodeType":"ModifierInvocation","src":"13518:9:27"}],"name":"approveForAllAsOwner","nameLocation":"13445:20:27","nodeType":"FunctionDefinition","parameters":{"id":6501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6498,"mutability":"mutable","name":"operator","nameLocation":"13479:8:27","nodeType":"VariableDeclaration","scope":6513,"src":"13471:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6497,"name":"address","nodeType":"ElementaryTypeName","src":"13471:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6500,"mutability":"mutable","name":"approved","nameLocation":"13498:8:27","nodeType":"VariableDeclaration","scope":6513,"src":"13493:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6499,"name":"bool","nodeType":"ElementaryTypeName","src":"13493:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13465:45:27"},"returnParameters":{"id":6504,"nodeType":"ParameterList","parameters":[],"src":"13528:0:27"},"scope":6567,"src":"13436:158:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6528,"nodeType":"Block","src":"13699:69:27","statements":[{"expression":{"arguments":[{"id":6524,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6515,"src":"13747:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6525,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6517,"src":"13754:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6522,"name":"nftPlanetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"13712:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$5591","typeString":"contract IERC721"}},"id":6523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13730:16:27","memberName":"isApprovedForAll","nodeType":"MemberAccess","referencedDeclaration":5573,"src":"13712:34:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":6526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13712:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6521,"id":6527,"nodeType":"Return","src":"13705:58:27"}]},"functionSelector":"dd22a9c7","id":6529,"implemented":true,"kind":"function","modifiers":[],"name":"checkApprovalForAll","nameLocation":"13607:19:27","nodeType":"FunctionDefinition","parameters":{"id":6518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6515,"mutability":"mutable","name":"owner","nameLocation":"13640:5:27","nodeType":"VariableDeclaration","scope":6529,"src":"13632:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6514,"name":"address","nodeType":"ElementaryTypeName","src":"13632:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6517,"mutability":"mutable","name":"operator","nameLocation":"13659:8:27","nodeType":"VariableDeclaration","scope":6529,"src":"13651:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6516,"name":"address","nodeType":"ElementaryTypeName","src":"13651:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13626:45:27"},"returnParameters":{"id":6521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6529,"src":"13693:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6519,"name":"bool","nodeType":"ElementaryTypeName","src":"13693:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13692:6:27"},"scope":6567,"src":"13598:170:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6555,"nodeType":"Block","src":"13954:91:27","statements":[{"assignments":[6538],"declarations":[{"constant":false,"id":6538,"mutability":"mutable","name":"to","nameLocation":"13976:2:27","nodeType":"VariableDeclaration","scope":6555,"src":"13960:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":6537,"name":"address","nodeType":"ElementaryTypeName","src":"13960:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":6544,"initialValue":{"arguments":[{"expression":{"id":6541,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13989:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13993:6:27","memberName":"sender","nodeType":"MemberAccess","src":"13989:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13981:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":6539,"name":"address","nodeType":"ElementaryTypeName","src":"13981:8:27","stateMutability":"payable","typeDescriptions":{}}},"id":6543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13981:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"13960:40:27"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":6550,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"14026:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_HatcherV1_$6567","typeString":"contract HatcherV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HatcherV1_$6567","typeString":"contract HatcherV1"}],"id":6549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14018:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6548,"name":"address","nodeType":"ElementaryTypeName","src":"14018:7:27","typeDescriptions":{}}},"id":6551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14018:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14032:7:27","memberName":"balance","nodeType":"MemberAccess","src":"14018:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6545,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6538,"src":"14006:2:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14009:8:27","memberName":"transfer","nodeType":"MemberAccess","src":"14006:11:27","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":6553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14006:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6554,"nodeType":"ExpressionStatement","src":"14006:34:27"}]},"documentation":{"id":6530,"nodeType":"StructuredDocumentation","src":"13772:123:27","text":"@notice Allow Owner to withdraw of MATIC from the contract\n @dev utility function only, shouldn't need to be used."},"functionSelector":"24600fc3","id":6556,"implemented":true,"kind":"function","modifiers":[{"id":6533,"kind":"modifierInvocation","modifierName":{"id":6532,"name":"onlyOwner","nameLocations":["13930:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"13930:9:27"},"nodeType":"ModifierInvocation","src":"13930:9:27"},{"id":6535,"kind":"modifierInvocation","modifierName":{"id":6534,"name":"whenNotPaused","nameLocations":["13940:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"13940:13:27"},"nodeType":"ModifierInvocation","src":"13940:13:27"}],"name":"withdrawFunds","nameLocation":"13907:13:27","nodeType":"FunctionDefinition","parameters":{"id":6531,"nodeType":"ParameterList","parameters":[],"src":"13920:2:27"},"returnParameters":{"id":6536,"nodeType":"ParameterList","parameters":[],"src":"13954:0:27"},"scope":6567,"src":"13898:147:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1324],"body":{"id":6565,"nodeType":"Block","src":"14273:2:27","statements":[]},"documentation":{"id":6557,"nodeType":"StructuredDocumentation","src":"14049:131:27","text":"@notice called to authorize Upgrades by owner only\n @dev used to upgrade\n @param newImplementation new implementation"},"id":6566,"implemented":true,"kind":"function","modifiers":[{"id":6563,"kind":"modifierInvocation","modifierName":{"id":6562,"name":"onlyOwner","nameLocations":["14263:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"14263:9:27"},"nodeType":"ModifierInvocation","src":"14263:9:27"}],"name":"_authorizeUpgrade","nameLocation":"14192:17:27","nodeType":"FunctionDefinition","overrides":{"id":6561,"nodeType":"OverrideSpecifier","overrides":[],"src":"14254:8:27"},"parameters":{"id":6560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6559,"mutability":"mutable","name":"newImplementation","nameLocation":"14223:17:27","nodeType":"VariableDeclaration","scope":6566,"src":"14215:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6558,"name":"address","nodeType":"ElementaryTypeName","src":"14215:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14209:35:27"},"returnParameters":{"id":6564,"nodeType":"ParameterList","parameters":[],"src":"14273:0:27"},"scope":6567,"src":"14183:92:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":6568,"src":"2379:11970:27","usedErrors":[5742],"usedEvents":[17,150,156,165,171,641,648,653,659,1039,1345,1350,2083,2092,5681,5691,5699,5709]}],"src":"32:14318:27"},"id":27}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3176,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":11,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":131,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol":{"PaymentSplitterUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20Upgradeable","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20PaymentReleased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"PayeeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PaymentReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PaymentReleased","type":"event"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"payee","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"releasable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20Upgradeable","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"releasable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"account","type":"address"}],"name":"release","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20Upgradeable","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"release","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20Upgradeable","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"released","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"released","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"shares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20Upgradeable","name":"token","type":"address"}],"name":"totalReleased","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalReleased","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware that the Ether will be split in this way, since it is handled transparently by the contract. The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the time of contract deployment and can't be updated thereafter. `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} function. NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you to run tests before sending real value to this contract.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"payee(uint256)":{"details":"Getter for the address of the payee number `index`."},"releasable(address)":{"details":"Getter for the amount of payee's releasable Ether."},"releasable(address,address)":{"details":"Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract."},"release(address)":{"details":"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."},"release(address,address)":{"details":"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."},"released(address)":{"details":"Getter for the amount of Ether already released to a payee."},"released(address,address)":{"details":"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."},"shares(address)":{"details":"Getter for the amount of shares held by an account."},"totalReleased()":{"details":"Getter for the total amount of Ether already released."},"totalReleased(address)":{"details":"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."},"totalShares()":{"details":"Getter for the total shares held by payees."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"title":"PaymentSplitter","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610d07806100206000396000f3fe6080604052600436106100c05760003560e01c80639852595c11610074578063ce7c2ac21161004e578063ce7c2ac214610242578063d79779b214610278578063e33b7de3146102ae57600080fd5b80639852595c146101cc578063a3f8eace14610202578063c45ac0501461022257600080fd5b8063406072a9116100a5578063406072a91461015457806348b75044146101745780638b83209b1461019457600080fd5b8063191655871461010e5780633a98ef391461013057600080fd5b36610109577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561011a57600080fd5b5061012e610129366004610b29565b6102c3565b005b34801561013c57600080fd5b506033545b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061014161016f366004610b46565b610432565b34801561018057600080fd5b5061012e61018f366004610b46565b61045f565b3480156101a057600080fd5b506101b46101af366004610b7f565b6105f3565b6040516001600160a01b03909116815260200161014b565b3480156101d857600080fd5b506101416101e7366004610b29565b6001600160a01b031660009081526036602052604090205490565b34801561020e57600080fd5b5061014161021d366004610b29565b610623565b34801561022e57600080fd5b5061014161023d366004610b46565b61066b565b34801561024e57600080fd5b5061014161025d366004610b29565b6001600160a01b031660009081526035602052604090205490565b34801561028457600080fd5b50610141610293366004610b29565b6001600160a01b031660009081526038602052604090205490565b3480156102ba57600080fd5b50603454610141565b6001600160a01b03811660009081526035602052604090205461033c5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084015b60405180910390fd5b600061034782610623565b9050806000036103ad5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610333565b80603460008282546103bf9190610bae565b90915550506001600160a01b03821660009081526036602052604090208054820190556103ec828261072a565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b0381166000908152603560205260409020546104d35760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610333565b60006104df838361066b565b9050806000036105455760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610333565b6001600160a01b0383166000908152603860205260408120805483929061056d908490610bae565b90915550506001600160a01b0380841660009081526039602090815260408083209386168352929052208054820190556105a8838383610848565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b60006037828154811061060857610608610bc1565b6000918252602090912001546001600160a01b031692915050565b60008061062f60345490565b6106399047610bae565b9050610664838261065f866001600160a01b031660009081526036602052604090205490565b6108c8565b9392505050565b6001600160a01b03821660009081526038602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190610bd7565b6107119190610bae565b9050610722838261065f8787610432565b949350505050565b8047101561077a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610333565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107c7576040519150601f19603f3d011682016040523d82523d6000602084013e6107cc565b606091505b50509050806108435760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610333565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610843908490610906565b6033546001600160a01b038416600090815260356020526040812054909183916108f29086610bf0565b6108fc9190610c07565b6107229190610c29565b600061095b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109ee9092919063ffffffff16565b905080516000148061097c57508080602001905181019061097c9190610c3c565b6108435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610333565b6060610722848460008585600080866001600160a01b03168587604051610a159190610c82565b60006040518083038185875af1925050503d8060008114610a52576040519150601f19603f3d011682016040523d82523d6000602084013e610a57565b606091505b5091509150610a6887838387610a73565b979650505050505050565b60608315610ae2578251600003610adb576001600160a01b0385163b610adb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610333565b5081610722565b6107228383815115610af75781518083602001fd5b8060405162461bcd60e51b81526004016103339190610c9e565b6001600160a01b0381168114610b2657600080fd5b50565b600060208284031215610b3b57600080fd5b813561066481610b11565b60008060408385031215610b5957600080fd5b8235610b6481610b11565b91506020830135610b7481610b11565b809150509250929050565b600060208284031215610b9157600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561045957610459610b98565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610be957600080fd5b5051919050565b808202811582820484141761045957610459610b98565b600082610c2457634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561045957610459610b98565b600060208284031215610c4e57600080fd5b8151801515811461066457600080fd5b60005b83811015610c79578181015183820152602001610c61565b50506000910152565b60008251610c94818460208701610c5e565b9190910192915050565b6020815260008251806020840152610cbd816040850160208701610c5e565b601f01601f1916919091016040019291505056fea2646970667358221220118c623493a984e82761cb470b0dde47ad247a66396328311cbb787f552210a564736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD07 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9852595C GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xCE7C2AC2 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xCE7C2AC2 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xD79779B2 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xE33B7DE3 EQ PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9852595C EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0xA3F8EACE EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xC45AC050 EQ PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x406072A9 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x406072A9 EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0x48B75044 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x8B83209B EQ PUSH2 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x19165587 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x3A98EF39 EQ PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x109 JUMPI PUSH32 0x6EF95F06320E7A25A04A175CA677B7052BDD97131872C2192525A629F51BE770 CALLER PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLVALUE PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12E PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH2 0x2C3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x432 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12E PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x45F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0xB7F JUMP JUMPDEST PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x36 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x66B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x38 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x34 SLOAD PUSH2 0x141 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x33C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E7420686173206E6F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x736861726573 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x347 DUP3 PUSH2 0x623 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x3AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E74206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x191D59481C185E5B595B9D PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0xBAE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x36 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x3EC DUP3 DUP3 PUSH2 0x72A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xDF20FD1E76BC69D672E4814FAFB2C449BBA3A5369D8359ADF9E05E6FDE87B056 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E7420686173206E6F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x736861726573 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DF DUP4 DUP4 PUSH2 0x66B JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E74206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x191D59481C185E5B595B9D PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x38 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x56D SWAP1 DUP5 SWAP1 PUSH2 0xBAE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x5A8 DUP4 DUP4 DUP4 PUSH2 0x848 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE DUP6 AND SWAP2 PUSH32 0x3BE5B7A71E84ED12875D241991C70855AC5817D847039E17A9D895C1CEB0F18A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x37 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x608 JUMPI PUSH2 0x608 PUSH2 0xBC1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x62F PUSH1 0x34 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x639 SWAP1 SELFBALANCE PUSH2 0xBAE JUMP JUMPDEST SWAP1 POP PUSH2 0x664 DUP4 DUP3 PUSH2 0x65F DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x36 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x38 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x707 SWAP2 SWAP1 PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0x711 SWAP2 SWAP1 PUSH2 0xBAE JUMP JUMPDEST SWAP1 POP PUSH2 0x722 DUP4 DUP3 PUSH2 0x65F DUP8 DUP8 PUSH2 0x432 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x77A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x333 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7C7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7CC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x843 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x843 SWAP1 DUP5 SWAP1 PUSH2 0x906 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH2 0x8F2 SWAP1 DUP7 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0x8FC SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0x722 SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x95B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9EE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x97C JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x97C SWAP2 SWAP1 PUSH2 0xC3C JUMP JUMPDEST PUSH2 0x843 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x722 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xA15 SWAP2 SWAP1 PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA52 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xA68 DUP8 DUP4 DUP4 DUP8 PUSH2 0xA73 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xAE2 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0xADB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xADB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x333 JUMP JUMPDEST POP DUP2 PUSH2 0x722 JUMP JUMPDEST PUSH2 0x722 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xAF7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0xC9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x664 DUP2 PUSH2 0xB11 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xB64 DUP2 PUSH2 0xB11 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xB74 DUP2 PUSH2 0xB11 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x459 JUMPI PUSH2 0x459 PUSH2 0xB98 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x459 JUMPI PUSH2 0x459 PUSH2 0xB98 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC24 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x459 JUMPI PUSH2 0x459 PUSH2 0xB98 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC79 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC61 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xC94 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC5E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xCBD DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC5E JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT DUP13 PUSH3 0x3493A9 DUP5 0xE8 0x27 PUSH2 0xCB47 SIGNEXTEND 0xD 0xDE SELFBALANCE 0xAD 0x24 PUSH27 0x66396328311CBB787F552210A564736F6C63430008180033000000 ","sourceMap":"1568:7756:1:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_279":{"entryPoint":null,"id":279,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_2729":{"entryPoint":2310,"id":2729,"parameterSlots":2,"returnSlots":0},"@_msgSender_3154":{"entryPoint":null,"id":3154,"parameterSlots":0,"returnSlots":1},"@_pendingPayment_569":{"entryPoint":2248,"id":569,"parameterSlots":3,"returnSlots":1},"@_revert_3125":{"entryPoint":null,"id":3125,"parameterSlots":2,"returnSlots":0},"@functionCallWithValue_2950":{"entryPoint":null,"id":2950,"parameterSlots":4,"returnSlots":1},"@functionCall_2886":{"entryPoint":2542,"id":2886,"parameterSlots":3,"returnSlots":1},"@isContract_2814":{"entryPoint":null,"id":2814,"parameterSlots":1,"returnSlots":1},"@payee_368":{"entryPoint":1523,"id":368,"parameterSlots":1,"returnSlots":1},"@releasable_396":{"entryPoint":1571,"id":396,"parameterSlots":1,"returnSlots":1},"@releasable_431":{"entryPoint":1643,"id":431,"parameterSlots":2,"returnSlots":1},"@release_483":{"entryPoint":707,"id":483,"parameterSlots":1,"returnSlots":0},"@release_545":{"entryPoint":1119,"id":545,"parameterSlots":2,"returnSlots":0},"@released_337":{"entryPoint":null,"id":337,"parameterSlots":1,"returnSlots":1},"@released_355":{"entryPoint":1074,"id":355,"parameterSlots":2,"returnSlots":1},"@safeTransfer_2435":{"entryPoint":2120,"id":2435,"parameterSlots":3,"returnSlots":0},"@sendValue_2848":{"entryPoint":1834,"id":2848,"parameterSlots":2,"returnSlots":0},"@shares_324":{"entryPoint":null,"id":324,"parameterSlots":1,"returnSlots":1},"@totalReleased_297":{"entryPoint":null,"id":297,"parameterSlots":0,"returnSlots":1},"@totalReleased_311":{"entryPoint":null,"id":311,"parameterSlots":1,"returnSlots":1},"@totalShares_288":{"entryPoint":null,"id":288,"parameterSlots":0,"returnSlots":1},"@verifyCallResultFromTarget_3081":{"entryPoint":2675,"id":3081,"parameterSlots":4,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":2857,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3132,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149t_address":{"entryPoint":2886,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":2943,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3031,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3202,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3230,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2990,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3079,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":3056,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3113,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3166,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x11":{"entryPoint":2968,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3009,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address_payable":{"entryPoint":2833,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8139:28","nodeType":"YulBlock","src":"0:8139:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"143:168:28","nodeType":"YulBlock","src":"143:168:28","statements":[{"nativeSrc":"153:26:28","nodeType":"YulAssignment","src":"153:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"165:9:28","nodeType":"YulIdentifier","src":"165:9:28"},{"kind":"number","nativeSrc":"176:2:28","nodeType":"YulLiteral","src":"176:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"161:3:28","nodeType":"YulIdentifier","src":"161:3:28"},"nativeSrc":"161:18:28","nodeType":"YulFunctionCall","src":"161:18:28"},"variableNames":[{"name":"tail","nativeSrc":"153:4:28","nodeType":"YulIdentifier","src":"153:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"195:9:28","nodeType":"YulIdentifier","src":"195:9:28"},{"arguments":[{"name":"value0","nativeSrc":"210:6:28","nodeType":"YulIdentifier","src":"210:6:28"},{"kind":"number","nativeSrc":"218:42:28","nodeType":"YulLiteral","src":"218:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"206:3:28","nodeType":"YulIdentifier","src":"206:3:28"},"nativeSrc":"206:55:28","nodeType":"YulFunctionCall","src":"206:55:28"}],"functionName":{"name":"mstore","nativeSrc":"188:6:28","nodeType":"YulIdentifier","src":"188:6:28"},"nativeSrc":"188:74:28","nodeType":"YulFunctionCall","src":"188:74:28"},"nativeSrc":"188:74:28","nodeType":"YulExpressionStatement","src":"188:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"282:9:28","nodeType":"YulIdentifier","src":"282:9:28"},{"kind":"number","nativeSrc":"293:2:28","nodeType":"YulLiteral","src":"293:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"278:3:28","nodeType":"YulIdentifier","src":"278:3:28"},"nativeSrc":"278:18:28","nodeType":"YulFunctionCall","src":"278:18:28"},{"name":"value1","nativeSrc":"298:6:28","nodeType":"YulIdentifier","src":"298:6:28"}],"functionName":{"name":"mstore","nativeSrc":"271:6:28","nodeType":"YulIdentifier","src":"271:6:28"},"nativeSrc":"271:34:28","nodeType":"YulFunctionCall","src":"271:34:28"},"nativeSrc":"271:34:28","nodeType":"YulExpressionStatement","src":"271:34:28"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"14:297:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"104:9:28","nodeType":"YulTypedName","src":"104:9:28","type":""},{"name":"value1","nativeSrc":"115:6:28","nodeType":"YulTypedName","src":"115:6:28","type":""},{"name":"value0","nativeSrc":"123:6:28","nodeType":"YulTypedName","src":"123:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"134:4:28","nodeType":"YulTypedName","src":"134:4:28","type":""}],"src":"14:297:28"},{"body":{"nativeSrc":"369:109:28","nodeType":"YulBlock","src":"369:109:28","statements":[{"body":{"nativeSrc":"456:16:28","nodeType":"YulBlock","src":"456:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"465:1:28","nodeType":"YulLiteral","src":"465:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"468:1:28","nodeType":"YulLiteral","src":"468:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"458:6:28","nodeType":"YulIdentifier","src":"458:6:28"},"nativeSrc":"458:12:28","nodeType":"YulFunctionCall","src":"458:12:28"},"nativeSrc":"458:12:28","nodeType":"YulExpressionStatement","src":"458:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"392:5:28","nodeType":"YulIdentifier","src":"392:5:28"},{"arguments":[{"name":"value","nativeSrc":"403:5:28","nodeType":"YulIdentifier","src":"403:5:28"},{"kind":"number","nativeSrc":"410:42:28","nodeType":"YulLiteral","src":"410:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"399:3:28","nodeType":"YulIdentifier","src":"399:3:28"},"nativeSrc":"399:54:28","nodeType":"YulFunctionCall","src":"399:54:28"}],"functionName":{"name":"eq","nativeSrc":"389:2:28","nodeType":"YulIdentifier","src":"389:2:28"},"nativeSrc":"389:65:28","nodeType":"YulFunctionCall","src":"389:65:28"}],"functionName":{"name":"iszero","nativeSrc":"382:6:28","nodeType":"YulIdentifier","src":"382:6:28"},"nativeSrc":"382:73:28","nodeType":"YulFunctionCall","src":"382:73:28"},"nativeSrc":"379:93:28","nodeType":"YulIf","src":"379:93:28"}]},"name":"validator_revert_address_payable","nativeSrc":"316:162:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"358:5:28","nodeType":"YulTypedName","src":"358:5:28","type":""}],"src":"316:162:28"},{"body":{"nativeSrc":"561:185:28","nodeType":"YulBlock","src":"561:185:28","statements":[{"body":{"nativeSrc":"607:16:28","nodeType":"YulBlock","src":"607:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"616:1:28","nodeType":"YulLiteral","src":"616:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"619:1:28","nodeType":"YulLiteral","src":"619:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"609:6:28","nodeType":"YulIdentifier","src":"609:6:28"},"nativeSrc":"609:12:28","nodeType":"YulFunctionCall","src":"609:12:28"},"nativeSrc":"609:12:28","nodeType":"YulExpressionStatement","src":"609:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"582:7:28","nodeType":"YulIdentifier","src":"582:7:28"},{"name":"headStart","nativeSrc":"591:9:28","nodeType":"YulIdentifier","src":"591:9:28"}],"functionName":{"name":"sub","nativeSrc":"578:3:28","nodeType":"YulIdentifier","src":"578:3:28"},"nativeSrc":"578:23:28","nodeType":"YulFunctionCall","src":"578:23:28"},{"kind":"number","nativeSrc":"603:2:28","nodeType":"YulLiteral","src":"603:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"574:3:28","nodeType":"YulIdentifier","src":"574:3:28"},"nativeSrc":"574:32:28","nodeType":"YulFunctionCall","src":"574:32:28"},"nativeSrc":"571:52:28","nodeType":"YulIf","src":"571:52:28"},{"nativeSrc":"632:36:28","nodeType":"YulVariableDeclaration","src":"632:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"658:9:28","nodeType":"YulIdentifier","src":"658:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"645:12:28","nodeType":"YulIdentifier","src":"645:12:28"},"nativeSrc":"645:23:28","nodeType":"YulFunctionCall","src":"645:23:28"},"variables":[{"name":"value","nativeSrc":"636:5:28","nodeType":"YulTypedName","src":"636:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"710:5:28","nodeType":"YulIdentifier","src":"710:5:28"}],"functionName":{"name":"validator_revert_address_payable","nativeSrc":"677:32:28","nodeType":"YulIdentifier","src":"677:32:28"},"nativeSrc":"677:39:28","nodeType":"YulFunctionCall","src":"677:39:28"},"nativeSrc":"677:39:28","nodeType":"YulExpressionStatement","src":"677:39:28"},{"nativeSrc":"725:15:28","nodeType":"YulAssignment","src":"725:15:28","value":{"name":"value","nativeSrc":"735:5:28","nodeType":"YulIdentifier","src":"735:5:28"},"variableNames":[{"name":"value0","nativeSrc":"725:6:28","nodeType":"YulIdentifier","src":"725:6:28"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"483:263:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"527:9:28","nodeType":"YulTypedName","src":"527:9:28","type":""},{"name":"dataEnd","nativeSrc":"538:7:28","nodeType":"YulTypedName","src":"538:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"550:6:28","nodeType":"YulTypedName","src":"550:6:28","type":""}],"src":"483:263:28"},{"body":{"nativeSrc":"852:76:28","nodeType":"YulBlock","src":"852:76:28","statements":[{"nativeSrc":"862:26:28","nodeType":"YulAssignment","src":"862:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"874:9:28","nodeType":"YulIdentifier","src":"874:9:28"},{"kind":"number","nativeSrc":"885:2:28","nodeType":"YulLiteral","src":"885:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"870:3:28","nodeType":"YulIdentifier","src":"870:3:28"},"nativeSrc":"870:18:28","nodeType":"YulFunctionCall","src":"870:18:28"},"variableNames":[{"name":"tail","nativeSrc":"862:4:28","nodeType":"YulIdentifier","src":"862:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"904:9:28","nodeType":"YulIdentifier","src":"904:9:28"},{"name":"value0","nativeSrc":"915:6:28","nodeType":"YulIdentifier","src":"915:6:28"}],"functionName":{"name":"mstore","nativeSrc":"897:6:28","nodeType":"YulIdentifier","src":"897:6:28"},"nativeSrc":"897:25:28","nodeType":"YulFunctionCall","src":"897:25:28"},"nativeSrc":"897:25:28","nodeType":"YulExpressionStatement","src":"897:25:28"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"751:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"821:9:28","nodeType":"YulTypedName","src":"821:9:28","type":""},{"name":"value0","nativeSrc":"832:6:28","nodeType":"YulTypedName","src":"832:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"843:4:28","nodeType":"YulTypedName","src":"843:4:28","type":""}],"src":"751:177:28"},{"body":{"nativeSrc":"1046:317:28","nodeType":"YulBlock","src":"1046:317:28","statements":[{"body":{"nativeSrc":"1092:16:28","nodeType":"YulBlock","src":"1092:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1101:1:28","nodeType":"YulLiteral","src":"1101:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1104:1:28","nodeType":"YulLiteral","src":"1104:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1094:6:28","nodeType":"YulIdentifier","src":"1094:6:28"},"nativeSrc":"1094:12:28","nodeType":"YulFunctionCall","src":"1094:12:28"},"nativeSrc":"1094:12:28","nodeType":"YulExpressionStatement","src":"1094:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1067:7:28","nodeType":"YulIdentifier","src":"1067:7:28"},{"name":"headStart","nativeSrc":"1076:9:28","nodeType":"YulIdentifier","src":"1076:9:28"}],"functionName":{"name":"sub","nativeSrc":"1063:3:28","nodeType":"YulIdentifier","src":"1063:3:28"},"nativeSrc":"1063:23:28","nodeType":"YulFunctionCall","src":"1063:23:28"},{"kind":"number","nativeSrc":"1088:2:28","nodeType":"YulLiteral","src":"1088:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1059:3:28","nodeType":"YulIdentifier","src":"1059:3:28"},"nativeSrc":"1059:32:28","nodeType":"YulFunctionCall","src":"1059:32:28"},"nativeSrc":"1056:52:28","nodeType":"YulIf","src":"1056:52:28"},{"nativeSrc":"1117:36:28","nodeType":"YulVariableDeclaration","src":"1117:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1143:9:28","nodeType":"YulIdentifier","src":"1143:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"1130:12:28","nodeType":"YulIdentifier","src":"1130:12:28"},"nativeSrc":"1130:23:28","nodeType":"YulFunctionCall","src":"1130:23:28"},"variables":[{"name":"value","nativeSrc":"1121:5:28","nodeType":"YulTypedName","src":"1121:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1195:5:28","nodeType":"YulIdentifier","src":"1195:5:28"}],"functionName":{"name":"validator_revert_address_payable","nativeSrc":"1162:32:28","nodeType":"YulIdentifier","src":"1162:32:28"},"nativeSrc":"1162:39:28","nodeType":"YulFunctionCall","src":"1162:39:28"},"nativeSrc":"1162:39:28","nodeType":"YulExpressionStatement","src":"1162:39:28"},{"nativeSrc":"1210:15:28","nodeType":"YulAssignment","src":"1210:15:28","value":{"name":"value","nativeSrc":"1220:5:28","nodeType":"YulIdentifier","src":"1220:5:28"},"variableNames":[{"name":"value0","nativeSrc":"1210:6:28","nodeType":"YulIdentifier","src":"1210:6:28"}]},{"nativeSrc":"1234:47:28","nodeType":"YulVariableDeclaration","src":"1234:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1266:9:28","nodeType":"YulIdentifier","src":"1266:9:28"},{"kind":"number","nativeSrc":"1277:2:28","nodeType":"YulLiteral","src":"1277:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1262:3:28","nodeType":"YulIdentifier","src":"1262:3:28"},"nativeSrc":"1262:18:28","nodeType":"YulFunctionCall","src":"1262:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"1249:12:28","nodeType":"YulIdentifier","src":"1249:12:28"},"nativeSrc":"1249:32:28","nodeType":"YulFunctionCall","src":"1249:32:28"},"variables":[{"name":"value_1","nativeSrc":"1238:7:28","nodeType":"YulTypedName","src":"1238:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"1323:7:28","nodeType":"YulIdentifier","src":"1323:7:28"}],"functionName":{"name":"validator_revert_address_payable","nativeSrc":"1290:32:28","nodeType":"YulIdentifier","src":"1290:32:28"},"nativeSrc":"1290:41:28","nodeType":"YulFunctionCall","src":"1290:41:28"},"nativeSrc":"1290:41:28","nodeType":"YulExpressionStatement","src":"1290:41:28"},{"nativeSrc":"1340:17:28","nodeType":"YulAssignment","src":"1340:17:28","value":{"name":"value_1","nativeSrc":"1350:7:28","nodeType":"YulIdentifier","src":"1350:7:28"},"variableNames":[{"name":"value1","nativeSrc":"1340:6:28","nodeType":"YulIdentifier","src":"1340:6:28"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149t_address","nativeSrc":"933:430:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1004:9:28","nodeType":"YulTypedName","src":"1004:9:28","type":""},{"name":"dataEnd","nativeSrc":"1015:7:28","nodeType":"YulTypedName","src":"1015:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1027:6:28","nodeType":"YulTypedName","src":"1027:6:28","type":""},{"name":"value1","nativeSrc":"1035:6:28","nodeType":"YulTypedName","src":"1035:6:28","type":""}],"src":"933:430:28"},{"body":{"nativeSrc":"1438:110:28","nodeType":"YulBlock","src":"1438:110:28","statements":[{"body":{"nativeSrc":"1484:16:28","nodeType":"YulBlock","src":"1484:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1493:1:28","nodeType":"YulLiteral","src":"1493:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1496:1:28","nodeType":"YulLiteral","src":"1496:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1486:6:28","nodeType":"YulIdentifier","src":"1486:6:28"},"nativeSrc":"1486:12:28","nodeType":"YulFunctionCall","src":"1486:12:28"},"nativeSrc":"1486:12:28","nodeType":"YulExpressionStatement","src":"1486:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1459:7:28","nodeType":"YulIdentifier","src":"1459:7:28"},{"name":"headStart","nativeSrc":"1468:9:28","nodeType":"YulIdentifier","src":"1468:9:28"}],"functionName":{"name":"sub","nativeSrc":"1455:3:28","nodeType":"YulIdentifier","src":"1455:3:28"},"nativeSrc":"1455:23:28","nodeType":"YulFunctionCall","src":"1455:23:28"},{"kind":"number","nativeSrc":"1480:2:28","nodeType":"YulLiteral","src":"1480:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1451:3:28","nodeType":"YulIdentifier","src":"1451:3:28"},"nativeSrc":"1451:32:28","nodeType":"YulFunctionCall","src":"1451:32:28"},"nativeSrc":"1448:52:28","nodeType":"YulIf","src":"1448:52:28"},{"nativeSrc":"1509:33:28","nodeType":"YulAssignment","src":"1509:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1532:9:28","nodeType":"YulIdentifier","src":"1532:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"1519:12:28","nodeType":"YulIdentifier","src":"1519:12:28"},"nativeSrc":"1519:23:28","nodeType":"YulFunctionCall","src":"1519:23:28"},"variableNames":[{"name":"value0","nativeSrc":"1509:6:28","nodeType":"YulIdentifier","src":"1509:6:28"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1368:180:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1404:9:28","nodeType":"YulTypedName","src":"1404:9:28","type":""},{"name":"dataEnd","nativeSrc":"1415:7:28","nodeType":"YulTypedName","src":"1415:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1427:6:28","nodeType":"YulTypedName","src":"1427:6:28","type":""}],"src":"1368:180:28"},{"body":{"nativeSrc":"1654:125:28","nodeType":"YulBlock","src":"1654:125:28","statements":[{"nativeSrc":"1664:26:28","nodeType":"YulAssignment","src":"1664:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1676:9:28","nodeType":"YulIdentifier","src":"1676:9:28"},{"kind":"number","nativeSrc":"1687:2:28","nodeType":"YulLiteral","src":"1687:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1672:3:28","nodeType":"YulIdentifier","src":"1672:3:28"},"nativeSrc":"1672:18:28","nodeType":"YulFunctionCall","src":"1672:18:28"},"variableNames":[{"name":"tail","nativeSrc":"1664:4:28","nodeType":"YulIdentifier","src":"1664:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1706:9:28","nodeType":"YulIdentifier","src":"1706:9:28"},{"arguments":[{"name":"value0","nativeSrc":"1721:6:28","nodeType":"YulIdentifier","src":"1721:6:28"},{"kind":"number","nativeSrc":"1729:42:28","nodeType":"YulLiteral","src":"1729:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1717:3:28","nodeType":"YulIdentifier","src":"1717:3:28"},"nativeSrc":"1717:55:28","nodeType":"YulFunctionCall","src":"1717:55:28"}],"functionName":{"name":"mstore","nativeSrc":"1699:6:28","nodeType":"YulIdentifier","src":"1699:6:28"},"nativeSrc":"1699:74:28","nodeType":"YulFunctionCall","src":"1699:74:28"},"nativeSrc":"1699:74:28","nodeType":"YulExpressionStatement","src":"1699:74:28"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1553:226:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1623:9:28","nodeType":"YulTypedName","src":"1623:9:28","type":""},{"name":"value0","nativeSrc":"1634:6:28","nodeType":"YulTypedName","src":"1634:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1645:4:28","nodeType":"YulTypedName","src":"1645:4:28","type":""}],"src":"1553:226:28"},{"body":{"nativeSrc":"1854:185:28","nodeType":"YulBlock","src":"1854:185:28","statements":[{"body":{"nativeSrc":"1900:16:28","nodeType":"YulBlock","src":"1900:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1909:1:28","nodeType":"YulLiteral","src":"1909:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1912:1:28","nodeType":"YulLiteral","src":"1912:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1902:6:28","nodeType":"YulIdentifier","src":"1902:6:28"},"nativeSrc":"1902:12:28","nodeType":"YulFunctionCall","src":"1902:12:28"},"nativeSrc":"1902:12:28","nodeType":"YulExpressionStatement","src":"1902:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1875:7:28","nodeType":"YulIdentifier","src":"1875:7:28"},{"name":"headStart","nativeSrc":"1884:9:28","nodeType":"YulIdentifier","src":"1884:9:28"}],"functionName":{"name":"sub","nativeSrc":"1871:3:28","nodeType":"YulIdentifier","src":"1871:3:28"},"nativeSrc":"1871:23:28","nodeType":"YulFunctionCall","src":"1871:23:28"},{"kind":"number","nativeSrc":"1896:2:28","nodeType":"YulLiteral","src":"1896:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1867:3:28","nodeType":"YulIdentifier","src":"1867:3:28"},"nativeSrc":"1867:32:28","nodeType":"YulFunctionCall","src":"1867:32:28"},"nativeSrc":"1864:52:28","nodeType":"YulIf","src":"1864:52:28"},{"nativeSrc":"1925:36:28","nodeType":"YulVariableDeclaration","src":"1925:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1951:9:28","nodeType":"YulIdentifier","src":"1951:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"1938:12:28","nodeType":"YulIdentifier","src":"1938:12:28"},"nativeSrc":"1938:23:28","nodeType":"YulFunctionCall","src":"1938:23:28"},"variables":[{"name":"value","nativeSrc":"1929:5:28","nodeType":"YulTypedName","src":"1929:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2003:5:28","nodeType":"YulIdentifier","src":"2003:5:28"}],"functionName":{"name":"validator_revert_address_payable","nativeSrc":"1970:32:28","nodeType":"YulIdentifier","src":"1970:32:28"},"nativeSrc":"1970:39:28","nodeType":"YulFunctionCall","src":"1970:39:28"},"nativeSrc":"1970:39:28","nodeType":"YulExpressionStatement","src":"1970:39:28"},{"nativeSrc":"2018:15:28","nodeType":"YulAssignment","src":"2018:15:28","value":{"name":"value","nativeSrc":"2028:5:28","nodeType":"YulIdentifier","src":"2028:5:28"},"variableNames":[{"name":"value0","nativeSrc":"2018:6:28","nodeType":"YulIdentifier","src":"2018:6:28"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1784:255:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1820:9:28","nodeType":"YulTypedName","src":"1820:9:28","type":""},{"name":"dataEnd","nativeSrc":"1831:7:28","nodeType":"YulTypedName","src":"1831:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1843:6:28","nodeType":"YulTypedName","src":"1843:6:28","type":""}],"src":"1784:255:28"},{"body":{"nativeSrc":"2140:185:28","nodeType":"YulBlock","src":"2140:185:28","statements":[{"body":{"nativeSrc":"2186:16:28","nodeType":"YulBlock","src":"2186:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2195:1:28","nodeType":"YulLiteral","src":"2195:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2198:1:28","nodeType":"YulLiteral","src":"2198:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2188:6:28","nodeType":"YulIdentifier","src":"2188:6:28"},"nativeSrc":"2188:12:28","nodeType":"YulFunctionCall","src":"2188:12:28"},"nativeSrc":"2188:12:28","nodeType":"YulExpressionStatement","src":"2188:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2161:7:28","nodeType":"YulIdentifier","src":"2161:7:28"},{"name":"headStart","nativeSrc":"2170:9:28","nodeType":"YulIdentifier","src":"2170:9:28"}],"functionName":{"name":"sub","nativeSrc":"2157:3:28","nodeType":"YulIdentifier","src":"2157:3:28"},"nativeSrc":"2157:23:28","nodeType":"YulFunctionCall","src":"2157:23:28"},{"kind":"number","nativeSrc":"2182:2:28","nodeType":"YulLiteral","src":"2182:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2153:3:28","nodeType":"YulIdentifier","src":"2153:3:28"},"nativeSrc":"2153:32:28","nodeType":"YulFunctionCall","src":"2153:32:28"},"nativeSrc":"2150:52:28","nodeType":"YulIf","src":"2150:52:28"},{"nativeSrc":"2211:36:28","nodeType":"YulVariableDeclaration","src":"2211:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2237:9:28","nodeType":"YulIdentifier","src":"2237:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"2224:12:28","nodeType":"YulIdentifier","src":"2224:12:28"},"nativeSrc":"2224:23:28","nodeType":"YulFunctionCall","src":"2224:23:28"},"variables":[{"name":"value","nativeSrc":"2215:5:28","nodeType":"YulTypedName","src":"2215:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2289:5:28","nodeType":"YulIdentifier","src":"2289:5:28"}],"functionName":{"name":"validator_revert_address_payable","nativeSrc":"2256:32:28","nodeType":"YulIdentifier","src":"2256:32:28"},"nativeSrc":"2256:39:28","nodeType":"YulFunctionCall","src":"2256:39:28"},"nativeSrc":"2256:39:28","nodeType":"YulExpressionStatement","src":"2256:39:28"},{"nativeSrc":"2304:15:28","nodeType":"YulAssignment","src":"2304:15:28","value":{"name":"value","nativeSrc":"2314:5:28","nodeType":"YulIdentifier","src":"2314:5:28"},"variableNames":[{"name":"value0","nativeSrc":"2304:6:28","nodeType":"YulIdentifier","src":"2304:6:28"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149","nativeSrc":"2044:281:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2106:9:28","nodeType":"YulTypedName","src":"2106:9:28","type":""},{"name":"dataEnd","nativeSrc":"2117:7:28","nodeType":"YulTypedName","src":"2117:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2129:6:28","nodeType":"YulTypedName","src":"2129:6:28","type":""}],"src":"2044:281:28"},{"body":{"nativeSrc":"2504:228:28","nodeType":"YulBlock","src":"2504:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2521:9:28","nodeType":"YulIdentifier","src":"2521:9:28"},{"kind":"number","nativeSrc":"2532:2:28","nodeType":"YulLiteral","src":"2532:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"2514:6:28","nodeType":"YulIdentifier","src":"2514:6:28"},"nativeSrc":"2514:21:28","nodeType":"YulFunctionCall","src":"2514:21:28"},"nativeSrc":"2514:21:28","nodeType":"YulExpressionStatement","src":"2514:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2555:9:28","nodeType":"YulIdentifier","src":"2555:9:28"},{"kind":"number","nativeSrc":"2566:2:28","nodeType":"YulLiteral","src":"2566:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2551:3:28","nodeType":"YulIdentifier","src":"2551:3:28"},"nativeSrc":"2551:18:28","nodeType":"YulFunctionCall","src":"2551:18:28"},{"kind":"number","nativeSrc":"2571:2:28","nodeType":"YulLiteral","src":"2571:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"2544:6:28","nodeType":"YulIdentifier","src":"2544:6:28"},"nativeSrc":"2544:30:28","nodeType":"YulFunctionCall","src":"2544:30:28"},"nativeSrc":"2544:30:28","nodeType":"YulExpressionStatement","src":"2544:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2594:9:28","nodeType":"YulIdentifier","src":"2594:9:28"},{"kind":"number","nativeSrc":"2605:2:28","nodeType":"YulLiteral","src":"2605:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2590:3:28","nodeType":"YulIdentifier","src":"2590:3:28"},"nativeSrc":"2590:18:28","nodeType":"YulFunctionCall","src":"2590:18:28"},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e7420686173206e6f20","kind":"string","nativeSrc":"2610:34:28","nodeType":"YulLiteral","src":"2610:34:28","type":"","value":"PaymentSplitter: account has no "}],"functionName":{"name":"mstore","nativeSrc":"2583:6:28","nodeType":"YulIdentifier","src":"2583:6:28"},"nativeSrc":"2583:62:28","nodeType":"YulFunctionCall","src":"2583:62:28"},"nativeSrc":"2583:62:28","nodeType":"YulExpressionStatement","src":"2583:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2665:9:28","nodeType":"YulIdentifier","src":"2665:9:28"},{"kind":"number","nativeSrc":"2676:2:28","nodeType":"YulLiteral","src":"2676:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2661:3:28","nodeType":"YulIdentifier","src":"2661:3:28"},"nativeSrc":"2661:18:28","nodeType":"YulFunctionCall","src":"2661:18:28"},{"hexValue":"736861726573","kind":"string","nativeSrc":"2681:8:28","nodeType":"YulLiteral","src":"2681:8:28","type":"","value":"shares"}],"functionName":{"name":"mstore","nativeSrc":"2654:6:28","nodeType":"YulIdentifier","src":"2654:6:28"},"nativeSrc":"2654:36:28","nodeType":"YulFunctionCall","src":"2654:36:28"},"nativeSrc":"2654:36:28","nodeType":"YulExpressionStatement","src":"2654:36:28"},{"nativeSrc":"2699:27:28","nodeType":"YulAssignment","src":"2699:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2711:9:28","nodeType":"YulIdentifier","src":"2711:9:28"},{"kind":"number","nativeSrc":"2722:3:28","nodeType":"YulLiteral","src":"2722:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"2707:3:28","nodeType":"YulIdentifier","src":"2707:3:28"},"nativeSrc":"2707:19:28","nodeType":"YulFunctionCall","src":"2707:19:28"},"variableNames":[{"name":"tail","nativeSrc":"2699:4:28","nodeType":"YulIdentifier","src":"2699:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2330:402:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2481:9:28","nodeType":"YulTypedName","src":"2481:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2495:4:28","nodeType":"YulTypedName","src":"2495:4:28","type":""}],"src":"2330:402:28"},{"body":{"nativeSrc":"2911:233:28","nodeType":"YulBlock","src":"2911:233:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2928:9:28","nodeType":"YulIdentifier","src":"2928:9:28"},{"kind":"number","nativeSrc":"2939:2:28","nodeType":"YulLiteral","src":"2939:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"2921:6:28","nodeType":"YulIdentifier","src":"2921:6:28"},"nativeSrc":"2921:21:28","nodeType":"YulFunctionCall","src":"2921:21:28"},"nativeSrc":"2921:21:28","nodeType":"YulExpressionStatement","src":"2921:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2962:9:28","nodeType":"YulIdentifier","src":"2962:9:28"},{"kind":"number","nativeSrc":"2973:2:28","nodeType":"YulLiteral","src":"2973:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2958:3:28","nodeType":"YulIdentifier","src":"2958:3:28"},"nativeSrc":"2958:18:28","nodeType":"YulFunctionCall","src":"2958:18:28"},{"kind":"number","nativeSrc":"2978:2:28","nodeType":"YulLiteral","src":"2978:2:28","type":"","value":"43"}],"functionName":{"name":"mstore","nativeSrc":"2951:6:28","nodeType":"YulIdentifier","src":"2951:6:28"},"nativeSrc":"2951:30:28","nodeType":"YulFunctionCall","src":"2951:30:28"},"nativeSrc":"2951:30:28","nodeType":"YulExpressionStatement","src":"2951:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3001:9:28","nodeType":"YulIdentifier","src":"3001:9:28"},{"kind":"number","nativeSrc":"3012:2:28","nodeType":"YulLiteral","src":"3012:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2997:3:28","nodeType":"YulIdentifier","src":"2997:3:28"},"nativeSrc":"2997:18:28","nodeType":"YulFunctionCall","src":"2997:18:28"},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e74206973206e6f7420","kind":"string","nativeSrc":"3017:34:28","nodeType":"YulLiteral","src":"3017:34:28","type":"","value":"PaymentSplitter: account is not "}],"functionName":{"name":"mstore","nativeSrc":"2990:6:28","nodeType":"YulIdentifier","src":"2990:6:28"},"nativeSrc":"2990:62:28","nodeType":"YulFunctionCall","src":"2990:62:28"},"nativeSrc":"2990:62:28","nodeType":"YulExpressionStatement","src":"2990:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3072:9:28","nodeType":"YulIdentifier","src":"3072:9:28"},{"kind":"number","nativeSrc":"3083:2:28","nodeType":"YulLiteral","src":"3083:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3068:3:28","nodeType":"YulIdentifier","src":"3068:3:28"},"nativeSrc":"3068:18:28","nodeType":"YulFunctionCall","src":"3068:18:28"},{"hexValue":"647565207061796d656e74","kind":"string","nativeSrc":"3088:13:28","nodeType":"YulLiteral","src":"3088:13:28","type":"","value":"due payment"}],"functionName":{"name":"mstore","nativeSrc":"3061:6:28","nodeType":"YulIdentifier","src":"3061:6:28"},"nativeSrc":"3061:41:28","nodeType":"YulFunctionCall","src":"3061:41:28"},"nativeSrc":"3061:41:28","nodeType":"YulExpressionStatement","src":"3061:41:28"},{"nativeSrc":"3111:27:28","nodeType":"YulAssignment","src":"3111:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3123:9:28","nodeType":"YulIdentifier","src":"3123:9:28"},{"kind":"number","nativeSrc":"3134:3:28","nodeType":"YulLiteral","src":"3134:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3119:3:28","nodeType":"YulIdentifier","src":"3119:3:28"},"nativeSrc":"3119:19:28","nodeType":"YulFunctionCall","src":"3119:19:28"},"variableNames":[{"name":"tail","nativeSrc":"3111:4:28","nodeType":"YulIdentifier","src":"3111:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2737:407:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2888:9:28","nodeType":"YulTypedName","src":"2888:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2902:4:28","nodeType":"YulTypedName","src":"2902:4:28","type":""}],"src":"2737:407:28"},{"body":{"nativeSrc":"3181:152:28","nodeType":"YulBlock","src":"3181:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3198:1:28","nodeType":"YulLiteral","src":"3198:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3201:77:28","nodeType":"YulLiteral","src":"3201:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"3191:6:28","nodeType":"YulIdentifier","src":"3191:6:28"},"nativeSrc":"3191:88:28","nodeType":"YulFunctionCall","src":"3191:88:28"},"nativeSrc":"3191:88:28","nodeType":"YulExpressionStatement","src":"3191:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3295:1:28","nodeType":"YulLiteral","src":"3295:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"3298:4:28","nodeType":"YulLiteral","src":"3298:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"3288:6:28","nodeType":"YulIdentifier","src":"3288:6:28"},"nativeSrc":"3288:15:28","nodeType":"YulFunctionCall","src":"3288:15:28"},"nativeSrc":"3288:15:28","nodeType":"YulExpressionStatement","src":"3288:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3319:1:28","nodeType":"YulLiteral","src":"3319:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3322:4:28","nodeType":"YulLiteral","src":"3322:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3312:6:28","nodeType":"YulIdentifier","src":"3312:6:28"},"nativeSrc":"3312:15:28","nodeType":"YulFunctionCall","src":"3312:15:28"},"nativeSrc":"3312:15:28","nodeType":"YulExpressionStatement","src":"3312:15:28"}]},"name":"panic_error_0x11","nativeSrc":"3149:184:28","nodeType":"YulFunctionDefinition","src":"3149:184:28"},{"body":{"nativeSrc":"3386:77:28","nodeType":"YulBlock","src":"3386:77:28","statements":[{"nativeSrc":"3396:16:28","nodeType":"YulAssignment","src":"3396:16:28","value":{"arguments":[{"name":"x","nativeSrc":"3407:1:28","nodeType":"YulIdentifier","src":"3407:1:28"},{"name":"y","nativeSrc":"3410:1:28","nodeType":"YulIdentifier","src":"3410:1:28"}],"functionName":{"name":"add","nativeSrc":"3403:3:28","nodeType":"YulIdentifier","src":"3403:3:28"},"nativeSrc":"3403:9:28","nodeType":"YulFunctionCall","src":"3403:9:28"},"variableNames":[{"name":"sum","nativeSrc":"3396:3:28","nodeType":"YulIdentifier","src":"3396:3:28"}]},{"body":{"nativeSrc":"3435:22:28","nodeType":"YulBlock","src":"3435:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"3437:16:28","nodeType":"YulIdentifier","src":"3437:16:28"},"nativeSrc":"3437:18:28","nodeType":"YulFunctionCall","src":"3437:18:28"},"nativeSrc":"3437:18:28","nodeType":"YulExpressionStatement","src":"3437:18:28"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"3427:1:28","nodeType":"YulIdentifier","src":"3427:1:28"},{"name":"sum","nativeSrc":"3430:3:28","nodeType":"YulIdentifier","src":"3430:3:28"}],"functionName":{"name":"gt","nativeSrc":"3424:2:28","nodeType":"YulIdentifier","src":"3424:2:28"},"nativeSrc":"3424:10:28","nodeType":"YulFunctionCall","src":"3424:10:28"},"nativeSrc":"3421:36:28","nodeType":"YulIf","src":"3421:36:28"}]},"name":"checked_add_t_uint256","nativeSrc":"3338:125:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"3369:1:28","nodeType":"YulTypedName","src":"3369:1:28","type":""},{"name":"y","nativeSrc":"3372:1:28","nodeType":"YulTypedName","src":"3372:1:28","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"3378:3:28","nodeType":"YulTypedName","src":"3378:3:28","type":""}],"src":"3338:125:28"},{"body":{"nativeSrc":"3605:168:28","nodeType":"YulBlock","src":"3605:168:28","statements":[{"nativeSrc":"3615:26:28","nodeType":"YulAssignment","src":"3615:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3627:9:28","nodeType":"YulIdentifier","src":"3627:9:28"},{"kind":"number","nativeSrc":"3638:2:28","nodeType":"YulLiteral","src":"3638:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3623:3:28","nodeType":"YulIdentifier","src":"3623:3:28"},"nativeSrc":"3623:18:28","nodeType":"YulFunctionCall","src":"3623:18:28"},"variableNames":[{"name":"tail","nativeSrc":"3615:4:28","nodeType":"YulIdentifier","src":"3615:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3657:9:28","nodeType":"YulIdentifier","src":"3657:9:28"},{"arguments":[{"name":"value0","nativeSrc":"3672:6:28","nodeType":"YulIdentifier","src":"3672:6:28"},{"kind":"number","nativeSrc":"3680:42:28","nodeType":"YulLiteral","src":"3680:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3668:3:28","nodeType":"YulIdentifier","src":"3668:3:28"},"nativeSrc":"3668:55:28","nodeType":"YulFunctionCall","src":"3668:55:28"}],"functionName":{"name":"mstore","nativeSrc":"3650:6:28","nodeType":"YulIdentifier","src":"3650:6:28"},"nativeSrc":"3650:74:28","nodeType":"YulFunctionCall","src":"3650:74:28"},"nativeSrc":"3650:74:28","nodeType":"YulExpressionStatement","src":"3650:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3744:9:28","nodeType":"YulIdentifier","src":"3744:9:28"},{"kind":"number","nativeSrc":"3755:2:28","nodeType":"YulLiteral","src":"3755:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3740:3:28","nodeType":"YulIdentifier","src":"3740:3:28"},"nativeSrc":"3740:18:28","nodeType":"YulFunctionCall","src":"3740:18:28"},{"name":"value1","nativeSrc":"3760:6:28","nodeType":"YulIdentifier","src":"3760:6:28"}],"functionName":{"name":"mstore","nativeSrc":"3733:6:28","nodeType":"YulIdentifier","src":"3733:6:28"},"nativeSrc":"3733:34:28","nodeType":"YulFunctionCall","src":"3733:34:28"},"nativeSrc":"3733:34:28","nodeType":"YulExpressionStatement","src":"3733:34:28"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"3468:305:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3566:9:28","nodeType":"YulTypedName","src":"3566:9:28","type":""},{"name":"value1","nativeSrc":"3577:6:28","nodeType":"YulTypedName","src":"3577:6:28","type":""},{"name":"value0","nativeSrc":"3585:6:28","nodeType":"YulTypedName","src":"3585:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3596:4:28","nodeType":"YulTypedName","src":"3596:4:28","type":""}],"src":"3468:305:28"},{"body":{"nativeSrc":"3810:152:28","nodeType":"YulBlock","src":"3810:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3827:1:28","nodeType":"YulLiteral","src":"3827:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3830:77:28","nodeType":"YulLiteral","src":"3830:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"3820:6:28","nodeType":"YulIdentifier","src":"3820:6:28"},"nativeSrc":"3820:88:28","nodeType":"YulFunctionCall","src":"3820:88:28"},"nativeSrc":"3820:88:28","nodeType":"YulExpressionStatement","src":"3820:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3924:1:28","nodeType":"YulLiteral","src":"3924:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"3927:4:28","nodeType":"YulLiteral","src":"3927:4:28","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"3917:6:28","nodeType":"YulIdentifier","src":"3917:6:28"},"nativeSrc":"3917:15:28","nodeType":"YulFunctionCall","src":"3917:15:28"},"nativeSrc":"3917:15:28","nodeType":"YulExpressionStatement","src":"3917:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3948:1:28","nodeType":"YulLiteral","src":"3948:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3951:4:28","nodeType":"YulLiteral","src":"3951:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3941:6:28","nodeType":"YulIdentifier","src":"3941:6:28"},"nativeSrc":"3941:15:28","nodeType":"YulFunctionCall","src":"3941:15:28"},"nativeSrc":"3941:15:28","nodeType":"YulExpressionStatement","src":"3941:15:28"}]},"name":"panic_error_0x32","nativeSrc":"3778:184:28","nodeType":"YulFunctionDefinition","src":"3778:184:28"},{"body":{"nativeSrc":"4048:103:28","nodeType":"YulBlock","src":"4048:103:28","statements":[{"body":{"nativeSrc":"4094:16:28","nodeType":"YulBlock","src":"4094:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4103:1:28","nodeType":"YulLiteral","src":"4103:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4106:1:28","nodeType":"YulLiteral","src":"4106:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4096:6:28","nodeType":"YulIdentifier","src":"4096:6:28"},"nativeSrc":"4096:12:28","nodeType":"YulFunctionCall","src":"4096:12:28"},"nativeSrc":"4096:12:28","nodeType":"YulExpressionStatement","src":"4096:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4069:7:28","nodeType":"YulIdentifier","src":"4069:7:28"},{"name":"headStart","nativeSrc":"4078:9:28","nodeType":"YulIdentifier","src":"4078:9:28"}],"functionName":{"name":"sub","nativeSrc":"4065:3:28","nodeType":"YulIdentifier","src":"4065:3:28"},"nativeSrc":"4065:23:28","nodeType":"YulFunctionCall","src":"4065:23:28"},{"kind":"number","nativeSrc":"4090:2:28","nodeType":"YulLiteral","src":"4090:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4061:3:28","nodeType":"YulIdentifier","src":"4061:3:28"},"nativeSrc":"4061:32:28","nodeType":"YulFunctionCall","src":"4061:32:28"},"nativeSrc":"4058:52:28","nodeType":"YulIf","src":"4058:52:28"},{"nativeSrc":"4119:26:28","nodeType":"YulAssignment","src":"4119:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4135:9:28","nodeType":"YulIdentifier","src":"4135:9:28"}],"functionName":{"name":"mload","nativeSrc":"4129:5:28","nodeType":"YulIdentifier","src":"4129:5:28"},"nativeSrc":"4129:16:28","nodeType":"YulFunctionCall","src":"4129:16:28"},"variableNames":[{"name":"value0","nativeSrc":"4119:6:28","nodeType":"YulIdentifier","src":"4119:6:28"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"3967:184:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4014:9:28","nodeType":"YulTypedName","src":"4014:9:28","type":""},{"name":"dataEnd","nativeSrc":"4025:7:28","nodeType":"YulTypedName","src":"4025:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4037:6:28","nodeType":"YulTypedName","src":"4037:6:28","type":""}],"src":"3967:184:28"},{"body":{"nativeSrc":"4330:179:28","nodeType":"YulBlock","src":"4330:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4347:9:28","nodeType":"YulIdentifier","src":"4347:9:28"},{"kind":"number","nativeSrc":"4358:2:28","nodeType":"YulLiteral","src":"4358:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"4340:6:28","nodeType":"YulIdentifier","src":"4340:6:28"},"nativeSrc":"4340:21:28","nodeType":"YulFunctionCall","src":"4340:21:28"},"nativeSrc":"4340:21:28","nodeType":"YulExpressionStatement","src":"4340:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4381:9:28","nodeType":"YulIdentifier","src":"4381:9:28"},{"kind":"number","nativeSrc":"4392:2:28","nodeType":"YulLiteral","src":"4392:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4377:3:28","nodeType":"YulIdentifier","src":"4377:3:28"},"nativeSrc":"4377:18:28","nodeType":"YulFunctionCall","src":"4377:18:28"},{"kind":"number","nativeSrc":"4397:2:28","nodeType":"YulLiteral","src":"4397:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"4370:6:28","nodeType":"YulIdentifier","src":"4370:6:28"},"nativeSrc":"4370:30:28","nodeType":"YulFunctionCall","src":"4370:30:28"},"nativeSrc":"4370:30:28","nodeType":"YulExpressionStatement","src":"4370:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4420:9:28","nodeType":"YulIdentifier","src":"4420:9:28"},{"kind":"number","nativeSrc":"4431:2:28","nodeType":"YulLiteral","src":"4431:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4416:3:28","nodeType":"YulIdentifier","src":"4416:3:28"},"nativeSrc":"4416:18:28","nodeType":"YulFunctionCall","src":"4416:18:28"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"4436:31:28","nodeType":"YulLiteral","src":"4436:31:28","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"4409:6:28","nodeType":"YulIdentifier","src":"4409:6:28"},"nativeSrc":"4409:59:28","nodeType":"YulFunctionCall","src":"4409:59:28"},"nativeSrc":"4409:59:28","nodeType":"YulExpressionStatement","src":"4409:59:28"},{"nativeSrc":"4477:26:28","nodeType":"YulAssignment","src":"4477:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4489:9:28","nodeType":"YulIdentifier","src":"4489:9:28"},{"kind":"number","nativeSrc":"4500:2:28","nodeType":"YulLiteral","src":"4500:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4485:3:28","nodeType":"YulIdentifier","src":"4485:3:28"},"nativeSrc":"4485:18:28","nodeType":"YulFunctionCall","src":"4485:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4477:4:28","nodeType":"YulIdentifier","src":"4477:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4156:353:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4307:9:28","nodeType":"YulTypedName","src":"4307:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4321:4:28","nodeType":"YulTypedName","src":"4321:4:28","type":""}],"src":"4156:353:28"},{"body":{"nativeSrc":"4705:14:28","nodeType":"YulBlock","src":"4705:14:28","statements":[{"nativeSrc":"4707:10:28","nodeType":"YulAssignment","src":"4707:10:28","value":{"name":"pos","nativeSrc":"4714:3:28","nodeType":"YulIdentifier","src":"4714:3:28"},"variableNames":[{"name":"end","nativeSrc":"4707:3:28","nodeType":"YulIdentifier","src":"4707:3:28"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"4514:205:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"4689:3:28","nodeType":"YulTypedName","src":"4689:3:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4697:3:28","nodeType":"YulTypedName","src":"4697:3:28","type":""}],"src":"4514:205:28"},{"body":{"nativeSrc":"4898:248:28","nodeType":"YulBlock","src":"4898:248:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4915:9:28","nodeType":"YulIdentifier","src":"4915:9:28"},{"kind":"number","nativeSrc":"4926:2:28","nodeType":"YulLiteral","src":"4926:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"4908:6:28","nodeType":"YulIdentifier","src":"4908:6:28"},"nativeSrc":"4908:21:28","nodeType":"YulFunctionCall","src":"4908:21:28"},"nativeSrc":"4908:21:28","nodeType":"YulExpressionStatement","src":"4908:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4949:9:28","nodeType":"YulIdentifier","src":"4949:9:28"},{"kind":"number","nativeSrc":"4960:2:28","nodeType":"YulLiteral","src":"4960:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4945:3:28","nodeType":"YulIdentifier","src":"4945:3:28"},"nativeSrc":"4945:18:28","nodeType":"YulFunctionCall","src":"4945:18:28"},{"kind":"number","nativeSrc":"4965:2:28","nodeType":"YulLiteral","src":"4965:2:28","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"4938:6:28","nodeType":"YulIdentifier","src":"4938:6:28"},"nativeSrc":"4938:30:28","nodeType":"YulFunctionCall","src":"4938:30:28"},"nativeSrc":"4938:30:28","nodeType":"YulExpressionStatement","src":"4938:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4988:9:28","nodeType":"YulIdentifier","src":"4988:9:28"},{"kind":"number","nativeSrc":"4999:2:28","nodeType":"YulLiteral","src":"4999:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4984:3:28","nodeType":"YulIdentifier","src":"4984:3:28"},"nativeSrc":"4984:18:28","nodeType":"YulFunctionCall","src":"4984:18:28"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"5004:34:28","nodeType":"YulLiteral","src":"5004:34:28","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"4977:6:28","nodeType":"YulIdentifier","src":"4977:6:28"},"nativeSrc":"4977:62:28","nodeType":"YulFunctionCall","src":"4977:62:28"},"nativeSrc":"4977:62:28","nodeType":"YulExpressionStatement","src":"4977:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5059:9:28","nodeType":"YulIdentifier","src":"5059:9:28"},{"kind":"number","nativeSrc":"5070:2:28","nodeType":"YulLiteral","src":"5070:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5055:3:28","nodeType":"YulIdentifier","src":"5055:3:28"},"nativeSrc":"5055:18:28","nodeType":"YulFunctionCall","src":"5055:18:28"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"5075:28:28","nodeType":"YulLiteral","src":"5075:28:28","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"5048:6:28","nodeType":"YulIdentifier","src":"5048:6:28"},"nativeSrc":"5048:56:28","nodeType":"YulFunctionCall","src":"5048:56:28"},"nativeSrc":"5048:56:28","nodeType":"YulExpressionStatement","src":"5048:56:28"},{"nativeSrc":"5113:27:28","nodeType":"YulAssignment","src":"5113:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5125:9:28","nodeType":"YulIdentifier","src":"5125:9:28"},{"kind":"number","nativeSrc":"5136:3:28","nodeType":"YulLiteral","src":"5136:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5121:3:28","nodeType":"YulIdentifier","src":"5121:3:28"},"nativeSrc":"5121:19:28","nodeType":"YulFunctionCall","src":"5121:19:28"},"variableNames":[{"name":"tail","nativeSrc":"5113:4:28","nodeType":"YulIdentifier","src":"5113:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4724:422:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4875:9:28","nodeType":"YulTypedName","src":"4875:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4889:4:28","nodeType":"YulTypedName","src":"4889:4:28","type":""}],"src":"4724:422:28"},{"body":{"nativeSrc":"5203:116:28","nodeType":"YulBlock","src":"5203:116:28","statements":[{"nativeSrc":"5213:20:28","nodeType":"YulAssignment","src":"5213:20:28","value":{"arguments":[{"name":"x","nativeSrc":"5228:1:28","nodeType":"YulIdentifier","src":"5228:1:28"},{"name":"y","nativeSrc":"5231:1:28","nodeType":"YulIdentifier","src":"5231:1:28"}],"functionName":{"name":"mul","nativeSrc":"5224:3:28","nodeType":"YulIdentifier","src":"5224:3:28"},"nativeSrc":"5224:9:28","nodeType":"YulFunctionCall","src":"5224:9:28"},"variableNames":[{"name":"product","nativeSrc":"5213:7:28","nodeType":"YulIdentifier","src":"5213:7:28"}]},{"body":{"nativeSrc":"5291:22:28","nodeType":"YulBlock","src":"5291:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5293:16:28","nodeType":"YulIdentifier","src":"5293:16:28"},"nativeSrc":"5293:18:28","nodeType":"YulFunctionCall","src":"5293:18:28"},"nativeSrc":"5293:18:28","nodeType":"YulExpressionStatement","src":"5293:18:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"5262:1:28","nodeType":"YulIdentifier","src":"5262:1:28"}],"functionName":{"name":"iszero","nativeSrc":"5255:6:28","nodeType":"YulIdentifier","src":"5255:6:28"},"nativeSrc":"5255:9:28","nodeType":"YulFunctionCall","src":"5255:9:28"},{"arguments":[{"name":"y","nativeSrc":"5269:1:28","nodeType":"YulIdentifier","src":"5269:1:28"},{"arguments":[{"name":"product","nativeSrc":"5276:7:28","nodeType":"YulIdentifier","src":"5276:7:28"},{"name":"x","nativeSrc":"5285:1:28","nodeType":"YulIdentifier","src":"5285:1:28"}],"functionName":{"name":"div","nativeSrc":"5272:3:28","nodeType":"YulIdentifier","src":"5272:3:28"},"nativeSrc":"5272:15:28","nodeType":"YulFunctionCall","src":"5272:15:28"}],"functionName":{"name":"eq","nativeSrc":"5266:2:28","nodeType":"YulIdentifier","src":"5266:2:28"},"nativeSrc":"5266:22:28","nodeType":"YulFunctionCall","src":"5266:22:28"}],"functionName":{"name":"or","nativeSrc":"5252:2:28","nodeType":"YulIdentifier","src":"5252:2:28"},"nativeSrc":"5252:37:28","nodeType":"YulFunctionCall","src":"5252:37:28"}],"functionName":{"name":"iszero","nativeSrc":"5245:6:28","nodeType":"YulIdentifier","src":"5245:6:28"},"nativeSrc":"5245:45:28","nodeType":"YulFunctionCall","src":"5245:45:28"},"nativeSrc":"5242:71:28","nodeType":"YulIf","src":"5242:71:28"}]},"name":"checked_mul_t_uint256","nativeSrc":"5151:168:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5182:1:28","nodeType":"YulTypedName","src":"5182:1:28","type":""},{"name":"y","nativeSrc":"5185:1:28","nodeType":"YulTypedName","src":"5185:1:28","type":""}],"returnVariables":[{"name":"product","nativeSrc":"5191:7:28","nodeType":"YulTypedName","src":"5191:7:28","type":""}],"src":"5151:168:28"},{"body":{"nativeSrc":"5370:228:28","nodeType":"YulBlock","src":"5370:228:28","statements":[{"body":{"nativeSrc":"5401:168:28","nodeType":"YulBlock","src":"5401:168:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5422:1:28","nodeType":"YulLiteral","src":"5422:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5425:77:28","nodeType":"YulLiteral","src":"5425:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5415:6:28","nodeType":"YulIdentifier","src":"5415:6:28"},"nativeSrc":"5415:88:28","nodeType":"YulFunctionCall","src":"5415:88:28"},"nativeSrc":"5415:88:28","nodeType":"YulExpressionStatement","src":"5415:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5523:1:28","nodeType":"YulLiteral","src":"5523:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"5526:4:28","nodeType":"YulLiteral","src":"5526:4:28","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"5516:6:28","nodeType":"YulIdentifier","src":"5516:6:28"},"nativeSrc":"5516:15:28","nodeType":"YulFunctionCall","src":"5516:15:28"},"nativeSrc":"5516:15:28","nodeType":"YulExpressionStatement","src":"5516:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5551:1:28","nodeType":"YulLiteral","src":"5551:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5554:4:28","nodeType":"YulLiteral","src":"5554:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5544:6:28","nodeType":"YulIdentifier","src":"5544:6:28"},"nativeSrc":"5544:15:28","nodeType":"YulFunctionCall","src":"5544:15:28"},"nativeSrc":"5544:15:28","nodeType":"YulExpressionStatement","src":"5544:15:28"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"5390:1:28","nodeType":"YulIdentifier","src":"5390:1:28"}],"functionName":{"name":"iszero","nativeSrc":"5383:6:28","nodeType":"YulIdentifier","src":"5383:6:28"},"nativeSrc":"5383:9:28","nodeType":"YulFunctionCall","src":"5383:9:28"},"nativeSrc":"5380:189:28","nodeType":"YulIf","src":"5380:189:28"},{"nativeSrc":"5578:14:28","nodeType":"YulAssignment","src":"5578:14:28","value":{"arguments":[{"name":"x","nativeSrc":"5587:1:28","nodeType":"YulIdentifier","src":"5587:1:28"},{"name":"y","nativeSrc":"5590:1:28","nodeType":"YulIdentifier","src":"5590:1:28"}],"functionName":{"name":"div","nativeSrc":"5583:3:28","nodeType":"YulIdentifier","src":"5583:3:28"},"nativeSrc":"5583:9:28","nodeType":"YulFunctionCall","src":"5583:9:28"},"variableNames":[{"name":"r","nativeSrc":"5578:1:28","nodeType":"YulIdentifier","src":"5578:1:28"}]}]},"name":"checked_div_t_uint256","nativeSrc":"5324:274:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5355:1:28","nodeType":"YulTypedName","src":"5355:1:28","type":""},{"name":"y","nativeSrc":"5358:1:28","nodeType":"YulTypedName","src":"5358:1:28","type":""}],"returnVariables":[{"name":"r","nativeSrc":"5364:1:28","nodeType":"YulTypedName","src":"5364:1:28","type":""}],"src":"5324:274:28"},{"body":{"nativeSrc":"5652:79:28","nodeType":"YulBlock","src":"5652:79:28","statements":[{"nativeSrc":"5662:17:28","nodeType":"YulAssignment","src":"5662:17:28","value":{"arguments":[{"name":"x","nativeSrc":"5674:1:28","nodeType":"YulIdentifier","src":"5674:1:28"},{"name":"y","nativeSrc":"5677:1:28","nodeType":"YulIdentifier","src":"5677:1:28"}],"functionName":{"name":"sub","nativeSrc":"5670:3:28","nodeType":"YulIdentifier","src":"5670:3:28"},"nativeSrc":"5670:9:28","nodeType":"YulFunctionCall","src":"5670:9:28"},"variableNames":[{"name":"diff","nativeSrc":"5662:4:28","nodeType":"YulIdentifier","src":"5662:4:28"}]},{"body":{"nativeSrc":"5703:22:28","nodeType":"YulBlock","src":"5703:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5705:16:28","nodeType":"YulIdentifier","src":"5705:16:28"},"nativeSrc":"5705:18:28","nodeType":"YulFunctionCall","src":"5705:18:28"},"nativeSrc":"5705:18:28","nodeType":"YulExpressionStatement","src":"5705:18:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5694:4:28","nodeType":"YulIdentifier","src":"5694:4:28"},{"name":"x","nativeSrc":"5700:1:28","nodeType":"YulIdentifier","src":"5700:1:28"}],"functionName":{"name":"gt","nativeSrc":"5691:2:28","nodeType":"YulIdentifier","src":"5691:2:28"},"nativeSrc":"5691:11:28","nodeType":"YulFunctionCall","src":"5691:11:28"},"nativeSrc":"5688:37:28","nodeType":"YulIf","src":"5688:37:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"5603:128:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5634:1:28","nodeType":"YulTypedName","src":"5634:1:28","type":""},{"name":"y","nativeSrc":"5637:1:28","nodeType":"YulTypedName","src":"5637:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5643:4:28","nodeType":"YulTypedName","src":"5643:4:28","type":""}],"src":"5603:128:28"},{"body":{"nativeSrc":"5814:199:28","nodeType":"YulBlock","src":"5814:199:28","statements":[{"body":{"nativeSrc":"5860:16:28","nodeType":"YulBlock","src":"5860:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5869:1:28","nodeType":"YulLiteral","src":"5869:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5872:1:28","nodeType":"YulLiteral","src":"5872:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5862:6:28","nodeType":"YulIdentifier","src":"5862:6:28"},"nativeSrc":"5862:12:28","nodeType":"YulFunctionCall","src":"5862:12:28"},"nativeSrc":"5862:12:28","nodeType":"YulExpressionStatement","src":"5862:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5835:7:28","nodeType":"YulIdentifier","src":"5835:7:28"},{"name":"headStart","nativeSrc":"5844:9:28","nodeType":"YulIdentifier","src":"5844:9:28"}],"functionName":{"name":"sub","nativeSrc":"5831:3:28","nodeType":"YulIdentifier","src":"5831:3:28"},"nativeSrc":"5831:23:28","nodeType":"YulFunctionCall","src":"5831:23:28"},{"kind":"number","nativeSrc":"5856:2:28","nodeType":"YulLiteral","src":"5856:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5827:3:28","nodeType":"YulIdentifier","src":"5827:3:28"},"nativeSrc":"5827:32:28","nodeType":"YulFunctionCall","src":"5827:32:28"},"nativeSrc":"5824:52:28","nodeType":"YulIf","src":"5824:52:28"},{"nativeSrc":"5885:29:28","nodeType":"YulVariableDeclaration","src":"5885:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5904:9:28","nodeType":"YulIdentifier","src":"5904:9:28"}],"functionName":{"name":"mload","nativeSrc":"5898:5:28","nodeType":"YulIdentifier","src":"5898:5:28"},"nativeSrc":"5898:16:28","nodeType":"YulFunctionCall","src":"5898:16:28"},"variables":[{"name":"value","nativeSrc":"5889:5:28","nodeType":"YulTypedName","src":"5889:5:28","type":""}]},{"body":{"nativeSrc":"5967:16:28","nodeType":"YulBlock","src":"5967:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5976:1:28","nodeType":"YulLiteral","src":"5976:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5979:1:28","nodeType":"YulLiteral","src":"5979:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5969:6:28","nodeType":"YulIdentifier","src":"5969:6:28"},"nativeSrc":"5969:12:28","nodeType":"YulFunctionCall","src":"5969:12:28"},"nativeSrc":"5969:12:28","nodeType":"YulExpressionStatement","src":"5969:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5936:5:28","nodeType":"YulIdentifier","src":"5936:5:28"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5957:5:28","nodeType":"YulIdentifier","src":"5957:5:28"}],"functionName":{"name":"iszero","nativeSrc":"5950:6:28","nodeType":"YulIdentifier","src":"5950:6:28"},"nativeSrc":"5950:13:28","nodeType":"YulFunctionCall","src":"5950:13:28"}],"functionName":{"name":"iszero","nativeSrc":"5943:6:28","nodeType":"YulIdentifier","src":"5943:6:28"},"nativeSrc":"5943:21:28","nodeType":"YulFunctionCall","src":"5943:21:28"}],"functionName":{"name":"eq","nativeSrc":"5933:2:28","nodeType":"YulIdentifier","src":"5933:2:28"},"nativeSrc":"5933:32:28","nodeType":"YulFunctionCall","src":"5933:32:28"}],"functionName":{"name":"iszero","nativeSrc":"5926:6:28","nodeType":"YulIdentifier","src":"5926:6:28"},"nativeSrc":"5926:40:28","nodeType":"YulFunctionCall","src":"5926:40:28"},"nativeSrc":"5923:60:28","nodeType":"YulIf","src":"5923:60:28"},{"nativeSrc":"5992:15:28","nodeType":"YulAssignment","src":"5992:15:28","value":{"name":"value","nativeSrc":"6002:5:28","nodeType":"YulIdentifier","src":"6002:5:28"},"variableNames":[{"name":"value0","nativeSrc":"5992:6:28","nodeType":"YulIdentifier","src":"5992:6:28"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"5736:277:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5780:9:28","nodeType":"YulTypedName","src":"5780:9:28","type":""},{"name":"dataEnd","nativeSrc":"5791:7:28","nodeType":"YulTypedName","src":"5791:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5803:6:28","nodeType":"YulTypedName","src":"5803:6:28","type":""}],"src":"5736:277:28"},{"body":{"nativeSrc":"6192:232:28","nodeType":"YulBlock","src":"6192:232:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6209:9:28","nodeType":"YulIdentifier","src":"6209:9:28"},{"kind":"number","nativeSrc":"6220:2:28","nodeType":"YulLiteral","src":"6220:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"6202:6:28","nodeType":"YulIdentifier","src":"6202:6:28"},"nativeSrc":"6202:21:28","nodeType":"YulFunctionCall","src":"6202:21:28"},"nativeSrc":"6202:21:28","nodeType":"YulExpressionStatement","src":"6202:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6243:9:28","nodeType":"YulIdentifier","src":"6243:9:28"},{"kind":"number","nativeSrc":"6254:2:28","nodeType":"YulLiteral","src":"6254:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6239:3:28","nodeType":"YulIdentifier","src":"6239:3:28"},"nativeSrc":"6239:18:28","nodeType":"YulFunctionCall","src":"6239:18:28"},{"kind":"number","nativeSrc":"6259:2:28","nodeType":"YulLiteral","src":"6259:2:28","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"6232:6:28","nodeType":"YulIdentifier","src":"6232:6:28"},"nativeSrc":"6232:30:28","nodeType":"YulFunctionCall","src":"6232:30:28"},"nativeSrc":"6232:30:28","nodeType":"YulExpressionStatement","src":"6232:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6282:9:28","nodeType":"YulIdentifier","src":"6282:9:28"},{"kind":"number","nativeSrc":"6293:2:28","nodeType":"YulLiteral","src":"6293:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6278:3:28","nodeType":"YulIdentifier","src":"6278:3:28"},"nativeSrc":"6278:18:28","nodeType":"YulFunctionCall","src":"6278:18:28"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"6298:34:28","nodeType":"YulLiteral","src":"6298:34:28","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"6271:6:28","nodeType":"YulIdentifier","src":"6271:6:28"},"nativeSrc":"6271:62:28","nodeType":"YulFunctionCall","src":"6271:62:28"},"nativeSrc":"6271:62:28","nodeType":"YulExpressionStatement","src":"6271:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6353:9:28","nodeType":"YulIdentifier","src":"6353:9:28"},{"kind":"number","nativeSrc":"6364:2:28","nodeType":"YulLiteral","src":"6364:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6349:3:28","nodeType":"YulIdentifier","src":"6349:3:28"},"nativeSrc":"6349:18:28","nodeType":"YulFunctionCall","src":"6349:18:28"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"6369:12:28","nodeType":"YulLiteral","src":"6369:12:28","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"6342:6:28","nodeType":"YulIdentifier","src":"6342:6:28"},"nativeSrc":"6342:40:28","nodeType":"YulFunctionCall","src":"6342:40:28"},"nativeSrc":"6342:40:28","nodeType":"YulExpressionStatement","src":"6342:40:28"},{"nativeSrc":"6391:27:28","nodeType":"YulAssignment","src":"6391:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6403:9:28","nodeType":"YulIdentifier","src":"6403:9:28"},{"kind":"number","nativeSrc":"6414:3:28","nodeType":"YulLiteral","src":"6414:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6399:3:28","nodeType":"YulIdentifier","src":"6399:3:28"},"nativeSrc":"6399:19:28","nodeType":"YulFunctionCall","src":"6399:19:28"},"variableNames":[{"name":"tail","nativeSrc":"6391:4:28","nodeType":"YulIdentifier","src":"6391:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6018:406:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6169:9:28","nodeType":"YulTypedName","src":"6169:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6183:4:28","nodeType":"YulTypedName","src":"6183:4:28","type":""}],"src":"6018:406:28"},{"body":{"nativeSrc":"6603:228:28","nodeType":"YulBlock","src":"6603:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6620:9:28","nodeType":"YulIdentifier","src":"6620:9:28"},{"kind":"number","nativeSrc":"6631:2:28","nodeType":"YulLiteral","src":"6631:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"6613:6:28","nodeType":"YulIdentifier","src":"6613:6:28"},"nativeSrc":"6613:21:28","nodeType":"YulFunctionCall","src":"6613:21:28"},"nativeSrc":"6613:21:28","nodeType":"YulExpressionStatement","src":"6613:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6654:9:28","nodeType":"YulIdentifier","src":"6654:9:28"},{"kind":"number","nativeSrc":"6665:2:28","nodeType":"YulLiteral","src":"6665:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6650:3:28","nodeType":"YulIdentifier","src":"6650:3:28"},"nativeSrc":"6650:18:28","nodeType":"YulFunctionCall","src":"6650:18:28"},{"kind":"number","nativeSrc":"6670:2:28","nodeType":"YulLiteral","src":"6670:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"6643:6:28","nodeType":"YulIdentifier","src":"6643:6:28"},"nativeSrc":"6643:30:28","nodeType":"YulFunctionCall","src":"6643:30:28"},"nativeSrc":"6643:30:28","nodeType":"YulExpressionStatement","src":"6643:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6693:9:28","nodeType":"YulIdentifier","src":"6693:9:28"},{"kind":"number","nativeSrc":"6704:2:28","nodeType":"YulLiteral","src":"6704:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6689:3:28","nodeType":"YulIdentifier","src":"6689:3:28"},"nativeSrc":"6689:18:28","nodeType":"YulFunctionCall","src":"6689:18:28"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"6709:34:28","nodeType":"YulLiteral","src":"6709:34:28","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"6682:6:28","nodeType":"YulIdentifier","src":"6682:6:28"},"nativeSrc":"6682:62:28","nodeType":"YulFunctionCall","src":"6682:62:28"},"nativeSrc":"6682:62:28","nodeType":"YulExpressionStatement","src":"6682:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6764:9:28","nodeType":"YulIdentifier","src":"6764:9:28"},{"kind":"number","nativeSrc":"6775:2:28","nodeType":"YulLiteral","src":"6775:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6760:3:28","nodeType":"YulIdentifier","src":"6760:3:28"},"nativeSrc":"6760:18:28","nodeType":"YulFunctionCall","src":"6760:18:28"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"6780:8:28","nodeType":"YulLiteral","src":"6780:8:28","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"6753:6:28","nodeType":"YulIdentifier","src":"6753:6:28"},"nativeSrc":"6753:36:28","nodeType":"YulFunctionCall","src":"6753:36:28"},"nativeSrc":"6753:36:28","nodeType":"YulExpressionStatement","src":"6753:36:28"},{"nativeSrc":"6798:27:28","nodeType":"YulAssignment","src":"6798:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6810:9:28","nodeType":"YulIdentifier","src":"6810:9:28"},{"kind":"number","nativeSrc":"6821:3:28","nodeType":"YulLiteral","src":"6821:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6806:3:28","nodeType":"YulIdentifier","src":"6806:3:28"},"nativeSrc":"6806:19:28","nodeType":"YulFunctionCall","src":"6806:19:28"},"variableNames":[{"name":"tail","nativeSrc":"6798:4:28","nodeType":"YulIdentifier","src":"6798:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6429:402:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6580:9:28","nodeType":"YulTypedName","src":"6580:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6594:4:28","nodeType":"YulTypedName","src":"6594:4:28","type":""}],"src":"6429:402:28"},{"body":{"nativeSrc":"6902:184:28","nodeType":"YulBlock","src":"6902:184:28","statements":[{"nativeSrc":"6912:10:28","nodeType":"YulVariableDeclaration","src":"6912:10:28","value":{"kind":"number","nativeSrc":"6921:1:28","nodeType":"YulLiteral","src":"6921:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"6916:1:28","nodeType":"YulTypedName","src":"6916:1:28","type":""}]},{"body":{"nativeSrc":"6981:63:28","nodeType":"YulBlock","src":"6981:63:28","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"7006:3:28","nodeType":"YulIdentifier","src":"7006:3:28"},{"name":"i","nativeSrc":"7011:1:28","nodeType":"YulIdentifier","src":"7011:1:28"}],"functionName":{"name":"add","nativeSrc":"7002:3:28","nodeType":"YulIdentifier","src":"7002:3:28"},"nativeSrc":"7002:11:28","nodeType":"YulFunctionCall","src":"7002:11:28"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"7025:3:28","nodeType":"YulIdentifier","src":"7025:3:28"},{"name":"i","nativeSrc":"7030:1:28","nodeType":"YulIdentifier","src":"7030:1:28"}],"functionName":{"name":"add","nativeSrc":"7021:3:28","nodeType":"YulIdentifier","src":"7021:3:28"},"nativeSrc":"7021:11:28","nodeType":"YulFunctionCall","src":"7021:11:28"}],"functionName":{"name":"mload","nativeSrc":"7015:5:28","nodeType":"YulIdentifier","src":"7015:5:28"},"nativeSrc":"7015:18:28","nodeType":"YulFunctionCall","src":"7015:18:28"}],"functionName":{"name":"mstore","nativeSrc":"6995:6:28","nodeType":"YulIdentifier","src":"6995:6:28"},"nativeSrc":"6995:39:28","nodeType":"YulFunctionCall","src":"6995:39:28"},"nativeSrc":"6995:39:28","nodeType":"YulExpressionStatement","src":"6995:39:28"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"6942:1:28","nodeType":"YulIdentifier","src":"6942:1:28"},{"name":"length","nativeSrc":"6945:6:28","nodeType":"YulIdentifier","src":"6945:6:28"}],"functionName":{"name":"lt","nativeSrc":"6939:2:28","nodeType":"YulIdentifier","src":"6939:2:28"},"nativeSrc":"6939:13:28","nodeType":"YulFunctionCall","src":"6939:13:28"},"nativeSrc":"6931:113:28","nodeType":"YulForLoop","post":{"nativeSrc":"6953:19:28","nodeType":"YulBlock","src":"6953:19:28","statements":[{"nativeSrc":"6955:15:28","nodeType":"YulAssignment","src":"6955:15:28","value":{"arguments":[{"name":"i","nativeSrc":"6964:1:28","nodeType":"YulIdentifier","src":"6964:1:28"},{"kind":"number","nativeSrc":"6967:2:28","nodeType":"YulLiteral","src":"6967:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6960:3:28","nodeType":"YulIdentifier","src":"6960:3:28"},"nativeSrc":"6960:10:28","nodeType":"YulFunctionCall","src":"6960:10:28"},"variableNames":[{"name":"i","nativeSrc":"6955:1:28","nodeType":"YulIdentifier","src":"6955:1:28"}]}]},"pre":{"nativeSrc":"6935:3:28","nodeType":"YulBlock","src":"6935:3:28","statements":[]},"src":"6931:113:28"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"7064:3:28","nodeType":"YulIdentifier","src":"7064:3:28"},{"name":"length","nativeSrc":"7069:6:28","nodeType":"YulIdentifier","src":"7069:6:28"}],"functionName":{"name":"add","nativeSrc":"7060:3:28","nodeType":"YulIdentifier","src":"7060:3:28"},"nativeSrc":"7060:16:28","nodeType":"YulFunctionCall","src":"7060:16:28"},{"kind":"number","nativeSrc":"7078:1:28","nodeType":"YulLiteral","src":"7078:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"7053:6:28","nodeType":"YulIdentifier","src":"7053:6:28"},"nativeSrc":"7053:27:28","nodeType":"YulFunctionCall","src":"7053:27:28"},"nativeSrc":"7053:27:28","nodeType":"YulExpressionStatement","src":"7053:27:28"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"6836:250:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"6880:3:28","nodeType":"YulTypedName","src":"6880:3:28","type":""},{"name":"dst","nativeSrc":"6885:3:28","nodeType":"YulTypedName","src":"6885:3:28","type":""},{"name":"length","nativeSrc":"6890:6:28","nodeType":"YulTypedName","src":"6890:6:28","type":""}],"src":"6836:250:28"},{"body":{"nativeSrc":"7228:150:28","nodeType":"YulBlock","src":"7228:150:28","statements":[{"nativeSrc":"7238:27:28","nodeType":"YulVariableDeclaration","src":"7238:27:28","value":{"arguments":[{"name":"value0","nativeSrc":"7258:6:28","nodeType":"YulIdentifier","src":"7258:6:28"}],"functionName":{"name":"mload","nativeSrc":"7252:5:28","nodeType":"YulIdentifier","src":"7252:5:28"},"nativeSrc":"7252:13:28","nodeType":"YulFunctionCall","src":"7252:13:28"},"variables":[{"name":"length","nativeSrc":"7242:6:28","nodeType":"YulTypedName","src":"7242:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"7313:6:28","nodeType":"YulIdentifier","src":"7313:6:28"},{"kind":"number","nativeSrc":"7321:4:28","nodeType":"YulLiteral","src":"7321:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7309:3:28","nodeType":"YulIdentifier","src":"7309:3:28"},"nativeSrc":"7309:17:28","nodeType":"YulFunctionCall","src":"7309:17:28"},{"name":"pos","nativeSrc":"7328:3:28","nodeType":"YulIdentifier","src":"7328:3:28"},{"name":"length","nativeSrc":"7333:6:28","nodeType":"YulIdentifier","src":"7333:6:28"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"7274:34:28","nodeType":"YulIdentifier","src":"7274:34:28"},"nativeSrc":"7274:66:28","nodeType":"YulFunctionCall","src":"7274:66:28"},"nativeSrc":"7274:66:28","nodeType":"YulExpressionStatement","src":"7274:66:28"},{"nativeSrc":"7349:23:28","nodeType":"YulAssignment","src":"7349:23:28","value":{"arguments":[{"name":"pos","nativeSrc":"7360:3:28","nodeType":"YulIdentifier","src":"7360:3:28"},{"name":"length","nativeSrc":"7365:6:28","nodeType":"YulIdentifier","src":"7365:6:28"}],"functionName":{"name":"add","nativeSrc":"7356:3:28","nodeType":"YulIdentifier","src":"7356:3:28"},"nativeSrc":"7356:16:28","nodeType":"YulFunctionCall","src":"7356:16:28"},"variableNames":[{"name":"end","nativeSrc":"7349:3:28","nodeType":"YulIdentifier","src":"7349:3:28"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"7091:287:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"7204:3:28","nodeType":"YulTypedName","src":"7204:3:28","type":""},{"name":"value0","nativeSrc":"7209:6:28","nodeType":"YulTypedName","src":"7209:6:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"7220:3:28","nodeType":"YulTypedName","src":"7220:3:28","type":""}],"src":"7091:287:28"},{"body":{"nativeSrc":"7557:179:28","nodeType":"YulBlock","src":"7557:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7574:9:28","nodeType":"YulIdentifier","src":"7574:9:28"},{"kind":"number","nativeSrc":"7585:2:28","nodeType":"YulLiteral","src":"7585:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7567:6:28","nodeType":"YulIdentifier","src":"7567:6:28"},"nativeSrc":"7567:21:28","nodeType":"YulFunctionCall","src":"7567:21:28"},"nativeSrc":"7567:21:28","nodeType":"YulExpressionStatement","src":"7567:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7608:9:28","nodeType":"YulIdentifier","src":"7608:9:28"},{"kind":"number","nativeSrc":"7619:2:28","nodeType":"YulLiteral","src":"7619:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7604:3:28","nodeType":"YulIdentifier","src":"7604:3:28"},"nativeSrc":"7604:18:28","nodeType":"YulFunctionCall","src":"7604:18:28"},{"kind":"number","nativeSrc":"7624:2:28","nodeType":"YulLiteral","src":"7624:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"7597:6:28","nodeType":"YulIdentifier","src":"7597:6:28"},"nativeSrc":"7597:30:28","nodeType":"YulFunctionCall","src":"7597:30:28"},"nativeSrc":"7597:30:28","nodeType":"YulExpressionStatement","src":"7597:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7647:9:28","nodeType":"YulIdentifier","src":"7647:9:28"},{"kind":"number","nativeSrc":"7658:2:28","nodeType":"YulLiteral","src":"7658:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7643:3:28","nodeType":"YulIdentifier","src":"7643:3:28"},"nativeSrc":"7643:18:28","nodeType":"YulFunctionCall","src":"7643:18:28"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"7663:31:28","nodeType":"YulLiteral","src":"7663:31:28","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"7636:6:28","nodeType":"YulIdentifier","src":"7636:6:28"},"nativeSrc":"7636:59:28","nodeType":"YulFunctionCall","src":"7636:59:28"},"nativeSrc":"7636:59:28","nodeType":"YulExpressionStatement","src":"7636:59:28"},{"nativeSrc":"7704:26:28","nodeType":"YulAssignment","src":"7704:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"7716:9:28","nodeType":"YulIdentifier","src":"7716:9:28"},{"kind":"number","nativeSrc":"7727:2:28","nodeType":"YulLiteral","src":"7727:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7712:3:28","nodeType":"YulIdentifier","src":"7712:3:28"},"nativeSrc":"7712:18:28","nodeType":"YulFunctionCall","src":"7712:18:28"},"variableNames":[{"name":"tail","nativeSrc":"7704:4:28","nodeType":"YulIdentifier","src":"7704:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7383:353:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7534:9:28","nodeType":"YulTypedName","src":"7534:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7548:4:28","nodeType":"YulTypedName","src":"7548:4:28","type":""}],"src":"7383:353:28"},{"body":{"nativeSrc":"7862:275:28","nodeType":"YulBlock","src":"7862:275:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7879:9:28","nodeType":"YulIdentifier","src":"7879:9:28"},{"kind":"number","nativeSrc":"7890:2:28","nodeType":"YulLiteral","src":"7890:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7872:6:28","nodeType":"YulIdentifier","src":"7872:6:28"},"nativeSrc":"7872:21:28","nodeType":"YulFunctionCall","src":"7872:21:28"},"nativeSrc":"7872:21:28","nodeType":"YulExpressionStatement","src":"7872:21:28"},{"nativeSrc":"7902:27:28","nodeType":"YulVariableDeclaration","src":"7902:27:28","value":{"arguments":[{"name":"value0","nativeSrc":"7922:6:28","nodeType":"YulIdentifier","src":"7922:6:28"}],"functionName":{"name":"mload","nativeSrc":"7916:5:28","nodeType":"YulIdentifier","src":"7916:5:28"},"nativeSrc":"7916:13:28","nodeType":"YulFunctionCall","src":"7916:13:28"},"variables":[{"name":"length","nativeSrc":"7906:6:28","nodeType":"YulTypedName","src":"7906:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7949:9:28","nodeType":"YulIdentifier","src":"7949:9:28"},{"kind":"number","nativeSrc":"7960:2:28","nodeType":"YulLiteral","src":"7960:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7945:3:28","nodeType":"YulIdentifier","src":"7945:3:28"},"nativeSrc":"7945:18:28","nodeType":"YulFunctionCall","src":"7945:18:28"},{"name":"length","nativeSrc":"7965:6:28","nodeType":"YulIdentifier","src":"7965:6:28"}],"functionName":{"name":"mstore","nativeSrc":"7938:6:28","nodeType":"YulIdentifier","src":"7938:6:28"},"nativeSrc":"7938:34:28","nodeType":"YulFunctionCall","src":"7938:34:28"},"nativeSrc":"7938:34:28","nodeType":"YulExpressionStatement","src":"7938:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"8020:6:28","nodeType":"YulIdentifier","src":"8020:6:28"},{"kind":"number","nativeSrc":"8028:2:28","nodeType":"YulLiteral","src":"8028:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8016:3:28","nodeType":"YulIdentifier","src":"8016:3:28"},"nativeSrc":"8016:15:28","nodeType":"YulFunctionCall","src":"8016:15:28"},{"arguments":[{"name":"headStart","nativeSrc":"8037:9:28","nodeType":"YulIdentifier","src":"8037:9:28"},{"kind":"number","nativeSrc":"8048:2:28","nodeType":"YulLiteral","src":"8048:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8033:3:28","nodeType":"YulIdentifier","src":"8033:3:28"},"nativeSrc":"8033:18:28","nodeType":"YulFunctionCall","src":"8033:18:28"},{"name":"length","nativeSrc":"8053:6:28","nodeType":"YulIdentifier","src":"8053:6:28"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"7981:34:28","nodeType":"YulIdentifier","src":"7981:34:28"},"nativeSrc":"7981:79:28","nodeType":"YulFunctionCall","src":"7981:79:28"},"nativeSrc":"7981:79:28","nodeType":"YulExpressionStatement","src":"7981:79:28"},{"nativeSrc":"8069:62:28","nodeType":"YulAssignment","src":"8069:62:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8085:9:28","nodeType":"YulIdentifier","src":"8085:9:28"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"8104:6:28","nodeType":"YulIdentifier","src":"8104:6:28"},{"kind":"number","nativeSrc":"8112:2:28","nodeType":"YulLiteral","src":"8112:2:28","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"8100:3:28","nodeType":"YulIdentifier","src":"8100:3:28"},"nativeSrc":"8100:15:28","nodeType":"YulFunctionCall","src":"8100:15:28"},{"arguments":[{"kind":"number","nativeSrc":"8121:2:28","nodeType":"YulLiteral","src":"8121:2:28","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"8117:3:28","nodeType":"YulIdentifier","src":"8117:3:28"},"nativeSrc":"8117:7:28","nodeType":"YulFunctionCall","src":"8117:7:28"}],"functionName":{"name":"and","nativeSrc":"8096:3:28","nodeType":"YulIdentifier","src":"8096:3:28"},"nativeSrc":"8096:29:28","nodeType":"YulFunctionCall","src":"8096:29:28"}],"functionName":{"name":"add","nativeSrc":"8081:3:28","nodeType":"YulIdentifier","src":"8081:3:28"},"nativeSrc":"8081:45:28","nodeType":"YulFunctionCall","src":"8081:45:28"},{"kind":"number","nativeSrc":"8128:2:28","nodeType":"YulLiteral","src":"8128:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8077:3:28","nodeType":"YulIdentifier","src":"8077:3:28"},"nativeSrc":"8077:54:28","nodeType":"YulFunctionCall","src":"8077:54:28"},"variableNames":[{"name":"tail","nativeSrc":"8069:4:28","nodeType":"YulIdentifier","src":"8069:4:28"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7741:396:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7831:9:28","nodeType":"YulTypedName","src":"7831:9:28","type":""},{"name":"value0","nativeSrc":"7842:6:28","nodeType":"YulTypedName","src":"7842:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7853:4:28","nodeType":"YulTypedName","src":"7853:4:28","type":""}],"src":"7741:396:28"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function validator_revert_address_payable(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address_payable(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"PaymentSplitter: account has no \")\n        mstore(add(headStart, 96), \"shares\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"PaymentSplitter: account is not \")\n        mstore(add(headStart, 96), \"due payment\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100c05760003560e01c80639852595c11610074578063ce7c2ac21161004e578063ce7c2ac214610242578063d79779b214610278578063e33b7de3146102ae57600080fd5b80639852595c146101cc578063a3f8eace14610202578063c45ac0501461022257600080fd5b8063406072a9116100a5578063406072a91461015457806348b75044146101745780638b83209b1461019457600080fd5b8063191655871461010e5780633a98ef391461013057600080fd5b36610109577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561011a57600080fd5b5061012e610129366004610b29565b6102c3565b005b34801561013c57600080fd5b506033545b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061014161016f366004610b46565b610432565b34801561018057600080fd5b5061012e61018f366004610b46565b61045f565b3480156101a057600080fd5b506101b46101af366004610b7f565b6105f3565b6040516001600160a01b03909116815260200161014b565b3480156101d857600080fd5b506101416101e7366004610b29565b6001600160a01b031660009081526036602052604090205490565b34801561020e57600080fd5b5061014161021d366004610b29565b610623565b34801561022e57600080fd5b5061014161023d366004610b46565b61066b565b34801561024e57600080fd5b5061014161025d366004610b29565b6001600160a01b031660009081526035602052604090205490565b34801561028457600080fd5b50610141610293366004610b29565b6001600160a01b031660009081526038602052604090205490565b3480156102ba57600080fd5b50603454610141565b6001600160a01b03811660009081526035602052604090205461033c5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084015b60405180910390fd5b600061034782610623565b9050806000036103ad5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610333565b80603460008282546103bf9190610bae565b90915550506001600160a01b03821660009081526036602052604090208054820190556103ec828261072a565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b0381166000908152603560205260409020546104d35760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610333565b60006104df838361066b565b9050806000036105455760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610333565b6001600160a01b0383166000908152603860205260408120805483929061056d908490610bae565b90915550506001600160a01b0380841660009081526039602090815260408083209386168352929052208054820190556105a8838383610848565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b60006037828154811061060857610608610bc1565b6000918252602090912001546001600160a01b031692915050565b60008061062f60345490565b6106399047610bae565b9050610664838261065f866001600160a01b031660009081526036602052604090205490565b6108c8565b9392505050565b6001600160a01b03821660009081526038602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190610bd7565b6107119190610bae565b9050610722838261065f8787610432565b949350505050565b8047101561077a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610333565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107c7576040519150601f19603f3d011682016040523d82523d6000602084013e6107cc565b606091505b50509050806108435760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610333565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610843908490610906565b6033546001600160a01b038416600090815260356020526040812054909183916108f29086610bf0565b6108fc9190610c07565b6107229190610c29565b600061095b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109ee9092919063ffffffff16565b905080516000148061097c57508080602001905181019061097c9190610c3c565b6108435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610333565b6060610722848460008585600080866001600160a01b03168587604051610a159190610c82565b60006040518083038185875af1925050503d8060008114610a52576040519150601f19603f3d011682016040523d82523d6000602084013e610a57565b606091505b5091509150610a6887838387610a73565b979650505050505050565b60608315610ae2578251600003610adb576001600160a01b0385163b610adb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610333565b5081610722565b6107228383815115610af75781518083602001fd5b8060405162461bcd60e51b81526004016103339190610c9e565b6001600160a01b0381168114610b2657600080fd5b50565b600060208284031215610b3b57600080fd5b813561066481610b11565b60008060408385031215610b5957600080fd5b8235610b6481610b11565b91506020830135610b7481610b11565b809150509250929050565b600060208284031215610b9157600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561045957610459610b98565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610be957600080fd5b5051919050565b808202811582820484141761045957610459610b98565b600082610c2457634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561045957610459610b98565b600060208284031215610c4e57600080fd5b8151801515811461066457600080fd5b60005b83811015610c79578181015183820152602001610c61565b50506000910152565b60008251610c94818460208701610c5e565b9190910192915050565b6020815260008251806020840152610cbd816040850160208701610c5e565b601f01601f1916919091016040019291505056fea2646970667358221220118c623493a984e82761cb470b0dde47ad247a66396328311cbb787f552210a564736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9852595C GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xCE7C2AC2 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xCE7C2AC2 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xD79779B2 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xE33B7DE3 EQ PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9852595C EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0xA3F8EACE EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xC45AC050 EQ PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x406072A9 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x406072A9 EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0x48B75044 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x8B83209B EQ PUSH2 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x19165587 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x3A98EF39 EQ PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x109 JUMPI PUSH32 0x6EF95F06320E7A25A04A175CA677B7052BDD97131872C2192525A629F51BE770 CALLER PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLVALUE PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12E PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH2 0x2C3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x432 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12E PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x45F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0xB7F JUMP JUMPDEST PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x36 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x66B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x141 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x38 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x34 SLOAD PUSH2 0x141 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x33C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E7420686173206E6F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x736861726573 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x347 DUP3 PUSH2 0x623 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x3AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E74206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x191D59481C185E5B595B9D PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0xBAE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x36 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x3EC DUP3 DUP3 PUSH2 0x72A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xDF20FD1E76BC69D672E4814FAFB2C449BBA3A5369D8359ADF9E05E6FDE87B056 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E7420686173206E6F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x736861726573 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DF DUP4 DUP4 PUSH2 0x66B JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E74206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x191D59481C185E5B595B9D PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x38 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x56D SWAP1 DUP5 SWAP1 PUSH2 0xBAE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x5A8 DUP4 DUP4 DUP4 PUSH2 0x848 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE DUP6 AND SWAP2 PUSH32 0x3BE5B7A71E84ED12875D241991C70855AC5817D847039E17A9D895C1CEB0F18A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x37 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x608 JUMPI PUSH2 0x608 PUSH2 0xBC1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x62F PUSH1 0x34 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x639 SWAP1 SELFBALANCE PUSH2 0xBAE JUMP JUMPDEST SWAP1 POP PUSH2 0x664 DUP4 DUP3 PUSH2 0x65F DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x36 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x38 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x707 SWAP2 SWAP1 PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0x711 SWAP2 SWAP1 PUSH2 0xBAE JUMP JUMPDEST SWAP1 POP PUSH2 0x722 DUP4 DUP3 PUSH2 0x65F DUP8 DUP8 PUSH2 0x432 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x77A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x333 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7C7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7CC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x843 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x843 SWAP1 DUP5 SWAP1 PUSH2 0x906 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH2 0x8F2 SWAP1 DUP7 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0x8FC SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0x722 SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x95B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9EE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x97C JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x97C SWAP2 SWAP1 PUSH2 0xC3C JUMP JUMPDEST PUSH2 0x843 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x333 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x722 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xA15 SWAP2 SWAP1 PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA52 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xA68 DUP8 DUP4 DUP4 DUP8 PUSH2 0xA73 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xAE2 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0xADB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xADB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x333 JUMP JUMPDEST POP DUP2 PUSH2 0x722 JUMP JUMPDEST PUSH2 0x722 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xAF7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0xC9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x664 DUP2 PUSH2 0xB11 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xB64 DUP2 PUSH2 0xB11 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xB74 DUP2 PUSH2 0xB11 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x459 JUMPI PUSH2 0x459 PUSH2 0xB98 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x459 JUMPI PUSH2 0x459 PUSH2 0xB98 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC24 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x459 JUMPI PUSH2 0x459 PUSH2 0xB98 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC79 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC61 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xC94 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC5E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xCBD DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC5E JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT DUP13 PUSH3 0x3493A9 DUP5 0xE8 0x27 PUSH2 0xCB47 SIGNEXTEND 0xD 0xDE SELFBALANCE 0xAD 0x24 PUSH27 0x66396328311CBB787F552210A564736F6C63430008180033000000 ","sourceMap":"1568:7756:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3765:40;965:10:18;3765:40:1;;;-1:-1:-1;;;;;206:55:28;;;188:74;;3795:9:1;293:2:28;278:18;;271:34;161:18;3765:40:1;;;;;;;1568:7756;;;;;6244:666;;;;;;;;;;-1:-1:-1;6244:666:1;;;;;:::i;:::-;;:::i;:::-;;3890:89;;;;;;;;;;-1:-1:-1;3960:12:1;;3890:89;;;897:25:28;;;885:2;870:18;3890:89:1;;;;;;;;4993:144;;;;;;;;;;-1:-1:-1;4993:144:1;;;;;:::i;:::-;;:::i;7171:797::-;;;;;;;;;;-1:-1:-1;7171:797:1;;;;;:::i;:::-;;:::i;5223:98::-;;;;;;;;;;-1:-1:-1;5223:98:1;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1717:55:28;;;1699:74;;1687:2;1672:18;5223:98:1;1553:226:28;4723:107:1;;;;;;;;;;-1:-1:-1;4723:107:1;;;;;:::i;:::-;-1:-1:-1;;;;;4805:18:1;4779:7;4805:18;;;:9;:18;;;;;;;4723:107;5406:222;;;;;;;;;;-1:-1:-1;5406:222:1;;;;;:::i;:::-;;:::i;5782:268::-;;;;;;;;;;-1:-1:-1;5782:268:1;;;;;:::i;:::-;;:::i;4526:103::-;;;;;;;;;;-1:-1:-1;4526:103:1;;;;;:::i;:::-;-1:-1:-1;;;;;4606:16:1;4580:7;4606:16;;;:7;:16;;;;;;;4526:103;4312:128;;;;;;;;;;-1:-1:-1;4312:128:1;;;;;:::i;:::-;-1:-1:-1;;;;;4407:26:1;4381:7;4407:26;;;:19;:26;;;;;;;4312:128;4068:93;;;;;;;;;;-1:-1:-1;4140:14:1;;4068:93;;6244:666;-1:-1:-1;;;;;6319:16:1;;6338:1;6319:16;;;:7;:16;;;;;;6311:71;;;;-1:-1:-1;;;6311:71:1;;2532:2:28;6311:71:1;;;2514:21:28;2571:2;2551:18;;;2544:30;2610:34;2590:18;;;2583:62;-1:-1:-1;;;2661:18:28;;;2654:36;2707:19;;6311:71:1;;;;;;;;;6393:15;6411:19;6422:7;6411:10;:19::i;:::-;6393:37;;6449:7;6460:1;6449:12;6441:68;;;;-1:-1:-1;;;6441:68:1;;2939:2:28;6441:68:1;;;2921:21:28;2978:2;2958:18;;;2951:30;3017:34;2997:18;;;2990:62;-1:-1:-1;;;3068:18:28;;;3061:41;3119:19;;6441:68:1;2737:407:28;6441:68:1;6718:7;6700:14;;:25;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;6759:18:1;;;;;;:9;:18;;;;;:29;;;;;;6809:46;6769:7;6781;6809:28;:46::i;:::-;6870:33;;;-1:-1:-1;;;;;206:55:28;;188:74;;293:2;278:18;;271:34;;;6870:33:1;;161:18:28;6870:33:1;;;;;;;6301:609;6244:666;:::o;4993:144::-;-1:-1:-1;;;;;5100:21:1;;;5074:7;5100:21;;;:14;:21;;;;;;;;:30;;;;;;;;;;4993:144;;;;;:::o;7171:797::-;-1:-1:-1;;;;;7263:16:1;;7282:1;7263:16;;;:7;:16;;;;;;7255:71;;;;-1:-1:-1;;;7255:71:1;;2532:2:28;7255:71:1;;;2514:21:28;2571:2;2551:18;;;2544:30;2610:34;2590:18;;;2583:62;-1:-1:-1;;;2661:18:28;;;2654:36;2707:19;;7255:71:1;2330:402:28;7255:71:1;7337:15;7355:26;7366:5;7373:7;7355:10;:26::i;:::-;7337:44;;7400:7;7411:1;7400:12;7392:68;;;;-1:-1:-1;;;7392:68:1;;2939:2:28;7392:68:1;;;2921:21:28;2978:2;2958:18;;;2951:30;3017:34;2997:18;;;2990:62;-1:-1:-1;;;3068:18:28;;;3061:41;3119:19;;7392:68:1;2737:407:28;7392:68:1;-1:-1:-1;;;;;7710:26:1;;;;;;:19;:26;;;;;:37;;7740:7;;7710:26;:37;;7740:7;;7710:37;:::i;:::-;;;;-1:-1:-1;;;;;;;7781:21:1;;;;;;;:14;:21;;;;;;;;:30;;;;;;;;;:41;;;;;;7843:58;7796:5;7803:7;7815;7843:33;:58::i;:::-;7916:45;;;-1:-1:-1;;;;;206:55:28;;;188:74;;293:2;278:18;;271:34;;;7916:45:1;;;;;161:18:28;7916:45:1;;;;;;;7245:723;7171:797;;:::o;5223:98::-;5274:7;5300;5308:5;5300:14;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;5300:14:1;;5223:98;-1:-1:-1;;5223:98:1:o;5406:222::-;5464:7;5483:21;5531:15;4140:14;;;4068:93;5531:15;5507:39;;:21;:39;:::i;:::-;5483:63;;5563:58;5579:7;5588:13;5603:17;5612:7;-1:-1:-1;;;;;4805:18:1;4779:7;4805:18;;;:9;:18;;;;;;;4723:107;5603:17;5563:15;:58::i;:::-;5556:65;5406:222;-1:-1:-1;;;5406:222:1:o;5782:268::-;-1:-1:-1;;;;;4407:26:1;;5865:7;4407:26;;;:19;:26;;;;;;5865:7;;5908:30;;;;;5932:4;5908:30;;;1699:74:28;-1:-1:-1;;;;;5908:15:1;;;;;1672:18:28;;5908:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;;;:::i;:::-;5884:77;;5978:65;5994:7;6003:13;6018:24;6027:5;6034:7;6018:8;:24::i;5978:65::-;5971:72;5782:268;-1:-1:-1;;;;5782:268:1:o;2658:312:17:-;2772:6;2747:21;:31;;2739:73;;;;-1:-1:-1;;;2739:73:17;;4358:2:28;2739:73:17;;;4340:21:28;4397:2;4377:18;;;4370:30;4436:31;4416:18;;;4409:59;4485:18;;2739:73:17;4156:353:28;2739:73:17;2824:12;2842:9;-1:-1:-1;;;;;2842:14:17;2864:6;2842:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2823:52;;;2893:7;2885:78;;;;-1:-1:-1;;;2885:78:17;;4926:2:28;2885:78:17;;;4908:21:28;4965:2;4945:18;;;4938:30;5004:34;4984:18;;;4977:62;5075:28;5055:18;;;5048:56;5121:19;;2885:78:17;4724:422:28;2885:78:17;2729:241;2658:312;;:::o;996:186:15:-;1116:58;;;-1:-1:-1;;;;;206:55:28;;1116:58:15;;;188:74:28;278:18;;;;271:34;;;1116:58:15;;;;;;;;;;161:18:28;;;;1116:58:15;;;;;;;;;;1139:23;1116:58;;;1089:86;;1109:5;;1089:19;:86::i;8140:242:1:-;8345:12;;-1:-1:-1;;;;;8325:16:1;;8282:7;8325:16;;;:7;:16;;;;;;8282:7;;8360:15;;8309:32;;:13;:32;:::i;:::-;8308:49;;;;:::i;:::-;:67;;;;:::i;5328:653:15:-;5758:23;5784:69;5812:4;5784:69;;;;;;;;;;;;;;;;;5792:5;-1:-1:-1;;;;;5784:27:15;;;:69;;;;;:::i;:::-;5758:95;;5871:10;:17;5892:1;5871:22;:56;;;;5908:10;5897:30;;;;;;;;;;;;:::i;:::-;5863:111;;;;-1:-1:-1;;;5863:111:15;;6220:2:28;5863:111:15;;;6202:21:28;6259:2;6239:18;;;6232:30;6298:34;6278:18;;;6271:62;6369:12;6349:18;;;6342:40;6399:19;;5863:111:15;6018:406:28;4119:223:17;4252:12;4283:52;4305:6;4313:4;4319:1;4322:12;4252;5457;5471:23;5498:6;-1:-1:-1;;;;;5498:11:17;5517:5;5524:4;5498:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5456:73;;;;5546:69;5573:6;5581:7;5590:10;5602:12;5546:26;:69::i;:::-;5539:76;5176:446;-1:-1:-1;;;;;;;5176:446:17:o;7682:628::-;7862:12;7890:7;7886:418;;;7917:10;:17;7938:1;7917:22;7913:286;;-1:-1:-1;;;;;1713:19:17;;;8124:60;;;;-1:-1:-1;;;8124:60:17;;7585:2:28;8124:60:17;;;7567:21:28;7624:2;7604:18;;;7597:30;7663:31;7643:18;;;7636:59;7712:18;;8124:60:17;7383:353:28;8124:60:17;-1:-1:-1;8219:10:17;8212:17;;7886:418;8260:33;8268:10;8280:12;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;-1:-1:-1;;;9335:20:17;;;;;;;;:::i;316:162:28:-;-1:-1:-1;;;;;403:5:28;399:54;392:5;389:65;379:93;;468:1;465;458:12;379:93;316:162;:::o;483:263::-;550:6;603:2;591:9;582:7;578:23;574:32;571:52;;;619:1;616;609:12;571:52;658:9;645:23;677:39;710:5;677:39;:::i;933:430::-;1027:6;1035;1088:2;1076:9;1067:7;1063:23;1059:32;1056:52;;;1104:1;1101;1094:12;1056:52;1143:9;1130:23;1162:39;1195:5;1162:39;:::i;:::-;1220:5;-1:-1:-1;1277:2:28;1262:18;;1249:32;1290:41;1249:32;1290:41;:::i;:::-;1350:7;1340:17;;;933:430;;;;;:::o;1368:180::-;1427:6;1480:2;1468:9;1459:7;1455:23;1451:32;1448:52;;;1496:1;1493;1486:12;1448:52;-1:-1:-1;1519:23:28;;1368:180;-1:-1:-1;1368:180:28:o;3149:184::-;-1:-1:-1;;;3198:1:28;3191:88;3298:4;3295:1;3288:15;3322:4;3319:1;3312:15;3338:125;3403:9;;;3424:10;;;3421:36;;;3437:18;;:::i;3778:184::-;-1:-1:-1;;;3827:1:28;3820:88;3927:4;3924:1;3917:15;3951:4;3948:1;3941:15;3967:184;4037:6;4090:2;4078:9;4069:7;4065:23;4061:32;4058:52;;;4106:1;4103;4096:12;4058:52;-1:-1:-1;4129:16:28;;3967:184;-1:-1:-1;3967:184:28:o;5151:168::-;5224:9;;;5255;;5272:15;;;5266:22;;5252:37;5242:71;;5293:18;;:::i;5324:274::-;5364:1;5390;5380:189;;-1:-1:-1;;;5422:1:28;5415:88;5526:4;5523:1;5516:15;5554:4;5551:1;5544:15;5380:189;-1:-1:-1;5583:9:28;;5324:274::o;5603:128::-;5670:9;;;5691:11;;;5688:37;;;5705:18;;:::i;5736:277::-;5803:6;5856:2;5844:9;5835:7;5831:23;5827:32;5824:52;;;5872:1;5869;5862:12;5824:52;5904:9;5898:16;5957:5;5950:13;5943:21;5936:5;5933:32;5923:60;;5979:1;5976;5969:12;6836:250;6921:1;6931:113;6945:6;6942:1;6939:13;6931:113;;;7021:11;;;7015:18;7002:11;;;6995:39;6967:2;6960:10;6931:113;;;-1:-1:-1;;7078:1:28;7060:16;;7053:27;6836:250::o;7091:287::-;7220:3;7258:6;7252:13;7274:66;7333:6;7328:3;7321:4;7313:6;7309:17;7274:66;:::i;:::-;7356:16;;;;;7091:287;-1:-1:-1;;7091:287:28:o;7741:396::-;7890:2;7879:9;7872:21;7853:4;7922:6;7916:13;7965:6;7960:2;7949:9;7945:18;7938:34;7981:79;8053:6;8048:2;8037:9;8033:18;8028:2;8020:6;8016:15;7981:79;:::i;:::-;8121:2;8100:15;-1:-1:-1;;8096:29:28;8081:45;;;;8128:2;8077:54;;7741:396;-1:-1:-1;;7741:396:28:o"},"gasEstimates":{"creation":{"codeDepositCost":"667000","executionCost":"702","totalCost":"667702"},"external":{"payee(uint256)":"4686","releasable(address)":"infinite","releasable(address,address)":"infinite","release(address)":"infinite","release(address,address)":"infinite","released(address)":"2543","released(address,address)":"infinite","shares(address)":"2542","totalReleased()":"2347","totalReleased(address)":"2564","totalShares()":"2316"},"internal":{"__PaymentSplitter_init(address[] memory,uint256[] memory)":"infinite","__PaymentSplitter_init_unchained(address[] memory,uint256[] memory)":"infinite","_addPayee(address,uint256)":"infinite","_pendingPayment(address,uint256,uint256)":"infinite"}},"methodIdentifiers":{"payee(uint256)":"8b83209b","releasable(address)":"a3f8eace","releasable(address,address)":"c45ac050","release(address)":"19165587","release(address,address)":"48b75044","released(address)":"9852595c","released(address,address)":"406072a9","shares(address)":"ce7c2ac2","totalReleased()":"e33b7de3","totalReleased(address)":"d79779b2","totalShares()":"3a98ef39"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware that the Ether will be split in this way, since it is handled transparently by the contract. The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the time of contract deployment and can't be updated thereafter. `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} function. NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you to run tests before sending real value to this contract.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"releasable(address)\":{\"details\":\"Getter for the amount of payee's releasable Ether.\"},\"releasable(address,address)\":{\"details\":\"Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"title\":\"PaymentSplitter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":\"PaymentSplitterUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x8a94877af58e9104fae9e11e13622976a879711072a121683af67b7b691e1437\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3176,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":173,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_totalShares","offset":0,"slot":"51","type":"t_uint256"},{"astId":175,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_totalReleased","offset":0,"slot":"52","type":"t_uint256"},{"astId":179,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_shares","offset":0,"slot":"53","type":"t_mapping(t_address,t_uint256)"},{"astId":183,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_released","offset":0,"slot":"54","type":"t_mapping(t_address,t_uint256)"},{"astId":186,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_payees","offset":0,"slot":"55","type":"t_array(t_address)dyn_storage"},{"astId":191,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_erc20TotalReleased","offset":0,"slot":"56","type":"t_mapping(t_contract(IERC20Upgradeable)2149,t_uint256)"},{"astId":198,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"_erc20Released","offset":0,"slot":"57","type":"t_mapping(t_contract(IERC20Upgradeable)2149,t_mapping(t_address,t_uint256))"},{"astId":632,"contract":"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol:PaymentSplitterUpgradeable","label":"__gap","offset":0,"slot":"58","type":"t_array(t_uint256)43_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_uint256)43_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[43]","numberOfBytes":"1376"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20Upgradeable)2149":{"encoding":"inplace","label":"contract IERC20Upgradeable","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_contract(IERC20Upgradeable)2149,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_contract(IERC20Upgradeable)2149","label":"mapping(contract IERC20Upgradeable => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_contract(IERC20Upgradeable)2149,t_uint256)":{"encoding":"mapping","key":"t_contract(IERC20Upgradeable)2149","label":"mapping(contract IERC20Upgradeable => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"IERC5267Upgradeable":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."}},"kind":"dev","methods":{"eip712Domain()":{"details":"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":\"IERC5267Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1013,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1013,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1329,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3176,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1352,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":1457,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610956806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461017f57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e6565b6040516100e3919061079f565b60405180910390f35b6100ff6100fa36600461080a565b610278565b60405190151581526020016100e3565b6035545b6040519081526020016100e3565b6100ff61012f366004610834565b610292565b604051601281526020016100e3565b6100ff61015136600461080a565b6102b6565b610113610164366004610870565b6001600160a01b031660009081526033602052604090205490565b6100d66102f5565b6100ff61019536600461080a565b610304565b6100ff6101a836600461080a565b6103b3565b6101136101bb366004610892565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6060603680546101f5906108c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610221906108c5565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b6000336102868185856103c1565b60019150505b92915050565b6000336102a0858285610519565b6102ab8585856105ab565b506001949350505050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061028690829086906102f09087906108ff565b6103c1565b6060603780546101f5906108c5565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156103a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ab82868684036103c1565b6000336102868185856105ab565b6001600160a01b03831661043c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166104b85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526034602090815260408083209386168352929052205460001981146105a557818110156105985760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161039d565b6105a584848484036103c1565b50505050565b6001600160a01b0383166106275760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166106a35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b038316600090815260336020526040902054818110156107325760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107929086815260200190565b60405180910390a36105a5565b60006020808352835180602085015260005b818110156107cd578581018301518582016040015282016107b1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461080557600080fd5b919050565b6000806040838503121561081d57600080fd5b610826836107ee565b946020939093013593505050565b60008060006060848603121561084957600080fd5b610852846107ee565b9250610860602085016107ee565b9150604084013590509250925092565b60006020828403121561088257600080fd5b61088b826107ee565b9392505050565b600080604083850312156108a557600080fd5b6108ae836107ee565b91506108bc602084016107ee565b90509250929050565b600181811c908216806108d957607f821691505b6020821081036108f957634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028c57634e487b7160e01b600052601160045260246000fdfea264697066735822122085eecaf032a6185e4b812d3addc9a996b6f58dfbd9f628c4965235375872fe3a64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x956 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x278 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x834 JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x870 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x304 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x892 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x8C5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x221 SWAP1 PUSH2 0x8C5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x26E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x243 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x26E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x251 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP6 DUP3 DUP6 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x2AB DUP6 DUP6 DUP6 PUSH2 0x5AB JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x286 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2F0 SWAP1 DUP8 SWAP1 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x8C5 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AB DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x5A5 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x598 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x39D JUMP JUMPDEST PUSH2 0x5A5 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x627 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x792 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x5A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7CD JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7B1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x805 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x81D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x826 DUP4 PUSH2 0x7EE JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x852 DUP5 PUSH2 0x7EE JUMP JUMPDEST SWAP3 POP PUSH2 0x860 PUSH1 0x20 DUP6 ADD PUSH2 0x7EE JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88B DUP3 PUSH2 0x7EE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8AE DUP4 PUSH2 0x7EE JUMP JUMPDEST SWAP2 POP PUSH2 0x8BC PUSH1 0x20 DUP5 ADD PUSH2 0x7EE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x8D9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8F9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x28C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xEE 0xCA CREATE ORIGIN 0xA6 XOR MCOPY 0x4B DUP2 0x2D GASPRICE 0xDD 0xC9 0xA9 SWAP7 0xB6 CREATE2 DUP14 0xFB 0xD9 0xF6 0x28 0xC4 SWAP7 MSTORE CALLDATALOAD CALLDATACOPY PC PUSH19 0xFE3A64736F6C63430008180033000000000000 ","sourceMap":"1632:11861:10:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2065":{"entryPoint":null,"id":2065,"parameterSlots":3,"returnSlots":0},"@_approve_2000":{"entryPoint":961,"id":2000,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_2054":{"entryPoint":null,"id":2054,"parameterSlots":3,"returnSlots":0},"@_msgSender_3154":{"entryPoint":null,"id":3154,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_2043":{"entryPoint":1305,"id":2043,"parameterSlots":3,"returnSlots":0},"@_transfer_1826":{"entryPoint":1451,"id":1826,"parameterSlots":3,"returnSlots":0},"@allowance_1621":{"entryPoint":null,"id":1621,"parameterSlots":2,"returnSlots":1},"@approve_1646":{"entryPoint":632,"id":1646,"parameterSlots":2,"returnSlots":1},"@balanceOf_1578":{"entryPoint":null,"id":1578,"parameterSlots":1,"returnSlots":1},"@decimals_1554":{"entryPoint":null,"id":1554,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1749":{"entryPoint":772,"id":1749,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1708":{"entryPoint":694,"id":1708,"parameterSlots":2,"returnSlots":1},"@name_1534":{"entryPoint":486,"id":1534,"parameterSlots":0,"returnSlots":1},"@symbol_1544":{"entryPoint":757,"id":1544,"parameterSlots":0,"returnSlots":1},"@totalSupply_1564":{"entryPoint":null,"id":1564,"parameterSlots":0,"returnSlots":1},"@transferFrom_1679":{"entryPoint":658,"id":1679,"parameterSlots":3,"returnSlots":1},"@transfer_1603":{"entryPoint":947,"id":1603,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":2030,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2160,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2194,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2100,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2058,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1951,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2303,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":2245,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:5891:28","nodeType":"YulBlock","src":"0:5891:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"135:427:28","nodeType":"YulBlock","src":"135:427:28","statements":[{"nativeSrc":"145:12:28","nodeType":"YulVariableDeclaration","src":"145:12:28","value":{"kind":"number","nativeSrc":"155:2:28","nodeType":"YulLiteral","src":"155:2:28","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"149:2:28","nodeType":"YulTypedName","src":"149:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"173:9:28","nodeType":"YulIdentifier","src":"173:9:28"},{"kind":"number","nativeSrc":"184:2:28","nodeType":"YulLiteral","src":"184:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"166:6:28","nodeType":"YulIdentifier","src":"166:6:28"},"nativeSrc":"166:21:28","nodeType":"YulFunctionCall","src":"166:21:28"},"nativeSrc":"166:21:28","nodeType":"YulExpressionStatement","src":"166:21:28"},{"nativeSrc":"196:27:28","nodeType":"YulVariableDeclaration","src":"196:27:28","value":{"arguments":[{"name":"value0","nativeSrc":"216:6:28","nodeType":"YulIdentifier","src":"216:6:28"}],"functionName":{"name":"mload","nativeSrc":"210:5:28","nodeType":"YulIdentifier","src":"210:5:28"},"nativeSrc":"210:13:28","nodeType":"YulFunctionCall","src":"210:13:28"},"variables":[{"name":"length","nativeSrc":"200:6:28","nodeType":"YulTypedName","src":"200:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"243:9:28","nodeType":"YulIdentifier","src":"243:9:28"},{"kind":"number","nativeSrc":"254:2:28","nodeType":"YulLiteral","src":"254:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"239:3:28","nodeType":"YulIdentifier","src":"239:3:28"},"nativeSrc":"239:18:28","nodeType":"YulFunctionCall","src":"239:18:28"},{"name":"length","nativeSrc":"259:6:28","nodeType":"YulIdentifier","src":"259:6:28"}],"functionName":{"name":"mstore","nativeSrc":"232:6:28","nodeType":"YulIdentifier","src":"232:6:28"},"nativeSrc":"232:34:28","nodeType":"YulFunctionCall","src":"232:34:28"},"nativeSrc":"232:34:28","nodeType":"YulExpressionStatement","src":"232:34:28"},{"nativeSrc":"275:10:28","nodeType":"YulVariableDeclaration","src":"275:10:28","value":{"kind":"number","nativeSrc":"284:1:28","nodeType":"YulLiteral","src":"284:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"279:1:28","nodeType":"YulTypedName","src":"279:1:28","type":""}]},{"body":{"nativeSrc":"344:90:28","nodeType":"YulBlock","src":"344:90:28","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"373:9:28","nodeType":"YulIdentifier","src":"373:9:28"},{"name":"i","nativeSrc":"384:1:28","nodeType":"YulIdentifier","src":"384:1:28"}],"functionName":{"name":"add","nativeSrc":"369:3:28","nodeType":"YulIdentifier","src":"369:3:28"},"nativeSrc":"369:17:28","nodeType":"YulFunctionCall","src":"369:17:28"},{"kind":"number","nativeSrc":"388:2:28","nodeType":"YulLiteral","src":"388:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"365:3:28","nodeType":"YulIdentifier","src":"365:3:28"},"nativeSrc":"365:26:28","nodeType":"YulFunctionCall","src":"365:26:28"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"407:6:28","nodeType":"YulIdentifier","src":"407:6:28"},{"name":"i","nativeSrc":"415:1:28","nodeType":"YulIdentifier","src":"415:1:28"}],"functionName":{"name":"add","nativeSrc":"403:3:28","nodeType":"YulIdentifier","src":"403:3:28"},"nativeSrc":"403:14:28","nodeType":"YulFunctionCall","src":"403:14:28"},{"name":"_1","nativeSrc":"419:2:28","nodeType":"YulIdentifier","src":"419:2:28"}],"functionName":{"name":"add","nativeSrc":"399:3:28","nodeType":"YulIdentifier","src":"399:3:28"},"nativeSrc":"399:23:28","nodeType":"YulFunctionCall","src":"399:23:28"}],"functionName":{"name":"mload","nativeSrc":"393:5:28","nodeType":"YulIdentifier","src":"393:5:28"},"nativeSrc":"393:30:28","nodeType":"YulFunctionCall","src":"393:30:28"}],"functionName":{"name":"mstore","nativeSrc":"358:6:28","nodeType":"YulIdentifier","src":"358:6:28"},"nativeSrc":"358:66:28","nodeType":"YulFunctionCall","src":"358:66:28"},"nativeSrc":"358:66:28","nodeType":"YulExpressionStatement","src":"358:66:28"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"305:1:28","nodeType":"YulIdentifier","src":"305:1:28"},{"name":"length","nativeSrc":"308:6:28","nodeType":"YulIdentifier","src":"308:6:28"}],"functionName":{"name":"lt","nativeSrc":"302:2:28","nodeType":"YulIdentifier","src":"302:2:28"},"nativeSrc":"302:13:28","nodeType":"YulFunctionCall","src":"302:13:28"},"nativeSrc":"294:140:28","nodeType":"YulForLoop","post":{"nativeSrc":"316:19:28","nodeType":"YulBlock","src":"316:19:28","statements":[{"nativeSrc":"318:15:28","nodeType":"YulAssignment","src":"318:15:28","value":{"arguments":[{"name":"i","nativeSrc":"327:1:28","nodeType":"YulIdentifier","src":"327:1:28"},{"name":"_1","nativeSrc":"330:2:28","nodeType":"YulIdentifier","src":"330:2:28"}],"functionName":{"name":"add","nativeSrc":"323:3:28","nodeType":"YulIdentifier","src":"323:3:28"},"nativeSrc":"323:10:28","nodeType":"YulFunctionCall","src":"323:10:28"},"variableNames":[{"name":"i","nativeSrc":"318:1:28","nodeType":"YulIdentifier","src":"318:1:28"}]}]},"pre":{"nativeSrc":"298:3:28","nodeType":"YulBlock","src":"298:3:28","statements":[]},"src":"294:140:28"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"458:9:28","nodeType":"YulIdentifier","src":"458:9:28"},{"name":"length","nativeSrc":"469:6:28","nodeType":"YulIdentifier","src":"469:6:28"}],"functionName":{"name":"add","nativeSrc":"454:3:28","nodeType":"YulIdentifier","src":"454:3:28"},"nativeSrc":"454:22:28","nodeType":"YulFunctionCall","src":"454:22:28"},{"kind":"number","nativeSrc":"478:2:28","nodeType":"YulLiteral","src":"478:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"450:3:28","nodeType":"YulIdentifier","src":"450:3:28"},"nativeSrc":"450:31:28","nodeType":"YulFunctionCall","src":"450:31:28"},{"kind":"number","nativeSrc":"483:1:28","nodeType":"YulLiteral","src":"483:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"443:6:28","nodeType":"YulIdentifier","src":"443:6:28"},"nativeSrc":"443:42:28","nodeType":"YulFunctionCall","src":"443:42:28"},"nativeSrc":"443:42:28","nodeType":"YulExpressionStatement","src":"443:42:28"},{"nativeSrc":"494:62:28","nodeType":"YulAssignment","src":"494:62:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"510:9:28","nodeType":"YulIdentifier","src":"510:9:28"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"529:6:28","nodeType":"YulIdentifier","src":"529:6:28"},{"kind":"number","nativeSrc":"537:2:28","nodeType":"YulLiteral","src":"537:2:28","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"525:3:28","nodeType":"YulIdentifier","src":"525:3:28"},"nativeSrc":"525:15:28","nodeType":"YulFunctionCall","src":"525:15:28"},{"arguments":[{"kind":"number","nativeSrc":"546:2:28","nodeType":"YulLiteral","src":"546:2:28","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"542:3:28","nodeType":"YulIdentifier","src":"542:3:28"},"nativeSrc":"542:7:28","nodeType":"YulFunctionCall","src":"542:7:28"}],"functionName":{"name":"and","nativeSrc":"521:3:28","nodeType":"YulIdentifier","src":"521:3:28"},"nativeSrc":"521:29:28","nodeType":"YulFunctionCall","src":"521:29:28"}],"functionName":{"name":"add","nativeSrc":"506:3:28","nodeType":"YulIdentifier","src":"506:3:28"},"nativeSrc":"506:45:28","nodeType":"YulFunctionCall","src":"506:45:28"},{"kind":"number","nativeSrc":"553:2:28","nodeType":"YulLiteral","src":"553:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"502:3:28","nodeType":"YulIdentifier","src":"502:3:28"},"nativeSrc":"502:54:28","nodeType":"YulFunctionCall","src":"502:54:28"},"variableNames":[{"name":"tail","nativeSrc":"494:4:28","nodeType":"YulIdentifier","src":"494:4:28"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14:548:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"104:9:28","nodeType":"YulTypedName","src":"104:9:28","type":""},{"name":"value0","nativeSrc":"115:6:28","nodeType":"YulTypedName","src":"115:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"126:4:28","nodeType":"YulTypedName","src":"126:4:28","type":""}],"src":"14:548:28"},{"body":{"nativeSrc":"616:147:28","nodeType":"YulBlock","src":"616:147:28","statements":[{"nativeSrc":"626:29:28","nodeType":"YulAssignment","src":"626:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"648:6:28","nodeType":"YulIdentifier","src":"648:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"635:12:28","nodeType":"YulIdentifier","src":"635:12:28"},"nativeSrc":"635:20:28","nodeType":"YulFunctionCall","src":"635:20:28"},"variableNames":[{"name":"value","nativeSrc":"626:5:28","nodeType":"YulIdentifier","src":"626:5:28"}]},{"body":{"nativeSrc":"741:16:28","nodeType":"YulBlock","src":"741:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"750:1:28","nodeType":"YulLiteral","src":"750:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"753:1:28","nodeType":"YulLiteral","src":"753:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"743:6:28","nodeType":"YulIdentifier","src":"743:6:28"},"nativeSrc":"743:12:28","nodeType":"YulFunctionCall","src":"743:12:28"},"nativeSrc":"743:12:28","nodeType":"YulExpressionStatement","src":"743:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"677:5:28","nodeType":"YulIdentifier","src":"677:5:28"},{"arguments":[{"name":"value","nativeSrc":"688:5:28","nodeType":"YulIdentifier","src":"688:5:28"},{"kind":"number","nativeSrc":"695:42:28","nodeType":"YulLiteral","src":"695:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"684:3:28","nodeType":"YulIdentifier","src":"684:3:28"},"nativeSrc":"684:54:28","nodeType":"YulFunctionCall","src":"684:54:28"}],"functionName":{"name":"eq","nativeSrc":"674:2:28","nodeType":"YulIdentifier","src":"674:2:28"},"nativeSrc":"674:65:28","nodeType":"YulFunctionCall","src":"674:65:28"}],"functionName":{"name":"iszero","nativeSrc":"667:6:28","nodeType":"YulIdentifier","src":"667:6:28"},"nativeSrc":"667:73:28","nodeType":"YulFunctionCall","src":"667:73:28"},"nativeSrc":"664:93:28","nodeType":"YulIf","src":"664:93:28"}]},"name":"abi_decode_address","nativeSrc":"567:196:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"595:6:28","nodeType":"YulTypedName","src":"595:6:28","type":""}],"returnVariables":[{"name":"value","nativeSrc":"606:5:28","nodeType":"YulTypedName","src":"606:5:28","type":""}],"src":"567:196:28"},{"body":{"nativeSrc":"855:167:28","nodeType":"YulBlock","src":"855:167:28","statements":[{"body":{"nativeSrc":"901:16:28","nodeType":"YulBlock","src":"901:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"910:1:28","nodeType":"YulLiteral","src":"910:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"913:1:28","nodeType":"YulLiteral","src":"913:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"903:6:28","nodeType":"YulIdentifier","src":"903:6:28"},"nativeSrc":"903:12:28","nodeType":"YulFunctionCall","src":"903:12:28"},"nativeSrc":"903:12:28","nodeType":"YulExpressionStatement","src":"903:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"876:7:28","nodeType":"YulIdentifier","src":"876:7:28"},{"name":"headStart","nativeSrc":"885:9:28","nodeType":"YulIdentifier","src":"885:9:28"}],"functionName":{"name":"sub","nativeSrc":"872:3:28","nodeType":"YulIdentifier","src":"872:3:28"},"nativeSrc":"872:23:28","nodeType":"YulFunctionCall","src":"872:23:28"},{"kind":"number","nativeSrc":"897:2:28","nodeType":"YulLiteral","src":"897:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"868:3:28","nodeType":"YulIdentifier","src":"868:3:28"},"nativeSrc":"868:32:28","nodeType":"YulFunctionCall","src":"868:32:28"},"nativeSrc":"865:52:28","nodeType":"YulIf","src":"865:52:28"},{"nativeSrc":"926:39:28","nodeType":"YulAssignment","src":"926:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"955:9:28","nodeType":"YulIdentifier","src":"955:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"936:18:28","nodeType":"YulIdentifier","src":"936:18:28"},"nativeSrc":"936:29:28","nodeType":"YulFunctionCall","src":"936:29:28"},"variableNames":[{"name":"value0","nativeSrc":"926:6:28","nodeType":"YulIdentifier","src":"926:6:28"}]},{"nativeSrc":"974:42:28","nodeType":"YulAssignment","src":"974:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1001:9:28","nodeType":"YulIdentifier","src":"1001:9:28"},{"kind":"number","nativeSrc":"1012:2:28","nodeType":"YulLiteral","src":"1012:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"997:3:28","nodeType":"YulIdentifier","src":"997:3:28"},"nativeSrc":"997:18:28","nodeType":"YulFunctionCall","src":"997:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"984:12:28","nodeType":"YulIdentifier","src":"984:12:28"},"nativeSrc":"984:32:28","nodeType":"YulFunctionCall","src":"984:32:28"},"variableNames":[{"name":"value1","nativeSrc":"974:6:28","nodeType":"YulIdentifier","src":"974:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"768:254:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"813:9:28","nodeType":"YulTypedName","src":"813:9:28","type":""},{"name":"dataEnd","nativeSrc":"824:7:28","nodeType":"YulTypedName","src":"824:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"836:6:28","nodeType":"YulTypedName","src":"836:6:28","type":""},{"name":"value1","nativeSrc":"844:6:28","nodeType":"YulTypedName","src":"844:6:28","type":""}],"src":"768:254:28"},{"body":{"nativeSrc":"1122:92:28","nodeType":"YulBlock","src":"1122:92:28","statements":[{"nativeSrc":"1132:26:28","nodeType":"YulAssignment","src":"1132:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1144:9:28","nodeType":"YulIdentifier","src":"1144:9:28"},{"kind":"number","nativeSrc":"1155:2:28","nodeType":"YulLiteral","src":"1155:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1140:3:28","nodeType":"YulIdentifier","src":"1140:3:28"},"nativeSrc":"1140:18:28","nodeType":"YulFunctionCall","src":"1140:18:28"},"variableNames":[{"name":"tail","nativeSrc":"1132:4:28","nodeType":"YulIdentifier","src":"1132:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1174:9:28","nodeType":"YulIdentifier","src":"1174:9:28"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1199:6:28","nodeType":"YulIdentifier","src":"1199:6:28"}],"functionName":{"name":"iszero","nativeSrc":"1192:6:28","nodeType":"YulIdentifier","src":"1192:6:28"},"nativeSrc":"1192:14:28","nodeType":"YulFunctionCall","src":"1192:14:28"}],"functionName":{"name":"iszero","nativeSrc":"1185:6:28","nodeType":"YulIdentifier","src":"1185:6:28"},"nativeSrc":"1185:22:28","nodeType":"YulFunctionCall","src":"1185:22:28"}],"functionName":{"name":"mstore","nativeSrc":"1167:6:28","nodeType":"YulIdentifier","src":"1167:6:28"},"nativeSrc":"1167:41:28","nodeType":"YulFunctionCall","src":"1167:41:28"},"nativeSrc":"1167:41:28","nodeType":"YulExpressionStatement","src":"1167:41:28"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1027:187:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1091:9:28","nodeType":"YulTypedName","src":"1091:9:28","type":""},{"name":"value0","nativeSrc":"1102:6:28","nodeType":"YulTypedName","src":"1102:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1113:4:28","nodeType":"YulTypedName","src":"1113:4:28","type":""}],"src":"1027:187:28"},{"body":{"nativeSrc":"1320:76:28","nodeType":"YulBlock","src":"1320:76:28","statements":[{"nativeSrc":"1330:26:28","nodeType":"YulAssignment","src":"1330:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1342:9:28","nodeType":"YulIdentifier","src":"1342:9:28"},{"kind":"number","nativeSrc":"1353:2:28","nodeType":"YulLiteral","src":"1353:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1338:3:28","nodeType":"YulIdentifier","src":"1338:3:28"},"nativeSrc":"1338:18:28","nodeType":"YulFunctionCall","src":"1338:18:28"},"variableNames":[{"name":"tail","nativeSrc":"1330:4:28","nodeType":"YulIdentifier","src":"1330:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1372:9:28","nodeType":"YulIdentifier","src":"1372:9:28"},{"name":"value0","nativeSrc":"1383:6:28","nodeType":"YulIdentifier","src":"1383:6:28"}],"functionName":{"name":"mstore","nativeSrc":"1365:6:28","nodeType":"YulIdentifier","src":"1365:6:28"},"nativeSrc":"1365:25:28","nodeType":"YulFunctionCall","src":"1365:25:28"},"nativeSrc":"1365:25:28","nodeType":"YulExpressionStatement","src":"1365:25:28"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"1219:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1289:9:28","nodeType":"YulTypedName","src":"1289:9:28","type":""},{"name":"value0","nativeSrc":"1300:6:28","nodeType":"YulTypedName","src":"1300:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1311:4:28","nodeType":"YulTypedName","src":"1311:4:28","type":""}],"src":"1219:177:28"},{"body":{"nativeSrc":"1505:224:28","nodeType":"YulBlock","src":"1505:224:28","statements":[{"body":{"nativeSrc":"1551:16:28","nodeType":"YulBlock","src":"1551:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1560:1:28","nodeType":"YulLiteral","src":"1560:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1563:1:28","nodeType":"YulLiteral","src":"1563:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1553:6:28","nodeType":"YulIdentifier","src":"1553:6:28"},"nativeSrc":"1553:12:28","nodeType":"YulFunctionCall","src":"1553:12:28"},"nativeSrc":"1553:12:28","nodeType":"YulExpressionStatement","src":"1553:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1526:7:28","nodeType":"YulIdentifier","src":"1526:7:28"},{"name":"headStart","nativeSrc":"1535:9:28","nodeType":"YulIdentifier","src":"1535:9:28"}],"functionName":{"name":"sub","nativeSrc":"1522:3:28","nodeType":"YulIdentifier","src":"1522:3:28"},"nativeSrc":"1522:23:28","nodeType":"YulFunctionCall","src":"1522:23:28"},{"kind":"number","nativeSrc":"1547:2:28","nodeType":"YulLiteral","src":"1547:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"1518:3:28","nodeType":"YulIdentifier","src":"1518:3:28"},"nativeSrc":"1518:32:28","nodeType":"YulFunctionCall","src":"1518:32:28"},"nativeSrc":"1515:52:28","nodeType":"YulIf","src":"1515:52:28"},{"nativeSrc":"1576:39:28","nodeType":"YulAssignment","src":"1576:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1605:9:28","nodeType":"YulIdentifier","src":"1605:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1586:18:28","nodeType":"YulIdentifier","src":"1586:18:28"},"nativeSrc":"1586:29:28","nodeType":"YulFunctionCall","src":"1586:29:28"},"variableNames":[{"name":"value0","nativeSrc":"1576:6:28","nodeType":"YulIdentifier","src":"1576:6:28"}]},{"nativeSrc":"1624:48:28","nodeType":"YulAssignment","src":"1624:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1657:9:28","nodeType":"YulIdentifier","src":"1657:9:28"},{"kind":"number","nativeSrc":"1668:2:28","nodeType":"YulLiteral","src":"1668:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1653:3:28","nodeType":"YulIdentifier","src":"1653:3:28"},"nativeSrc":"1653:18:28","nodeType":"YulFunctionCall","src":"1653:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1634:18:28","nodeType":"YulIdentifier","src":"1634:18:28"},"nativeSrc":"1634:38:28","nodeType":"YulFunctionCall","src":"1634:38:28"},"variableNames":[{"name":"value1","nativeSrc":"1624:6:28","nodeType":"YulIdentifier","src":"1624:6:28"}]},{"nativeSrc":"1681:42:28","nodeType":"YulAssignment","src":"1681:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1708:9:28","nodeType":"YulIdentifier","src":"1708:9:28"},{"kind":"number","nativeSrc":"1719:2:28","nodeType":"YulLiteral","src":"1719:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1704:3:28","nodeType":"YulIdentifier","src":"1704:3:28"},"nativeSrc":"1704:18:28","nodeType":"YulFunctionCall","src":"1704:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"1691:12:28","nodeType":"YulIdentifier","src":"1691:12:28"},"nativeSrc":"1691:32:28","nodeType":"YulFunctionCall","src":"1691:32:28"},"variableNames":[{"name":"value2","nativeSrc":"1681:6:28","nodeType":"YulIdentifier","src":"1681:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"1401:328:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1455:9:28","nodeType":"YulTypedName","src":"1455:9:28","type":""},{"name":"dataEnd","nativeSrc":"1466:7:28","nodeType":"YulTypedName","src":"1466:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1478:6:28","nodeType":"YulTypedName","src":"1478:6:28","type":""},{"name":"value1","nativeSrc":"1486:6:28","nodeType":"YulTypedName","src":"1486:6:28","type":""},{"name":"value2","nativeSrc":"1494:6:28","nodeType":"YulTypedName","src":"1494:6:28","type":""}],"src":"1401:328:28"},{"body":{"nativeSrc":"1831:87:28","nodeType":"YulBlock","src":"1831:87:28","statements":[{"nativeSrc":"1841:26:28","nodeType":"YulAssignment","src":"1841:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1853:9:28","nodeType":"YulIdentifier","src":"1853:9:28"},{"kind":"number","nativeSrc":"1864:2:28","nodeType":"YulLiteral","src":"1864:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1849:3:28","nodeType":"YulIdentifier","src":"1849:3:28"},"nativeSrc":"1849:18:28","nodeType":"YulFunctionCall","src":"1849:18:28"},"variableNames":[{"name":"tail","nativeSrc":"1841:4:28","nodeType":"YulIdentifier","src":"1841:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1883:9:28","nodeType":"YulIdentifier","src":"1883:9:28"},{"arguments":[{"name":"value0","nativeSrc":"1898:6:28","nodeType":"YulIdentifier","src":"1898:6:28"},{"kind":"number","nativeSrc":"1906:4:28","nodeType":"YulLiteral","src":"1906:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"1894:3:28","nodeType":"YulIdentifier","src":"1894:3:28"},"nativeSrc":"1894:17:28","nodeType":"YulFunctionCall","src":"1894:17:28"}],"functionName":{"name":"mstore","nativeSrc":"1876:6:28","nodeType":"YulIdentifier","src":"1876:6:28"},"nativeSrc":"1876:36:28","nodeType":"YulFunctionCall","src":"1876:36:28"},"nativeSrc":"1876:36:28","nodeType":"YulExpressionStatement","src":"1876:36:28"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nativeSrc":"1734:184:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1800:9:28","nodeType":"YulTypedName","src":"1800:9:28","type":""},{"name":"value0","nativeSrc":"1811:6:28","nodeType":"YulTypedName","src":"1811:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1822:4:28","nodeType":"YulTypedName","src":"1822:4:28","type":""}],"src":"1734:184:28"},{"body":{"nativeSrc":"1993:116:28","nodeType":"YulBlock","src":"1993:116:28","statements":[{"body":{"nativeSrc":"2039:16:28","nodeType":"YulBlock","src":"2039:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2048:1:28","nodeType":"YulLiteral","src":"2048:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2051:1:28","nodeType":"YulLiteral","src":"2051:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2041:6:28","nodeType":"YulIdentifier","src":"2041:6:28"},"nativeSrc":"2041:12:28","nodeType":"YulFunctionCall","src":"2041:12:28"},"nativeSrc":"2041:12:28","nodeType":"YulExpressionStatement","src":"2041:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2014:7:28","nodeType":"YulIdentifier","src":"2014:7:28"},{"name":"headStart","nativeSrc":"2023:9:28","nodeType":"YulIdentifier","src":"2023:9:28"}],"functionName":{"name":"sub","nativeSrc":"2010:3:28","nodeType":"YulIdentifier","src":"2010:3:28"},"nativeSrc":"2010:23:28","nodeType":"YulFunctionCall","src":"2010:23:28"},{"kind":"number","nativeSrc":"2035:2:28","nodeType":"YulLiteral","src":"2035:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2006:3:28","nodeType":"YulIdentifier","src":"2006:3:28"},"nativeSrc":"2006:32:28","nodeType":"YulFunctionCall","src":"2006:32:28"},"nativeSrc":"2003:52:28","nodeType":"YulIf","src":"2003:52:28"},{"nativeSrc":"2064:39:28","nodeType":"YulAssignment","src":"2064:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2093:9:28","nodeType":"YulIdentifier","src":"2093:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2074:18:28","nodeType":"YulIdentifier","src":"2074:18:28"},"nativeSrc":"2074:29:28","nodeType":"YulFunctionCall","src":"2074:29:28"},"variableNames":[{"name":"value0","nativeSrc":"2064:6:28","nodeType":"YulIdentifier","src":"2064:6:28"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1923:186:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1959:9:28","nodeType":"YulTypedName","src":"1959:9:28","type":""},{"name":"dataEnd","nativeSrc":"1970:7:28","nodeType":"YulTypedName","src":"1970:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1982:6:28","nodeType":"YulTypedName","src":"1982:6:28","type":""}],"src":"1923:186:28"},{"body":{"nativeSrc":"2201:173:28","nodeType":"YulBlock","src":"2201:173:28","statements":[{"body":{"nativeSrc":"2247:16:28","nodeType":"YulBlock","src":"2247:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2256:1:28","nodeType":"YulLiteral","src":"2256:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2259:1:28","nodeType":"YulLiteral","src":"2259:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2249:6:28","nodeType":"YulIdentifier","src":"2249:6:28"},"nativeSrc":"2249:12:28","nodeType":"YulFunctionCall","src":"2249:12:28"},"nativeSrc":"2249:12:28","nodeType":"YulExpressionStatement","src":"2249:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2222:7:28","nodeType":"YulIdentifier","src":"2222:7:28"},{"name":"headStart","nativeSrc":"2231:9:28","nodeType":"YulIdentifier","src":"2231:9:28"}],"functionName":{"name":"sub","nativeSrc":"2218:3:28","nodeType":"YulIdentifier","src":"2218:3:28"},"nativeSrc":"2218:23:28","nodeType":"YulFunctionCall","src":"2218:23:28"},{"kind":"number","nativeSrc":"2243:2:28","nodeType":"YulLiteral","src":"2243:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2214:3:28","nodeType":"YulIdentifier","src":"2214:3:28"},"nativeSrc":"2214:32:28","nodeType":"YulFunctionCall","src":"2214:32:28"},"nativeSrc":"2211:52:28","nodeType":"YulIf","src":"2211:52:28"},{"nativeSrc":"2272:39:28","nodeType":"YulAssignment","src":"2272:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2301:9:28","nodeType":"YulIdentifier","src":"2301:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2282:18:28","nodeType":"YulIdentifier","src":"2282:18:28"},"nativeSrc":"2282:29:28","nodeType":"YulFunctionCall","src":"2282:29:28"},"variableNames":[{"name":"value0","nativeSrc":"2272:6:28","nodeType":"YulIdentifier","src":"2272:6:28"}]},{"nativeSrc":"2320:48:28","nodeType":"YulAssignment","src":"2320:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2353:9:28","nodeType":"YulIdentifier","src":"2353:9:28"},{"kind":"number","nativeSrc":"2364:2:28","nodeType":"YulLiteral","src":"2364:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2349:3:28","nodeType":"YulIdentifier","src":"2349:3:28"},"nativeSrc":"2349:18:28","nodeType":"YulFunctionCall","src":"2349:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2330:18:28","nodeType":"YulIdentifier","src":"2330:18:28"},"nativeSrc":"2330:38:28","nodeType":"YulFunctionCall","src":"2330:38:28"},"variableNames":[{"name":"value1","nativeSrc":"2320:6:28","nodeType":"YulIdentifier","src":"2320:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"2114:260:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2159:9:28","nodeType":"YulTypedName","src":"2159:9:28","type":""},{"name":"dataEnd","nativeSrc":"2170:7:28","nodeType":"YulTypedName","src":"2170:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2182:6:28","nodeType":"YulTypedName","src":"2182:6:28","type":""},{"name":"value1","nativeSrc":"2190:6:28","nodeType":"YulTypedName","src":"2190:6:28","type":""}],"src":"2114:260:28"},{"body":{"nativeSrc":"2434:382:28","nodeType":"YulBlock","src":"2434:382:28","statements":[{"nativeSrc":"2444:22:28","nodeType":"YulAssignment","src":"2444:22:28","value":{"arguments":[{"kind":"number","nativeSrc":"2458:1:28","nodeType":"YulLiteral","src":"2458:1:28","type":"","value":"1"},{"name":"data","nativeSrc":"2461:4:28","nodeType":"YulIdentifier","src":"2461:4:28"}],"functionName":{"name":"shr","nativeSrc":"2454:3:28","nodeType":"YulIdentifier","src":"2454:3:28"},"nativeSrc":"2454:12:28","nodeType":"YulFunctionCall","src":"2454:12:28"},"variableNames":[{"name":"length","nativeSrc":"2444:6:28","nodeType":"YulIdentifier","src":"2444:6:28"}]},{"nativeSrc":"2475:38:28","nodeType":"YulVariableDeclaration","src":"2475:38:28","value":{"arguments":[{"name":"data","nativeSrc":"2505:4:28","nodeType":"YulIdentifier","src":"2505:4:28"},{"kind":"number","nativeSrc":"2511:1:28","nodeType":"YulLiteral","src":"2511:1:28","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"2501:3:28","nodeType":"YulIdentifier","src":"2501:3:28"},"nativeSrc":"2501:12:28","nodeType":"YulFunctionCall","src":"2501:12:28"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"2479:18:28","nodeType":"YulTypedName","src":"2479:18:28","type":""}]},{"body":{"nativeSrc":"2552:31:28","nodeType":"YulBlock","src":"2552:31:28","statements":[{"nativeSrc":"2554:27:28","nodeType":"YulAssignment","src":"2554:27:28","value":{"arguments":[{"name":"length","nativeSrc":"2568:6:28","nodeType":"YulIdentifier","src":"2568:6:28"},{"kind":"number","nativeSrc":"2576:4:28","nodeType":"YulLiteral","src":"2576:4:28","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"2564:3:28","nodeType":"YulIdentifier","src":"2564:3:28"},"nativeSrc":"2564:17:28","nodeType":"YulFunctionCall","src":"2564:17:28"},"variableNames":[{"name":"length","nativeSrc":"2554:6:28","nodeType":"YulIdentifier","src":"2554:6:28"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2532:18:28","nodeType":"YulIdentifier","src":"2532:18:28"}],"functionName":{"name":"iszero","nativeSrc":"2525:6:28","nodeType":"YulIdentifier","src":"2525:6:28"},"nativeSrc":"2525:26:28","nodeType":"YulFunctionCall","src":"2525:26:28"},"nativeSrc":"2522:61:28","nodeType":"YulIf","src":"2522:61:28"},{"body":{"nativeSrc":"2642:168:28","nodeType":"YulBlock","src":"2642:168:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2663:1:28","nodeType":"YulLiteral","src":"2663:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2666:77:28","nodeType":"YulLiteral","src":"2666:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"2656:6:28","nodeType":"YulIdentifier","src":"2656:6:28"},"nativeSrc":"2656:88:28","nodeType":"YulFunctionCall","src":"2656:88:28"},"nativeSrc":"2656:88:28","nodeType":"YulExpressionStatement","src":"2656:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2764:1:28","nodeType":"YulLiteral","src":"2764:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"2767:4:28","nodeType":"YulLiteral","src":"2767:4:28","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"2757:6:28","nodeType":"YulIdentifier","src":"2757:6:28"},"nativeSrc":"2757:15:28","nodeType":"YulFunctionCall","src":"2757:15:28"},"nativeSrc":"2757:15:28","nodeType":"YulExpressionStatement","src":"2757:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2792:1:28","nodeType":"YulLiteral","src":"2792:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2795:4:28","nodeType":"YulLiteral","src":"2795:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2785:6:28","nodeType":"YulIdentifier","src":"2785:6:28"},"nativeSrc":"2785:15:28","nodeType":"YulFunctionCall","src":"2785:15:28"},"nativeSrc":"2785:15:28","nodeType":"YulExpressionStatement","src":"2785:15:28"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2598:18:28","nodeType":"YulIdentifier","src":"2598:18:28"},{"arguments":[{"name":"length","nativeSrc":"2621:6:28","nodeType":"YulIdentifier","src":"2621:6:28"},{"kind":"number","nativeSrc":"2629:2:28","nodeType":"YulLiteral","src":"2629:2:28","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"2618:2:28","nodeType":"YulIdentifier","src":"2618:2:28"},"nativeSrc":"2618:14:28","nodeType":"YulFunctionCall","src":"2618:14:28"}],"functionName":{"name":"eq","nativeSrc":"2595:2:28","nodeType":"YulIdentifier","src":"2595:2:28"},"nativeSrc":"2595:38:28","nodeType":"YulFunctionCall","src":"2595:38:28"},"nativeSrc":"2592:218:28","nodeType":"YulIf","src":"2592:218:28"}]},"name":"extract_byte_array_length","nativeSrc":"2379:437:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"2414:4:28","nodeType":"YulTypedName","src":"2414:4:28","type":""}],"returnVariables":[{"name":"length","nativeSrc":"2423:6:28","nodeType":"YulTypedName","src":"2423:6:28","type":""}],"src":"2379:437:28"},{"body":{"nativeSrc":"2869:231:28","nodeType":"YulBlock","src":"2869:231:28","statements":[{"nativeSrc":"2879:16:28","nodeType":"YulAssignment","src":"2879:16:28","value":{"arguments":[{"name":"x","nativeSrc":"2890:1:28","nodeType":"YulIdentifier","src":"2890:1:28"},{"name":"y","nativeSrc":"2893:1:28","nodeType":"YulIdentifier","src":"2893:1:28"}],"functionName":{"name":"add","nativeSrc":"2886:3:28","nodeType":"YulIdentifier","src":"2886:3:28"},"nativeSrc":"2886:9:28","nodeType":"YulFunctionCall","src":"2886:9:28"},"variableNames":[{"name":"sum","nativeSrc":"2879:3:28","nodeType":"YulIdentifier","src":"2879:3:28"}]},{"body":{"nativeSrc":"2926:168:28","nodeType":"YulBlock","src":"2926:168:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2947:1:28","nodeType":"YulLiteral","src":"2947:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2950:77:28","nodeType":"YulLiteral","src":"2950:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"2940:6:28","nodeType":"YulIdentifier","src":"2940:6:28"},"nativeSrc":"2940:88:28","nodeType":"YulFunctionCall","src":"2940:88:28"},"nativeSrc":"2940:88:28","nodeType":"YulExpressionStatement","src":"2940:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3048:1:28","nodeType":"YulLiteral","src":"3048:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"3051:4:28","nodeType":"YulLiteral","src":"3051:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"3041:6:28","nodeType":"YulIdentifier","src":"3041:6:28"},"nativeSrc":"3041:15:28","nodeType":"YulFunctionCall","src":"3041:15:28"},"nativeSrc":"3041:15:28","nodeType":"YulExpressionStatement","src":"3041:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3076:1:28","nodeType":"YulLiteral","src":"3076:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3079:4:28","nodeType":"YulLiteral","src":"3079:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3069:6:28","nodeType":"YulIdentifier","src":"3069:6:28"},"nativeSrc":"3069:15:28","nodeType":"YulFunctionCall","src":"3069:15:28"},"nativeSrc":"3069:15:28","nodeType":"YulExpressionStatement","src":"3069:15:28"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"2910:1:28","nodeType":"YulIdentifier","src":"2910:1:28"},{"name":"sum","nativeSrc":"2913:3:28","nodeType":"YulIdentifier","src":"2913:3:28"}],"functionName":{"name":"gt","nativeSrc":"2907:2:28","nodeType":"YulIdentifier","src":"2907:2:28"},"nativeSrc":"2907:10:28","nodeType":"YulFunctionCall","src":"2907:10:28"},"nativeSrc":"2904:190:28","nodeType":"YulIf","src":"2904:190:28"}]},"name":"checked_add_t_uint256","nativeSrc":"2821:279:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"2852:1:28","nodeType":"YulTypedName","src":"2852:1:28","type":""},{"name":"y","nativeSrc":"2855:1:28","nodeType":"YulTypedName","src":"2855:1:28","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"2861:3:28","nodeType":"YulTypedName","src":"2861:3:28","type":""}],"src":"2821:279:28"},{"body":{"nativeSrc":"3279:227:28","nodeType":"YulBlock","src":"3279:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3296:9:28","nodeType":"YulIdentifier","src":"3296:9:28"},{"kind":"number","nativeSrc":"3307:2:28","nodeType":"YulLiteral","src":"3307:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3289:6:28","nodeType":"YulIdentifier","src":"3289:6:28"},"nativeSrc":"3289:21:28","nodeType":"YulFunctionCall","src":"3289:21:28"},"nativeSrc":"3289:21:28","nodeType":"YulExpressionStatement","src":"3289:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3330:9:28","nodeType":"YulIdentifier","src":"3330:9:28"},{"kind":"number","nativeSrc":"3341:2:28","nodeType":"YulLiteral","src":"3341:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3326:3:28","nodeType":"YulIdentifier","src":"3326:3:28"},"nativeSrc":"3326:18:28","nodeType":"YulFunctionCall","src":"3326:18:28"},{"kind":"number","nativeSrc":"3346:2:28","nodeType":"YulLiteral","src":"3346:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nativeSrc":"3319:6:28","nodeType":"YulIdentifier","src":"3319:6:28"},"nativeSrc":"3319:30:28","nodeType":"YulFunctionCall","src":"3319:30:28"},"nativeSrc":"3319:30:28","nodeType":"YulExpressionStatement","src":"3319:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3369:9:28","nodeType":"YulIdentifier","src":"3369:9:28"},{"kind":"number","nativeSrc":"3380:2:28","nodeType":"YulLiteral","src":"3380:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3365:3:28","nodeType":"YulIdentifier","src":"3365:3:28"},"nativeSrc":"3365:18:28","nodeType":"YulFunctionCall","src":"3365:18:28"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nativeSrc":"3385:34:28","nodeType":"YulLiteral","src":"3385:34:28","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nativeSrc":"3358:6:28","nodeType":"YulIdentifier","src":"3358:6:28"},"nativeSrc":"3358:62:28","nodeType":"YulFunctionCall","src":"3358:62:28"},"nativeSrc":"3358:62:28","nodeType":"YulExpressionStatement","src":"3358:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3440:9:28","nodeType":"YulIdentifier","src":"3440:9:28"},{"kind":"number","nativeSrc":"3451:2:28","nodeType":"YulLiteral","src":"3451:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3436:3:28","nodeType":"YulIdentifier","src":"3436:3:28"},"nativeSrc":"3436:18:28","nodeType":"YulFunctionCall","src":"3436:18:28"},{"hexValue":"207a65726f","kind":"string","nativeSrc":"3456:7:28","nodeType":"YulLiteral","src":"3456:7:28","type":"","value":" zero"}],"functionName":{"name":"mstore","nativeSrc":"3429:6:28","nodeType":"YulIdentifier","src":"3429:6:28"},"nativeSrc":"3429:35:28","nodeType":"YulFunctionCall","src":"3429:35:28"},"nativeSrc":"3429:35:28","nodeType":"YulExpressionStatement","src":"3429:35:28"},{"nativeSrc":"3473:27:28","nodeType":"YulAssignment","src":"3473:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3485:9:28","nodeType":"YulIdentifier","src":"3485:9:28"},{"kind":"number","nativeSrc":"3496:3:28","nodeType":"YulLiteral","src":"3496:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3481:3:28","nodeType":"YulIdentifier","src":"3481:3:28"},"nativeSrc":"3481:19:28","nodeType":"YulFunctionCall","src":"3481:19:28"},"variableNames":[{"name":"tail","nativeSrc":"3473:4:28","nodeType":"YulIdentifier","src":"3473:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3105:401:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3256:9:28","nodeType":"YulTypedName","src":"3256:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3270:4:28","nodeType":"YulTypedName","src":"3270:4:28","type":""}],"src":"3105:401:28"},{"body":{"nativeSrc":"3685:226:28","nodeType":"YulBlock","src":"3685:226:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3702:9:28","nodeType":"YulIdentifier","src":"3702:9:28"},{"kind":"number","nativeSrc":"3713:2:28","nodeType":"YulLiteral","src":"3713:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3695:6:28","nodeType":"YulIdentifier","src":"3695:6:28"},"nativeSrc":"3695:21:28","nodeType":"YulFunctionCall","src":"3695:21:28"},"nativeSrc":"3695:21:28","nodeType":"YulExpressionStatement","src":"3695:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3736:9:28","nodeType":"YulIdentifier","src":"3736:9:28"},{"kind":"number","nativeSrc":"3747:2:28","nodeType":"YulLiteral","src":"3747:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3732:3:28","nodeType":"YulIdentifier","src":"3732:3:28"},"nativeSrc":"3732:18:28","nodeType":"YulFunctionCall","src":"3732:18:28"},{"kind":"number","nativeSrc":"3752:2:28","nodeType":"YulLiteral","src":"3752:2:28","type":"","value":"36"}],"functionName":{"name":"mstore","nativeSrc":"3725:6:28","nodeType":"YulIdentifier","src":"3725:6:28"},"nativeSrc":"3725:30:28","nodeType":"YulFunctionCall","src":"3725:30:28"},"nativeSrc":"3725:30:28","nodeType":"YulExpressionStatement","src":"3725:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3775:9:28","nodeType":"YulIdentifier","src":"3775:9:28"},{"kind":"number","nativeSrc":"3786:2:28","nodeType":"YulLiteral","src":"3786:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3771:3:28","nodeType":"YulIdentifier","src":"3771:3:28"},"nativeSrc":"3771:18:28","nodeType":"YulFunctionCall","src":"3771:18:28"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nativeSrc":"3791:34:28","nodeType":"YulLiteral","src":"3791:34:28","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nativeSrc":"3764:6:28","nodeType":"YulIdentifier","src":"3764:6:28"},"nativeSrc":"3764:62:28","nodeType":"YulFunctionCall","src":"3764:62:28"},"nativeSrc":"3764:62:28","nodeType":"YulExpressionStatement","src":"3764:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3846:9:28","nodeType":"YulIdentifier","src":"3846:9:28"},{"kind":"number","nativeSrc":"3857:2:28","nodeType":"YulLiteral","src":"3857:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3842:3:28","nodeType":"YulIdentifier","src":"3842:3:28"},"nativeSrc":"3842:18:28","nodeType":"YulFunctionCall","src":"3842:18:28"},{"hexValue":"72657373","kind":"string","nativeSrc":"3862:6:28","nodeType":"YulLiteral","src":"3862:6:28","type":"","value":"ress"}],"functionName":{"name":"mstore","nativeSrc":"3835:6:28","nodeType":"YulIdentifier","src":"3835:6:28"},"nativeSrc":"3835:34:28","nodeType":"YulFunctionCall","src":"3835:34:28"},"nativeSrc":"3835:34:28","nodeType":"YulExpressionStatement","src":"3835:34:28"},{"nativeSrc":"3878:27:28","nodeType":"YulAssignment","src":"3878:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3890:9:28","nodeType":"YulIdentifier","src":"3890:9:28"},{"kind":"number","nativeSrc":"3901:3:28","nodeType":"YulLiteral","src":"3901:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3886:3:28","nodeType":"YulIdentifier","src":"3886:3:28"},"nativeSrc":"3886:19:28","nodeType":"YulFunctionCall","src":"3886:19:28"},"variableNames":[{"name":"tail","nativeSrc":"3878:4:28","nodeType":"YulIdentifier","src":"3878:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3511:400:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3662:9:28","nodeType":"YulTypedName","src":"3662:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3676:4:28","nodeType":"YulTypedName","src":"3676:4:28","type":""}],"src":"3511:400:28"},{"body":{"nativeSrc":"4090:224:28","nodeType":"YulBlock","src":"4090:224:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4107:9:28","nodeType":"YulIdentifier","src":"4107:9:28"},{"kind":"number","nativeSrc":"4118:2:28","nodeType":"YulLiteral","src":"4118:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"4100:6:28","nodeType":"YulIdentifier","src":"4100:6:28"},"nativeSrc":"4100:21:28","nodeType":"YulFunctionCall","src":"4100:21:28"},"nativeSrc":"4100:21:28","nodeType":"YulExpressionStatement","src":"4100:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4141:9:28","nodeType":"YulIdentifier","src":"4141:9:28"},{"kind":"number","nativeSrc":"4152:2:28","nodeType":"YulLiteral","src":"4152:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4137:3:28","nodeType":"YulIdentifier","src":"4137:3:28"},"nativeSrc":"4137:18:28","nodeType":"YulFunctionCall","src":"4137:18:28"},{"kind":"number","nativeSrc":"4157:2:28","nodeType":"YulLiteral","src":"4157:2:28","type":"","value":"34"}],"functionName":{"name":"mstore","nativeSrc":"4130:6:28","nodeType":"YulIdentifier","src":"4130:6:28"},"nativeSrc":"4130:30:28","nodeType":"YulFunctionCall","src":"4130:30:28"},"nativeSrc":"4130:30:28","nodeType":"YulExpressionStatement","src":"4130:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4180:9:28","nodeType":"YulIdentifier","src":"4180:9:28"},{"kind":"number","nativeSrc":"4191:2:28","nodeType":"YulLiteral","src":"4191:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4176:3:28","nodeType":"YulIdentifier","src":"4176:3:28"},"nativeSrc":"4176:18:28","nodeType":"YulFunctionCall","src":"4176:18:28"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nativeSrc":"4196:34:28","nodeType":"YulLiteral","src":"4196:34:28","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nativeSrc":"4169:6:28","nodeType":"YulIdentifier","src":"4169:6:28"},"nativeSrc":"4169:62:28","nodeType":"YulFunctionCall","src":"4169:62:28"},"nativeSrc":"4169:62:28","nodeType":"YulExpressionStatement","src":"4169:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4251:9:28","nodeType":"YulIdentifier","src":"4251:9:28"},{"kind":"number","nativeSrc":"4262:2:28","nodeType":"YulLiteral","src":"4262:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4247:3:28","nodeType":"YulIdentifier","src":"4247:3:28"},"nativeSrc":"4247:18:28","nodeType":"YulFunctionCall","src":"4247:18:28"},{"hexValue":"7373","kind":"string","nativeSrc":"4267:4:28","nodeType":"YulLiteral","src":"4267:4:28","type":"","value":"ss"}],"functionName":{"name":"mstore","nativeSrc":"4240:6:28","nodeType":"YulIdentifier","src":"4240:6:28"},"nativeSrc":"4240:32:28","nodeType":"YulFunctionCall","src":"4240:32:28"},"nativeSrc":"4240:32:28","nodeType":"YulExpressionStatement","src":"4240:32:28"},{"nativeSrc":"4281:27:28","nodeType":"YulAssignment","src":"4281:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4293:9:28","nodeType":"YulIdentifier","src":"4293:9:28"},{"kind":"number","nativeSrc":"4304:3:28","nodeType":"YulLiteral","src":"4304:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4289:3:28","nodeType":"YulIdentifier","src":"4289:3:28"},"nativeSrc":"4289:19:28","nodeType":"YulFunctionCall","src":"4289:19:28"},"variableNames":[{"name":"tail","nativeSrc":"4281:4:28","nodeType":"YulIdentifier","src":"4281:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3916:398:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4067:9:28","nodeType":"YulTypedName","src":"4067:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4081:4:28","nodeType":"YulTypedName","src":"4081:4:28","type":""}],"src":"3916:398:28"},{"body":{"nativeSrc":"4493:179:28","nodeType":"YulBlock","src":"4493:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4510:9:28","nodeType":"YulIdentifier","src":"4510:9:28"},{"kind":"number","nativeSrc":"4521:2:28","nodeType":"YulLiteral","src":"4521:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"4503:6:28","nodeType":"YulIdentifier","src":"4503:6:28"},"nativeSrc":"4503:21:28","nodeType":"YulFunctionCall","src":"4503:21:28"},"nativeSrc":"4503:21:28","nodeType":"YulExpressionStatement","src":"4503:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4544:9:28","nodeType":"YulIdentifier","src":"4544:9:28"},{"kind":"number","nativeSrc":"4555:2:28","nodeType":"YulLiteral","src":"4555:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4540:3:28","nodeType":"YulIdentifier","src":"4540:3:28"},"nativeSrc":"4540:18:28","nodeType":"YulFunctionCall","src":"4540:18:28"},{"kind":"number","nativeSrc":"4560:2:28","nodeType":"YulLiteral","src":"4560:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"4533:6:28","nodeType":"YulIdentifier","src":"4533:6:28"},"nativeSrc":"4533:30:28","nodeType":"YulFunctionCall","src":"4533:30:28"},"nativeSrc":"4533:30:28","nodeType":"YulExpressionStatement","src":"4533:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4583:9:28","nodeType":"YulIdentifier","src":"4583:9:28"},{"kind":"number","nativeSrc":"4594:2:28","nodeType":"YulLiteral","src":"4594:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4579:3:28","nodeType":"YulIdentifier","src":"4579:3:28"},"nativeSrc":"4579:18:28","nodeType":"YulFunctionCall","src":"4579:18:28"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nativeSrc":"4599:31:28","nodeType":"YulLiteral","src":"4599:31:28","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nativeSrc":"4572:6:28","nodeType":"YulIdentifier","src":"4572:6:28"},"nativeSrc":"4572:59:28","nodeType":"YulFunctionCall","src":"4572:59:28"},"nativeSrc":"4572:59:28","nodeType":"YulExpressionStatement","src":"4572:59:28"},{"nativeSrc":"4640:26:28","nodeType":"YulAssignment","src":"4640:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4652:9:28","nodeType":"YulIdentifier","src":"4652:9:28"},{"kind":"number","nativeSrc":"4663:2:28","nodeType":"YulLiteral","src":"4663:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4648:3:28","nodeType":"YulIdentifier","src":"4648:3:28"},"nativeSrc":"4648:18:28","nodeType":"YulFunctionCall","src":"4648:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4640:4:28","nodeType":"YulIdentifier","src":"4640:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4319:353:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4470:9:28","nodeType":"YulTypedName","src":"4470:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4484:4:28","nodeType":"YulTypedName","src":"4484:4:28","type":""}],"src":"4319:353:28"},{"body":{"nativeSrc":"4851:227:28","nodeType":"YulBlock","src":"4851:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4868:9:28","nodeType":"YulIdentifier","src":"4868:9:28"},{"kind":"number","nativeSrc":"4879:2:28","nodeType":"YulLiteral","src":"4879:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"4861:6:28","nodeType":"YulIdentifier","src":"4861:6:28"},"nativeSrc":"4861:21:28","nodeType":"YulFunctionCall","src":"4861:21:28"},"nativeSrc":"4861:21:28","nodeType":"YulExpressionStatement","src":"4861:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4902:9:28","nodeType":"YulIdentifier","src":"4902:9:28"},{"kind":"number","nativeSrc":"4913:2:28","nodeType":"YulLiteral","src":"4913:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4898:3:28","nodeType":"YulIdentifier","src":"4898:3:28"},"nativeSrc":"4898:18:28","nodeType":"YulFunctionCall","src":"4898:18:28"},{"kind":"number","nativeSrc":"4918:2:28","nodeType":"YulLiteral","src":"4918:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nativeSrc":"4891:6:28","nodeType":"YulIdentifier","src":"4891:6:28"},"nativeSrc":"4891:30:28","nodeType":"YulFunctionCall","src":"4891:30:28"},"nativeSrc":"4891:30:28","nodeType":"YulExpressionStatement","src":"4891:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4941:9:28","nodeType":"YulIdentifier","src":"4941:9:28"},{"kind":"number","nativeSrc":"4952:2:28","nodeType":"YulLiteral","src":"4952:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4937:3:28","nodeType":"YulIdentifier","src":"4937:3:28"},"nativeSrc":"4937:18:28","nodeType":"YulFunctionCall","src":"4937:18:28"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nativeSrc":"4957:34:28","nodeType":"YulLiteral","src":"4957:34:28","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nativeSrc":"4930:6:28","nodeType":"YulIdentifier","src":"4930:6:28"},"nativeSrc":"4930:62:28","nodeType":"YulFunctionCall","src":"4930:62:28"},"nativeSrc":"4930:62:28","nodeType":"YulExpressionStatement","src":"4930:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5012:9:28","nodeType":"YulIdentifier","src":"5012:9:28"},{"kind":"number","nativeSrc":"5023:2:28","nodeType":"YulLiteral","src":"5023:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5008:3:28","nodeType":"YulIdentifier","src":"5008:3:28"},"nativeSrc":"5008:18:28","nodeType":"YulFunctionCall","src":"5008:18:28"},{"hexValue":"6472657373","kind":"string","nativeSrc":"5028:7:28","nodeType":"YulLiteral","src":"5028:7:28","type":"","value":"dress"}],"functionName":{"name":"mstore","nativeSrc":"5001:6:28","nodeType":"YulIdentifier","src":"5001:6:28"},"nativeSrc":"5001:35:28","nodeType":"YulFunctionCall","src":"5001:35:28"},"nativeSrc":"5001:35:28","nodeType":"YulExpressionStatement","src":"5001:35:28"},{"nativeSrc":"5045:27:28","nodeType":"YulAssignment","src":"5045:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5057:9:28","nodeType":"YulIdentifier","src":"5057:9:28"},{"kind":"number","nativeSrc":"5068:3:28","nodeType":"YulLiteral","src":"5068:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5053:3:28","nodeType":"YulIdentifier","src":"5053:3:28"},"nativeSrc":"5053:19:28","nodeType":"YulFunctionCall","src":"5053:19:28"},"variableNames":[{"name":"tail","nativeSrc":"5045:4:28","nodeType":"YulIdentifier","src":"5045:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4677:401:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4828:9:28","nodeType":"YulTypedName","src":"4828:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4842:4:28","nodeType":"YulTypedName","src":"4842:4:28","type":""}],"src":"4677:401:28"},{"body":{"nativeSrc":"5257:225:28","nodeType":"YulBlock","src":"5257:225:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5274:9:28","nodeType":"YulIdentifier","src":"5274:9:28"},{"kind":"number","nativeSrc":"5285:2:28","nodeType":"YulLiteral","src":"5285:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"5267:6:28","nodeType":"YulIdentifier","src":"5267:6:28"},"nativeSrc":"5267:21:28","nodeType":"YulFunctionCall","src":"5267:21:28"},"nativeSrc":"5267:21:28","nodeType":"YulExpressionStatement","src":"5267:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5308:9:28","nodeType":"YulIdentifier","src":"5308:9:28"},{"kind":"number","nativeSrc":"5319:2:28","nodeType":"YulLiteral","src":"5319:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5304:3:28","nodeType":"YulIdentifier","src":"5304:3:28"},"nativeSrc":"5304:18:28","nodeType":"YulFunctionCall","src":"5304:18:28"},{"kind":"number","nativeSrc":"5324:2:28","nodeType":"YulLiteral","src":"5324:2:28","type":"","value":"35"}],"functionName":{"name":"mstore","nativeSrc":"5297:6:28","nodeType":"YulIdentifier","src":"5297:6:28"},"nativeSrc":"5297:30:28","nodeType":"YulFunctionCall","src":"5297:30:28"},"nativeSrc":"5297:30:28","nodeType":"YulExpressionStatement","src":"5297:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5347:9:28","nodeType":"YulIdentifier","src":"5347:9:28"},{"kind":"number","nativeSrc":"5358:2:28","nodeType":"YulLiteral","src":"5358:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5343:3:28","nodeType":"YulIdentifier","src":"5343:3:28"},"nativeSrc":"5343:18:28","nodeType":"YulFunctionCall","src":"5343:18:28"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nativeSrc":"5363:34:28","nodeType":"YulLiteral","src":"5363:34:28","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nativeSrc":"5336:6:28","nodeType":"YulIdentifier","src":"5336:6:28"},"nativeSrc":"5336:62:28","nodeType":"YulFunctionCall","src":"5336:62:28"},"nativeSrc":"5336:62:28","nodeType":"YulExpressionStatement","src":"5336:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5418:9:28","nodeType":"YulIdentifier","src":"5418:9:28"},{"kind":"number","nativeSrc":"5429:2:28","nodeType":"YulLiteral","src":"5429:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5414:3:28","nodeType":"YulIdentifier","src":"5414:3:28"},"nativeSrc":"5414:18:28","nodeType":"YulFunctionCall","src":"5414:18:28"},{"hexValue":"657373","kind":"string","nativeSrc":"5434:5:28","nodeType":"YulLiteral","src":"5434:5:28","type":"","value":"ess"}],"functionName":{"name":"mstore","nativeSrc":"5407:6:28","nodeType":"YulIdentifier","src":"5407:6:28"},"nativeSrc":"5407:33:28","nodeType":"YulFunctionCall","src":"5407:33:28"},"nativeSrc":"5407:33:28","nodeType":"YulExpressionStatement","src":"5407:33:28"},{"nativeSrc":"5449:27:28","nodeType":"YulAssignment","src":"5449:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5461:9:28","nodeType":"YulIdentifier","src":"5461:9:28"},{"kind":"number","nativeSrc":"5472:3:28","nodeType":"YulLiteral","src":"5472:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5457:3:28","nodeType":"YulIdentifier","src":"5457:3:28"},"nativeSrc":"5457:19:28","nodeType":"YulFunctionCall","src":"5457:19:28"},"variableNames":[{"name":"tail","nativeSrc":"5449:4:28","nodeType":"YulIdentifier","src":"5449:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"5083:399:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5234:9:28","nodeType":"YulTypedName","src":"5234:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5248:4:28","nodeType":"YulTypedName","src":"5248:4:28","type":""}],"src":"5083:399:28"},{"body":{"nativeSrc":"5661:228:28","nodeType":"YulBlock","src":"5661:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5678:9:28","nodeType":"YulIdentifier","src":"5678:9:28"},{"kind":"number","nativeSrc":"5689:2:28","nodeType":"YulLiteral","src":"5689:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"5671:6:28","nodeType":"YulIdentifier","src":"5671:6:28"},"nativeSrc":"5671:21:28","nodeType":"YulFunctionCall","src":"5671:21:28"},"nativeSrc":"5671:21:28","nodeType":"YulExpressionStatement","src":"5671:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5712:9:28","nodeType":"YulIdentifier","src":"5712:9:28"},{"kind":"number","nativeSrc":"5723:2:28","nodeType":"YulLiteral","src":"5723:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5708:3:28","nodeType":"YulIdentifier","src":"5708:3:28"},"nativeSrc":"5708:18:28","nodeType":"YulFunctionCall","src":"5708:18:28"},{"kind":"number","nativeSrc":"5728:2:28","nodeType":"YulLiteral","src":"5728:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"5701:6:28","nodeType":"YulIdentifier","src":"5701:6:28"},"nativeSrc":"5701:30:28","nodeType":"YulFunctionCall","src":"5701:30:28"},"nativeSrc":"5701:30:28","nodeType":"YulExpressionStatement","src":"5701:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5751:9:28","nodeType":"YulIdentifier","src":"5751:9:28"},{"kind":"number","nativeSrc":"5762:2:28","nodeType":"YulLiteral","src":"5762:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5747:3:28","nodeType":"YulIdentifier","src":"5747:3:28"},"nativeSrc":"5747:18:28","nodeType":"YulFunctionCall","src":"5747:18:28"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nativeSrc":"5767:34:28","nodeType":"YulLiteral","src":"5767:34:28","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nativeSrc":"5740:6:28","nodeType":"YulIdentifier","src":"5740:6:28"},"nativeSrc":"5740:62:28","nodeType":"YulFunctionCall","src":"5740:62:28"},"nativeSrc":"5740:62:28","nodeType":"YulExpressionStatement","src":"5740:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5822:9:28","nodeType":"YulIdentifier","src":"5822:9:28"},{"kind":"number","nativeSrc":"5833:2:28","nodeType":"YulLiteral","src":"5833:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5818:3:28","nodeType":"YulIdentifier","src":"5818:3:28"},"nativeSrc":"5818:18:28","nodeType":"YulFunctionCall","src":"5818:18:28"},{"hexValue":"616c616e6365","kind":"string","nativeSrc":"5838:8:28","nodeType":"YulLiteral","src":"5838:8:28","type":"","value":"alance"}],"functionName":{"name":"mstore","nativeSrc":"5811:6:28","nodeType":"YulIdentifier","src":"5811:6:28"},"nativeSrc":"5811:36:28","nodeType":"YulFunctionCall","src":"5811:36:28"},"nativeSrc":"5811:36:28","nodeType":"YulExpressionStatement","src":"5811:36:28"},{"nativeSrc":"5856:27:28","nodeType":"YulAssignment","src":"5856:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5868:9:28","nodeType":"YulIdentifier","src":"5868:9:28"},{"kind":"number","nativeSrc":"5879:3:28","nodeType":"YulLiteral","src":"5879:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5864:3:28","nodeType":"YulIdentifier","src":"5864:3:28"},"nativeSrc":"5864:19:28","nodeType":"YulFunctionCall","src":"5864:19:28"},"variableNames":[{"name":"tail","nativeSrc":"5856:4:28","nodeType":"YulIdentifier","src":"5856:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"5487:402:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5638:9:28","nodeType":"YulTypedName","src":"5638:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5652:4:28","nodeType":"YulTypedName","src":"5652:4:28","type":""}],"src":"5487:402:28"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461017f57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e6565b6040516100e3919061079f565b60405180910390f35b6100ff6100fa36600461080a565b610278565b60405190151581526020016100e3565b6035545b6040519081526020016100e3565b6100ff61012f366004610834565b610292565b604051601281526020016100e3565b6100ff61015136600461080a565b6102b6565b610113610164366004610870565b6001600160a01b031660009081526033602052604090205490565b6100d66102f5565b6100ff61019536600461080a565b610304565b6100ff6101a836600461080a565b6103b3565b6101136101bb366004610892565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6060603680546101f5906108c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610221906108c5565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b6000336102868185856103c1565b60019150505b92915050565b6000336102a0858285610519565b6102ab8585856105ab565b506001949350505050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061028690829086906102f09087906108ff565b6103c1565b6060603780546101f5906108c5565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156103a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ab82868684036103c1565b6000336102868185856105ab565b6001600160a01b03831661043c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166104b85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526034602090815260408083209386168352929052205460001981146105a557818110156105985760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161039d565b6105a584848484036103c1565b50505050565b6001600160a01b0383166106275760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166106a35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b038316600090815260336020526040902054818110156107325760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107929086815260200190565b60405180910390a36105a5565b60006020808352835180602085015260005b818110156107cd578581018301518582016040015282016107b1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461080557600080fd5b919050565b6000806040838503121561081d57600080fd5b610826836107ee565b946020939093013593505050565b60008060006060848603121561084957600080fd5b610852846107ee565b9250610860602085016107ee565b9150604084013590509250925092565b60006020828403121561088257600080fd5b61088b826107ee565b9392505050565b600080604083850312156108a557600080fd5b6108ae836107ee565b91506108bc602084016107ee565b90509250929050565b600181811c908216806108d957607f821691505b6020821081036108f957634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028c57634e487b7160e01b600052601160045260246000fdfea264697066735822122085eecaf032a6185e4b812d3addc9a996b6f58dfbd9f628c4965235375872fe3a64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x278 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x834 JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x870 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x304 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x892 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x8C5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x221 SWAP1 PUSH2 0x8C5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x26E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x243 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x26E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x251 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP6 DUP3 DUP6 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x2AB DUP6 DUP6 DUP6 PUSH2 0x5AB JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x286 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2F0 SWAP1 DUP8 SWAP1 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x8C5 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AB DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x5A5 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x598 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x39D JUMP JUMPDEST PUSH2 0x5A5 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x627 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x792 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x5A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7CD JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7B1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x805 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x81D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x826 DUP4 PUSH2 0x7EE JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x852 DUP5 PUSH2 0x7EE JUMP JUMPDEST SWAP3 POP PUSH2 0x860 PUSH1 0x20 DUP6 ADD PUSH2 0x7EE JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88B DUP3 PUSH2 0x7EE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8AE DUP4 PUSH2 0x7EE JUMP JUMPDEST SWAP2 POP PUSH2 0x8BC PUSH1 0x20 DUP5 ADD PUSH2 0x7EE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x8D9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8F9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x28C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xEE 0xCA CREATE ORIGIN 0xA6 XOR MCOPY 0x4B DUP2 0x2D GASPRICE 0xDD 0xC9 0xA9 SWAP7 0xB6 CREATE2 DUP14 0xFB 0xD9 0xF6 0x28 0xC4 SWAP7 MSTORE CALLDATALOAD CALLDATACOPY PC PUSH19 0xFE3A64736F6C63430008180033000000000000 ","sourceMap":"1632:11861:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2516:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4802:197;;;;;;:::i;:::-;;:::i;:::-;;;1192:14:28;;1185:22;1167:41;;1155:2;1140:18;4802:197:10;1027:187:28;3613:106:10;3700:12;;3613:106;;;1365:25:28;;;1353:2;1338:18;3613:106:10;1219:177:28;5561:256:10;;;;;;:::i;:::-;;:::i;3462:91::-;;;3544:2;1876:36:28;;1864:2;1849:18;3462:91:10;1734:184:28;6212:234:10;;;;;;:::i;:::-;;:::i;3777:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3877:18:10;3851:7;3877:18;;;:9;:18;;;;;;;3777:125;2727:102;;;:::i;6933:427::-;;;;;;:::i;:::-;;:::i;4098:189::-;;;;;;:::i;:::-;;:::i;4345:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4460:18:10;;;4434:7;4460:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4345:149;2516:98;2570:13;2602:5;2595:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2516:98;:::o;4802:197::-;4885:4;965:10:18;4939:32:10;965:10:18;4955:7:10;4964:6;4939:8;:32::i;:::-;4988:4;4981:11;;;4802:197;;;;;:::o;5561:256::-;5658:4;965:10:18;5714:38:10;5730:4;965:10:18;5745:6:10;5714:15;:38::i;:::-;5762:27;5772:4;5778:2;5782:6;5762:9;:27::i;:::-;-1:-1:-1;5806:4:10;;5561:256;-1:-1:-1;;;;5561:256:10:o;6212:234::-;965:10:18;6300:4:10;4460:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4460:27:10;;;;;;;;;;6300:4;;965:10:18;6354:64:10;;965:10:18;;4460:27:10;;6379:38;;6407:10;;6379:38;:::i;:::-;6354:8;:64::i;2727:102::-;2783:13;2815:7;2808:14;;;;;:::i;6933:427::-;965:10:18;7026:4:10;4460:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4460:27:10;;;;;;;;;;7026:4;;965:10:18;7170:15:10;7150:16;:35;;7142:85;;;;-1:-1:-1;;;7142:85:10;;3307:2:28;7142:85:10;;;3289:21:28;3346:2;3326:18;;;3319:30;3385:34;3365:18;;;3358:62;3456:7;3436:18;;;3429:35;3481:19;;7142:85:10;;;;;;;;;7261:60;7270:5;7277:7;7305:15;7286:16;:34;7261:8;:60::i;4098:189::-;4177:4;965:10:18;4231:28:10;965:10:18;4248:2:10;4252:6;4231:9;:28::i;10815:340::-;-1:-1:-1;;;;;10916:19:10;;10908:68;;;;-1:-1:-1;;;10908:68:10;;3713:2:28;10908:68:10;;;3695:21:28;3752:2;3732:18;;;3725:30;3791:34;3771:18;;;3764:62;3862:6;3842:18;;;3835:34;3886:19;;10908:68:10;3511:400:28;10908:68:10;-1:-1:-1;;;;;10994:21:10;;10986:68;;;;-1:-1:-1;;;10986:68:10;;4118:2:28;10986:68:10;;;4100:21:28;4157:2;4137:18;;;4130:30;4196:34;4176:18;;;4169:62;4267:4;4247:18;;;4240:32;4289:19;;10986:68:10;3916:398:28;10986:68:10;-1:-1:-1;;;;;11065:18:10;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11116:32;;1365:25:28;;;11116:32:10;;1338:18:28;11116:32:10;;;;;;;10815:340;;;:::o;11436:411::-;-1:-1:-1;;;;;4460:18:10;;;11536:24;4460:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;11602:37:10;;11598:243;;11683:6;11663:16;:26;;11655:68;;;;-1:-1:-1;;;11655:68:10;;4521:2:28;11655:68:10;;;4503:21:28;4560:2;4540:18;;;4533:30;4599:31;4579:18;;;4572:59;4648:18;;11655:68:10;4319:353:28;11655:68:10;11765:51;11774:5;11781:7;11809:6;11790:16;:25;11765:8;:51::i;:::-;11526:321;11436:411;;;:::o;7814:788::-;-1:-1:-1;;;;;7910:18:10;;7902:68;;;;-1:-1:-1;;;7902:68:10;;4879:2:28;7902:68:10;;;4861:21:28;4918:2;4898:18;;;4891:30;4957:34;4937:18;;;4930:62;5028:7;5008:18;;;5001:35;5053:19;;7902:68:10;4677:401:28;7902:68:10;-1:-1:-1;;;;;7988:16:10;;7980:64;;;;-1:-1:-1;;;7980:64:10;;5285:2:28;7980:64:10;;;5267:21:28;5324:2;5304:18;;;5297:30;5363:34;5343:18;;;5336:62;5434:5;5414:18;;;5407:33;5457:19;;7980:64:10;5083:399:28;7980:64:10;-1:-1:-1;;;;;8126:15:10;;8104:19;8126:15;;;:9;:15;;;;;;8159:21;;;;8151:72;;;;-1:-1:-1;;;8151:72:10;;5689:2:28;8151:72:10;;;5671:21:28;5728:2;5708:18;;;5701:30;5767:34;5747:18;;;5740:62;5838:8;5818:18;;;5811:36;5864:19;;8151:72:10;5487:402:28;8151:72:10;-1:-1:-1;;;;;8257:15:10;;;;;;;:9;:15;;;;;;8275:20;;;8257:38;;8472:13;;;;;;;;;;:23;;;;;;8521:26;;;;;;8289:6;1365:25:28;;1353:2;1338:18;;1219:177;8521:26:10;;;;;;;;8558:37;12431:91;14:548:28;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:196::-;635:20;;-1:-1:-1;;;;;684:54:28;;674:65;;664:93;;753:1;750;743:12;664:93;567:196;;;:::o;768:254::-;836:6;844;897:2;885:9;876:7;872:23;868:32;865:52;;;913:1;910;903:12;865:52;936:29;955:9;936:29;:::i;:::-;926:39;1012:2;997:18;;;;984:32;;-1:-1:-1;;;768:254:28:o;1401:328::-;1478:6;1486;1494;1547:2;1535:9;1526:7;1522:23;1518:32;1515:52;;;1563:1;1560;1553:12;1515:52;1586:29;1605:9;1586:29;:::i;:::-;1576:39;;1634:38;1668:2;1657:9;1653:18;1634:38;:::i;:::-;1624:48;;1719:2;1708:9;1704:18;1691:32;1681:42;;1401:328;;;;;:::o;1923:186::-;1982:6;2035:2;2023:9;2014:7;2010:23;2006:32;2003:52;;;2051:1;2048;2041:12;2003:52;2074:29;2093:9;2074:29;:::i;:::-;2064:39;1923:186;-1:-1:-1;;;1923:186:28:o;2114:260::-;2182:6;2190;2243:2;2231:9;2222:7;2218:23;2214:32;2211:52;;;2259:1;2256;2249:12;2211:52;2282:29;2301:9;2282:29;:::i;:::-;2272:39;;2330:38;2364:2;2353:9;2349:18;2330:38;:::i;:::-;2320:48;;2114:260;;;;;:::o;2379:437::-;2458:1;2454:12;;;;2501;;;2522:61;;2576:4;2568:6;2564:17;2554:27;;2522:61;2629:2;2621:6;2618:14;2598:18;2595:38;2592:218;;-1:-1:-1;;;2663:1:28;2656:88;2767:4;2764:1;2757:15;2795:4;2792:1;2785:15;2592:218;;2379:437;;;:::o;2821:279::-;2886:9;;;2907:10;;;2904:190;;;-1:-1:-1;;;2947:1:28;2940:88;3051:4;3048:1;3041:15;3079:4;3076:1;3069:15"},"gasEstimates":{"creation":{"codeDepositCost":"478000","executionCost":"511","totalCost":"478511"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24651","balanceOf(address)":"2582","decimals()":"244","decreaseAllowance(address,uint256)":"26922","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2304","transfer(address,uint256)":"51103","transferFrom(address,address,uint256)":"infinite"},"internal":{"__ERC20_init(string memory,string memory)":"infinite","__ERC20_init_unchained(string memory,string memory)":"infinite","_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3176,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1478,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":1484,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1486,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":1488,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":1490,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":2070,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol":{"ERC20PermitUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:storage-size":"51","details":"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"_PERMIT_TYPEHASH_DEPRECATED_SLOT":{"custom:oz-renamed-from":"_PERMIT_TYPEHASH","details":"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","eip712Domain()":"84b0196e","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:storage-size\":\"51\",\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":\"ERC20PermitUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3d159b9049d4ef465c1fb41f7ff7620f18f52bf6f8f3018bae4ed95c2df537d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x7077d7f3369b21f286840c0d69b09a8a6d3d6e522fff67bfc240fd0a6cdf178c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3176,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1478,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":1484,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1486,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":1488,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":1490,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":2070,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":3975,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_hashedName","offset":0,"slot":"101","type":"t_bytes32"},{"astId":3978,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_hashedVersion","offset":0,"slot":"102","type":"t_bytes32"},{"astId":3980,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_name","offset":0,"slot":"103","type":"t_string_storage"},{"astId":3982,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_version","offset":0,"slot":"104","type":"t_string_storage"},{"astId":4240,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)48_storage"},{"astId":2176,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_nonces","offset":0,"slot":"153","type":"t_mapping(t_address,t_struct(Counter)3183_storage)"},{"astId":2184,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"154","type":"t_bytes32"},{"astId":2340,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)48_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[48]","numberOfBytes":"1536"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)3183_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CountersUpgradeable.Counter)","numberOfBytes":"32","value":"t_struct(Counter)3183_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)3183_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":3182,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"IERC20MetadataUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ec55c5df57ec6ba74605bc9caa16c752080f5250f82b5bc16e3acc4e29eeb22264736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC SSTORE 0xC5 0xDF JUMPI 0xEC PUSH12 0xA74605BC9CAA16C752080F52 POP 0xF8 0x2B JUMPDEST 0xC1 PUSH15 0x3ACC4E29EEB22264736F6C63430008 XOR STOP CALLER ","sourceMap":"734:6366:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;734:6366:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ec55c5df57ec6ba74605bc9caa16c752080f5250f82b5bc16e3acc4e29eeb22264736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC SSTORE 0xC5 0xDF JUMPI 0xEC PUSH12 0xA74605BC9CAA16C752080F52 POP 0xF8 0x2B JUMPDEST 0xC1 PUSH15 0x3ACC4E29EEB22264736F6C63430008 XOR STOP CALLER ","sourceMap":"734:6366:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)":"infinite","forceApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol":{"IERC721ReceiverUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":\"IERC721ReceiverUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209b17191ca208caf4216d85fe750086ba2ee5c5ea8b11ed253992668203099eee64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP12 OR NOT SHR LOG2 ADDMOD 0xCA DELEGATECALL 0x21 PUSH14 0x85FE750086BA2EE5C5EA8B11ED25 CODECOPY SWAP3 PUSH7 0x8203099EEE6473 PUSH16 0x6C634300081800330000000000000000 ","sourceMap":"194:9180:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209b17191ca208caf4216d85fe750086ba2ee5c5ea8b11ed253992668203099eee64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP12 OR NOT SHR LOG2 ADDMOD 0xCA DELEGATECALL 0x21 PUSH14 0x85FE750086BA2EE5C5EA8B11ED25 CODECOPY SWAP3 PUSH7 0x8203099EEE6473 PUSH16 0x6C634300081800330000000000000000 ","sourceMap":"194:9180:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3176,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"CountersUpgradeable":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201d45d8130fdfaf863f30f97d774b7e0752f0d0fd2e56990d532fbfe889b26a0164736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SAR GASLIMIT 0xD8 SGT 0xF 0xDF 0xAF DUP7 EXTCODEHASH ADDRESS 0xF9 PUSH30 0x774B7E0752F0D0FD2E56990D532FBFE889B26A0164736F6C634300081800 CALLER ","sourceMap":"424:982:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:982:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201d45d8130fdfaf863f30f97d774b7e0752f0d0fd2e56990d532fbfe889b26a0164736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SAR GASLIMIT 0xD8 SGT 0xF 0xDF 0xAF DUP7 EXTCODEHASH ADDRESS 0xF9 PUSH30 0x774B7E0752F0D0FD2E56990D532FBFE889B26A0164736F6C634300081800 CALLER ","sourceMap":"424:982:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct CountersUpgradeable.Counter storage pointer)":"infinite","decrement(struct CountersUpgradeable.Counter storage pointer)":"infinite","increment(struct CountersUpgradeable.Counter storage pointer)":"infinite","reset(struct CountersUpgradeable.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203897b3210999b00f4d8cf971628113b4a6b6e0f1e648f4e1a1939b66a7a506f064736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE SWAP8 0xB3 0x21 MULMOD SWAP10 0xB0 0xF 0x4D DUP13 0xF9 PUSH18 0x628113B4A6B6E0F1E648F4E1A1939B66A7A5 MOD CREATE PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"1420:2696:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2696:20;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203897b3210999b00f4d8cf971628113b4a6b6e0f1e648f4e1a1939b66a7a506f064736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE SWAP8 0xB3 0x21 MULMOD SWAP10 0xB0 0xF 0x4D DUP13 0xF9 PUSH18 0x628113B4A6B6E0F1E648F4E1A1939B66A7A5 MOD CREATE PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"1420:2696:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aaa982c051bf61757bea249aef56871b89a0a64e3ba27faa6f495351ad89db7f64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAA 0xA9 DUP3 0xC0 MLOAD 0xBF PUSH2 0x757B 0xEA 0x24 SWAP11 0xEF JUMP DUP8 SHL DUP10 LOG0 0xA6 0x4E EXTCODESIZE LOG2 PUSH32 0xAA6F495351AD89DB7F64736F6C63430008180033000000000000000000000000 ","sourceMap":"242:2603:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;242:2603:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aaa982c051bf61757bea249aef56871b89a0a64e3ba27faa6f495351ad89db7f64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAA 0xA9 DUP3 0xC0 MLOAD 0xBF PUSH2 0x757B 0xEA 0x24 SWAP11 0xEF JUMP DUP8 SHL DUP10 LOG0 0xA6 0x4E EXTCODESIZE LOG2 PUSH32 0xAA6F495351AD89DB7F64736F6C63430008180033000000000000000000000000 ","sourceMap":"242:2603:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122057195d660aa5f1a3363209640d896f0f451ccf8a2aaedb7301807502a210def264736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI NOT TSTORE PUSH7 0xAA5F1A3363209 PUSH5 0xD896F0F45 SHR 0xCF DUP11 0x2A 0xAE 0xDB PUSH20 0x1807502A210DEF264736F6C6343000818003300 ","sourceMap":"380:8783:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;380:8783:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122057195d660aa5f1a3363209640d896f0f451ccf8a2aaedb7301807502a210def264736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI NOT TSTORE PUSH7 0xAA5F1A3363209 PUSH5 0xD896F0F45 SHR 0xCF DUP11 0x2A 0xAE 0xDB PUSH20 0x1807502A210DEF264736F6C6343000818003300 ","sourceMap":"380:8783:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"EIP712Upgradeable":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"custom:storage-size":"52","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._","events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"_hashedName":{"custom:oz-renamed-from":"_HASHED_NAME"},"_hashedVersion":{"custom:oz-renamed-from":"_HASHED_VERSION"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:storage-size\":\"52\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"_hashedName\":{\"custom:oz-renamed-from\":\"_HASHED_NAME\"},\"_hashedVersion\":{\"custom:oz-renamed-from\":\"_HASHED_VERSION\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x7077d7f3369b21f286840c0d69b09a8a6d3d6e522fff67bfc240fd0a6cdf178c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3975,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_hashedName","offset":0,"slot":"1","type":"t_bytes32"},{"astId":3978,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_hashedVersion","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3980,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3982,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_version","offset":0,"slot":"4","type":"t_string_storage"},{"astId":4240,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"__gap","offset":0,"slot":"5","type":"t_array(t_uint256)48_storage"}],"types":{"t_array(t_uint256)48_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[48]","numberOfBytes":"1536"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122063d678dab55858e3994864e0ca5e9fc2a3be83eed6315a430d5c9298cb1031fe64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0xD678DAB5 PC PC 0xE3 SWAP10 BASEFEE PUSH5 0xE0CA5E9FC2 LOG3 0xBE DUP4 0xEE 0xD6 BALANCE GAS NUMBER 0xD TLOAD SWAP3 SWAP9 0xCB LT BALANCE INVALID PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"202:12593:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12593:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122063d678dab55858e3994864e0ca5e9fc2a3be83eed6315a430d5c9298cb1031fe64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0xD678DAB5 PC PC 0xE3 SWAP10 BASEFEE PUSH5 0xE0CA5E9FC2 LOG3 0xBE DUP4 0xEE 0xD6 BALANCE GAS NUMBER 0xD TLOAD SWAP3 SWAP9 0xCB LT BALANCE INVALID PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"202:12593:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol":{"SafeMathUpgradeable":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207f92e5e359e940cd3026bb684be9c1ebb6fe0513f9a40ea533b3a3583aa6c6fc64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x92E5E359E940CD3026BB684BE9C1EBB6FE0513F9A40EA533B3A3583AA6C6FC64 PUSH20 0x6F6C634300081800330000000000000000000000 ","sourceMap":"482:6221:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6221:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207f92e5e359e940cd3026bb684be9c1ebb6fe0513f9a40ea533b3a3583aa6c6fc64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x92E5E359E940CD3026BB684BE9C1EBB6FE0513F9A40EA533B3A3583AA6C6FC64 PUSH20 0x6F6C634300081800330000000000000000000000 ","sourceMap":"482:6221:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":\"SafeMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1561a6950b1aaa504c8f81b7d46bccfa77ccd10de3eb865cf34b1acd5ad505e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ad8eccbbc84e5ab6aec0572bd7023c2e43dc3391d56770f991cea52f17c137c64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP11 0xD8 0xEC 0xCB 0xBC DUP5 0xE5 0xAB PUSH11 0xEC0572BD7023C2E43DC339 SAR JUMP PUSH24 0xF991CEA52F17C137C64736F6C6343000818003300000000 ","sourceMap":"215:1058:26:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1058:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ad8eccbbc84e5ab6aec0572bd7023c2e43dc3391d56770f991cea52f17c137c64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP11 0xD8 0xEC 0xCB 0xBC DUP5 0xE5 0xAB PUSH11 0xEC0572BD7023C2E43DC339 SAR JUMP PUSH24 0xF991CEA52F17C137C64736F6C6343000818003300000000 ","sourceMap":"215:1058:26:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/HatcherV1.sol":{"HatcherV1":{"abi":[{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sentToUser","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"DeListedAPlanet","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20Upgradeable","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20PaymentReleased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sentFromUser","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ListedAPlanet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"string","name":"typeOfReceival","type":"string"}],"name":"NftReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"PayeeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PaymentReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PaymentReleased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"planetAsking","type":"uint256"},{"indexed":false,"internalType":"address","name":"askingUser","type":"address"},{"indexed":false,"internalType":"uint256","name":"planetJoining","type":"uint256"},{"indexed":false,"internalType":"address","name":"joiningUser","type":"address"}],"name":"PlanetsConjoining","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"approveForAllAsOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"newVRF","type":"uint256"}],"name":"changeVRFValue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"checkApprovalForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"claimablePlanets","outputs":[{"internalType":"address","name":"ownerParentAddress","type":"address"},{"internalType":"uint256","name":"ownerTokenId","type":"uint256"},{"internalType":"bool","name":"delivered","type":"bool"},{"internalType":"address","name":"otherParent","type":"address"},{"internalType":"uint256","name":"otherTokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"claimableTokenIdToOwnerAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"yourPlanet","type":"uint256"},{"internalType":"uint256","name":"withListedPlanet","type":"uint256"}],"name":"conjunct","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"idIndex","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"deList","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deListAllYourPlanets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllPlanets","outputs":[{"components":[{"internalType":"uint256","name":"planet","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"ownerAddress","type":"address"}],"internalType":"struct ListedPlanet[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"startIndex","type":"uint256"},{"internalType":"uint256","name":"endIndex","type":"uint256"}],"name":"getPlanetsPaginated","outputs":[{"components":[{"internalType":"uint256","name":"planet","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"ownerAddress","type":"address"}],"internalType":"struct ListedPlanet[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"listAllYourPlanets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"payee","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"releasable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20Upgradeable","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"releasable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"account","type":"address"}],"name":"release","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20Upgradeable","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"release","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20Upgradeable","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"released","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"released","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_breederContractAddr","type":"address"},{"internalType":"uint256","name":"_vrfValue","type":"uint256"},{"internalType":"address","name":"_nftContractAddr","type":"address"}],"name":"setAllOf","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"newTAdd","type":"address"}],"name":"setTAdd","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"shares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"status","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20Upgradeable","name":"token","type":"address"}],"name":"totalReleased","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalReleased","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userToListedPlanets","outputs":[{"internalType":"uint256","name":"planet","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"ownerAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Caecus","custom:security-contact":"security@earnalliance.com","details":"Contract is liable to be updated without warningHomo faber suae quisque fortunae","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize()":{"details":"implements EIP712, is upgradeable, pausable, burn function is custom to save space"},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"owner()":{"details":"Returns the address of the current owner."},"pause()":{"details":"can only be called by owner"},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"payee(uint256)":{"details":"Getter for the address of the payee number `index`."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"releasable(address)":{"details":"Getter for the amount of payee's releasable Ether."},"releasable(address,address)":{"details":"Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract."},"release(address)":{"details":"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."},"release(address,address)":{"details":"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."},"released(address)":{"details":"Getter for the amount of Ether already released to a payee."},"released(address,address)":{"details":"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setTAdd(address)":{"params":{"newTAdd":"the address that the owner would like the new URI to be"}},"shares(address)":{"details":"Getter for the amount of shares held by an account."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalReleased()":{"details":"Getter for the total amount of Ether already released."},"totalReleased(address)":{"details":"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."},"totalShares()":{"details":"Getter for the total shares held by payees."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{"details":"can only be called by owner"},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"withdrawFunds()":{"details":"utility function only, shouldn't need to be used."}},"title":"HatcherGG","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0x473B PUSH2 0x4C PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x11E9 ADD MSTORE DUP2 DUP2 PUSH2 0x126E ADD MSTORE DUP2 DUP2 PUSH2 0x1591 ADD MSTORE DUP2 DUP2 PUSH2 0x1616 ADD MSTORE PUSH2 0x16FC ADD MSTORE PUSH2 0x473B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x1BB JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xA07 JUMPI DUP1 PUSH4 0xE22AECB4 EQ PUSH2 0xA4D JUMPI DUP1 PUSH4 0xE33B7DE3 EQ PUSH2 0xAA8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xABE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x990 JUMPI DUP1 PUSH4 0xD79779B2 EQ PUSH2 0x9B0 JUMPI DUP1 PUSH4 0xDD22A9C7 EQ PUSH2 0x9E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCBDF1B5A GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCBDF1B5A EQ PUSH2 0x8F9 JUMPI DUP1 PUSH4 0xCDB82A37 EQ PUSH2 0x919 JUMPI DUP1 PUSH4 0xCE7C2AC2 EQ PUSH2 0x939 JUMPI DUP1 PUSH4 0xD28EB2DC EQ PUSH2 0x970 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x899 JUMPI DUP1 PUSH4 0xC45AC050 EQ PUSH2 0x8B9 JUMPI DUP1 PUSH4 0xC7C0E6B1 EQ PUSH2 0x8D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x85FE7243 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x80D JUMPI DUP1 PUSH4 0x9852595C EQ PUSH2 0x822 JUMPI DUP1 PUSH4 0xA3F8EACE EQ PUSH2 0x859 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x879 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x85FE7243 EQ PUSH2 0x78A JUMPI DUP1 PUSH4 0x8B83209B EQ PUSH2 0x7CE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8230A784 GT PUSH2 0x195 JUMPI DUP1 PUSH4 0x8230A784 EQ PUSH2 0x74F JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x762 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x705 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH2 0x28A JUMPI DUP1 PUSH4 0x4A02099B GT PUSH2 0x233 JUMPI DUP1 PUSH4 0x52D1902D GT PUSH2 0x20D JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x68D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0x6A23BEFB EQ PUSH2 0x6BA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x6CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A02099B EQ PUSH2 0x65A JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x67A JUMPI DUP1 PUSH4 0x50842CF3 EQ PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x264 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0x406072A9 EQ PUSH2 0x5F3 JUMPI DUP1 PUSH4 0x48B75044 EQ PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x588 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x5A8 JUMPI DUP1 PUSH4 0x3A98EF39 EQ PUSH2 0x5C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1AC9A91E GT PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x24600FC3 GT PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x515 JUMPI DUP1 PUSH4 0x25947818 EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x557 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1AC9A91E EQ PUSH2 0x4D4 JUMPI DUP1 PUSH4 0x200D2ED2 EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x150B7A02 GT PUSH2 0x328 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0x19165587 EQ PUSH2 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x64DB874 EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x397 JUMPI PUSH32 0x6EF95F06320E7A25A04A175CA677B7052BDD97131872C2192525A629F51BE770 CALLER PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLVALUE PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D3 PUSH2 0x3B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D9D JUMP JUMPDEST PUSH2 0x1CC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x405 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E7 SWAP2 SWAP1 PUSH2 0x3E06 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x42D CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0xB70 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x462 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x3F3B JUMP JUMPDEST PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCB SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x4CD CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0xE26 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0xF9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x510 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FC4 JUMP JUMPDEST PUSH2 0xFAA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0xFCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH2 0x545 CALLDATASIZE PUSH1 0x4 PUSH2 0x4005 JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E7 SWAP2 SWAP1 PUSH2 0x4027 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x11D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x5A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x11DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x5C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x135A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 SLOAD PUSH2 0x4A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x1399 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x60E CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x168 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x655 CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH2 0x13A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x675 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C2 JUMP JUMPDEST PUSH2 0x1540 JUMP JUMPDEST PUSH2 0x4D2 PUSH2 0x688 CALLDATASIZE PUSH1 0x4 PUSH2 0x4104 JUMP JUMPDEST PUSH2 0x1587 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x699 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x16EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0xFF AND PUSH2 0x432 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH2 0x17B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x6EA CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x1837 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x726 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x735 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x1849 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x746 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x1868 JUMP JUMPDEST PUSH2 0x4D2 PUSH2 0x75D CALLDATASIZE PUSH1 0x4 PUSH2 0x4005 JUMP JUMPDEST PUSH2 0x1997 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x777 PUSH2 0x1CB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E7 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4154 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7AA PUSH2 0x7A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x1D74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D3 PUSH2 0x7E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D9D JUMP JUMPDEST PUSH2 0x1DC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x194 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x405 PUSH2 0x1DF1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x83D CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x165 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x865 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x874 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x1E00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x885 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x894 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x1E4A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x8B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x1EF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x8D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH2 0x1F02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x8F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D9D JUMP JUMPDEST PUSH2 0x1FE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x905 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x914 CALLDATASIZE PUSH1 0x4 PUSH2 0x4005 JUMP JUMPDEST PUSH2 0x1FF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x934 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x219D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x954 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x164 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x98B CALLDATASIZE PUSH1 0x4 PUSH2 0x4217 JUMP JUMPDEST PUSH2 0x21D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x99C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x9AB CALLDATASIZE PUSH1 0x4 PUSH2 0x4245 JUMP JUMPDEST PUSH2 0x225E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x9CB CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x167 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0xA02 CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH2 0x23C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0xA22 CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA6D PUSH2 0xA68 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x2453 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP3 ISZERO ISZERO SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP3 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 SLOAD PUSH2 0x4A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xACA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0xAD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x24B3 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xCC DUP1 SLOAD PUSH2 0xAED SWAP1 PUSH2 0x42BC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB19 SWAP1 PUSH2 0x42BC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB66 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB3B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB66 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB49 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xB7E DUP2 DUP6 DUP6 PUSH2 0x2540 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ISZERO DUP1 ISZERO PUSH2 0xBA8 JUMPI POP PUSH2 0x1C8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0xD33 JUMPI PUSH2 0x1C8 SLOAD PUSH1 0x40 MLOAD PUSH32 0xDC9CE7A500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDC9CE7A5 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xC39 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4370 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x120 ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1CC PUSH1 0x0 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC60 JUMPI PUSH2 0xC60 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH2 0x1CC PUSH1 0x0 DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP4 MSTORE AND SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH2 0xCEC DUP2 PUSH2 0x2698 JUMP JUMPDEST PUSH32 0x13C6EC2A463A35F898A457814A782F1F567808293FA783A31FA4DAC8868E6011 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0xD21 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x44A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP PUSH2 0xDFB JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 ISZERO PUSH2 0xD52 JUMPI POP PUSH2 0x1C8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0xDBD JUMPI PUSH1 0x0 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD6D SWAP2 SWAP1 PUSH2 0x4519 JUMP JUMPDEST SWAP1 POP PUSH2 0xD7A DUP5 DUP3 DUP8 PUSH2 0x2907 JUMP JUMPDEST PUSH32 0x13C6EC2A463A35F898A457814A782F1F567808293FA783A31FA4DAC8868E6011 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xDAF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4532 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH2 0xDFB JUMP JUMPDEST PUSH32 0x13C6EC2A463A35F898A457814A782F1F567808293FA783A31FA4DAC8868E6011 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xDF2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x45A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x164 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xEA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E7420686173206E6F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x736861726573 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP3 PUSH2 0x1E00 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xF11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E74206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x191D59481C185E5B595B9D PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST DUP1 PUSH2 0x163 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF24 SWAP2 SWAP1 PUSH2 0x4630 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x165 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0xF52 DUP3 DUP3 PUSH2 0x2A53 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xDF20FD1E76BC69D672E4814FAFB2C449BBA3A5369D8359ADF9E05E6FDE87B056 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xFA2 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0xF98 PUSH2 0x2BC7 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xFB8 DUP6 DUP3 DUP6 PUSH2 0x2C21 JUMP JUMPDEST PUSH2 0xFC3 DUP6 DUP6 DUP6 PUSH2 0x2CAD JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xFD6 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0xFDE PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 DUP2 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x100C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 GT PUSH2 0x1061 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420696E64657800000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x1CB SLOAD DUP3 GT ISZERO PUSH2 0x10B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C0 DUP5 DUP5 PUSH2 0x4643 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10D8 JUMPI PUSH2 0x10D8 PUSH2 0x3E5A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1136 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1123 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x10F6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11C8 JUMPI PUSH2 0x1CB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1157 JUMPI PUSH2 0x1157 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x3 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 PUSH2 0x11A5 DUP8 DUP5 PUSH2 0x4643 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x11B5 JUMPI PUSH2 0x11B5 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x113B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11DA PUSH2 0x2EF4 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x126C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12C7 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1332 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x133B DUP2 PUSH2 0x2EFE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1357 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x2F06 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0xB7E SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x1394 SWAP1 DUP8 SWAP1 PUSH2 0x4630 JUMP JUMPDEST PUSH2 0x2540 JUMP JUMPDEST PUSH2 0x13A1 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0xF98 PUSH2 0x30A6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x164 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x141E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E7420686173206E6F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x736861726573 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x142A DUP4 DUP4 PUSH2 0x1F02 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x1490 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E74206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x191D59481C185E5B595B9D PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x167 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x14B9 SWAP1 DUP5 SWAP1 PUSH2 0x4630 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x168 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x14F5 DUP4 DUP4 DUP4 PUSH2 0x30DF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE DUP6 AND SWAP2 PUSH32 0x3BE5B7A71E84ED12875D241991C70855AC5817D847039E17A9D895C1CEB0F18A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1548 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0x1550 PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x1C9 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x1C6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH2 0x1C8 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x1614 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x166F PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x16DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x16E3 DUP3 PUSH2 0x2EFE JUMP JUMPDEST PUSH2 0x100C DUP3 DUP3 PUSH1 0x1 PUSH2 0x2F06 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x178F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1CB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x182E JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x3 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP1 DUP3 ADD SLOAD DUP5 DUP7 ADD MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x17D9 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x183F PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0xF98 PUSH1 0x0 PUSH2 0x315F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xB84 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1888 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x18A2 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18A2 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x1914 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1937 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x193F PUSH2 0x31B2 JUMP JUMPDEST PUSH2 0x1947 PUSH2 0x3225 JUMP JUMPDEST PUSH2 0x194F PUSH2 0x3298 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1357 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x199F PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x19AD DUP5 PUSH2 0x3303 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C9 SLOAD PUSH2 0x19BE SWAP2 SWAP1 PUSH2 0x4630 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x19CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH2 0x1CB SLOAD DUP2 LT ISZERO PUSH2 0x1A45 JUMPI DUP6 PUSH2 0x1CB DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x19EE JUMPI PUSH2 0x19EE PUSH2 0x448F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1A3D JUMPI PUSH2 0x1CB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1A19 JUMPI PUSH2 0x1A19 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 PUSH1 0x3 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x1A45 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x19CE JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0xB SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A94 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A99 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1AEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F2073656E64204574686572000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x1C6 SLOAD PUSH1 0x40 MLOAD PUSH32 0xBF0E57A300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x44 DUP3 ADD MSTORE CALLVALUE PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xBF0E57A3 SWAP1 PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B63 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B87 SWAP2 SWAP1 PUSH2 0x4519 JUMP JUMPDEST POP DUP2 PUSH2 0x1C9 SLOAD PUSH2 0x1B97 SWAP2 SWAP1 PUSH2 0x4630 JUMP JUMPDEST CALLVALUE GT ISZERO PUSH2 0x1C58 JUMPI PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1C9 SLOAD CALLVALUE PUSH2 0x1BBA SWAP2 SWAP1 PUSH2 0x4643 JUMP JUMPDEST PUSH2 0x1BC4 SWAP2 SWAP1 PUSH2 0x4643 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C00 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C05 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1C56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F20726566756E6420657863657373204574686572000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP2 DUP4 ADD DUP11 SWAP1 MSTORE DUP8 AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 MLOAD PUSH32 0x8557DF6951FBDD47FE9027516FC896BE40F285ED55A6ACAC460352ADBAB730CD SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0xFB SLOAD PUSH1 0x0 DUP1 SHL EQ DUP1 ISZERO PUSH2 0x1CD2 JUMPI POP PUSH1 0xFC SLOAD ISZERO JUMPDEST PUSH2 0x1D1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4549503731323A20556E696E697469616C697A65640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x1D26 PUSH2 0x33A4 JUMP JUMPDEST PUSH2 0x1D2E PUSH2 0x33B3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH2 0x1CA PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1D91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x166 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1DD6 JUMPI PUSH2 0x1DD6 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xCD DUP1 SLOAD PUSH2 0xAED SWAP1 PUSH2 0x42BC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E0D PUSH2 0x163 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1E17 SWAP1 SELFBALANCE PUSH2 0x4630 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E43 DUP4 DUP3 PUSH2 0x1E3E DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x165 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x33C2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x1EE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xFC3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x2540 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xB7E DUP2 DUP6 DUP6 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x167 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F9F SWAP2 SWAP1 PUSH2 0x4519 JUMP JUMPDEST PUSH2 0x1FA9 SWAP2 SWAP1 PUSH2 0x4630 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x168 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xE1E SWAP1 DUP5 SWAP1 DUP4 SWAP1 PUSH2 0x33C2 JUMP JUMPDEST PUSH2 0x1FE8 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0x1FF0 PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x1C9 SSTORE JUMP JUMPDEST PUSH2 0x1FFE PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x1CB SLOAD DUP3 LT PUSH2 0x2050 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 PUSH2 0x1CB DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x206B JUMPI PUSH2 0x206B PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x3 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 POP CALLER EQ PUSH2 0x20BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x1CB DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x20F5 JUMPI PUSH2 0x20F5 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 SSTORE SWAP1 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2147 DUP4 DUP4 PUSH2 0x3402 JUMP JUMPDEST PUSH2 0x1C8 SLOAD DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP3 MSTORE SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0xECE05E698E9E143FB75B2AD0ABA7F141238C27B6D3E9728898183EE0D68498B SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x21A5 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0x21AD PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x1C7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x21D8 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0x1C8 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA22CB46500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA22CB465 SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2256 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x22AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x22DD DUP13 PUSH2 0x345B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x2338 DUP3 PUSH2 0x3482 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2348 DUP3 DUP8 DUP8 DUP8 PUSH2 0x34CA JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x23AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x23B6 DUP11 DUP11 DUP11 PUSH2 0x2540 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1C8 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xE985E9C5 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x242F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E43 SWAP2 SWAP1 PUSH2 0x4656 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x2470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP6 POP SWAP1 SWAP4 POP PUSH1 0xFF DUP4 AND SWAP3 PUSH2 0x100 SWAP1 DIV SWAP1 SWAP2 AND SWAP1 DUP6 JUMP JUMPDEST PUSH2 0x24BB PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x1357 DUP2 PUSH2 0x315F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x25BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2637 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD ISZERO PUSH2 0x279B JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2795 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP5 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x2714 JUMPI PUSH2 0x2714 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x278D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x276A JUMPI PUSH2 0x276A PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x26C3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x2894 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2795 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x2813 JUMPI PUSH2 0x2813 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x288C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x2869 JUMPI PUSH2 0x2869 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x27C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x706C616E65742073656E7420657272616E746C792C206E6F206F6E6520746F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636C61696D000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE DUP6 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP6 DUP8 ADD DUP2 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH2 0x1CA DUP6 MSTORE DUP8 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP5 MSTORE DUP7 DUP5 KECCAK256 DUP10 MLOAD PUSH1 0x3 SWAP3 DUP4 MUL SWAP1 SWAP2 ADD SWAP1 DUP2 SSTORE DUP7 MLOAD DUP2 DUP5 ADD SSTORE DUP4 MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP2 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH2 0x1CB DUP1 SLOAD SWAP4 DUP5 ADD DUP2 SSTORE SWAP1 SWAP5 MSTORE DUP9 MLOAD SWAP2 MUL PUSH32 0xE8BBFECD380C4167D6A1F763A233EC73E73F534B1970C4E1683F437EC23C1F44 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP4 MLOAD PUSH32 0xE8BBFECD380C4167D6A1F763A233EC73E73F534B1970C4E1683F437EC23C1F45 DUP6 ADD SSTORE MLOAD PUSH32 0xE8BBFECD380C4167D6A1F763A233EC73E73F534B1970C4E1683F437EC23C1F46 SWAP1 SWAP4 ADD DUP1 SLOAD SWAP4 DUP4 AND SWAP4 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0x1C8 SLOAD DUP6 MLOAD CALLER DUP2 MSTORE SWAP2 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 PUSH32 0xB30319A217488A3ED441C348E935A48D16091E33109BAB0C79A353B979752883 SWAP1 PUSH1 0x80 ADD PUSH2 0x218F JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x2AA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2AF0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2902 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x194 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x2BCF PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2C04 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x2795 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x2CA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x2795 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x2540 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2DA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x2E34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x2E94 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x2795 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11DA PUSH2 0x34F2 JUMP JUMPDEST PUSH2 0x1357 PUSH2 0x2B6C JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2F39 JUMPI PUSH2 0x2902 DUP4 PUSH2 0x3566 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2F93 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2F90 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3005 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x309A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST POP PUSH2 0x2902 DUP4 DUP4 DUP4 PUSH2 0x3624 JUMP JUMPDEST PUSH2 0x30AE PUSH2 0x3649 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER PUSH2 0x2C04 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x2902 SWAP1 DUP5 SWAP1 PUSH2 0x369B JUMP JUMPDEST PUSH2 0x194 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x321D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xF98 PUSH2 0x3783 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3290 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xF98 PUSH2 0x37F7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x330D PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH2 0x1CB SLOAD DUP2 LT ISZERO PUSH2 0x339D JUMPI DUP3 PUSH2 0x1CB DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3330 JUMPI PUSH2 0x3330 PUSH2 0x448F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x0 ADD SLOAD SUB PUSH2 0x3375 JUMPI PUSH2 0x1CB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x335B JUMPI PUSH2 0x335B PUSH2 0x448F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CB SLOAD PUSH2 0x3385 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x4643 JUMP JUMPDEST DUP2 SUB PUSH2 0x3395 JUMPI POP PUSH1 0x0 NOT SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3310 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFD DUP1 SLOAD PUSH2 0xAED SWAP1 PUSH2 0x42BC JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFE DUP1 SLOAD PUSH2 0xAED SWAP1 PUSH2 0x42BC JUMP JUMPDEST PUSH2 0x162 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x164 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH2 0x33EE SWAP1 DUP7 PUSH2 0x4673 JUMP JUMPDEST PUSH2 0x33F8 SWAP2 SWAP1 PUSH2 0x468A JUMP JUMPDEST PUSH2 0xE1E SWAP2 SWAP1 PUSH2 0x4643 JUMP JUMPDEST PUSH2 0x1C8 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH2 0x2228 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 PUSH2 0x348F PUSH2 0x2EF4 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x34DB DUP8 DUP8 DUP8 DUP8 PUSH2 0x386E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x34E8 DUP2 PUSH2 0x3932 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x351D PUSH2 0x3A97 JUMP JUMPDEST PUSH2 0x3525 PUSH2 0x3AF0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x35E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x362D DUP4 PUSH2 0x3B21 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x363A JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x2902 JUMPI PUSH2 0x2795 DUP4 DUP4 PUSH2 0x3B61 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0xFF AND PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36F0 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B86 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3711 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3711 SWAP2 SWAP1 PUSH2 0x4656 JUMP JUMPDEST PUSH2 0x2902 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x37EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xF98 CALLER PUSH2 0x315F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3862 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x38A5 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x3929 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x38F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3922 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x3929 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3946 JUMPI PUSH2 0x3946 PUSH2 0x46AC JUMP JUMPDEST SUB PUSH2 0x394E JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3962 JUMPI PUSH2 0x3962 PUSH2 0x46AC JUMP JUMPDEST SUB PUSH2 0x39AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x39C3 JUMPI PUSH2 0x39C3 PUSH2 0x46AC JUMP JUMPDEST SUB PUSH2 0x3A10 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3A24 JUMPI PUSH2 0x3A24 PUSH2 0x46AC JUMP JUMPDEST SUB PUSH2 0x1357 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3AA2 PUSH2 0x33A4 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3AB9 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xFB SLOAD DUP1 ISZERO PUSH2 0x3AC8 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3AFB PUSH2 0x33B3 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3B12 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xFC SLOAD DUP1 ISZERO PUSH2 0x3AC8 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3B2A DUP2 PUSH2 0x3566 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1E43 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x46DF PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x3B95 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE1E DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x3C0D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x3BB2 SWAP2 SWAP1 PUSH2 0x46C2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3BF2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3C03 DUP7 DUP4 DUP4 DUP8 PUSH2 0x3CFF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x3C85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3CA1 SWAP2 SWAP1 PUSH2 0x46C2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3CDE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3CE3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3CF4 DUP8 DUP4 DUP4 DUP8 PUSH2 0x3CFF JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3D6E JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x3D67 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x3D67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST POP DUP2 PUSH2 0xE1E JUMP JUMPDEST PUSH2 0xE1E DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3D83 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE97 SWAP2 SWAP1 PUSH2 0x3E06 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3DAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3DD1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3DB9 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3DF2 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3DB6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1E43 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3DDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3E4C DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3E94 JUMPI PUSH2 0x3E94 PUSH2 0x3E5A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3EC3 JUMPI PUSH2 0x3EC3 PUSH2 0x3E5A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3EDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EF6 JUMPI PUSH2 0x3EF6 PUSH2 0x3E5A JUMP JUMPDEST PUSH2 0x3F09 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x3E9A JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x3F1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3F5C DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3F6C DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F9B DUP8 DUP3 DUP9 ADD PUSH2 0x3ECB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E43 DUP2 PUSH2 0x3E19 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3FD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3FE4 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3FF4 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4018 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x407C JUMPI DUP2 MLOAD DUP1 MLOAD DUP6 MSTORE DUP7 DUP2 ADD MLOAD DUP8 DUP7 ADD MSTORE DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 ADD MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4044 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x409C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x40A7 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x40B7 DUP2 PUSH2 0x3E19 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x40D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x40E2 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x40F9 DUP2 PUSH2 0x3E19 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4122 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x413E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x414A DUP6 DUP3 DUP7 ADD PUSH2 0x3ECB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4191 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x3DDA JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x41A3 DUP2 DUP11 PUSH2 0x3DDA JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x41F7 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x41DB JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x422A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4235 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x40B7 DUP2 PUSH2 0x4209 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x4260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x426B DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x427B DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x429F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x42D0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x339D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x431D JUMPI PUSH2 0x431D PUSH2 0x3E5A JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x432C DUP3 DUP3 ADD PUSH2 0x3E9A JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x4346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x3CF4 JUMPI DUP3 MLOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x434C JUMP JUMPDEST DUP1 MLOAD PUSH2 0x339F DUP2 PUSH2 0x4209 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x439B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH2 0x160 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x43B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43B8 PUSH2 0x3E70 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x4416 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4422 DUP10 DUP3 DUP8 ADD PUSH2 0x42F0 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x443C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4448 DUP10 DUP3 DUP8 ADD PUSH2 0x42F0 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x4462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x446E DUP10 DUP3 DUP8 ADD PUSH2 0x42F0 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP DUP1 SWAP5 POP POP POP POP PUSH2 0x4486 PUSH1 0x20 DUP5 ADD PUSH2 0x4365 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x44D7 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3DDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA DUP2 MSTORE PUSH32 0x6E657720706C616E657400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x452B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4564 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3DDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x6C697374696E6720706C616E6574000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x45D8 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3DDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xD DUP2 MSTORE PUSH32 0x756E63617465676F72697A656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xB84 JUMPI PUSH2 0xB84 PUSH2 0x461A JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xB84 JUMPI PUSH2 0xB84 PUSH2 0x461A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1E43 DUP2 PUSH2 0x4209 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xB84 JUMPI PUSH2 0xB84 PUSH2 0x461A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x46A7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x46D4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3DB6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212204E2DD2 DUP4 PREVRANDAO EQ 0xA9 SLT 0x24 JUMPDEST 0xD0 DUP11 MUL 0x1E 0xB0 MLOAD PUSH24 0xB40F85244D110B253F1674DE2C4A4D64736F6C6343000818 STOP CALLER ","sourceMap":"2379:11970:27:-:0;;;1198:4:8;1155:48;;2379:11970:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DOMAIN_SEPARATOR_2306":{"entryPoint":4560,"id":2306,"parameterSlots":0,"returnSlots":1},"@_279":{"entryPoint":null,"id":279,"parameterSlots":0,"returnSlots":0},"@_EIP712NameHash_4190":{"entryPoint":14999,"id":4190,"parameterSlots":0,"returnSlots":1},"@_EIP712Name_4136":{"entryPoint":13220,"id":4136,"parameterSlots":0,"returnSlots":1},"@_EIP712VersionHash_4235":{"entryPoint":15088,"id":4235,"parameterSlots":0,"returnSlots":1},"@_EIP712Version_4145":{"entryPoint":13235,"id":4145,"parameterSlots":0,"returnSlots":1},"@__Ownable_init_27":{"entryPoint":12722,"id":27,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_38":{"entryPoint":14211,"id":38,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_1362":{"entryPoint":12837,"id":1362,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_1372":{"entryPoint":14327,"id":1372,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_1257":{"entryPoint":12952,"id":1257,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_2065":{"entryPoint":null,"id":2065,"parameterSlots":3,"returnSlots":0},"@_approve_2000":{"entryPoint":9536,"id":2000,"parameterSlots":3,"returnSlots":0},"@_authorizeUpgrade_6566":{"entryPoint":12030,"id":6566,"parameterSlots":1,"returnSlots":0},"@_beforeTokenTransfer_2054":{"entryPoint":null,"id":2054,"parameterSlots":3,"returnSlots":0},"@_buildDomainSeparator_4057":{"entryPoint":13554,"id":4057,"parameterSlots":0,"returnSlots":1},"@_callOptionalReturn_2729":{"entryPoint":13979,"id":2729,"parameterSlots":2,"returnSlots":0},"@_checkOwner_69":{"entryPoint":11116,"id":69,"parameterSlots":0,"returnSlots":0},"@_domainSeparatorV4_4034":{"entryPoint":12020,"id":4034,"parameterSlots":0,"returnSlots":1},"@_getImplementation_735":{"entryPoint":null,"id":735,"parameterSlots":0,"returnSlots":1},"@_hashTypedDataV4_4073":{"entryPoint":13442,"id":4073,"parameterSlots":1,"returnSlots":1},"@_msgSender_3154":{"entryPoint":null,"id":3154,"parameterSlots":0,"returnSlots":1},"@_pause_1436":{"entryPoint":11207,"id":1436,"parameterSlots":0,"returnSlots":0},"@_pendingPayment_569":{"entryPoint":13250,"id":569,"parameterSlots":3,"returnSlots":1},"@_requireNotPaused_1409":{"entryPoint":11937,"id":1409,"parameterSlots":0,"returnSlots":0},"@_requirePaused_1420":{"entryPoint":13897,"id":1420,"parameterSlots":0,"returnSlots":0},"@_revert_3125":{"entryPoint":null,"id":3125,"parameterSlots":2,"returnSlots":0},"@_sendNFT_6467":{"entryPoint":13314,"id":6467,"parameterSlots":2,"returnSlots":0},"@_setImplementation_759":{"entryPoint":13670,"id":759,"parameterSlots":1,"returnSlots":0},"@_spendAllowance_2043":{"entryPoint":11297,"id":2043,"parameterSlots":3,"returnSlots":0},"@_throwError_3644":{"entryPoint":14642,"id":3644,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_126":{"entryPoint":12639,"id":126,"parameterSlots":1,"returnSlots":0},"@_transfer_1826":{"entryPoint":11437,"id":1826,"parameterSlots":3,"returnSlots":0},"@_unpause_1452":{"entryPoint":12454,"id":1452,"parameterSlots":0,"returnSlots":0},"@_upgradeToAndCallUUPS_857":{"entryPoint":12038,"id":857,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_804":{"entryPoint":13860,"id":804,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_774":{"entryPoint":15137,"id":774,"parameterSlots":1,"returnSlots":0},"@_useNonce_2335":{"entryPoint":13403,"id":2335,"parameterSlots":1,"returnSlots":1},"@allowance_1621":{"entryPoint":null,"id":1621,"parameterSlots":2,"returnSlots":1},"@approveForAllAsOwner_6513":{"entryPoint":8656,"id":6513,"parameterSlots":2,"returnSlots":0},"@approve_1646":{"entryPoint":2928,"id":1646,"parameterSlots":2,"returnSlots":1},"@balanceOf_1578":{"entryPoint":null,"id":1578,"parameterSlots":1,"returnSlots":1},"@changeVRFValue_5818":{"entryPoint":8160,"id":5818,"parameterSlots":1,"returnSlots":0},"@checkApprovalForAll_6529":{"entryPoint":9154,"id":6529,"parameterSlots":2,"returnSlots":1},"@claimablePlanets_5739":{"entryPoint":9299,"id":5739,"parameterSlots":0,"returnSlots":0},"@claimableTokenIdToOwnerAddress_5733":{"entryPoint":null,"id":5733,"parameterSlots":0,"returnSlots":0},"@conjunct_6448":{"entryPoint":6551,"id":6448,"parameterSlots":2,"returnSlots":0},"@current_3195":{"entryPoint":null,"id":3195,"parameterSlots":1,"returnSlots":1},"@deListAllYourPlanets_6258":{"entryPoint":null,"id":6258,"parameterSlots":0,"returnSlots":0},"@deList_6254":{"entryPoint":8182,"id":6254,"parameterSlots":2,"returnSlots":0},"@decimals_1554":{"entryPoint":null,"id":1554,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1749":{"entryPoint":7754,"id":1749,"parameterSlots":2,"returnSlots":1},"@eip712Domain_4127":{"entryPoint":7346,"id":4127,"parameterSlots":0,"returnSlots":7},"@functionCallWithValue_2950":{"entryPoint":15373,"id":2950,"parameterSlots":4,"returnSlots":1},"@functionCall_2886":{"entryPoint":15238,"id":2886,"parameterSlots":3,"returnSlots":1},"@functionDelegateCall_3013":{"entryPoint":15201,"id":3013,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_3042":{"entryPoint":15253,"id":3042,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_3283":{"entryPoint":null,"id":3283,"parameterSlots":1,"returnSlots":1},"@getAllPlanets_6182":{"entryPoint":6068,"id":6182,"parameterSlots":0,"returnSlots":1},"@getBooleanSlot_3294":{"entryPoint":null,"id":3294,"parameterSlots":1,"returnSlots":1},"@getPlanetsPaginated_6172":{"entryPoint":4112,"id":6172,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1708":{"entryPoint":4954,"id":1708,"parameterSlots":2,"returnSlots":1},"@increment_3209":{"entryPoint":null,"id":3209,"parameterSlots":1,"returnSlots":0},"@initialize_5804":{"entryPoint":6248,"id":5804,"parameterSlots":0,"returnSlots":0},"@isContract_2814":{"entryPoint":null,"id":2814,"parameterSlots":1,"returnSlots":1},"@listAllYourPlanets_6186":{"entryPoint":3992,"id":6186,"parameterSlots":0,"returnSlots":0},"@list_5861":{"entryPoint":10503,"id":5861,"parameterSlots":3,"returnSlots":0},"@name_1534":{"entryPoint":2782,"id":1534,"parameterSlots":0,"returnSlots":1},"@nonces_2295":{"entryPoint":6217,"id":2295,"parameterSlots":1,"returnSlots":1},"@onERC721Received_6107":{"entryPoint":2954,"id":6107,"parameterSlots":4,"returnSlots":1},"@owner_55":{"entryPoint":null,"id":55,"parameterSlots":0,"returnSlots":1},"@pause_6486":{"entryPoint":null,"id":6486,"parameterSlots":0,"returnSlots":0},"@paused_1397":{"entryPoint":null,"id":1397,"parameterSlots":0,"returnSlots":1},"@payee_368":{"entryPoint":7616,"id":368,"parameterSlots":1,"returnSlots":1},"@permit_2279":{"entryPoint":8798,"id":2279,"parameterSlots":7,"returnSlots":0},"@priceOfListingRetrieval_6309":{"entryPoint":13059,"id":6309,"parameterSlots":1,"returnSlots":1},"@proxiableUUID_1275":{"entryPoint":5871,"id":1275,"parameterSlots":0,"returnSlots":1},"@recover_3891":{"entryPoint":13514,"id":3891,"parameterSlots":4,"returnSlots":1},"@releasable_396":{"entryPoint":7680,"id":396,"parameterSlots":1,"returnSlots":1},"@releasable_431":{"entryPoint":7938,"id":431,"parameterSlots":2,"returnSlots":1},"@release_483":{"entryPoint":3622,"id":483,"parameterSlots":1,"returnSlots":0},"@release_545":{"entryPoint":5033,"id":545,"parameterSlots":2,"returnSlots":0},"@released_337":{"entryPoint":null,"id":337,"parameterSlots":1,"returnSlots":1},"@released_355":{"entryPoint":null,"id":355,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_83":{"entryPoint":6199,"id":83,"parameterSlots":0,"returnSlots":0},"@safeTransfer_2435":{"entryPoint":12511,"id":2435,"parameterSlots":3,"returnSlots":0},"@sendValue_2848":{"entryPoint":10835,"id":2848,"parameterSlots":2,"returnSlots":0},"@setAllOf_5788":{"entryPoint":5440,"id":5788,"parameterSlots":3,"returnSlots":0},"@setDeliveryToTrue_5972":{"entryPoint":9880,"id":5972,"parameterSlots":1,"returnSlots":0},"@setTAdd_5757":{"entryPoint":8605,"id":5757,"parameterSlots":1,"returnSlots":0},"@shares_324":{"entryPoint":null,"id":324,"parameterSlots":1,"returnSlots":1},"@status_6476":{"entryPoint":3994,"id":6476,"parameterSlots":0,"returnSlots":0},"@symbol_1544":{"entryPoint":7665,"id":1544,"parameterSlots":0,"returnSlots":1},"@toTypedDataHash_3935":{"entryPoint":null,"id":3935,"parameterSlots":2,"returnSlots":1},"@totalReleased_297":{"entryPoint":null,"id":297,"parameterSlots":0,"returnSlots":1},"@totalReleased_311":{"entryPoint":null,"id":311,"parameterSlots":1,"returnSlots":1},"@totalShares_288":{"entryPoint":null,"id":288,"parameterSlots":0,"returnSlots":1},"@totalSupply_1564":{"entryPoint":null,"id":1564,"parameterSlots":0,"returnSlots":1},"@transferFrom_1679":{"entryPoint":4010,"id":1679,"parameterSlots":3,"returnSlots":1},"@transferOwnership_106":{"entryPoint":9395,"id":106,"parameterSlots":1,"returnSlots":0},"@transfer_1603":{"entryPoint":7924,"id":1603,"parameterSlots":2,"returnSlots":1},"@tryRecover_3858":{"entryPoint":14446,"id":3858,"parameterSlots":4,"returnSlots":2},"@unpause_6496":{"entryPoint":5017,"id":6496,"parameterSlots":0,"returnSlots":0},"@upgradeToAndCall_1318":{"entryPoint":5511,"id":1318,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1297":{"entryPoint":4575,"id":1297,"parameterSlots":1,"returnSlots":0},"@userToListedPlanets_5725":{"entryPoint":7540,"id":5725,"parameterSlots":0,"returnSlots":0},"@verifyCallResultFromTarget_3081":{"entryPoint":15615,"id":3081,"parameterSlots":4,"returnSlots":1},"@withdrawFunds_6556":{"entryPoint":4046,"id":6556,"parameterSlots":0,"returnSlots":0},"abi_decode_array_uint256_dyn_fromMemory":{"entryPoint":17136,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":17253,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":16075,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":16295,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":16324,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":16187,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":16965,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_bool":{"entryPoint":16919,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":16644,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":15918,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_address":{"entryPoint":16578,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":18006,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149t_address":{"entryPoint":16521,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_struct$_PlanetData_$5649_memory_ptrt_bool_fromMemory":{"entryPoint":17264,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":15773,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":17689,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":16389,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":15834,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":18114,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_023f9cd908fc44c67a48322a2e671798c9e64d33ee119cc3c32d0b4c10f8f0a4__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17714,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_91f8baf9efb51cfab6fd65a63f4dc181a441df51c27a087b6c0bda584f32be41__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17830,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_ca181fe5e4c063d04ec53e8a75cc85eb34077458a0a7c765eb51999ac22c9153__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17573,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bool_t_address_t_uint256__to_t_address_t_uint256_t_bool_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":16423,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":16724,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15878,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_32cc480c4f0e15e5ce7060ec5e004886ed5a15831cba1ff1aa7cb787be55bb60__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5406e50ea7864718d453083f078f6e8ce8b9eb471a337acbc04c0fadffe18ffe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d9cb5a535dd6e8649f5b16f2bf5320a3bd41435311ffe94f95d27e82891f029d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address_t_uint256_t_address__to_t_uint256_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_bool_t_uint256__to_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":16026,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_5211":{"entryPoint":15984,"id":null,"parameterSlots":0,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":17968,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":18058,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":18035,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":17987,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":15798,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":17084,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":17946,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":18092,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":17551,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":15962,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":15897,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":16905,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:39093:28","nodeType":"YulBlock","src":"0:39093:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"143:168:28","nodeType":"YulBlock","src":"143:168:28","statements":[{"nativeSrc":"153:26:28","nodeType":"YulAssignment","src":"153:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"165:9:28","nodeType":"YulIdentifier","src":"165:9:28"},{"kind":"number","nativeSrc":"176:2:28","nodeType":"YulLiteral","src":"176:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"161:3:28","nodeType":"YulIdentifier","src":"161:3:28"},"nativeSrc":"161:18:28","nodeType":"YulFunctionCall","src":"161:18:28"},"variableNames":[{"name":"tail","nativeSrc":"153:4:28","nodeType":"YulIdentifier","src":"153:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"195:9:28","nodeType":"YulIdentifier","src":"195:9:28"},{"arguments":[{"name":"value0","nativeSrc":"210:6:28","nodeType":"YulIdentifier","src":"210:6:28"},{"kind":"number","nativeSrc":"218:42:28","nodeType":"YulLiteral","src":"218:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"206:3:28","nodeType":"YulIdentifier","src":"206:3:28"},"nativeSrc":"206:55:28","nodeType":"YulFunctionCall","src":"206:55:28"}],"functionName":{"name":"mstore","nativeSrc":"188:6:28","nodeType":"YulIdentifier","src":"188:6:28"},"nativeSrc":"188:74:28","nodeType":"YulFunctionCall","src":"188:74:28"},"nativeSrc":"188:74:28","nodeType":"YulExpressionStatement","src":"188:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"282:9:28","nodeType":"YulIdentifier","src":"282:9:28"},{"kind":"number","nativeSrc":"293:2:28","nodeType":"YulLiteral","src":"293:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"278:3:28","nodeType":"YulIdentifier","src":"278:3:28"},"nativeSrc":"278:18:28","nodeType":"YulFunctionCall","src":"278:18:28"},{"name":"value1","nativeSrc":"298:6:28","nodeType":"YulIdentifier","src":"298:6:28"}],"functionName":{"name":"mstore","nativeSrc":"271:6:28","nodeType":"YulIdentifier","src":"271:6:28"},"nativeSrc":"271:34:28","nodeType":"YulFunctionCall","src":"271:34:28"},"nativeSrc":"271:34:28","nodeType":"YulExpressionStatement","src":"271:34:28"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"14:297:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"104:9:28","nodeType":"YulTypedName","src":"104:9:28","type":""},{"name":"value1","nativeSrc":"115:6:28","nodeType":"YulTypedName","src":"115:6:28","type":""},{"name":"value0","nativeSrc":"123:6:28","nodeType":"YulTypedName","src":"123:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"134:4:28","nodeType":"YulTypedName","src":"134:4:28","type":""}],"src":"14:297:28"},{"body":{"nativeSrc":"386:110:28","nodeType":"YulBlock","src":"386:110:28","statements":[{"body":{"nativeSrc":"432:16:28","nodeType":"YulBlock","src":"432:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"441:1:28","nodeType":"YulLiteral","src":"441:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"444:1:28","nodeType":"YulLiteral","src":"444:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"434:6:28","nodeType":"YulIdentifier","src":"434:6:28"},"nativeSrc":"434:12:28","nodeType":"YulFunctionCall","src":"434:12:28"},"nativeSrc":"434:12:28","nodeType":"YulExpressionStatement","src":"434:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"407:7:28","nodeType":"YulIdentifier","src":"407:7:28"},{"name":"headStart","nativeSrc":"416:9:28","nodeType":"YulIdentifier","src":"416:9:28"}],"functionName":{"name":"sub","nativeSrc":"403:3:28","nodeType":"YulIdentifier","src":"403:3:28"},"nativeSrc":"403:23:28","nodeType":"YulFunctionCall","src":"403:23:28"},{"kind":"number","nativeSrc":"428:2:28","nodeType":"YulLiteral","src":"428:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"399:3:28","nodeType":"YulIdentifier","src":"399:3:28"},"nativeSrc":"399:32:28","nodeType":"YulFunctionCall","src":"399:32:28"},"nativeSrc":"396:52:28","nodeType":"YulIf","src":"396:52:28"},{"nativeSrc":"457:33:28","nodeType":"YulAssignment","src":"457:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"480:9:28","nodeType":"YulIdentifier","src":"480:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"467:12:28","nodeType":"YulIdentifier","src":"467:12:28"},"nativeSrc":"467:23:28","nodeType":"YulFunctionCall","src":"467:23:28"},"variableNames":[{"name":"value0","nativeSrc":"457:6:28","nodeType":"YulIdentifier","src":"457:6:28"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"316:180:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"352:9:28","nodeType":"YulTypedName","src":"352:9:28","type":""},{"name":"dataEnd","nativeSrc":"363:7:28","nodeType":"YulTypedName","src":"363:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"375:6:28","nodeType":"YulTypedName","src":"375:6:28","type":""}],"src":"316:180:28"},{"body":{"nativeSrc":"602:125:28","nodeType":"YulBlock","src":"602:125:28","statements":[{"nativeSrc":"612:26:28","nodeType":"YulAssignment","src":"612:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"624:9:28","nodeType":"YulIdentifier","src":"624:9:28"},{"kind":"number","nativeSrc":"635:2:28","nodeType":"YulLiteral","src":"635:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"620:3:28","nodeType":"YulIdentifier","src":"620:3:28"},"nativeSrc":"620:18:28","nodeType":"YulFunctionCall","src":"620:18:28"},"variableNames":[{"name":"tail","nativeSrc":"612:4:28","nodeType":"YulIdentifier","src":"612:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"654:9:28","nodeType":"YulIdentifier","src":"654:9:28"},{"arguments":[{"name":"value0","nativeSrc":"669:6:28","nodeType":"YulIdentifier","src":"669:6:28"},{"kind":"number","nativeSrc":"677:42:28","nodeType":"YulLiteral","src":"677:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"665:3:28","nodeType":"YulIdentifier","src":"665:3:28"},"nativeSrc":"665:55:28","nodeType":"YulFunctionCall","src":"665:55:28"}],"functionName":{"name":"mstore","nativeSrc":"647:6:28","nodeType":"YulIdentifier","src":"647:6:28"},"nativeSrc":"647:74:28","nodeType":"YulFunctionCall","src":"647:74:28"},"nativeSrc":"647:74:28","nodeType":"YulExpressionStatement","src":"647:74:28"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"501:226:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"571:9:28","nodeType":"YulTypedName","src":"571:9:28","type":""},{"name":"value0","nativeSrc":"582:6:28","nodeType":"YulTypedName","src":"582:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"593:4:28","nodeType":"YulTypedName","src":"593:4:28","type":""}],"src":"501:226:28"},{"body":{"nativeSrc":"798:184:28","nodeType":"YulBlock","src":"798:184:28","statements":[{"nativeSrc":"808:10:28","nodeType":"YulVariableDeclaration","src":"808:10:28","value":{"kind":"number","nativeSrc":"817:1:28","nodeType":"YulLiteral","src":"817:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"812:1:28","nodeType":"YulTypedName","src":"812:1:28","type":""}]},{"body":{"nativeSrc":"877:63:28","nodeType":"YulBlock","src":"877:63:28","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"902:3:28","nodeType":"YulIdentifier","src":"902:3:28"},{"name":"i","nativeSrc":"907:1:28","nodeType":"YulIdentifier","src":"907:1:28"}],"functionName":{"name":"add","nativeSrc":"898:3:28","nodeType":"YulIdentifier","src":"898:3:28"},"nativeSrc":"898:11:28","nodeType":"YulFunctionCall","src":"898:11:28"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"921:3:28","nodeType":"YulIdentifier","src":"921:3:28"},{"name":"i","nativeSrc":"926:1:28","nodeType":"YulIdentifier","src":"926:1:28"}],"functionName":{"name":"add","nativeSrc":"917:3:28","nodeType":"YulIdentifier","src":"917:3:28"},"nativeSrc":"917:11:28","nodeType":"YulFunctionCall","src":"917:11:28"}],"functionName":{"name":"mload","nativeSrc":"911:5:28","nodeType":"YulIdentifier","src":"911:5:28"},"nativeSrc":"911:18:28","nodeType":"YulFunctionCall","src":"911:18:28"}],"functionName":{"name":"mstore","nativeSrc":"891:6:28","nodeType":"YulIdentifier","src":"891:6:28"},"nativeSrc":"891:39:28","nodeType":"YulFunctionCall","src":"891:39:28"},"nativeSrc":"891:39:28","nodeType":"YulExpressionStatement","src":"891:39:28"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"838:1:28","nodeType":"YulIdentifier","src":"838:1:28"},{"name":"length","nativeSrc":"841:6:28","nodeType":"YulIdentifier","src":"841:6:28"}],"functionName":{"name":"lt","nativeSrc":"835:2:28","nodeType":"YulIdentifier","src":"835:2:28"},"nativeSrc":"835:13:28","nodeType":"YulFunctionCall","src":"835:13:28"},"nativeSrc":"827:113:28","nodeType":"YulForLoop","post":{"nativeSrc":"849:19:28","nodeType":"YulBlock","src":"849:19:28","statements":[{"nativeSrc":"851:15:28","nodeType":"YulAssignment","src":"851:15:28","value":{"arguments":[{"name":"i","nativeSrc":"860:1:28","nodeType":"YulIdentifier","src":"860:1:28"},{"kind":"number","nativeSrc":"863:2:28","nodeType":"YulLiteral","src":"863:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"856:3:28","nodeType":"YulIdentifier","src":"856:3:28"},"nativeSrc":"856:10:28","nodeType":"YulFunctionCall","src":"856:10:28"},"variableNames":[{"name":"i","nativeSrc":"851:1:28","nodeType":"YulIdentifier","src":"851:1:28"}]}]},"pre":{"nativeSrc":"831:3:28","nodeType":"YulBlock","src":"831:3:28","statements":[]},"src":"827:113:28"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"960:3:28","nodeType":"YulIdentifier","src":"960:3:28"},{"name":"length","nativeSrc":"965:6:28","nodeType":"YulIdentifier","src":"965:6:28"}],"functionName":{"name":"add","nativeSrc":"956:3:28","nodeType":"YulIdentifier","src":"956:3:28"},"nativeSrc":"956:16:28","nodeType":"YulFunctionCall","src":"956:16:28"},{"kind":"number","nativeSrc":"974:1:28","nodeType":"YulLiteral","src":"974:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"949:6:28","nodeType":"YulIdentifier","src":"949:6:28"},"nativeSrc":"949:27:28","nodeType":"YulFunctionCall","src":"949:27:28"},"nativeSrc":"949:27:28","nodeType":"YulExpressionStatement","src":"949:27:28"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"732:250:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"776:3:28","nodeType":"YulTypedName","src":"776:3:28","type":""},{"name":"dst","nativeSrc":"781:3:28","nodeType":"YulTypedName","src":"781:3:28","type":""},{"name":"length","nativeSrc":"786:6:28","nodeType":"YulTypedName","src":"786:6:28","type":""}],"src":"732:250:28"},{"body":{"nativeSrc":"1037:221:28","nodeType":"YulBlock","src":"1037:221:28","statements":[{"nativeSrc":"1047:26:28","nodeType":"YulVariableDeclaration","src":"1047:26:28","value":{"arguments":[{"name":"value","nativeSrc":"1067:5:28","nodeType":"YulIdentifier","src":"1067:5:28"}],"functionName":{"name":"mload","nativeSrc":"1061:5:28","nodeType":"YulIdentifier","src":"1061:5:28"},"nativeSrc":"1061:12:28","nodeType":"YulFunctionCall","src":"1061:12:28"},"variables":[{"name":"length","nativeSrc":"1051:6:28","nodeType":"YulTypedName","src":"1051:6:28","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"1089:3:28","nodeType":"YulIdentifier","src":"1089:3:28"},{"name":"length","nativeSrc":"1094:6:28","nodeType":"YulIdentifier","src":"1094:6:28"}],"functionName":{"name":"mstore","nativeSrc":"1082:6:28","nodeType":"YulIdentifier","src":"1082:6:28"},"nativeSrc":"1082:19:28","nodeType":"YulFunctionCall","src":"1082:19:28"},"nativeSrc":"1082:19:28","nodeType":"YulExpressionStatement","src":"1082:19:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1149:5:28","nodeType":"YulIdentifier","src":"1149:5:28"},{"kind":"number","nativeSrc":"1156:4:28","nodeType":"YulLiteral","src":"1156:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1145:3:28","nodeType":"YulIdentifier","src":"1145:3:28"},"nativeSrc":"1145:16:28","nodeType":"YulFunctionCall","src":"1145:16:28"},{"arguments":[{"name":"pos","nativeSrc":"1167:3:28","nodeType":"YulIdentifier","src":"1167:3:28"},{"kind":"number","nativeSrc":"1172:4:28","nodeType":"YulLiteral","src":"1172:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1163:3:28","nodeType":"YulIdentifier","src":"1163:3:28"},"nativeSrc":"1163:14:28","nodeType":"YulFunctionCall","src":"1163:14:28"},{"name":"length","nativeSrc":"1179:6:28","nodeType":"YulIdentifier","src":"1179:6:28"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1110:34:28","nodeType":"YulIdentifier","src":"1110:34:28"},"nativeSrc":"1110:76:28","nodeType":"YulFunctionCall","src":"1110:76:28"},"nativeSrc":"1110:76:28","nodeType":"YulExpressionStatement","src":"1110:76:28"},{"nativeSrc":"1195:57:28","nodeType":"YulAssignment","src":"1195:57:28","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"1210:3:28","nodeType":"YulIdentifier","src":"1210:3:28"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"1223:6:28","nodeType":"YulIdentifier","src":"1223:6:28"},{"kind":"number","nativeSrc":"1231:2:28","nodeType":"YulLiteral","src":"1231:2:28","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1219:3:28","nodeType":"YulIdentifier","src":"1219:3:28"},"nativeSrc":"1219:15:28","nodeType":"YulFunctionCall","src":"1219:15:28"},{"arguments":[{"kind":"number","nativeSrc":"1240:2:28","nodeType":"YulLiteral","src":"1240:2:28","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1236:3:28","nodeType":"YulIdentifier","src":"1236:3:28"},"nativeSrc":"1236:7:28","nodeType":"YulFunctionCall","src":"1236:7:28"}],"functionName":{"name":"and","nativeSrc":"1215:3:28","nodeType":"YulIdentifier","src":"1215:3:28"},"nativeSrc":"1215:29:28","nodeType":"YulFunctionCall","src":"1215:29:28"}],"functionName":{"name":"add","nativeSrc":"1206:3:28","nodeType":"YulIdentifier","src":"1206:3:28"},"nativeSrc":"1206:39:28","nodeType":"YulFunctionCall","src":"1206:39:28"},{"kind":"number","nativeSrc":"1247:4:28","nodeType":"YulLiteral","src":"1247:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1202:3:28","nodeType":"YulIdentifier","src":"1202:3:28"},"nativeSrc":"1202:50:28","nodeType":"YulFunctionCall","src":"1202:50:28"},"variableNames":[{"name":"end","nativeSrc":"1195:3:28","nodeType":"YulIdentifier","src":"1195:3:28"}]}]},"name":"abi_encode_string","nativeSrc":"987:271:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1014:5:28","nodeType":"YulTypedName","src":"1014:5:28","type":""},{"name":"pos","nativeSrc":"1021:3:28","nodeType":"YulTypedName","src":"1021:3:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"1029:3:28","nodeType":"YulTypedName","src":"1029:3:28","type":""}],"src":"987:271:28"},{"body":{"nativeSrc":"1384:99:28","nodeType":"YulBlock","src":"1384:99:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1401:9:28","nodeType":"YulIdentifier","src":"1401:9:28"},{"kind":"number","nativeSrc":"1412:2:28","nodeType":"YulLiteral","src":"1412:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1394:6:28","nodeType":"YulIdentifier","src":"1394:6:28"},"nativeSrc":"1394:21:28","nodeType":"YulFunctionCall","src":"1394:21:28"},"nativeSrc":"1394:21:28","nodeType":"YulExpressionStatement","src":"1394:21:28"},{"nativeSrc":"1424:53:28","nodeType":"YulAssignment","src":"1424:53:28","value":{"arguments":[{"name":"value0","nativeSrc":"1450:6:28","nodeType":"YulIdentifier","src":"1450:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"1462:9:28","nodeType":"YulIdentifier","src":"1462:9:28"},{"kind":"number","nativeSrc":"1473:2:28","nodeType":"YulLiteral","src":"1473:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1458:3:28","nodeType":"YulIdentifier","src":"1458:3:28"},"nativeSrc":"1458:18:28","nodeType":"YulFunctionCall","src":"1458:18:28"}],"functionName":{"name":"abi_encode_string","nativeSrc":"1432:17:28","nodeType":"YulIdentifier","src":"1432:17:28"},"nativeSrc":"1432:45:28","nodeType":"YulFunctionCall","src":"1432:45:28"},"variableNames":[{"name":"tail","nativeSrc":"1424:4:28","nodeType":"YulIdentifier","src":"1424:4:28"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1263:220:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1353:9:28","nodeType":"YulTypedName","src":"1353:9:28","type":""},{"name":"value0","nativeSrc":"1364:6:28","nodeType":"YulTypedName","src":"1364:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1375:4:28","nodeType":"YulTypedName","src":"1375:4:28","type":""}],"src":"1263:220:28"},{"body":{"nativeSrc":"1533:109:28","nodeType":"YulBlock","src":"1533:109:28","statements":[{"body":{"nativeSrc":"1620:16:28","nodeType":"YulBlock","src":"1620:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1629:1:28","nodeType":"YulLiteral","src":"1629:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1632:1:28","nodeType":"YulLiteral","src":"1632:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1622:6:28","nodeType":"YulIdentifier","src":"1622:6:28"},"nativeSrc":"1622:12:28","nodeType":"YulFunctionCall","src":"1622:12:28"},"nativeSrc":"1622:12:28","nodeType":"YulExpressionStatement","src":"1622:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1556:5:28","nodeType":"YulIdentifier","src":"1556:5:28"},{"arguments":[{"name":"value","nativeSrc":"1567:5:28","nodeType":"YulIdentifier","src":"1567:5:28"},{"kind":"number","nativeSrc":"1574:42:28","nodeType":"YulLiteral","src":"1574:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1563:3:28","nodeType":"YulIdentifier","src":"1563:3:28"},"nativeSrc":"1563:54:28","nodeType":"YulFunctionCall","src":"1563:54:28"}],"functionName":{"name":"eq","nativeSrc":"1553:2:28","nodeType":"YulIdentifier","src":"1553:2:28"},"nativeSrc":"1553:65:28","nodeType":"YulFunctionCall","src":"1553:65:28"}],"functionName":{"name":"iszero","nativeSrc":"1546:6:28","nodeType":"YulIdentifier","src":"1546:6:28"},"nativeSrc":"1546:73:28","nodeType":"YulFunctionCall","src":"1546:73:28"},"nativeSrc":"1543:93:28","nodeType":"YulIf","src":"1543:93:28"}]},"name":"validator_revert_address","nativeSrc":"1488:154:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1522:5:28","nodeType":"YulTypedName","src":"1522:5:28","type":""}],"src":"1488:154:28"},{"body":{"nativeSrc":"1734:228:28","nodeType":"YulBlock","src":"1734:228:28","statements":[{"body":{"nativeSrc":"1780:16:28","nodeType":"YulBlock","src":"1780:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1789:1:28","nodeType":"YulLiteral","src":"1789:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1792:1:28","nodeType":"YulLiteral","src":"1792:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1782:6:28","nodeType":"YulIdentifier","src":"1782:6:28"},"nativeSrc":"1782:12:28","nodeType":"YulFunctionCall","src":"1782:12:28"},"nativeSrc":"1782:12:28","nodeType":"YulExpressionStatement","src":"1782:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1755:7:28","nodeType":"YulIdentifier","src":"1755:7:28"},{"name":"headStart","nativeSrc":"1764:9:28","nodeType":"YulIdentifier","src":"1764:9:28"}],"functionName":{"name":"sub","nativeSrc":"1751:3:28","nodeType":"YulIdentifier","src":"1751:3:28"},"nativeSrc":"1751:23:28","nodeType":"YulFunctionCall","src":"1751:23:28"},{"kind":"number","nativeSrc":"1776:2:28","nodeType":"YulLiteral","src":"1776:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1747:3:28","nodeType":"YulIdentifier","src":"1747:3:28"},"nativeSrc":"1747:32:28","nodeType":"YulFunctionCall","src":"1747:32:28"},"nativeSrc":"1744:52:28","nodeType":"YulIf","src":"1744:52:28"},{"nativeSrc":"1805:36:28","nodeType":"YulVariableDeclaration","src":"1805:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1831:9:28","nodeType":"YulIdentifier","src":"1831:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"1818:12:28","nodeType":"YulIdentifier","src":"1818:12:28"},"nativeSrc":"1818:23:28","nodeType":"YulFunctionCall","src":"1818:23:28"},"variables":[{"name":"value","nativeSrc":"1809:5:28","nodeType":"YulTypedName","src":"1809:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1875:5:28","nodeType":"YulIdentifier","src":"1875:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1850:24:28","nodeType":"YulIdentifier","src":"1850:24:28"},"nativeSrc":"1850:31:28","nodeType":"YulFunctionCall","src":"1850:31:28"},"nativeSrc":"1850:31:28","nodeType":"YulExpressionStatement","src":"1850:31:28"},{"nativeSrc":"1890:15:28","nodeType":"YulAssignment","src":"1890:15:28","value":{"name":"value","nativeSrc":"1900:5:28","nodeType":"YulIdentifier","src":"1900:5:28"},"variableNames":[{"name":"value0","nativeSrc":"1890:6:28","nodeType":"YulIdentifier","src":"1890:6:28"}]},{"nativeSrc":"1914:42:28","nodeType":"YulAssignment","src":"1914:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1941:9:28","nodeType":"YulIdentifier","src":"1941:9:28"},{"kind":"number","nativeSrc":"1952:2:28","nodeType":"YulLiteral","src":"1952:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1937:3:28","nodeType":"YulIdentifier","src":"1937:3:28"},"nativeSrc":"1937:18:28","nodeType":"YulFunctionCall","src":"1937:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"1924:12:28","nodeType":"YulIdentifier","src":"1924:12:28"},"nativeSrc":"1924:32:28","nodeType":"YulFunctionCall","src":"1924:32:28"},"variableNames":[{"name":"value1","nativeSrc":"1914:6:28","nodeType":"YulIdentifier","src":"1914:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"1647:315:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1692:9:28","nodeType":"YulTypedName","src":"1692:9:28","type":""},{"name":"dataEnd","nativeSrc":"1703:7:28","nodeType":"YulTypedName","src":"1703:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1715:6:28","nodeType":"YulTypedName","src":"1715:6:28","type":""},{"name":"value1","nativeSrc":"1723:6:28","nodeType":"YulTypedName","src":"1723:6:28","type":""}],"src":"1647:315:28"},{"body":{"nativeSrc":"2062:92:28","nodeType":"YulBlock","src":"2062:92:28","statements":[{"nativeSrc":"2072:26:28","nodeType":"YulAssignment","src":"2072:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2084:9:28","nodeType":"YulIdentifier","src":"2084:9:28"},{"kind":"number","nativeSrc":"2095:2:28","nodeType":"YulLiteral","src":"2095:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2080:3:28","nodeType":"YulIdentifier","src":"2080:3:28"},"nativeSrc":"2080:18:28","nodeType":"YulFunctionCall","src":"2080:18:28"},"variableNames":[{"name":"tail","nativeSrc":"2072:4:28","nodeType":"YulIdentifier","src":"2072:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2114:9:28","nodeType":"YulIdentifier","src":"2114:9:28"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"2139:6:28","nodeType":"YulIdentifier","src":"2139:6:28"}],"functionName":{"name":"iszero","nativeSrc":"2132:6:28","nodeType":"YulIdentifier","src":"2132:6:28"},"nativeSrc":"2132:14:28","nodeType":"YulFunctionCall","src":"2132:14:28"}],"functionName":{"name":"iszero","nativeSrc":"2125:6:28","nodeType":"YulIdentifier","src":"2125:6:28"},"nativeSrc":"2125:22:28","nodeType":"YulFunctionCall","src":"2125:22:28"}],"functionName":{"name":"mstore","nativeSrc":"2107:6:28","nodeType":"YulIdentifier","src":"2107:6:28"},"nativeSrc":"2107:41:28","nodeType":"YulFunctionCall","src":"2107:41:28"},"nativeSrc":"2107:41:28","nodeType":"YulExpressionStatement","src":"2107:41:28"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1967:187:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2031:9:28","nodeType":"YulTypedName","src":"2031:9:28","type":""},{"name":"value0","nativeSrc":"2042:6:28","nodeType":"YulTypedName","src":"2042:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2053:4:28","nodeType":"YulTypedName","src":"2053:4:28","type":""}],"src":"1967:187:28"},{"body":{"nativeSrc":"2191:152:28","nodeType":"YulBlock","src":"2191:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2208:1:28","nodeType":"YulLiteral","src":"2208:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2211:77:28","nodeType":"YulLiteral","src":"2211:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"2201:6:28","nodeType":"YulIdentifier","src":"2201:6:28"},"nativeSrc":"2201:88:28","nodeType":"YulFunctionCall","src":"2201:88:28"},"nativeSrc":"2201:88:28","nodeType":"YulExpressionStatement","src":"2201:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2305:1:28","nodeType":"YulLiteral","src":"2305:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"2308:4:28","nodeType":"YulLiteral","src":"2308:4:28","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"2298:6:28","nodeType":"YulIdentifier","src":"2298:6:28"},"nativeSrc":"2298:15:28","nodeType":"YulFunctionCall","src":"2298:15:28"},"nativeSrc":"2298:15:28","nodeType":"YulExpressionStatement","src":"2298:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2329:1:28","nodeType":"YulLiteral","src":"2329:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2332:4:28","nodeType":"YulLiteral","src":"2332:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2322:6:28","nodeType":"YulIdentifier","src":"2322:6:28"},"nativeSrc":"2322:15:28","nodeType":"YulFunctionCall","src":"2322:15:28"},"nativeSrc":"2322:15:28","nodeType":"YulExpressionStatement","src":"2322:15:28"}]},"name":"panic_error_0x41","nativeSrc":"2159:184:28","nodeType":"YulFunctionDefinition","src":"2159:184:28"},{"body":{"nativeSrc":"2394:209:28","nodeType":"YulBlock","src":"2394:209:28","statements":[{"nativeSrc":"2404:19:28","nodeType":"YulAssignment","src":"2404:19:28","value":{"arguments":[{"kind":"number","nativeSrc":"2420:2:28","nodeType":"YulLiteral","src":"2420:2:28","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"2414:5:28","nodeType":"YulIdentifier","src":"2414:5:28"},"nativeSrc":"2414:9:28","nodeType":"YulFunctionCall","src":"2414:9:28"},"variableNames":[{"name":"memPtr","nativeSrc":"2404:6:28","nodeType":"YulIdentifier","src":"2404:6:28"}]},{"nativeSrc":"2432:37:28","nodeType":"YulVariableDeclaration","src":"2432:37:28","value":{"arguments":[{"name":"memPtr","nativeSrc":"2454:6:28","nodeType":"YulIdentifier","src":"2454:6:28"},{"kind":"number","nativeSrc":"2462:6:28","nodeType":"YulLiteral","src":"2462:6:28","type":"","value":"0x0160"}],"functionName":{"name":"add","nativeSrc":"2450:3:28","nodeType":"YulIdentifier","src":"2450:3:28"},"nativeSrc":"2450:19:28","nodeType":"YulFunctionCall","src":"2450:19:28"},"variables":[{"name":"newFreePtr","nativeSrc":"2436:10:28","nodeType":"YulTypedName","src":"2436:10:28","type":""}]},{"body":{"nativeSrc":"2544:22:28","nodeType":"YulBlock","src":"2544:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2546:16:28","nodeType":"YulIdentifier","src":"2546:16:28"},"nativeSrc":"2546:18:28","nodeType":"YulFunctionCall","src":"2546:18:28"},"nativeSrc":"2546:18:28","nodeType":"YulExpressionStatement","src":"2546:18:28"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"2487:10:28","nodeType":"YulIdentifier","src":"2487:10:28"},{"kind":"number","nativeSrc":"2499:18:28","nodeType":"YulLiteral","src":"2499:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2484:2:28","nodeType":"YulIdentifier","src":"2484:2:28"},"nativeSrc":"2484:34:28","nodeType":"YulFunctionCall","src":"2484:34:28"},{"arguments":[{"name":"newFreePtr","nativeSrc":"2523:10:28","nodeType":"YulIdentifier","src":"2523:10:28"},{"name":"memPtr","nativeSrc":"2535:6:28","nodeType":"YulIdentifier","src":"2535:6:28"}],"functionName":{"name":"lt","nativeSrc":"2520:2:28","nodeType":"YulIdentifier","src":"2520:2:28"},"nativeSrc":"2520:22:28","nodeType":"YulFunctionCall","src":"2520:22:28"}],"functionName":{"name":"or","nativeSrc":"2481:2:28","nodeType":"YulIdentifier","src":"2481:2:28"},"nativeSrc":"2481:62:28","nodeType":"YulFunctionCall","src":"2481:62:28"},"nativeSrc":"2478:88:28","nodeType":"YulIf","src":"2478:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2582:2:28","nodeType":"YulLiteral","src":"2582:2:28","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"2586:10:28","nodeType":"YulIdentifier","src":"2586:10:28"}],"functionName":{"name":"mstore","nativeSrc":"2575:6:28","nodeType":"YulIdentifier","src":"2575:6:28"},"nativeSrc":"2575:22:28","nodeType":"YulFunctionCall","src":"2575:22:28"},"nativeSrc":"2575:22:28","nodeType":"YulExpressionStatement","src":"2575:22:28"}]},"name":"allocate_memory_5211","nativeSrc":"2348:255:28","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"2383:6:28","nodeType":"YulTypedName","src":"2383:6:28","type":""}],"src":"2348:255:28"},{"body":{"nativeSrc":"2653:230:28","nodeType":"YulBlock","src":"2653:230:28","statements":[{"nativeSrc":"2663:19:28","nodeType":"YulAssignment","src":"2663:19:28","value":{"arguments":[{"kind":"number","nativeSrc":"2679:2:28","nodeType":"YulLiteral","src":"2679:2:28","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"2673:5:28","nodeType":"YulIdentifier","src":"2673:5:28"},"nativeSrc":"2673:9:28","nodeType":"YulFunctionCall","src":"2673:9:28"},"variableNames":[{"name":"memPtr","nativeSrc":"2663:6:28","nodeType":"YulIdentifier","src":"2663:6:28"}]},{"nativeSrc":"2691:58:28","nodeType":"YulVariableDeclaration","src":"2691:58:28","value":{"arguments":[{"name":"memPtr","nativeSrc":"2713:6:28","nodeType":"YulIdentifier","src":"2713:6:28"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"2729:4:28","nodeType":"YulIdentifier","src":"2729:4:28"},{"kind":"number","nativeSrc":"2735:2:28","nodeType":"YulLiteral","src":"2735:2:28","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2725:3:28","nodeType":"YulIdentifier","src":"2725:3:28"},"nativeSrc":"2725:13:28","nodeType":"YulFunctionCall","src":"2725:13:28"},{"arguments":[{"kind":"number","nativeSrc":"2744:2:28","nodeType":"YulLiteral","src":"2744:2:28","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2740:3:28","nodeType":"YulIdentifier","src":"2740:3:28"},"nativeSrc":"2740:7:28","nodeType":"YulFunctionCall","src":"2740:7:28"}],"functionName":{"name":"and","nativeSrc":"2721:3:28","nodeType":"YulIdentifier","src":"2721:3:28"},"nativeSrc":"2721:27:28","nodeType":"YulFunctionCall","src":"2721:27:28"}],"functionName":{"name":"add","nativeSrc":"2709:3:28","nodeType":"YulIdentifier","src":"2709:3:28"},"nativeSrc":"2709:40:28","nodeType":"YulFunctionCall","src":"2709:40:28"},"variables":[{"name":"newFreePtr","nativeSrc":"2695:10:28","nodeType":"YulTypedName","src":"2695:10:28","type":""}]},{"body":{"nativeSrc":"2824:22:28","nodeType":"YulBlock","src":"2824:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2826:16:28","nodeType":"YulIdentifier","src":"2826:16:28"},"nativeSrc":"2826:18:28","nodeType":"YulFunctionCall","src":"2826:18:28"},"nativeSrc":"2826:18:28","nodeType":"YulExpressionStatement","src":"2826:18:28"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"2767:10:28","nodeType":"YulIdentifier","src":"2767:10:28"},{"kind":"number","nativeSrc":"2779:18:28","nodeType":"YulLiteral","src":"2779:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2764:2:28","nodeType":"YulIdentifier","src":"2764:2:28"},"nativeSrc":"2764:34:28","nodeType":"YulFunctionCall","src":"2764:34:28"},{"arguments":[{"name":"newFreePtr","nativeSrc":"2803:10:28","nodeType":"YulIdentifier","src":"2803:10:28"},{"name":"memPtr","nativeSrc":"2815:6:28","nodeType":"YulIdentifier","src":"2815:6:28"}],"functionName":{"name":"lt","nativeSrc":"2800:2:28","nodeType":"YulIdentifier","src":"2800:2:28"},"nativeSrc":"2800:22:28","nodeType":"YulFunctionCall","src":"2800:22:28"}],"functionName":{"name":"or","nativeSrc":"2761:2:28","nodeType":"YulIdentifier","src":"2761:2:28"},"nativeSrc":"2761:62:28","nodeType":"YulFunctionCall","src":"2761:62:28"},"nativeSrc":"2758:88:28","nodeType":"YulIf","src":"2758:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2862:2:28","nodeType":"YulLiteral","src":"2862:2:28","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"2866:10:28","nodeType":"YulIdentifier","src":"2866:10:28"}],"functionName":{"name":"mstore","nativeSrc":"2855:6:28","nodeType":"YulIdentifier","src":"2855:6:28"},"nativeSrc":"2855:22:28","nodeType":"YulFunctionCall","src":"2855:22:28"},"nativeSrc":"2855:22:28","nodeType":"YulExpressionStatement","src":"2855:22:28"}]},"name":"allocate_memory","nativeSrc":"2608:275:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"2633:4:28","nodeType":"YulTypedName","src":"2633:4:28","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"2642:6:28","nodeType":"YulTypedName","src":"2642:6:28","type":""}],"src":"2608:275:28"},{"body":{"nativeSrc":"2940:478:28","nodeType":"YulBlock","src":"2940:478:28","statements":[{"body":{"nativeSrc":"2989:16:28","nodeType":"YulBlock","src":"2989:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2998:1:28","nodeType":"YulLiteral","src":"2998:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3001:1:28","nodeType":"YulLiteral","src":"3001:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2991:6:28","nodeType":"YulIdentifier","src":"2991:6:28"},"nativeSrc":"2991:12:28","nodeType":"YulFunctionCall","src":"2991:12:28"},"nativeSrc":"2991:12:28","nodeType":"YulExpressionStatement","src":"2991:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2968:6:28","nodeType":"YulIdentifier","src":"2968:6:28"},{"kind":"number","nativeSrc":"2976:4:28","nodeType":"YulLiteral","src":"2976:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2964:3:28","nodeType":"YulIdentifier","src":"2964:3:28"},"nativeSrc":"2964:17:28","nodeType":"YulFunctionCall","src":"2964:17:28"},{"name":"end","nativeSrc":"2983:3:28","nodeType":"YulIdentifier","src":"2983:3:28"}],"functionName":{"name":"slt","nativeSrc":"2960:3:28","nodeType":"YulIdentifier","src":"2960:3:28"},"nativeSrc":"2960:27:28","nodeType":"YulFunctionCall","src":"2960:27:28"}],"functionName":{"name":"iszero","nativeSrc":"2953:6:28","nodeType":"YulIdentifier","src":"2953:6:28"},"nativeSrc":"2953:35:28","nodeType":"YulFunctionCall","src":"2953:35:28"},"nativeSrc":"2950:55:28","nodeType":"YulIf","src":"2950:55:28"},{"nativeSrc":"3014:30:28","nodeType":"YulVariableDeclaration","src":"3014:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"3037:6:28","nodeType":"YulIdentifier","src":"3037:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"3024:12:28","nodeType":"YulIdentifier","src":"3024:12:28"},"nativeSrc":"3024:20:28","nodeType":"YulFunctionCall","src":"3024:20:28"},"variables":[{"name":"_1","nativeSrc":"3018:2:28","nodeType":"YulTypedName","src":"3018:2:28","type":""}]},{"body":{"nativeSrc":"3083:22:28","nodeType":"YulBlock","src":"3083:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"3085:16:28","nodeType":"YulIdentifier","src":"3085:16:28"},"nativeSrc":"3085:18:28","nodeType":"YulFunctionCall","src":"3085:18:28"},"nativeSrc":"3085:18:28","nodeType":"YulExpressionStatement","src":"3085:18:28"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"3059:2:28","nodeType":"YulIdentifier","src":"3059:2:28"},{"kind":"number","nativeSrc":"3063:18:28","nodeType":"YulLiteral","src":"3063:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3056:2:28","nodeType":"YulIdentifier","src":"3056:2:28"},"nativeSrc":"3056:26:28","nodeType":"YulFunctionCall","src":"3056:26:28"},"nativeSrc":"3053:52:28","nodeType":"YulIf","src":"3053:52:28"},{"nativeSrc":"3114:70:28","nodeType":"YulVariableDeclaration","src":"3114:70:28","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"3157:2:28","nodeType":"YulIdentifier","src":"3157:2:28"},{"kind":"number","nativeSrc":"3161:4:28","nodeType":"YulLiteral","src":"3161:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3153:3:28","nodeType":"YulIdentifier","src":"3153:3:28"},"nativeSrc":"3153:13:28","nodeType":"YulFunctionCall","src":"3153:13:28"},{"arguments":[{"kind":"number","nativeSrc":"3172:2:28","nodeType":"YulLiteral","src":"3172:2:28","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"3168:3:28","nodeType":"YulIdentifier","src":"3168:3:28"},"nativeSrc":"3168:7:28","nodeType":"YulFunctionCall","src":"3168:7:28"}],"functionName":{"name":"and","nativeSrc":"3149:3:28","nodeType":"YulIdentifier","src":"3149:3:28"},"nativeSrc":"3149:27:28","nodeType":"YulFunctionCall","src":"3149:27:28"},{"kind":"number","nativeSrc":"3178:4:28","nodeType":"YulLiteral","src":"3178:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3145:3:28","nodeType":"YulIdentifier","src":"3145:3:28"},"nativeSrc":"3145:38:28","nodeType":"YulFunctionCall","src":"3145:38:28"}],"functionName":{"name":"allocate_memory","nativeSrc":"3129:15:28","nodeType":"YulIdentifier","src":"3129:15:28"},"nativeSrc":"3129:55:28","nodeType":"YulFunctionCall","src":"3129:55:28"},"variables":[{"name":"array_1","nativeSrc":"3118:7:28","nodeType":"YulTypedName","src":"3118:7:28","type":""}]},{"expression":{"arguments":[{"name":"array_1","nativeSrc":"3200:7:28","nodeType":"YulIdentifier","src":"3200:7:28"},{"name":"_1","nativeSrc":"3209:2:28","nodeType":"YulIdentifier","src":"3209:2:28"}],"functionName":{"name":"mstore","nativeSrc":"3193:6:28","nodeType":"YulIdentifier","src":"3193:6:28"},"nativeSrc":"3193:19:28","nodeType":"YulFunctionCall","src":"3193:19:28"},"nativeSrc":"3193:19:28","nodeType":"YulExpressionStatement","src":"3193:19:28"},{"body":{"nativeSrc":"3260:16:28","nodeType":"YulBlock","src":"3260:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3269:1:28","nodeType":"YulLiteral","src":"3269:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3272:1:28","nodeType":"YulLiteral","src":"3272:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3262:6:28","nodeType":"YulIdentifier","src":"3262:6:28"},"nativeSrc":"3262:12:28","nodeType":"YulFunctionCall","src":"3262:12:28"},"nativeSrc":"3262:12:28","nodeType":"YulExpressionStatement","src":"3262:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3235:6:28","nodeType":"YulIdentifier","src":"3235:6:28"},{"name":"_1","nativeSrc":"3243:2:28","nodeType":"YulIdentifier","src":"3243:2:28"}],"functionName":{"name":"add","nativeSrc":"3231:3:28","nodeType":"YulIdentifier","src":"3231:3:28"},"nativeSrc":"3231:15:28","nodeType":"YulFunctionCall","src":"3231:15:28"},{"kind":"number","nativeSrc":"3248:4:28","nodeType":"YulLiteral","src":"3248:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3227:3:28","nodeType":"YulIdentifier","src":"3227:3:28"},"nativeSrc":"3227:26:28","nodeType":"YulFunctionCall","src":"3227:26:28"},{"name":"end","nativeSrc":"3255:3:28","nodeType":"YulIdentifier","src":"3255:3:28"}],"functionName":{"name":"gt","nativeSrc":"3224:2:28","nodeType":"YulIdentifier","src":"3224:2:28"},"nativeSrc":"3224:35:28","nodeType":"YulFunctionCall","src":"3224:35:28"},"nativeSrc":"3221:55:28","nodeType":"YulIf","src":"3221:55:28"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nativeSrc":"3302:7:28","nodeType":"YulIdentifier","src":"3302:7:28"},{"kind":"number","nativeSrc":"3311:4:28","nodeType":"YulLiteral","src":"3311:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3298:3:28","nodeType":"YulIdentifier","src":"3298:3:28"},"nativeSrc":"3298:18:28","nodeType":"YulFunctionCall","src":"3298:18:28"},{"arguments":[{"name":"offset","nativeSrc":"3322:6:28","nodeType":"YulIdentifier","src":"3322:6:28"},{"kind":"number","nativeSrc":"3330:4:28","nodeType":"YulLiteral","src":"3330:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3318:3:28","nodeType":"YulIdentifier","src":"3318:3:28"},"nativeSrc":"3318:17:28","nodeType":"YulFunctionCall","src":"3318:17:28"},{"name":"_1","nativeSrc":"3337:2:28","nodeType":"YulIdentifier","src":"3337:2:28"}],"functionName":{"name":"calldatacopy","nativeSrc":"3285:12:28","nodeType":"YulIdentifier","src":"3285:12:28"},"nativeSrc":"3285:55:28","nodeType":"YulFunctionCall","src":"3285:55:28"},"nativeSrc":"3285:55:28","nodeType":"YulExpressionStatement","src":"3285:55:28"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nativeSrc":"3364:7:28","nodeType":"YulIdentifier","src":"3364:7:28"},{"name":"_1","nativeSrc":"3373:2:28","nodeType":"YulIdentifier","src":"3373:2:28"}],"functionName":{"name":"add","nativeSrc":"3360:3:28","nodeType":"YulIdentifier","src":"3360:3:28"},"nativeSrc":"3360:16:28","nodeType":"YulFunctionCall","src":"3360:16:28"},{"kind":"number","nativeSrc":"3378:4:28","nodeType":"YulLiteral","src":"3378:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3356:3:28","nodeType":"YulIdentifier","src":"3356:3:28"},"nativeSrc":"3356:27:28","nodeType":"YulFunctionCall","src":"3356:27:28"},{"kind":"number","nativeSrc":"3385:1:28","nodeType":"YulLiteral","src":"3385:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"3349:6:28","nodeType":"YulIdentifier","src":"3349:6:28"},"nativeSrc":"3349:38:28","nodeType":"YulFunctionCall","src":"3349:38:28"},"nativeSrc":"3349:38:28","nodeType":"YulExpressionStatement","src":"3349:38:28"},{"nativeSrc":"3396:16:28","nodeType":"YulAssignment","src":"3396:16:28","value":{"name":"array_1","nativeSrc":"3405:7:28","nodeType":"YulIdentifier","src":"3405:7:28"},"variableNames":[{"name":"array","nativeSrc":"3396:5:28","nodeType":"YulIdentifier","src":"3396:5:28"}]}]},"name":"abi_decode_bytes","nativeSrc":"2888:530:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2914:6:28","nodeType":"YulTypedName","src":"2914:6:28","type":""},{"name":"end","nativeSrc":"2922:3:28","nodeType":"YulTypedName","src":"2922:3:28","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2930:5:28","nodeType":"YulTypedName","src":"2930:5:28","type":""}],"src":"2888:530:28"},{"body":{"nativeSrc":"3553:535:28","nodeType":"YulBlock","src":"3553:535:28","statements":[{"body":{"nativeSrc":"3600:16:28","nodeType":"YulBlock","src":"3600:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3609:1:28","nodeType":"YulLiteral","src":"3609:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3612:1:28","nodeType":"YulLiteral","src":"3612:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3602:6:28","nodeType":"YulIdentifier","src":"3602:6:28"},"nativeSrc":"3602:12:28","nodeType":"YulFunctionCall","src":"3602:12:28"},"nativeSrc":"3602:12:28","nodeType":"YulExpressionStatement","src":"3602:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3574:7:28","nodeType":"YulIdentifier","src":"3574:7:28"},{"name":"headStart","nativeSrc":"3583:9:28","nodeType":"YulIdentifier","src":"3583:9:28"}],"functionName":{"name":"sub","nativeSrc":"3570:3:28","nodeType":"YulIdentifier","src":"3570:3:28"},"nativeSrc":"3570:23:28","nodeType":"YulFunctionCall","src":"3570:23:28"},{"kind":"number","nativeSrc":"3595:3:28","nodeType":"YulLiteral","src":"3595:3:28","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3566:3:28","nodeType":"YulIdentifier","src":"3566:3:28"},"nativeSrc":"3566:33:28","nodeType":"YulFunctionCall","src":"3566:33:28"},"nativeSrc":"3563:53:28","nodeType":"YulIf","src":"3563:53:28"},{"nativeSrc":"3625:36:28","nodeType":"YulVariableDeclaration","src":"3625:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3651:9:28","nodeType":"YulIdentifier","src":"3651:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"3638:12:28","nodeType":"YulIdentifier","src":"3638:12:28"},"nativeSrc":"3638:23:28","nodeType":"YulFunctionCall","src":"3638:23:28"},"variables":[{"name":"value","nativeSrc":"3629:5:28","nodeType":"YulTypedName","src":"3629:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3695:5:28","nodeType":"YulIdentifier","src":"3695:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3670:24:28","nodeType":"YulIdentifier","src":"3670:24:28"},"nativeSrc":"3670:31:28","nodeType":"YulFunctionCall","src":"3670:31:28"},"nativeSrc":"3670:31:28","nodeType":"YulExpressionStatement","src":"3670:31:28"},{"nativeSrc":"3710:15:28","nodeType":"YulAssignment","src":"3710:15:28","value":{"name":"value","nativeSrc":"3720:5:28","nodeType":"YulIdentifier","src":"3720:5:28"},"variableNames":[{"name":"value0","nativeSrc":"3710:6:28","nodeType":"YulIdentifier","src":"3710:6:28"}]},{"nativeSrc":"3734:47:28","nodeType":"YulVariableDeclaration","src":"3734:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3766:9:28","nodeType":"YulIdentifier","src":"3766:9:28"},{"kind":"number","nativeSrc":"3777:2:28","nodeType":"YulLiteral","src":"3777:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3762:3:28","nodeType":"YulIdentifier","src":"3762:3:28"},"nativeSrc":"3762:18:28","nodeType":"YulFunctionCall","src":"3762:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"3749:12:28","nodeType":"YulIdentifier","src":"3749:12:28"},"nativeSrc":"3749:32:28","nodeType":"YulFunctionCall","src":"3749:32:28"},"variables":[{"name":"value_1","nativeSrc":"3738:7:28","nodeType":"YulTypedName","src":"3738:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"3815:7:28","nodeType":"YulIdentifier","src":"3815:7:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3790:24:28","nodeType":"YulIdentifier","src":"3790:24:28"},"nativeSrc":"3790:33:28","nodeType":"YulFunctionCall","src":"3790:33:28"},"nativeSrc":"3790:33:28","nodeType":"YulExpressionStatement","src":"3790:33:28"},{"nativeSrc":"3832:17:28","nodeType":"YulAssignment","src":"3832:17:28","value":{"name":"value_1","nativeSrc":"3842:7:28","nodeType":"YulIdentifier","src":"3842:7:28"},"variableNames":[{"name":"value1","nativeSrc":"3832:6:28","nodeType":"YulIdentifier","src":"3832:6:28"}]},{"nativeSrc":"3858:42:28","nodeType":"YulAssignment","src":"3858:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3885:9:28","nodeType":"YulIdentifier","src":"3885:9:28"},{"kind":"number","nativeSrc":"3896:2:28","nodeType":"YulLiteral","src":"3896:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3881:3:28","nodeType":"YulIdentifier","src":"3881:3:28"},"nativeSrc":"3881:18:28","nodeType":"YulFunctionCall","src":"3881:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"3868:12:28","nodeType":"YulIdentifier","src":"3868:12:28"},"nativeSrc":"3868:32:28","nodeType":"YulFunctionCall","src":"3868:32:28"},"variableNames":[{"name":"value2","nativeSrc":"3858:6:28","nodeType":"YulIdentifier","src":"3858:6:28"}]},{"nativeSrc":"3909:46:28","nodeType":"YulVariableDeclaration","src":"3909:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3940:9:28","nodeType":"YulIdentifier","src":"3940:9:28"},{"kind":"number","nativeSrc":"3951:2:28","nodeType":"YulLiteral","src":"3951:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3936:3:28","nodeType":"YulIdentifier","src":"3936:3:28"},"nativeSrc":"3936:18:28","nodeType":"YulFunctionCall","src":"3936:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"3923:12:28","nodeType":"YulIdentifier","src":"3923:12:28"},"nativeSrc":"3923:32:28","nodeType":"YulFunctionCall","src":"3923:32:28"},"variables":[{"name":"offset","nativeSrc":"3913:6:28","nodeType":"YulTypedName","src":"3913:6:28","type":""}]},{"body":{"nativeSrc":"3998:16:28","nodeType":"YulBlock","src":"3998:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4007:1:28","nodeType":"YulLiteral","src":"4007:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4010:1:28","nodeType":"YulLiteral","src":"4010:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4000:6:28","nodeType":"YulIdentifier","src":"4000:6:28"},"nativeSrc":"4000:12:28","nodeType":"YulFunctionCall","src":"4000:12:28"},"nativeSrc":"4000:12:28","nodeType":"YulExpressionStatement","src":"4000:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3970:6:28","nodeType":"YulIdentifier","src":"3970:6:28"},{"kind":"number","nativeSrc":"3978:18:28","nodeType":"YulLiteral","src":"3978:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3967:2:28","nodeType":"YulIdentifier","src":"3967:2:28"},"nativeSrc":"3967:30:28","nodeType":"YulFunctionCall","src":"3967:30:28"},"nativeSrc":"3964:50:28","nodeType":"YulIf","src":"3964:50:28"},{"nativeSrc":"4023:59:28","nodeType":"YulAssignment","src":"4023:59:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4054:9:28","nodeType":"YulIdentifier","src":"4054:9:28"},{"name":"offset","nativeSrc":"4065:6:28","nodeType":"YulIdentifier","src":"4065:6:28"}],"functionName":{"name":"add","nativeSrc":"4050:3:28","nodeType":"YulIdentifier","src":"4050:3:28"},"nativeSrc":"4050:22:28","nodeType":"YulFunctionCall","src":"4050:22:28"},{"name":"dataEnd","nativeSrc":"4074:7:28","nodeType":"YulIdentifier","src":"4074:7:28"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"4033:16:28","nodeType":"YulIdentifier","src":"4033:16:28"},"nativeSrc":"4033:49:28","nodeType":"YulFunctionCall","src":"4033:49:28"},"variableNames":[{"name":"value3","nativeSrc":"4023:6:28","nodeType":"YulIdentifier","src":"4023:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nativeSrc":"3423:665:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3495:9:28","nodeType":"YulTypedName","src":"3495:9:28","type":""},{"name":"dataEnd","nativeSrc":"3506:7:28","nodeType":"YulTypedName","src":"3506:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3518:6:28","nodeType":"YulTypedName","src":"3518:6:28","type":""},{"name":"value1","nativeSrc":"3526:6:28","nodeType":"YulTypedName","src":"3526:6:28","type":""},{"name":"value2","nativeSrc":"3534:6:28","nodeType":"YulTypedName","src":"3534:6:28","type":""},{"name":"value3","nativeSrc":"3542:6:28","nodeType":"YulTypedName","src":"3542:6:28","type":""}],"src":"3423:665:28"},{"body":{"nativeSrc":"4192:149:28","nodeType":"YulBlock","src":"4192:149:28","statements":[{"nativeSrc":"4202:26:28","nodeType":"YulAssignment","src":"4202:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4214:9:28","nodeType":"YulIdentifier","src":"4214:9:28"},{"kind":"number","nativeSrc":"4225:2:28","nodeType":"YulLiteral","src":"4225:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4210:3:28","nodeType":"YulIdentifier","src":"4210:3:28"},"nativeSrc":"4210:18:28","nodeType":"YulFunctionCall","src":"4210:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4202:4:28","nodeType":"YulIdentifier","src":"4202:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4244:9:28","nodeType":"YulIdentifier","src":"4244:9:28"},{"arguments":[{"name":"value0","nativeSrc":"4259:6:28","nodeType":"YulIdentifier","src":"4259:6:28"},{"kind":"number","nativeSrc":"4267:66:28","nodeType":"YulLiteral","src":"4267:66:28","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4255:3:28","nodeType":"YulIdentifier","src":"4255:3:28"},"nativeSrc":"4255:79:28","nodeType":"YulFunctionCall","src":"4255:79:28"}],"functionName":{"name":"mstore","nativeSrc":"4237:6:28","nodeType":"YulIdentifier","src":"4237:6:28"},"nativeSrc":"4237:98:28","nodeType":"YulFunctionCall","src":"4237:98:28"},"nativeSrc":"4237:98:28","nodeType":"YulExpressionStatement","src":"4237:98:28"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4093:248:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4161:9:28","nodeType":"YulTypedName","src":"4161:9:28","type":""},{"name":"value0","nativeSrc":"4172:6:28","nodeType":"YulTypedName","src":"4172:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4183:4:28","nodeType":"YulTypedName","src":"4183:4:28","type":""}],"src":"4093:248:28"},{"body":{"nativeSrc":"4447:76:28","nodeType":"YulBlock","src":"4447:76:28","statements":[{"nativeSrc":"4457:26:28","nodeType":"YulAssignment","src":"4457:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4469:9:28","nodeType":"YulIdentifier","src":"4469:9:28"},{"kind":"number","nativeSrc":"4480:2:28","nodeType":"YulLiteral","src":"4480:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4465:3:28","nodeType":"YulIdentifier","src":"4465:3:28"},"nativeSrc":"4465:18:28","nodeType":"YulFunctionCall","src":"4465:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4457:4:28","nodeType":"YulIdentifier","src":"4457:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4499:9:28","nodeType":"YulIdentifier","src":"4499:9:28"},{"name":"value0","nativeSrc":"4510:6:28","nodeType":"YulIdentifier","src":"4510:6:28"}],"functionName":{"name":"mstore","nativeSrc":"4492:6:28","nodeType":"YulIdentifier","src":"4492:6:28"},"nativeSrc":"4492:25:28","nodeType":"YulFunctionCall","src":"4492:25:28"},"nativeSrc":"4492:25:28","nodeType":"YulExpressionStatement","src":"4492:25:28"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"4346:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4416:9:28","nodeType":"YulTypedName","src":"4416:9:28","type":""},{"name":"value0","nativeSrc":"4427:6:28","nodeType":"YulTypedName","src":"4427:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4438:4:28","nodeType":"YulTypedName","src":"4438:4:28","type":""}],"src":"4346:177:28"},{"body":{"nativeSrc":"4606:177:28","nodeType":"YulBlock","src":"4606:177:28","statements":[{"body":{"nativeSrc":"4652:16:28","nodeType":"YulBlock","src":"4652:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4661:1:28","nodeType":"YulLiteral","src":"4661:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4664:1:28","nodeType":"YulLiteral","src":"4664:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4654:6:28","nodeType":"YulIdentifier","src":"4654:6:28"},"nativeSrc":"4654:12:28","nodeType":"YulFunctionCall","src":"4654:12:28"},"nativeSrc":"4654:12:28","nodeType":"YulExpressionStatement","src":"4654:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4627:7:28","nodeType":"YulIdentifier","src":"4627:7:28"},{"name":"headStart","nativeSrc":"4636:9:28","nodeType":"YulIdentifier","src":"4636:9:28"}],"functionName":{"name":"sub","nativeSrc":"4623:3:28","nodeType":"YulIdentifier","src":"4623:3:28"},"nativeSrc":"4623:23:28","nodeType":"YulFunctionCall","src":"4623:23:28"},{"kind":"number","nativeSrc":"4648:2:28","nodeType":"YulLiteral","src":"4648:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4619:3:28","nodeType":"YulIdentifier","src":"4619:3:28"},"nativeSrc":"4619:32:28","nodeType":"YulFunctionCall","src":"4619:32:28"},"nativeSrc":"4616:52:28","nodeType":"YulIf","src":"4616:52:28"},{"nativeSrc":"4677:36:28","nodeType":"YulVariableDeclaration","src":"4677:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4703:9:28","nodeType":"YulIdentifier","src":"4703:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"4690:12:28","nodeType":"YulIdentifier","src":"4690:12:28"},"nativeSrc":"4690:23:28","nodeType":"YulFunctionCall","src":"4690:23:28"},"variables":[{"name":"value","nativeSrc":"4681:5:28","nodeType":"YulTypedName","src":"4681:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4747:5:28","nodeType":"YulIdentifier","src":"4747:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4722:24:28","nodeType":"YulIdentifier","src":"4722:24:28"},"nativeSrc":"4722:31:28","nodeType":"YulFunctionCall","src":"4722:31:28"},"nativeSrc":"4722:31:28","nodeType":"YulExpressionStatement","src":"4722:31:28"},{"nativeSrc":"4762:15:28","nodeType":"YulAssignment","src":"4762:15:28","value":{"name":"value","nativeSrc":"4772:5:28","nodeType":"YulIdentifier","src":"4772:5:28"},"variableNames":[{"name":"value0","nativeSrc":"4762:6:28","nodeType":"YulIdentifier","src":"4762:6:28"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"4528:255:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4572:9:28","nodeType":"YulTypedName","src":"4572:9:28","type":""},{"name":"dataEnd","nativeSrc":"4583:7:28","nodeType":"YulTypedName","src":"4583:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4595:6:28","nodeType":"YulTypedName","src":"4595:6:28","type":""}],"src":"4528:255:28"},{"body":{"nativeSrc":"4892:352:28","nodeType":"YulBlock","src":"4892:352:28","statements":[{"body":{"nativeSrc":"4938:16:28","nodeType":"YulBlock","src":"4938:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4947:1:28","nodeType":"YulLiteral","src":"4947:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4950:1:28","nodeType":"YulLiteral","src":"4950:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4940:6:28","nodeType":"YulIdentifier","src":"4940:6:28"},"nativeSrc":"4940:12:28","nodeType":"YulFunctionCall","src":"4940:12:28"},"nativeSrc":"4940:12:28","nodeType":"YulExpressionStatement","src":"4940:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4913:7:28","nodeType":"YulIdentifier","src":"4913:7:28"},{"name":"headStart","nativeSrc":"4922:9:28","nodeType":"YulIdentifier","src":"4922:9:28"}],"functionName":{"name":"sub","nativeSrc":"4909:3:28","nodeType":"YulIdentifier","src":"4909:3:28"},"nativeSrc":"4909:23:28","nodeType":"YulFunctionCall","src":"4909:23:28"},{"kind":"number","nativeSrc":"4934:2:28","nodeType":"YulLiteral","src":"4934:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"4905:3:28","nodeType":"YulIdentifier","src":"4905:3:28"},"nativeSrc":"4905:32:28","nodeType":"YulFunctionCall","src":"4905:32:28"},"nativeSrc":"4902:52:28","nodeType":"YulIf","src":"4902:52:28"},{"nativeSrc":"4963:36:28","nodeType":"YulVariableDeclaration","src":"4963:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4989:9:28","nodeType":"YulIdentifier","src":"4989:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"4976:12:28","nodeType":"YulIdentifier","src":"4976:12:28"},"nativeSrc":"4976:23:28","nodeType":"YulFunctionCall","src":"4976:23:28"},"variables":[{"name":"value","nativeSrc":"4967:5:28","nodeType":"YulTypedName","src":"4967:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5033:5:28","nodeType":"YulIdentifier","src":"5033:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5008:24:28","nodeType":"YulIdentifier","src":"5008:24:28"},"nativeSrc":"5008:31:28","nodeType":"YulFunctionCall","src":"5008:31:28"},"nativeSrc":"5008:31:28","nodeType":"YulExpressionStatement","src":"5008:31:28"},{"nativeSrc":"5048:15:28","nodeType":"YulAssignment","src":"5048:15:28","value":{"name":"value","nativeSrc":"5058:5:28","nodeType":"YulIdentifier","src":"5058:5:28"},"variableNames":[{"name":"value0","nativeSrc":"5048:6:28","nodeType":"YulIdentifier","src":"5048:6:28"}]},{"nativeSrc":"5072:47:28","nodeType":"YulVariableDeclaration","src":"5072:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5104:9:28","nodeType":"YulIdentifier","src":"5104:9:28"},{"kind":"number","nativeSrc":"5115:2:28","nodeType":"YulLiteral","src":"5115:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5100:3:28","nodeType":"YulIdentifier","src":"5100:3:28"},"nativeSrc":"5100:18:28","nodeType":"YulFunctionCall","src":"5100:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"5087:12:28","nodeType":"YulIdentifier","src":"5087:12:28"},"nativeSrc":"5087:32:28","nodeType":"YulFunctionCall","src":"5087:32:28"},"variables":[{"name":"value_1","nativeSrc":"5076:7:28","nodeType":"YulTypedName","src":"5076:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"5153:7:28","nodeType":"YulIdentifier","src":"5153:7:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5128:24:28","nodeType":"YulIdentifier","src":"5128:24:28"},"nativeSrc":"5128:33:28","nodeType":"YulFunctionCall","src":"5128:33:28"},"nativeSrc":"5128:33:28","nodeType":"YulExpressionStatement","src":"5128:33:28"},{"nativeSrc":"5170:17:28","nodeType":"YulAssignment","src":"5170:17:28","value":{"name":"value_1","nativeSrc":"5180:7:28","nodeType":"YulIdentifier","src":"5180:7:28"},"variableNames":[{"name":"value1","nativeSrc":"5170:6:28","nodeType":"YulIdentifier","src":"5170:6:28"}]},{"nativeSrc":"5196:42:28","nodeType":"YulAssignment","src":"5196:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5223:9:28","nodeType":"YulIdentifier","src":"5223:9:28"},{"kind":"number","nativeSrc":"5234:2:28","nodeType":"YulLiteral","src":"5234:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5219:3:28","nodeType":"YulIdentifier","src":"5219:3:28"},"nativeSrc":"5219:18:28","nodeType":"YulFunctionCall","src":"5219:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"5206:12:28","nodeType":"YulIdentifier","src":"5206:12:28"},"nativeSrc":"5206:32:28","nodeType":"YulFunctionCall","src":"5206:32:28"},"variableNames":[{"name":"value2","nativeSrc":"5196:6:28","nodeType":"YulIdentifier","src":"5196:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"4788:456:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4842:9:28","nodeType":"YulTypedName","src":"4842:9:28","type":""},{"name":"dataEnd","nativeSrc":"4853:7:28","nodeType":"YulTypedName","src":"4853:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4865:6:28","nodeType":"YulTypedName","src":"4865:6:28","type":""},{"name":"value1","nativeSrc":"4873:6:28","nodeType":"YulTypedName","src":"4873:6:28","type":""},{"name":"value2","nativeSrc":"4881:6:28","nodeType":"YulTypedName","src":"4881:6:28","type":""}],"src":"4788:456:28"},{"body":{"nativeSrc":"5336:161:28","nodeType":"YulBlock","src":"5336:161:28","statements":[{"body":{"nativeSrc":"5382:16:28","nodeType":"YulBlock","src":"5382:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5391:1:28","nodeType":"YulLiteral","src":"5391:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5394:1:28","nodeType":"YulLiteral","src":"5394:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5384:6:28","nodeType":"YulIdentifier","src":"5384:6:28"},"nativeSrc":"5384:12:28","nodeType":"YulFunctionCall","src":"5384:12:28"},"nativeSrc":"5384:12:28","nodeType":"YulExpressionStatement","src":"5384:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5357:7:28","nodeType":"YulIdentifier","src":"5357:7:28"},{"name":"headStart","nativeSrc":"5366:9:28","nodeType":"YulIdentifier","src":"5366:9:28"}],"functionName":{"name":"sub","nativeSrc":"5353:3:28","nodeType":"YulIdentifier","src":"5353:3:28"},"nativeSrc":"5353:23:28","nodeType":"YulFunctionCall","src":"5353:23:28"},{"kind":"number","nativeSrc":"5378:2:28","nodeType":"YulLiteral","src":"5378:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5349:3:28","nodeType":"YulIdentifier","src":"5349:3:28"},"nativeSrc":"5349:32:28","nodeType":"YulFunctionCall","src":"5349:32:28"},"nativeSrc":"5346:52:28","nodeType":"YulIf","src":"5346:52:28"},{"nativeSrc":"5407:33:28","nodeType":"YulAssignment","src":"5407:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5430:9:28","nodeType":"YulIdentifier","src":"5430:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"5417:12:28","nodeType":"YulIdentifier","src":"5417:12:28"},"nativeSrc":"5417:23:28","nodeType":"YulFunctionCall","src":"5417:23:28"},"variableNames":[{"name":"value0","nativeSrc":"5407:6:28","nodeType":"YulIdentifier","src":"5407:6:28"}]},{"nativeSrc":"5449:42:28","nodeType":"YulAssignment","src":"5449:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5476:9:28","nodeType":"YulIdentifier","src":"5476:9:28"},{"kind":"number","nativeSrc":"5487:2:28","nodeType":"YulLiteral","src":"5487:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5472:3:28","nodeType":"YulIdentifier","src":"5472:3:28"},"nativeSrc":"5472:18:28","nodeType":"YulFunctionCall","src":"5472:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"5459:12:28","nodeType":"YulIdentifier","src":"5459:12:28"},"nativeSrc":"5459:32:28","nodeType":"YulFunctionCall","src":"5459:32:28"},"variableNames":[{"name":"value1","nativeSrc":"5449:6:28","nodeType":"YulIdentifier","src":"5449:6:28"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"5249:248:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5294:9:28","nodeType":"YulTypedName","src":"5294:9:28","type":""},{"name":"dataEnd","nativeSrc":"5305:7:28","nodeType":"YulTypedName","src":"5305:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5317:6:28","nodeType":"YulTypedName","src":"5317:6:28","type":""},{"name":"value1","nativeSrc":"5325:6:28","nodeType":"YulTypedName","src":"5325:6:28","type":""}],"src":"5249:248:28"},{"body":{"nativeSrc":"5713:691:28","nodeType":"YulBlock","src":"5713:691:28","statements":[{"nativeSrc":"5723:12:28","nodeType":"YulVariableDeclaration","src":"5723:12:28","value":{"kind":"number","nativeSrc":"5733:2:28","nodeType":"YulLiteral","src":"5733:2:28","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"5727:2:28","nodeType":"YulTypedName","src":"5727:2:28","type":""}]},{"nativeSrc":"5744:32:28","nodeType":"YulVariableDeclaration","src":"5744:32:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5762:9:28","nodeType":"YulIdentifier","src":"5762:9:28"},{"name":"_1","nativeSrc":"5773:2:28","nodeType":"YulIdentifier","src":"5773:2:28"}],"functionName":{"name":"add","nativeSrc":"5758:3:28","nodeType":"YulIdentifier","src":"5758:3:28"},"nativeSrc":"5758:18:28","nodeType":"YulFunctionCall","src":"5758:18:28"},"variables":[{"name":"tail_1","nativeSrc":"5748:6:28","nodeType":"YulTypedName","src":"5748:6:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5792:9:28","nodeType":"YulIdentifier","src":"5792:9:28"},{"name":"_1","nativeSrc":"5803:2:28","nodeType":"YulIdentifier","src":"5803:2:28"}],"functionName":{"name":"mstore","nativeSrc":"5785:6:28","nodeType":"YulIdentifier","src":"5785:6:28"},"nativeSrc":"5785:21:28","nodeType":"YulFunctionCall","src":"5785:21:28"},"nativeSrc":"5785:21:28","nodeType":"YulExpressionStatement","src":"5785:21:28"},{"nativeSrc":"5815:17:28","nodeType":"YulVariableDeclaration","src":"5815:17:28","value":{"name":"tail_1","nativeSrc":"5826:6:28","nodeType":"YulIdentifier","src":"5826:6:28"},"variables":[{"name":"pos","nativeSrc":"5819:3:28","nodeType":"YulTypedName","src":"5819:3:28","type":""}]},{"nativeSrc":"5841:27:28","nodeType":"YulVariableDeclaration","src":"5841:27:28","value":{"arguments":[{"name":"value0","nativeSrc":"5861:6:28","nodeType":"YulIdentifier","src":"5861:6:28"}],"functionName":{"name":"mload","nativeSrc":"5855:5:28","nodeType":"YulIdentifier","src":"5855:5:28"},"nativeSrc":"5855:13:28","nodeType":"YulFunctionCall","src":"5855:13:28"},"variables":[{"name":"length","nativeSrc":"5845:6:28","nodeType":"YulTypedName","src":"5845:6:28","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"5884:6:28","nodeType":"YulIdentifier","src":"5884:6:28"},{"name":"length","nativeSrc":"5892:6:28","nodeType":"YulIdentifier","src":"5892:6:28"}],"functionName":{"name":"mstore","nativeSrc":"5877:6:28","nodeType":"YulIdentifier","src":"5877:6:28"},"nativeSrc":"5877:22:28","nodeType":"YulFunctionCall","src":"5877:22:28"},"nativeSrc":"5877:22:28","nodeType":"YulExpressionStatement","src":"5877:22:28"},{"nativeSrc":"5908:12:28","nodeType":"YulVariableDeclaration","src":"5908:12:28","value":{"kind":"number","nativeSrc":"5918:2:28","nodeType":"YulLiteral","src":"5918:2:28","type":"","value":"64"},"variables":[{"name":"_2","nativeSrc":"5912:2:28","nodeType":"YulTypedName","src":"5912:2:28","type":""}]},{"nativeSrc":"5929:25:28","nodeType":"YulAssignment","src":"5929:25:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5940:9:28","nodeType":"YulIdentifier","src":"5940:9:28"},{"kind":"number","nativeSrc":"5951:2:28","nodeType":"YulLiteral","src":"5951:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5936:3:28","nodeType":"YulIdentifier","src":"5936:3:28"},"nativeSrc":"5936:18:28","nodeType":"YulFunctionCall","src":"5936:18:28"},"variableNames":[{"name":"pos","nativeSrc":"5929:3:28","nodeType":"YulIdentifier","src":"5929:3:28"}]},{"nativeSrc":"5963:29:28","nodeType":"YulVariableDeclaration","src":"5963:29:28","value":{"arguments":[{"name":"value0","nativeSrc":"5981:6:28","nodeType":"YulIdentifier","src":"5981:6:28"},{"name":"_1","nativeSrc":"5989:2:28","nodeType":"YulIdentifier","src":"5989:2:28"}],"functionName":{"name":"add","nativeSrc":"5977:3:28","nodeType":"YulIdentifier","src":"5977:3:28"},"nativeSrc":"5977:15:28","nodeType":"YulFunctionCall","src":"5977:15:28"},"variables":[{"name":"srcPtr","nativeSrc":"5967:6:28","nodeType":"YulTypedName","src":"5967:6:28","type":""}]},{"nativeSrc":"6001:10:28","nodeType":"YulVariableDeclaration","src":"6001:10:28","value":{"kind":"number","nativeSrc":"6010:1:28","nodeType":"YulLiteral","src":"6010:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"6005:1:28","nodeType":"YulTypedName","src":"6005:1:28","type":""}]},{"body":{"nativeSrc":"6069:309:28","nodeType":"YulBlock","src":"6069:309:28","statements":[{"nativeSrc":"6083:23:28","nodeType":"YulVariableDeclaration","src":"6083:23:28","value":{"arguments":[{"name":"srcPtr","nativeSrc":"6099:6:28","nodeType":"YulIdentifier","src":"6099:6:28"}],"functionName":{"name":"mload","nativeSrc":"6093:5:28","nodeType":"YulIdentifier","src":"6093:5:28"},"nativeSrc":"6093:13:28","nodeType":"YulFunctionCall","src":"6093:13:28"},"variables":[{"name":"_3","nativeSrc":"6087:2:28","nodeType":"YulTypedName","src":"6087:2:28","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"6126:3:28","nodeType":"YulIdentifier","src":"6126:3:28"},{"arguments":[{"name":"_3","nativeSrc":"6137:2:28","nodeType":"YulIdentifier","src":"6137:2:28"}],"functionName":{"name":"mload","nativeSrc":"6131:5:28","nodeType":"YulIdentifier","src":"6131:5:28"},"nativeSrc":"6131:9:28","nodeType":"YulFunctionCall","src":"6131:9:28"}],"functionName":{"name":"mstore","nativeSrc":"6119:6:28","nodeType":"YulIdentifier","src":"6119:6:28"},"nativeSrc":"6119:22:28","nodeType":"YulFunctionCall","src":"6119:22:28"},"nativeSrc":"6119:22:28","nodeType":"YulExpressionStatement","src":"6119:22:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6165:3:28","nodeType":"YulIdentifier","src":"6165:3:28"},{"name":"_1","nativeSrc":"6170:2:28","nodeType":"YulIdentifier","src":"6170:2:28"}],"functionName":{"name":"add","nativeSrc":"6161:3:28","nodeType":"YulIdentifier","src":"6161:3:28"},"nativeSrc":"6161:12:28","nodeType":"YulFunctionCall","src":"6161:12:28"},{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"6185:2:28","nodeType":"YulIdentifier","src":"6185:2:28"},{"name":"_1","nativeSrc":"6189:2:28","nodeType":"YulIdentifier","src":"6189:2:28"}],"functionName":{"name":"add","nativeSrc":"6181:3:28","nodeType":"YulIdentifier","src":"6181:3:28"},"nativeSrc":"6181:11:28","nodeType":"YulFunctionCall","src":"6181:11:28"}],"functionName":{"name":"mload","nativeSrc":"6175:5:28","nodeType":"YulIdentifier","src":"6175:5:28"},"nativeSrc":"6175:18:28","nodeType":"YulFunctionCall","src":"6175:18:28"}],"functionName":{"name":"mstore","nativeSrc":"6154:6:28","nodeType":"YulIdentifier","src":"6154:6:28"},"nativeSrc":"6154:40:28","nodeType":"YulFunctionCall","src":"6154:40:28"},"nativeSrc":"6154:40:28","nodeType":"YulExpressionStatement","src":"6154:40:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6218:3:28","nodeType":"YulIdentifier","src":"6218:3:28"},{"name":"_2","nativeSrc":"6223:2:28","nodeType":"YulIdentifier","src":"6223:2:28"}],"functionName":{"name":"add","nativeSrc":"6214:3:28","nodeType":"YulIdentifier","src":"6214:3:28"},"nativeSrc":"6214:12:28","nodeType":"YulFunctionCall","src":"6214:12:28"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"6242:2:28","nodeType":"YulIdentifier","src":"6242:2:28"},{"name":"_2","nativeSrc":"6246:2:28","nodeType":"YulIdentifier","src":"6246:2:28"}],"functionName":{"name":"add","nativeSrc":"6238:3:28","nodeType":"YulIdentifier","src":"6238:3:28"},"nativeSrc":"6238:11:28","nodeType":"YulFunctionCall","src":"6238:11:28"}],"functionName":{"name":"mload","nativeSrc":"6232:5:28","nodeType":"YulIdentifier","src":"6232:5:28"},"nativeSrc":"6232:18:28","nodeType":"YulFunctionCall","src":"6232:18:28"},{"kind":"number","nativeSrc":"6252:42:28","nodeType":"YulLiteral","src":"6252:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6228:3:28","nodeType":"YulIdentifier","src":"6228:3:28"},"nativeSrc":"6228:67:28","nodeType":"YulFunctionCall","src":"6228:67:28"}],"functionName":{"name":"mstore","nativeSrc":"6207:6:28","nodeType":"YulIdentifier","src":"6207:6:28"},"nativeSrc":"6207:89:28","nodeType":"YulFunctionCall","src":"6207:89:28"},"nativeSrc":"6207:89:28","nodeType":"YulExpressionStatement","src":"6207:89:28"},{"nativeSrc":"6309:21:28","nodeType":"YulAssignment","src":"6309:21:28","value":{"arguments":[{"name":"pos","nativeSrc":"6320:3:28","nodeType":"YulIdentifier","src":"6320:3:28"},{"kind":"number","nativeSrc":"6325:4:28","nodeType":"YulLiteral","src":"6325:4:28","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"6316:3:28","nodeType":"YulIdentifier","src":"6316:3:28"},"nativeSrc":"6316:14:28","nodeType":"YulFunctionCall","src":"6316:14:28"},"variableNames":[{"name":"pos","nativeSrc":"6309:3:28","nodeType":"YulIdentifier","src":"6309:3:28"}]},{"nativeSrc":"6343:25:28","nodeType":"YulAssignment","src":"6343:25:28","value":{"arguments":[{"name":"srcPtr","nativeSrc":"6357:6:28","nodeType":"YulIdentifier","src":"6357:6:28"},{"name":"_1","nativeSrc":"6365:2:28","nodeType":"YulIdentifier","src":"6365:2:28"}],"functionName":{"name":"add","nativeSrc":"6353:3:28","nodeType":"YulIdentifier","src":"6353:3:28"},"nativeSrc":"6353:15:28","nodeType":"YulFunctionCall","src":"6353:15:28"},"variableNames":[{"name":"srcPtr","nativeSrc":"6343:6:28","nodeType":"YulIdentifier","src":"6343:6:28"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"6031:1:28","nodeType":"YulIdentifier","src":"6031:1:28"},{"name":"length","nativeSrc":"6034:6:28","nodeType":"YulIdentifier","src":"6034:6:28"}],"functionName":{"name":"lt","nativeSrc":"6028:2:28","nodeType":"YulIdentifier","src":"6028:2:28"},"nativeSrc":"6028:13:28","nodeType":"YulFunctionCall","src":"6028:13:28"},"nativeSrc":"6020:358:28","nodeType":"YulForLoop","post":{"nativeSrc":"6042:18:28","nodeType":"YulBlock","src":"6042:18:28","statements":[{"nativeSrc":"6044:14:28","nodeType":"YulAssignment","src":"6044:14:28","value":{"arguments":[{"name":"i","nativeSrc":"6053:1:28","nodeType":"YulIdentifier","src":"6053:1:28"},{"kind":"number","nativeSrc":"6056:1:28","nodeType":"YulLiteral","src":"6056:1:28","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6049:3:28","nodeType":"YulIdentifier","src":"6049:3:28"},"nativeSrc":"6049:9:28","nodeType":"YulFunctionCall","src":"6049:9:28"},"variableNames":[{"name":"i","nativeSrc":"6044:1:28","nodeType":"YulIdentifier","src":"6044:1:28"}]}]},"pre":{"nativeSrc":"6024:3:28","nodeType":"YulBlock","src":"6024:3:28","statements":[]},"src":"6020:358:28"},{"nativeSrc":"6387:11:28","nodeType":"YulAssignment","src":"6387:11:28","value":{"name":"pos","nativeSrc":"6395:3:28","nodeType":"YulIdentifier","src":"6395:3:28"},"variableNames":[{"name":"tail","nativeSrc":"6387:4:28","nodeType":"YulIdentifier","src":"6387:4:28"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"5502:902:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5682:9:28","nodeType":"YulTypedName","src":"5682:9:28","type":""},{"name":"value0","nativeSrc":"5693:6:28","nodeType":"YulTypedName","src":"5693:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5704:4:28","nodeType":"YulTypedName","src":"5704:4:28","type":""}],"src":"5502:902:28"},{"body":{"nativeSrc":"6506:87:28","nodeType":"YulBlock","src":"6506:87:28","statements":[{"nativeSrc":"6516:26:28","nodeType":"YulAssignment","src":"6516:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6528:9:28","nodeType":"YulIdentifier","src":"6528:9:28"},{"kind":"number","nativeSrc":"6539:2:28","nodeType":"YulLiteral","src":"6539:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6524:3:28","nodeType":"YulIdentifier","src":"6524:3:28"},"nativeSrc":"6524:18:28","nodeType":"YulFunctionCall","src":"6524:18:28"},"variableNames":[{"name":"tail","nativeSrc":"6516:4:28","nodeType":"YulIdentifier","src":"6516:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6558:9:28","nodeType":"YulIdentifier","src":"6558:9:28"},{"arguments":[{"name":"value0","nativeSrc":"6573:6:28","nodeType":"YulIdentifier","src":"6573:6:28"},{"kind":"number","nativeSrc":"6581:4:28","nodeType":"YulLiteral","src":"6581:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"6569:3:28","nodeType":"YulIdentifier","src":"6569:3:28"},"nativeSrc":"6569:17:28","nodeType":"YulFunctionCall","src":"6569:17:28"}],"functionName":{"name":"mstore","nativeSrc":"6551:6:28","nodeType":"YulIdentifier","src":"6551:6:28"},"nativeSrc":"6551:36:28","nodeType":"YulFunctionCall","src":"6551:36:28"},"nativeSrc":"6551:36:28","nodeType":"YulExpressionStatement","src":"6551:36:28"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nativeSrc":"6409:184:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6475:9:28","nodeType":"YulTypedName","src":"6475:9:28","type":""},{"name":"value0","nativeSrc":"6486:6:28","nodeType":"YulTypedName","src":"6486:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6497:4:28","nodeType":"YulTypedName","src":"6497:4:28","type":""}],"src":"6409:184:28"},{"body":{"nativeSrc":"6699:76:28","nodeType":"YulBlock","src":"6699:76:28","statements":[{"nativeSrc":"6709:26:28","nodeType":"YulAssignment","src":"6709:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6721:9:28","nodeType":"YulIdentifier","src":"6721:9:28"},{"kind":"number","nativeSrc":"6732:2:28","nodeType":"YulLiteral","src":"6732:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6717:3:28","nodeType":"YulIdentifier","src":"6717:3:28"},"nativeSrc":"6717:18:28","nodeType":"YulFunctionCall","src":"6717:18:28"},"variableNames":[{"name":"tail","nativeSrc":"6709:4:28","nodeType":"YulIdentifier","src":"6709:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6751:9:28","nodeType":"YulIdentifier","src":"6751:9:28"},{"name":"value0","nativeSrc":"6762:6:28","nodeType":"YulIdentifier","src":"6762:6:28"}],"functionName":{"name":"mstore","nativeSrc":"6744:6:28","nodeType":"YulIdentifier","src":"6744:6:28"},"nativeSrc":"6744:25:28","nodeType":"YulFunctionCall","src":"6744:25:28"},"nativeSrc":"6744:25:28","nodeType":"YulExpressionStatement","src":"6744:25:28"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"6598:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6668:9:28","nodeType":"YulTypedName","src":"6668:9:28","type":""},{"name":"value0","nativeSrc":"6679:6:28","nodeType":"YulTypedName","src":"6679:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6690:4:28","nodeType":"YulTypedName","src":"6690:4:28","type":""}],"src":"6598:177:28"},{"body":{"nativeSrc":"6850:177:28","nodeType":"YulBlock","src":"6850:177:28","statements":[{"body":{"nativeSrc":"6896:16:28","nodeType":"YulBlock","src":"6896:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6905:1:28","nodeType":"YulLiteral","src":"6905:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6908:1:28","nodeType":"YulLiteral","src":"6908:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6898:6:28","nodeType":"YulIdentifier","src":"6898:6:28"},"nativeSrc":"6898:12:28","nodeType":"YulFunctionCall","src":"6898:12:28"},"nativeSrc":"6898:12:28","nodeType":"YulExpressionStatement","src":"6898:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6871:7:28","nodeType":"YulIdentifier","src":"6871:7:28"},{"name":"headStart","nativeSrc":"6880:9:28","nodeType":"YulIdentifier","src":"6880:9:28"}],"functionName":{"name":"sub","nativeSrc":"6867:3:28","nodeType":"YulIdentifier","src":"6867:3:28"},"nativeSrc":"6867:23:28","nodeType":"YulFunctionCall","src":"6867:23:28"},{"kind":"number","nativeSrc":"6892:2:28","nodeType":"YulLiteral","src":"6892:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6863:3:28","nodeType":"YulIdentifier","src":"6863:3:28"},"nativeSrc":"6863:32:28","nodeType":"YulFunctionCall","src":"6863:32:28"},"nativeSrc":"6860:52:28","nodeType":"YulIf","src":"6860:52:28"},{"nativeSrc":"6921:36:28","nodeType":"YulVariableDeclaration","src":"6921:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6947:9:28","nodeType":"YulIdentifier","src":"6947:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"6934:12:28","nodeType":"YulIdentifier","src":"6934:12:28"},"nativeSrc":"6934:23:28","nodeType":"YulFunctionCall","src":"6934:23:28"},"variables":[{"name":"value","nativeSrc":"6925:5:28","nodeType":"YulTypedName","src":"6925:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6991:5:28","nodeType":"YulIdentifier","src":"6991:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6966:24:28","nodeType":"YulIdentifier","src":"6966:24:28"},"nativeSrc":"6966:31:28","nodeType":"YulFunctionCall","src":"6966:31:28"},"nativeSrc":"6966:31:28","nodeType":"YulExpressionStatement","src":"6966:31:28"},{"nativeSrc":"7006:15:28","nodeType":"YulAssignment","src":"7006:15:28","value":{"name":"value","nativeSrc":"7016:5:28","nodeType":"YulIdentifier","src":"7016:5:28"},"variableNames":[{"name":"value0","nativeSrc":"7006:6:28","nodeType":"YulIdentifier","src":"7006:6:28"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"6780:247:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6816:9:28","nodeType":"YulTypedName","src":"6816:9:28","type":""},{"name":"dataEnd","nativeSrc":"6827:7:28","nodeType":"YulTypedName","src":"6827:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6839:6:28","nodeType":"YulTypedName","src":"6839:6:28","type":""}],"src":"6780:247:28"},{"body":{"nativeSrc":"7145:301:28","nodeType":"YulBlock","src":"7145:301:28","statements":[{"body":{"nativeSrc":"7191:16:28","nodeType":"YulBlock","src":"7191:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7200:1:28","nodeType":"YulLiteral","src":"7200:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7203:1:28","nodeType":"YulLiteral","src":"7203:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7193:6:28","nodeType":"YulIdentifier","src":"7193:6:28"},"nativeSrc":"7193:12:28","nodeType":"YulFunctionCall","src":"7193:12:28"},"nativeSrc":"7193:12:28","nodeType":"YulExpressionStatement","src":"7193:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7166:7:28","nodeType":"YulIdentifier","src":"7166:7:28"},{"name":"headStart","nativeSrc":"7175:9:28","nodeType":"YulIdentifier","src":"7175:9:28"}],"functionName":{"name":"sub","nativeSrc":"7162:3:28","nodeType":"YulIdentifier","src":"7162:3:28"},"nativeSrc":"7162:23:28","nodeType":"YulFunctionCall","src":"7162:23:28"},{"kind":"number","nativeSrc":"7187:2:28","nodeType":"YulLiteral","src":"7187:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7158:3:28","nodeType":"YulIdentifier","src":"7158:3:28"},"nativeSrc":"7158:32:28","nodeType":"YulFunctionCall","src":"7158:32:28"},"nativeSrc":"7155:52:28","nodeType":"YulIf","src":"7155:52:28"},{"nativeSrc":"7216:36:28","nodeType":"YulVariableDeclaration","src":"7216:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"7242:9:28","nodeType":"YulIdentifier","src":"7242:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"7229:12:28","nodeType":"YulIdentifier","src":"7229:12:28"},"nativeSrc":"7229:23:28","nodeType":"YulFunctionCall","src":"7229:23:28"},"variables":[{"name":"value","nativeSrc":"7220:5:28","nodeType":"YulTypedName","src":"7220:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7286:5:28","nodeType":"YulIdentifier","src":"7286:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7261:24:28","nodeType":"YulIdentifier","src":"7261:24:28"},"nativeSrc":"7261:31:28","nodeType":"YulFunctionCall","src":"7261:31:28"},"nativeSrc":"7261:31:28","nodeType":"YulExpressionStatement","src":"7261:31:28"},{"nativeSrc":"7301:15:28","nodeType":"YulAssignment","src":"7301:15:28","value":{"name":"value","nativeSrc":"7311:5:28","nodeType":"YulIdentifier","src":"7311:5:28"},"variableNames":[{"name":"value0","nativeSrc":"7301:6:28","nodeType":"YulIdentifier","src":"7301:6:28"}]},{"nativeSrc":"7325:47:28","nodeType":"YulVariableDeclaration","src":"7325:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7357:9:28","nodeType":"YulIdentifier","src":"7357:9:28"},{"kind":"number","nativeSrc":"7368:2:28","nodeType":"YulLiteral","src":"7368:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7353:3:28","nodeType":"YulIdentifier","src":"7353:3:28"},"nativeSrc":"7353:18:28","nodeType":"YulFunctionCall","src":"7353:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"7340:12:28","nodeType":"YulIdentifier","src":"7340:12:28"},"nativeSrc":"7340:32:28","nodeType":"YulFunctionCall","src":"7340:32:28"},"variables":[{"name":"value_1","nativeSrc":"7329:7:28","nodeType":"YulTypedName","src":"7329:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"7406:7:28","nodeType":"YulIdentifier","src":"7406:7:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7381:24:28","nodeType":"YulIdentifier","src":"7381:24:28"},"nativeSrc":"7381:33:28","nodeType":"YulFunctionCall","src":"7381:33:28"},"nativeSrc":"7381:33:28","nodeType":"YulExpressionStatement","src":"7381:33:28"},{"nativeSrc":"7423:17:28","nodeType":"YulAssignment","src":"7423:17:28","value":{"name":"value_1","nativeSrc":"7433:7:28","nodeType":"YulIdentifier","src":"7433:7:28"},"variableNames":[{"name":"value1","nativeSrc":"7423:6:28","nodeType":"YulIdentifier","src":"7423:6:28"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149t_address","nativeSrc":"7032:414:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7103:9:28","nodeType":"YulTypedName","src":"7103:9:28","type":""},{"name":"dataEnd","nativeSrc":"7114:7:28","nodeType":"YulTypedName","src":"7114:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7126:6:28","nodeType":"YulTypedName","src":"7126:6:28","type":""},{"name":"value1","nativeSrc":"7134:6:28","nodeType":"YulTypedName","src":"7134:6:28","type":""}],"src":"7032:414:28"},{"body":{"nativeSrc":"7555:352:28","nodeType":"YulBlock","src":"7555:352:28","statements":[{"body":{"nativeSrc":"7601:16:28","nodeType":"YulBlock","src":"7601:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7610:1:28","nodeType":"YulLiteral","src":"7610:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7613:1:28","nodeType":"YulLiteral","src":"7613:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7603:6:28","nodeType":"YulIdentifier","src":"7603:6:28"},"nativeSrc":"7603:12:28","nodeType":"YulFunctionCall","src":"7603:12:28"},"nativeSrc":"7603:12:28","nodeType":"YulExpressionStatement","src":"7603:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7576:7:28","nodeType":"YulIdentifier","src":"7576:7:28"},{"name":"headStart","nativeSrc":"7585:9:28","nodeType":"YulIdentifier","src":"7585:9:28"}],"functionName":{"name":"sub","nativeSrc":"7572:3:28","nodeType":"YulIdentifier","src":"7572:3:28"},"nativeSrc":"7572:23:28","nodeType":"YulFunctionCall","src":"7572:23:28"},{"kind":"number","nativeSrc":"7597:2:28","nodeType":"YulLiteral","src":"7597:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"7568:3:28","nodeType":"YulIdentifier","src":"7568:3:28"},"nativeSrc":"7568:32:28","nodeType":"YulFunctionCall","src":"7568:32:28"},"nativeSrc":"7565:52:28","nodeType":"YulIf","src":"7565:52:28"},{"nativeSrc":"7626:36:28","nodeType":"YulVariableDeclaration","src":"7626:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"7652:9:28","nodeType":"YulIdentifier","src":"7652:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"7639:12:28","nodeType":"YulIdentifier","src":"7639:12:28"},"nativeSrc":"7639:23:28","nodeType":"YulFunctionCall","src":"7639:23:28"},"variables":[{"name":"value","nativeSrc":"7630:5:28","nodeType":"YulTypedName","src":"7630:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7696:5:28","nodeType":"YulIdentifier","src":"7696:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7671:24:28","nodeType":"YulIdentifier","src":"7671:24:28"},"nativeSrc":"7671:31:28","nodeType":"YulFunctionCall","src":"7671:31:28"},"nativeSrc":"7671:31:28","nodeType":"YulExpressionStatement","src":"7671:31:28"},{"nativeSrc":"7711:15:28","nodeType":"YulAssignment","src":"7711:15:28","value":{"name":"value","nativeSrc":"7721:5:28","nodeType":"YulIdentifier","src":"7721:5:28"},"variableNames":[{"name":"value0","nativeSrc":"7711:6:28","nodeType":"YulIdentifier","src":"7711:6:28"}]},{"nativeSrc":"7735:42:28","nodeType":"YulAssignment","src":"7735:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7762:9:28","nodeType":"YulIdentifier","src":"7762:9:28"},{"kind":"number","nativeSrc":"7773:2:28","nodeType":"YulLiteral","src":"7773:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7758:3:28","nodeType":"YulIdentifier","src":"7758:3:28"},"nativeSrc":"7758:18:28","nodeType":"YulFunctionCall","src":"7758:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"7745:12:28","nodeType":"YulIdentifier","src":"7745:12:28"},"nativeSrc":"7745:32:28","nodeType":"YulFunctionCall","src":"7745:32:28"},"variableNames":[{"name":"value1","nativeSrc":"7735:6:28","nodeType":"YulIdentifier","src":"7735:6:28"}]},{"nativeSrc":"7786:47:28","nodeType":"YulVariableDeclaration","src":"7786:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7818:9:28","nodeType":"YulIdentifier","src":"7818:9:28"},{"kind":"number","nativeSrc":"7829:2:28","nodeType":"YulLiteral","src":"7829:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7814:3:28","nodeType":"YulIdentifier","src":"7814:3:28"},"nativeSrc":"7814:18:28","nodeType":"YulFunctionCall","src":"7814:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"7801:12:28","nodeType":"YulIdentifier","src":"7801:12:28"},"nativeSrc":"7801:32:28","nodeType":"YulFunctionCall","src":"7801:32:28"},"variables":[{"name":"value_1","nativeSrc":"7790:7:28","nodeType":"YulTypedName","src":"7790:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"7867:7:28","nodeType":"YulIdentifier","src":"7867:7:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7842:24:28","nodeType":"YulIdentifier","src":"7842:24:28"},"nativeSrc":"7842:33:28","nodeType":"YulFunctionCall","src":"7842:33:28"},"nativeSrc":"7842:33:28","nodeType":"YulExpressionStatement","src":"7842:33:28"},{"nativeSrc":"7884:17:28","nodeType":"YulAssignment","src":"7884:17:28","value":{"name":"value_1","nativeSrc":"7894:7:28","nodeType":"YulIdentifier","src":"7894:7:28"},"variableNames":[{"name":"value2","nativeSrc":"7884:6:28","nodeType":"YulIdentifier","src":"7884:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_address","nativeSrc":"7451:456:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7505:9:28","nodeType":"YulTypedName","src":"7505:9:28","type":""},{"name":"dataEnd","nativeSrc":"7516:7:28","nodeType":"YulTypedName","src":"7516:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7528:6:28","nodeType":"YulTypedName","src":"7528:6:28","type":""},{"name":"value1","nativeSrc":"7536:6:28","nodeType":"YulTypedName","src":"7536:6:28","type":""},{"name":"value2","nativeSrc":"7544:6:28","nodeType":"YulTypedName","src":"7544:6:28","type":""}],"src":"7451:456:28"},{"body":{"nativeSrc":"8008:359:28","nodeType":"YulBlock","src":"8008:359:28","statements":[{"body":{"nativeSrc":"8054:16:28","nodeType":"YulBlock","src":"8054:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8063:1:28","nodeType":"YulLiteral","src":"8063:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8066:1:28","nodeType":"YulLiteral","src":"8066:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8056:6:28","nodeType":"YulIdentifier","src":"8056:6:28"},"nativeSrc":"8056:12:28","nodeType":"YulFunctionCall","src":"8056:12:28"},"nativeSrc":"8056:12:28","nodeType":"YulExpressionStatement","src":"8056:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8029:7:28","nodeType":"YulIdentifier","src":"8029:7:28"},{"name":"headStart","nativeSrc":"8038:9:28","nodeType":"YulIdentifier","src":"8038:9:28"}],"functionName":{"name":"sub","nativeSrc":"8025:3:28","nodeType":"YulIdentifier","src":"8025:3:28"},"nativeSrc":"8025:23:28","nodeType":"YulFunctionCall","src":"8025:23:28"},{"kind":"number","nativeSrc":"8050:2:28","nodeType":"YulLiteral","src":"8050:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8021:3:28","nodeType":"YulIdentifier","src":"8021:3:28"},"nativeSrc":"8021:32:28","nodeType":"YulFunctionCall","src":"8021:32:28"},"nativeSrc":"8018:52:28","nodeType":"YulIf","src":"8018:52:28"},{"nativeSrc":"8079:36:28","nodeType":"YulVariableDeclaration","src":"8079:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"8105:9:28","nodeType":"YulIdentifier","src":"8105:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"8092:12:28","nodeType":"YulIdentifier","src":"8092:12:28"},"nativeSrc":"8092:23:28","nodeType":"YulFunctionCall","src":"8092:23:28"},"variables":[{"name":"value","nativeSrc":"8083:5:28","nodeType":"YulTypedName","src":"8083:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8149:5:28","nodeType":"YulIdentifier","src":"8149:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"8124:24:28","nodeType":"YulIdentifier","src":"8124:24:28"},"nativeSrc":"8124:31:28","nodeType":"YulFunctionCall","src":"8124:31:28"},"nativeSrc":"8124:31:28","nodeType":"YulExpressionStatement","src":"8124:31:28"},{"nativeSrc":"8164:15:28","nodeType":"YulAssignment","src":"8164:15:28","value":{"name":"value","nativeSrc":"8174:5:28","nodeType":"YulIdentifier","src":"8174:5:28"},"variableNames":[{"name":"value0","nativeSrc":"8164:6:28","nodeType":"YulIdentifier","src":"8164:6:28"}]},{"nativeSrc":"8188:46:28","nodeType":"YulVariableDeclaration","src":"8188:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8219:9:28","nodeType":"YulIdentifier","src":"8219:9:28"},{"kind":"number","nativeSrc":"8230:2:28","nodeType":"YulLiteral","src":"8230:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8215:3:28","nodeType":"YulIdentifier","src":"8215:3:28"},"nativeSrc":"8215:18:28","nodeType":"YulFunctionCall","src":"8215:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"8202:12:28","nodeType":"YulIdentifier","src":"8202:12:28"},"nativeSrc":"8202:32:28","nodeType":"YulFunctionCall","src":"8202:32:28"},"variables":[{"name":"offset","nativeSrc":"8192:6:28","nodeType":"YulTypedName","src":"8192:6:28","type":""}]},{"body":{"nativeSrc":"8277:16:28","nodeType":"YulBlock","src":"8277:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8286:1:28","nodeType":"YulLiteral","src":"8286:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8289:1:28","nodeType":"YulLiteral","src":"8289:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8279:6:28","nodeType":"YulIdentifier","src":"8279:6:28"},"nativeSrc":"8279:12:28","nodeType":"YulFunctionCall","src":"8279:12:28"},"nativeSrc":"8279:12:28","nodeType":"YulExpressionStatement","src":"8279:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8249:6:28","nodeType":"YulIdentifier","src":"8249:6:28"},{"kind":"number","nativeSrc":"8257:18:28","nodeType":"YulLiteral","src":"8257:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8246:2:28","nodeType":"YulIdentifier","src":"8246:2:28"},"nativeSrc":"8246:30:28","nodeType":"YulFunctionCall","src":"8246:30:28"},"nativeSrc":"8243:50:28","nodeType":"YulIf","src":"8243:50:28"},{"nativeSrc":"8302:59:28","nodeType":"YulAssignment","src":"8302:59:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8333:9:28","nodeType":"YulIdentifier","src":"8333:9:28"},{"name":"offset","nativeSrc":"8344:6:28","nodeType":"YulIdentifier","src":"8344:6:28"}],"functionName":{"name":"add","nativeSrc":"8329:3:28","nodeType":"YulIdentifier","src":"8329:3:28"},"nativeSrc":"8329:22:28","nodeType":"YulFunctionCall","src":"8329:22:28"},{"name":"dataEnd","nativeSrc":"8353:7:28","nodeType":"YulIdentifier","src":"8353:7:28"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"8312:16:28","nodeType":"YulIdentifier","src":"8312:16:28"},"nativeSrc":"8312:49:28","nodeType":"YulFunctionCall","src":"8312:49:28"},"variableNames":[{"name":"value1","nativeSrc":"8302:6:28","nodeType":"YulIdentifier","src":"8302:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nativeSrc":"7912:455:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7966:9:28","nodeType":"YulTypedName","src":"7966:9:28","type":""},{"name":"dataEnd","nativeSrc":"7977:7:28","nodeType":"YulTypedName","src":"7977:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7989:6:28","nodeType":"YulTypedName","src":"7989:6:28","type":""},{"name":"value1","nativeSrc":"7997:6:28","nodeType":"YulTypedName","src":"7997:6:28","type":""}],"src":"7912:455:28"},{"body":{"nativeSrc":"8729:978:28","nodeType":"YulBlock","src":"8729:978:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8746:9:28","nodeType":"YulIdentifier","src":"8746:9:28"},{"arguments":[{"name":"value0","nativeSrc":"8761:6:28","nodeType":"YulIdentifier","src":"8761:6:28"},{"kind":"number","nativeSrc":"8769:66:28","nodeType":"YulLiteral","src":"8769:66:28","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"8757:3:28","nodeType":"YulIdentifier","src":"8757:3:28"},"nativeSrc":"8757:79:28","nodeType":"YulFunctionCall","src":"8757:79:28"}],"functionName":{"name":"mstore","nativeSrc":"8739:6:28","nodeType":"YulIdentifier","src":"8739:6:28"},"nativeSrc":"8739:98:28","nodeType":"YulFunctionCall","src":"8739:98:28"},"nativeSrc":"8739:98:28","nodeType":"YulExpressionStatement","src":"8739:98:28"},{"nativeSrc":"8846:12:28","nodeType":"YulVariableDeclaration","src":"8846:12:28","value":{"kind":"number","nativeSrc":"8856:2:28","nodeType":"YulLiteral","src":"8856:2:28","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"8850:2:28","nodeType":"YulTypedName","src":"8850:2:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8878:9:28","nodeType":"YulIdentifier","src":"8878:9:28"},{"kind":"number","nativeSrc":"8889:2:28","nodeType":"YulLiteral","src":"8889:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8874:3:28","nodeType":"YulIdentifier","src":"8874:3:28"},"nativeSrc":"8874:18:28","nodeType":"YulFunctionCall","src":"8874:18:28"},{"kind":"number","nativeSrc":"8894:3:28","nodeType":"YulLiteral","src":"8894:3:28","type":"","value":"224"}],"functionName":{"name":"mstore","nativeSrc":"8867:6:28","nodeType":"YulIdentifier","src":"8867:6:28"},"nativeSrc":"8867:31:28","nodeType":"YulFunctionCall","src":"8867:31:28"},"nativeSrc":"8867:31:28","nodeType":"YulExpressionStatement","src":"8867:31:28"},{"nativeSrc":"8907:60:28","nodeType":"YulVariableDeclaration","src":"8907:60:28","value":{"arguments":[{"name":"value1","nativeSrc":"8939:6:28","nodeType":"YulIdentifier","src":"8939:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"8951:9:28","nodeType":"YulIdentifier","src":"8951:9:28"},{"kind":"number","nativeSrc":"8962:3:28","nodeType":"YulLiteral","src":"8962:3:28","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"8947:3:28","nodeType":"YulIdentifier","src":"8947:3:28"},"nativeSrc":"8947:19:28","nodeType":"YulFunctionCall","src":"8947:19:28"}],"functionName":{"name":"abi_encode_string","nativeSrc":"8921:17:28","nodeType":"YulIdentifier","src":"8921:17:28"},"nativeSrc":"8921:46:28","nodeType":"YulFunctionCall","src":"8921:46:28"},"variables":[{"name":"tail_1","nativeSrc":"8911:6:28","nodeType":"YulTypedName","src":"8911:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8987:9:28","nodeType":"YulIdentifier","src":"8987:9:28"},{"kind":"number","nativeSrc":"8998:2:28","nodeType":"YulLiteral","src":"8998:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8983:3:28","nodeType":"YulIdentifier","src":"8983:3:28"},"nativeSrc":"8983:18:28","nodeType":"YulFunctionCall","src":"8983:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"9007:6:28","nodeType":"YulIdentifier","src":"9007:6:28"},{"name":"headStart","nativeSrc":"9015:9:28","nodeType":"YulIdentifier","src":"9015:9:28"}],"functionName":{"name":"sub","nativeSrc":"9003:3:28","nodeType":"YulIdentifier","src":"9003:3:28"},"nativeSrc":"9003:22:28","nodeType":"YulFunctionCall","src":"9003:22:28"}],"functionName":{"name":"mstore","nativeSrc":"8976:6:28","nodeType":"YulIdentifier","src":"8976:6:28"},"nativeSrc":"8976:50:28","nodeType":"YulFunctionCall","src":"8976:50:28"},"nativeSrc":"8976:50:28","nodeType":"YulExpressionStatement","src":"8976:50:28"},{"nativeSrc":"9035:47:28","nodeType":"YulVariableDeclaration","src":"9035:47:28","value":{"arguments":[{"name":"value2","nativeSrc":"9067:6:28","nodeType":"YulIdentifier","src":"9067:6:28"},{"name":"tail_1","nativeSrc":"9075:6:28","nodeType":"YulIdentifier","src":"9075:6:28"}],"functionName":{"name":"abi_encode_string","nativeSrc":"9049:17:28","nodeType":"YulIdentifier","src":"9049:17:28"},"nativeSrc":"9049:33:28","nodeType":"YulFunctionCall","src":"9049:33:28"},"variables":[{"name":"tail_2","nativeSrc":"9039:6:28","nodeType":"YulTypedName","src":"9039:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9102:9:28","nodeType":"YulIdentifier","src":"9102:9:28"},{"kind":"number","nativeSrc":"9113:2:28","nodeType":"YulLiteral","src":"9113:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9098:3:28","nodeType":"YulIdentifier","src":"9098:3:28"},"nativeSrc":"9098:18:28","nodeType":"YulFunctionCall","src":"9098:18:28"},{"name":"value3","nativeSrc":"9118:6:28","nodeType":"YulIdentifier","src":"9118:6:28"}],"functionName":{"name":"mstore","nativeSrc":"9091:6:28","nodeType":"YulIdentifier","src":"9091:6:28"},"nativeSrc":"9091:34:28","nodeType":"YulFunctionCall","src":"9091:34:28"},"nativeSrc":"9091:34:28","nodeType":"YulExpressionStatement","src":"9091:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9145:9:28","nodeType":"YulIdentifier","src":"9145:9:28"},{"kind":"number","nativeSrc":"9156:3:28","nodeType":"YulLiteral","src":"9156:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9141:3:28","nodeType":"YulIdentifier","src":"9141:3:28"},"nativeSrc":"9141:19:28","nodeType":"YulFunctionCall","src":"9141:19:28"},{"arguments":[{"name":"value4","nativeSrc":"9166:6:28","nodeType":"YulIdentifier","src":"9166:6:28"},{"kind":"number","nativeSrc":"9174:42:28","nodeType":"YulLiteral","src":"9174:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9162:3:28","nodeType":"YulIdentifier","src":"9162:3:28"},"nativeSrc":"9162:55:28","nodeType":"YulFunctionCall","src":"9162:55:28"}],"functionName":{"name":"mstore","nativeSrc":"9134:6:28","nodeType":"YulIdentifier","src":"9134:6:28"},"nativeSrc":"9134:84:28","nodeType":"YulFunctionCall","src":"9134:84:28"},"nativeSrc":"9134:84:28","nodeType":"YulExpressionStatement","src":"9134:84:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9238:9:28","nodeType":"YulIdentifier","src":"9238:9:28"},{"kind":"number","nativeSrc":"9249:3:28","nodeType":"YulLiteral","src":"9249:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"9234:3:28","nodeType":"YulIdentifier","src":"9234:3:28"},"nativeSrc":"9234:19:28","nodeType":"YulFunctionCall","src":"9234:19:28"},{"name":"value5","nativeSrc":"9255:6:28","nodeType":"YulIdentifier","src":"9255:6:28"}],"functionName":{"name":"mstore","nativeSrc":"9227:6:28","nodeType":"YulIdentifier","src":"9227:6:28"},"nativeSrc":"9227:35:28","nodeType":"YulFunctionCall","src":"9227:35:28"},"nativeSrc":"9227:35:28","nodeType":"YulExpressionStatement","src":"9227:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9282:9:28","nodeType":"YulIdentifier","src":"9282:9:28"},{"kind":"number","nativeSrc":"9293:3:28","nodeType":"YulLiteral","src":"9293:3:28","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"9278:3:28","nodeType":"YulIdentifier","src":"9278:3:28"},"nativeSrc":"9278:19:28","nodeType":"YulFunctionCall","src":"9278:19:28"},{"arguments":[{"name":"tail_2","nativeSrc":"9303:6:28","nodeType":"YulIdentifier","src":"9303:6:28"},{"name":"headStart","nativeSrc":"9311:9:28","nodeType":"YulIdentifier","src":"9311:9:28"}],"functionName":{"name":"sub","nativeSrc":"9299:3:28","nodeType":"YulIdentifier","src":"9299:3:28"},"nativeSrc":"9299:22:28","nodeType":"YulFunctionCall","src":"9299:22:28"}],"functionName":{"name":"mstore","nativeSrc":"9271:6:28","nodeType":"YulIdentifier","src":"9271:6:28"},"nativeSrc":"9271:51:28","nodeType":"YulFunctionCall","src":"9271:51:28"},"nativeSrc":"9271:51:28","nodeType":"YulExpressionStatement","src":"9271:51:28"},{"nativeSrc":"9331:17:28","nodeType":"YulVariableDeclaration","src":"9331:17:28","value":{"name":"tail_2","nativeSrc":"9342:6:28","nodeType":"YulIdentifier","src":"9342:6:28"},"variables":[{"name":"pos","nativeSrc":"9335:3:28","nodeType":"YulTypedName","src":"9335:3:28","type":""}]},{"nativeSrc":"9357:27:28","nodeType":"YulVariableDeclaration","src":"9357:27:28","value":{"arguments":[{"name":"value6","nativeSrc":"9377:6:28","nodeType":"YulIdentifier","src":"9377:6:28"}],"functionName":{"name":"mload","nativeSrc":"9371:5:28","nodeType":"YulIdentifier","src":"9371:5:28"},"nativeSrc":"9371:13:28","nodeType":"YulFunctionCall","src":"9371:13:28"},"variables":[{"name":"length","nativeSrc":"9361:6:28","nodeType":"YulTypedName","src":"9361:6:28","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nativeSrc":"9400:6:28","nodeType":"YulIdentifier","src":"9400:6:28"},{"name":"length","nativeSrc":"9408:6:28","nodeType":"YulIdentifier","src":"9408:6:28"}],"functionName":{"name":"mstore","nativeSrc":"9393:6:28","nodeType":"YulIdentifier","src":"9393:6:28"},"nativeSrc":"9393:22:28","nodeType":"YulFunctionCall","src":"9393:22:28"},"nativeSrc":"9393:22:28","nodeType":"YulExpressionStatement","src":"9393:22:28"},{"nativeSrc":"9424:22:28","nodeType":"YulAssignment","src":"9424:22:28","value":{"arguments":[{"name":"tail_2","nativeSrc":"9435:6:28","nodeType":"YulIdentifier","src":"9435:6:28"},{"kind":"number","nativeSrc":"9443:2:28","nodeType":"YulLiteral","src":"9443:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9431:3:28","nodeType":"YulIdentifier","src":"9431:3:28"},"nativeSrc":"9431:15:28","nodeType":"YulFunctionCall","src":"9431:15:28"},"variableNames":[{"name":"pos","nativeSrc":"9424:3:28","nodeType":"YulIdentifier","src":"9424:3:28"}]},{"nativeSrc":"9455:29:28","nodeType":"YulVariableDeclaration","src":"9455:29:28","value":{"arguments":[{"name":"value6","nativeSrc":"9473:6:28","nodeType":"YulIdentifier","src":"9473:6:28"},{"kind":"number","nativeSrc":"9481:2:28","nodeType":"YulLiteral","src":"9481:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9469:3:28","nodeType":"YulIdentifier","src":"9469:3:28"},"nativeSrc":"9469:15:28","nodeType":"YulFunctionCall","src":"9469:15:28"},"variables":[{"name":"srcPtr","nativeSrc":"9459:6:28","nodeType":"YulTypedName","src":"9459:6:28","type":""}]},{"nativeSrc":"9493:10:28","nodeType":"YulVariableDeclaration","src":"9493:10:28","value":{"kind":"number","nativeSrc":"9502:1:28","nodeType":"YulLiteral","src":"9502:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"9497:1:28","nodeType":"YulTypedName","src":"9497:1:28","type":""}]},{"body":{"nativeSrc":"9561:120:28","nodeType":"YulBlock","src":"9561:120:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9582:3:28","nodeType":"YulIdentifier","src":"9582:3:28"},{"arguments":[{"name":"srcPtr","nativeSrc":"9593:6:28","nodeType":"YulIdentifier","src":"9593:6:28"}],"functionName":{"name":"mload","nativeSrc":"9587:5:28","nodeType":"YulIdentifier","src":"9587:5:28"},"nativeSrc":"9587:13:28","nodeType":"YulFunctionCall","src":"9587:13:28"}],"functionName":{"name":"mstore","nativeSrc":"9575:6:28","nodeType":"YulIdentifier","src":"9575:6:28"},"nativeSrc":"9575:26:28","nodeType":"YulFunctionCall","src":"9575:26:28"},"nativeSrc":"9575:26:28","nodeType":"YulExpressionStatement","src":"9575:26:28"},{"nativeSrc":"9614:19:28","nodeType":"YulAssignment","src":"9614:19:28","value":{"arguments":[{"name":"pos","nativeSrc":"9625:3:28","nodeType":"YulIdentifier","src":"9625:3:28"},{"name":"_1","nativeSrc":"9630:2:28","nodeType":"YulIdentifier","src":"9630:2:28"}],"functionName":{"name":"add","nativeSrc":"9621:3:28","nodeType":"YulIdentifier","src":"9621:3:28"},"nativeSrc":"9621:12:28","nodeType":"YulFunctionCall","src":"9621:12:28"},"variableNames":[{"name":"pos","nativeSrc":"9614:3:28","nodeType":"YulIdentifier","src":"9614:3:28"}]},{"nativeSrc":"9646:25:28","nodeType":"YulAssignment","src":"9646:25:28","value":{"arguments":[{"name":"srcPtr","nativeSrc":"9660:6:28","nodeType":"YulIdentifier","src":"9660:6:28"},{"name":"_1","nativeSrc":"9668:2:28","nodeType":"YulIdentifier","src":"9668:2:28"}],"functionName":{"name":"add","nativeSrc":"9656:3:28","nodeType":"YulIdentifier","src":"9656:3:28"},"nativeSrc":"9656:15:28","nodeType":"YulFunctionCall","src":"9656:15:28"},"variableNames":[{"name":"srcPtr","nativeSrc":"9646:6:28","nodeType":"YulIdentifier","src":"9646:6:28"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"9523:1:28","nodeType":"YulIdentifier","src":"9523:1:28"},{"name":"length","nativeSrc":"9526:6:28","nodeType":"YulIdentifier","src":"9526:6:28"}],"functionName":{"name":"lt","nativeSrc":"9520:2:28","nodeType":"YulIdentifier","src":"9520:2:28"},"nativeSrc":"9520:13:28","nodeType":"YulFunctionCall","src":"9520:13:28"},"nativeSrc":"9512:169:28","nodeType":"YulForLoop","post":{"nativeSrc":"9534:18:28","nodeType":"YulBlock","src":"9534:18:28","statements":[{"nativeSrc":"9536:14:28","nodeType":"YulAssignment","src":"9536:14:28","value":{"arguments":[{"name":"i","nativeSrc":"9545:1:28","nodeType":"YulIdentifier","src":"9545:1:28"},{"kind":"number","nativeSrc":"9548:1:28","nodeType":"YulLiteral","src":"9548:1:28","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"9541:3:28","nodeType":"YulIdentifier","src":"9541:3:28"},"nativeSrc":"9541:9:28","nodeType":"YulFunctionCall","src":"9541:9:28"},"variableNames":[{"name":"i","nativeSrc":"9536:1:28","nodeType":"YulIdentifier","src":"9536:1:28"}]}]},"pre":{"nativeSrc":"9516:3:28","nodeType":"YulBlock","src":"9516:3:28","statements":[]},"src":"9512:169:28"},{"nativeSrc":"9690:11:28","nodeType":"YulAssignment","src":"9690:11:28","value":{"name":"pos","nativeSrc":"9698:3:28","nodeType":"YulIdentifier","src":"9698:3:28"},"variableNames":[{"name":"tail","nativeSrc":"9690:4:28","nodeType":"YulIdentifier","src":"9690:4:28"}]}]},"name":"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"8372:1335:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8650:9:28","nodeType":"YulTypedName","src":"8650:9:28","type":""},{"name":"value6","nativeSrc":"8661:6:28","nodeType":"YulTypedName","src":"8661:6:28","type":""},{"name":"value5","nativeSrc":"8669:6:28","nodeType":"YulTypedName","src":"8669:6:28","type":""},{"name":"value4","nativeSrc":"8677:6:28","nodeType":"YulTypedName","src":"8677:6:28","type":""},{"name":"value3","nativeSrc":"8685:6:28","nodeType":"YulTypedName","src":"8685:6:28","type":""},{"name":"value2","nativeSrc":"8693:6:28","nodeType":"YulTypedName","src":"8693:6:28","type":""},{"name":"value1","nativeSrc":"8701:6:28","nodeType":"YulTypedName","src":"8701:6:28","type":""},{"name":"value0","nativeSrc":"8709:6:28","nodeType":"YulTypedName","src":"8709:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8720:4:28","nodeType":"YulTypedName","src":"8720:4:28","type":""}],"src":"8372:1335:28"},{"body":{"nativeSrc":"9869:211:28","nodeType":"YulBlock","src":"9869:211:28","statements":[{"nativeSrc":"9879:26:28","nodeType":"YulAssignment","src":"9879:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"9891:9:28","nodeType":"YulIdentifier","src":"9891:9:28"},{"kind":"number","nativeSrc":"9902:2:28","nodeType":"YulLiteral","src":"9902:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9887:3:28","nodeType":"YulIdentifier","src":"9887:3:28"},"nativeSrc":"9887:18:28","nodeType":"YulFunctionCall","src":"9887:18:28"},"variableNames":[{"name":"tail","nativeSrc":"9879:4:28","nodeType":"YulIdentifier","src":"9879:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9921:9:28","nodeType":"YulIdentifier","src":"9921:9:28"},{"name":"value0","nativeSrc":"9932:6:28","nodeType":"YulIdentifier","src":"9932:6:28"}],"functionName":{"name":"mstore","nativeSrc":"9914:6:28","nodeType":"YulIdentifier","src":"9914:6:28"},"nativeSrc":"9914:25:28","nodeType":"YulFunctionCall","src":"9914:25:28"},"nativeSrc":"9914:25:28","nodeType":"YulExpressionStatement","src":"9914:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9959:9:28","nodeType":"YulIdentifier","src":"9959:9:28"},{"kind":"number","nativeSrc":"9970:2:28","nodeType":"YulLiteral","src":"9970:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9955:3:28","nodeType":"YulIdentifier","src":"9955:3:28"},"nativeSrc":"9955:18:28","nodeType":"YulFunctionCall","src":"9955:18:28"},{"name":"value1","nativeSrc":"9975:6:28","nodeType":"YulIdentifier","src":"9975:6:28"}],"functionName":{"name":"mstore","nativeSrc":"9948:6:28","nodeType":"YulIdentifier","src":"9948:6:28"},"nativeSrc":"9948:34:28","nodeType":"YulFunctionCall","src":"9948:34:28"},"nativeSrc":"9948:34:28","nodeType":"YulExpressionStatement","src":"9948:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10002:9:28","nodeType":"YulIdentifier","src":"10002:9:28"},{"kind":"number","nativeSrc":"10013:2:28","nodeType":"YulLiteral","src":"10013:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9998:3:28","nodeType":"YulIdentifier","src":"9998:3:28"},"nativeSrc":"9998:18:28","nodeType":"YulFunctionCall","src":"9998:18:28"},{"arguments":[{"name":"value2","nativeSrc":"10022:6:28","nodeType":"YulIdentifier","src":"10022:6:28"},{"kind":"number","nativeSrc":"10030:42:28","nodeType":"YulLiteral","src":"10030:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10018:3:28","nodeType":"YulIdentifier","src":"10018:3:28"},"nativeSrc":"10018:55:28","nodeType":"YulFunctionCall","src":"10018:55:28"}],"functionName":{"name":"mstore","nativeSrc":"9991:6:28","nodeType":"YulIdentifier","src":"9991:6:28"},"nativeSrc":"9991:83:28","nodeType":"YulFunctionCall","src":"9991:83:28"},"nativeSrc":"9991:83:28","nodeType":"YulExpressionStatement","src":"9991:83:28"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_address__fromStack_reversed","nativeSrc":"9712:368:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9822:9:28","nodeType":"YulTypedName","src":"9822:9:28","type":""},{"name":"value2","nativeSrc":"9833:6:28","nodeType":"YulTypedName","src":"9833:6:28","type":""},{"name":"value1","nativeSrc":"9841:6:28","nodeType":"YulTypedName","src":"9841:6:28","type":""},{"name":"value0","nativeSrc":"9849:6:28","nodeType":"YulTypedName","src":"9849:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9860:4:28","nodeType":"YulTypedName","src":"9860:4:28","type":""}],"src":"9712:368:28"},{"body":{"nativeSrc":"10127:76:28","nodeType":"YulBlock","src":"10127:76:28","statements":[{"body":{"nativeSrc":"10181:16:28","nodeType":"YulBlock","src":"10181:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10190:1:28","nodeType":"YulLiteral","src":"10190:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"10193:1:28","nodeType":"YulLiteral","src":"10193:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10183:6:28","nodeType":"YulIdentifier","src":"10183:6:28"},"nativeSrc":"10183:12:28","nodeType":"YulFunctionCall","src":"10183:12:28"},"nativeSrc":"10183:12:28","nodeType":"YulExpressionStatement","src":"10183:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10150:5:28","nodeType":"YulIdentifier","src":"10150:5:28"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10171:5:28","nodeType":"YulIdentifier","src":"10171:5:28"}],"functionName":{"name":"iszero","nativeSrc":"10164:6:28","nodeType":"YulIdentifier","src":"10164:6:28"},"nativeSrc":"10164:13:28","nodeType":"YulFunctionCall","src":"10164:13:28"}],"functionName":{"name":"iszero","nativeSrc":"10157:6:28","nodeType":"YulIdentifier","src":"10157:6:28"},"nativeSrc":"10157:21:28","nodeType":"YulFunctionCall","src":"10157:21:28"}],"functionName":{"name":"eq","nativeSrc":"10147:2:28","nodeType":"YulIdentifier","src":"10147:2:28"},"nativeSrc":"10147:32:28","nodeType":"YulFunctionCall","src":"10147:32:28"}],"functionName":{"name":"iszero","nativeSrc":"10140:6:28","nodeType":"YulIdentifier","src":"10140:6:28"},"nativeSrc":"10140:40:28","nodeType":"YulFunctionCall","src":"10140:40:28"},"nativeSrc":"10137:60:28","nodeType":"YulIf","src":"10137:60:28"}]},"name":"validator_revert_bool","nativeSrc":"10085:118:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10116:5:28","nodeType":"YulTypedName","src":"10116:5:28","type":""}],"src":"10085:118:28"},{"body":{"nativeSrc":"10292:298:28","nodeType":"YulBlock","src":"10292:298:28","statements":[{"body":{"nativeSrc":"10338:16:28","nodeType":"YulBlock","src":"10338:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10347:1:28","nodeType":"YulLiteral","src":"10347:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"10350:1:28","nodeType":"YulLiteral","src":"10350:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10340:6:28","nodeType":"YulIdentifier","src":"10340:6:28"},"nativeSrc":"10340:12:28","nodeType":"YulFunctionCall","src":"10340:12:28"},"nativeSrc":"10340:12:28","nodeType":"YulExpressionStatement","src":"10340:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10313:7:28","nodeType":"YulIdentifier","src":"10313:7:28"},{"name":"headStart","nativeSrc":"10322:9:28","nodeType":"YulIdentifier","src":"10322:9:28"}],"functionName":{"name":"sub","nativeSrc":"10309:3:28","nodeType":"YulIdentifier","src":"10309:3:28"},"nativeSrc":"10309:23:28","nodeType":"YulFunctionCall","src":"10309:23:28"},{"kind":"number","nativeSrc":"10334:2:28","nodeType":"YulLiteral","src":"10334:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"10305:3:28","nodeType":"YulIdentifier","src":"10305:3:28"},"nativeSrc":"10305:32:28","nodeType":"YulFunctionCall","src":"10305:32:28"},"nativeSrc":"10302:52:28","nodeType":"YulIf","src":"10302:52:28"},{"nativeSrc":"10363:36:28","nodeType":"YulVariableDeclaration","src":"10363:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"10389:9:28","nodeType":"YulIdentifier","src":"10389:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"10376:12:28","nodeType":"YulIdentifier","src":"10376:12:28"},"nativeSrc":"10376:23:28","nodeType":"YulFunctionCall","src":"10376:23:28"},"variables":[{"name":"value","nativeSrc":"10367:5:28","nodeType":"YulTypedName","src":"10367:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10433:5:28","nodeType":"YulIdentifier","src":"10433:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"10408:24:28","nodeType":"YulIdentifier","src":"10408:24:28"},"nativeSrc":"10408:31:28","nodeType":"YulFunctionCall","src":"10408:31:28"},"nativeSrc":"10408:31:28","nodeType":"YulExpressionStatement","src":"10408:31:28"},{"nativeSrc":"10448:15:28","nodeType":"YulAssignment","src":"10448:15:28","value":{"name":"value","nativeSrc":"10458:5:28","nodeType":"YulIdentifier","src":"10458:5:28"},"variableNames":[{"name":"value0","nativeSrc":"10448:6:28","nodeType":"YulIdentifier","src":"10448:6:28"}]},{"nativeSrc":"10472:47:28","nodeType":"YulVariableDeclaration","src":"10472:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10504:9:28","nodeType":"YulIdentifier","src":"10504:9:28"},{"kind":"number","nativeSrc":"10515:2:28","nodeType":"YulLiteral","src":"10515:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10500:3:28","nodeType":"YulIdentifier","src":"10500:3:28"},"nativeSrc":"10500:18:28","nodeType":"YulFunctionCall","src":"10500:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"10487:12:28","nodeType":"YulIdentifier","src":"10487:12:28"},"nativeSrc":"10487:32:28","nodeType":"YulFunctionCall","src":"10487:32:28"},"variables":[{"name":"value_1","nativeSrc":"10476:7:28","nodeType":"YulTypedName","src":"10476:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"10550:7:28","nodeType":"YulIdentifier","src":"10550:7:28"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"10528:21:28","nodeType":"YulIdentifier","src":"10528:21:28"},"nativeSrc":"10528:30:28","nodeType":"YulFunctionCall","src":"10528:30:28"},"nativeSrc":"10528:30:28","nodeType":"YulExpressionStatement","src":"10528:30:28"},{"nativeSrc":"10567:17:28","nodeType":"YulAssignment","src":"10567:17:28","value":{"name":"value_1","nativeSrc":"10577:7:28","nodeType":"YulIdentifier","src":"10577:7:28"},"variableNames":[{"name":"value1","nativeSrc":"10567:6:28","nodeType":"YulIdentifier","src":"10567:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"10208:382:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10250:9:28","nodeType":"YulTypedName","src":"10250:9:28","type":""},{"name":"dataEnd","nativeSrc":"10261:7:28","nodeType":"YulTypedName","src":"10261:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10273:6:28","nodeType":"YulTypedName","src":"10273:6:28","type":""},{"name":"value1","nativeSrc":"10281:6:28","nodeType":"YulTypedName","src":"10281:6:28","type":""}],"src":"10208:382:28"},{"body":{"nativeSrc":"10765:659:28","nodeType":"YulBlock","src":"10765:659:28","statements":[{"body":{"nativeSrc":"10812:16:28","nodeType":"YulBlock","src":"10812:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10821:1:28","nodeType":"YulLiteral","src":"10821:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"10824:1:28","nodeType":"YulLiteral","src":"10824:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10814:6:28","nodeType":"YulIdentifier","src":"10814:6:28"},"nativeSrc":"10814:12:28","nodeType":"YulFunctionCall","src":"10814:12:28"},"nativeSrc":"10814:12:28","nodeType":"YulExpressionStatement","src":"10814:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10786:7:28","nodeType":"YulIdentifier","src":"10786:7:28"},{"name":"headStart","nativeSrc":"10795:9:28","nodeType":"YulIdentifier","src":"10795:9:28"}],"functionName":{"name":"sub","nativeSrc":"10782:3:28","nodeType":"YulIdentifier","src":"10782:3:28"},"nativeSrc":"10782:23:28","nodeType":"YulFunctionCall","src":"10782:23:28"},{"kind":"number","nativeSrc":"10807:3:28","nodeType":"YulLiteral","src":"10807:3:28","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"10778:3:28","nodeType":"YulIdentifier","src":"10778:3:28"},"nativeSrc":"10778:33:28","nodeType":"YulFunctionCall","src":"10778:33:28"},"nativeSrc":"10775:53:28","nodeType":"YulIf","src":"10775:53:28"},{"nativeSrc":"10837:36:28","nodeType":"YulVariableDeclaration","src":"10837:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"10863:9:28","nodeType":"YulIdentifier","src":"10863:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"10850:12:28","nodeType":"YulIdentifier","src":"10850:12:28"},"nativeSrc":"10850:23:28","nodeType":"YulFunctionCall","src":"10850:23:28"},"variables":[{"name":"value","nativeSrc":"10841:5:28","nodeType":"YulTypedName","src":"10841:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10907:5:28","nodeType":"YulIdentifier","src":"10907:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"10882:24:28","nodeType":"YulIdentifier","src":"10882:24:28"},"nativeSrc":"10882:31:28","nodeType":"YulFunctionCall","src":"10882:31:28"},"nativeSrc":"10882:31:28","nodeType":"YulExpressionStatement","src":"10882:31:28"},{"nativeSrc":"10922:15:28","nodeType":"YulAssignment","src":"10922:15:28","value":{"name":"value","nativeSrc":"10932:5:28","nodeType":"YulIdentifier","src":"10932:5:28"},"variableNames":[{"name":"value0","nativeSrc":"10922:6:28","nodeType":"YulIdentifier","src":"10922:6:28"}]},{"nativeSrc":"10946:47:28","nodeType":"YulVariableDeclaration","src":"10946:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10978:9:28","nodeType":"YulIdentifier","src":"10978:9:28"},{"kind":"number","nativeSrc":"10989:2:28","nodeType":"YulLiteral","src":"10989:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10974:3:28","nodeType":"YulIdentifier","src":"10974:3:28"},"nativeSrc":"10974:18:28","nodeType":"YulFunctionCall","src":"10974:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"10961:12:28","nodeType":"YulIdentifier","src":"10961:12:28"},"nativeSrc":"10961:32:28","nodeType":"YulFunctionCall","src":"10961:32:28"},"variables":[{"name":"value_1","nativeSrc":"10950:7:28","nodeType":"YulTypedName","src":"10950:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"11027:7:28","nodeType":"YulIdentifier","src":"11027:7:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11002:24:28","nodeType":"YulIdentifier","src":"11002:24:28"},"nativeSrc":"11002:33:28","nodeType":"YulFunctionCall","src":"11002:33:28"},"nativeSrc":"11002:33:28","nodeType":"YulExpressionStatement","src":"11002:33:28"},{"nativeSrc":"11044:17:28","nodeType":"YulAssignment","src":"11044:17:28","value":{"name":"value_1","nativeSrc":"11054:7:28","nodeType":"YulIdentifier","src":"11054:7:28"},"variableNames":[{"name":"value1","nativeSrc":"11044:6:28","nodeType":"YulIdentifier","src":"11044:6:28"}]},{"nativeSrc":"11070:42:28","nodeType":"YulAssignment","src":"11070:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11097:9:28","nodeType":"YulIdentifier","src":"11097:9:28"},{"kind":"number","nativeSrc":"11108:2:28","nodeType":"YulLiteral","src":"11108:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11093:3:28","nodeType":"YulIdentifier","src":"11093:3:28"},"nativeSrc":"11093:18:28","nodeType":"YulFunctionCall","src":"11093:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"11080:12:28","nodeType":"YulIdentifier","src":"11080:12:28"},"nativeSrc":"11080:32:28","nodeType":"YulFunctionCall","src":"11080:32:28"},"variableNames":[{"name":"value2","nativeSrc":"11070:6:28","nodeType":"YulIdentifier","src":"11070:6:28"}]},{"nativeSrc":"11121:42:28","nodeType":"YulAssignment","src":"11121:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11148:9:28","nodeType":"YulIdentifier","src":"11148:9:28"},{"kind":"number","nativeSrc":"11159:2:28","nodeType":"YulLiteral","src":"11159:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11144:3:28","nodeType":"YulIdentifier","src":"11144:3:28"},"nativeSrc":"11144:18:28","nodeType":"YulFunctionCall","src":"11144:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"11131:12:28","nodeType":"YulIdentifier","src":"11131:12:28"},"nativeSrc":"11131:32:28","nodeType":"YulFunctionCall","src":"11131:32:28"},"variableNames":[{"name":"value3","nativeSrc":"11121:6:28","nodeType":"YulIdentifier","src":"11121:6:28"}]},{"nativeSrc":"11172:48:28","nodeType":"YulVariableDeclaration","src":"11172:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11204:9:28","nodeType":"YulIdentifier","src":"11204:9:28"},{"kind":"number","nativeSrc":"11215:3:28","nodeType":"YulLiteral","src":"11215:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11200:3:28","nodeType":"YulIdentifier","src":"11200:3:28"},"nativeSrc":"11200:19:28","nodeType":"YulFunctionCall","src":"11200:19:28"}],"functionName":{"name":"calldataload","nativeSrc":"11187:12:28","nodeType":"YulIdentifier","src":"11187:12:28"},"nativeSrc":"11187:33:28","nodeType":"YulFunctionCall","src":"11187:33:28"},"variables":[{"name":"value_2","nativeSrc":"11176:7:28","nodeType":"YulTypedName","src":"11176:7:28","type":""}]},{"body":{"nativeSrc":"11272:16:28","nodeType":"YulBlock","src":"11272:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11281:1:28","nodeType":"YulLiteral","src":"11281:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"11284:1:28","nodeType":"YulLiteral","src":"11284:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11274:6:28","nodeType":"YulIdentifier","src":"11274:6:28"},"nativeSrc":"11274:12:28","nodeType":"YulFunctionCall","src":"11274:12:28"},"nativeSrc":"11274:12:28","nodeType":"YulExpressionStatement","src":"11274:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nativeSrc":"11242:7:28","nodeType":"YulIdentifier","src":"11242:7:28"},{"arguments":[{"name":"value_2","nativeSrc":"11255:7:28","nodeType":"YulIdentifier","src":"11255:7:28"},{"kind":"number","nativeSrc":"11264:4:28","nodeType":"YulLiteral","src":"11264:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"11251:3:28","nodeType":"YulIdentifier","src":"11251:3:28"},"nativeSrc":"11251:18:28","nodeType":"YulFunctionCall","src":"11251:18:28"}],"functionName":{"name":"eq","nativeSrc":"11239:2:28","nodeType":"YulIdentifier","src":"11239:2:28"},"nativeSrc":"11239:31:28","nodeType":"YulFunctionCall","src":"11239:31:28"}],"functionName":{"name":"iszero","nativeSrc":"11232:6:28","nodeType":"YulIdentifier","src":"11232:6:28"},"nativeSrc":"11232:39:28","nodeType":"YulFunctionCall","src":"11232:39:28"},"nativeSrc":"11229:59:28","nodeType":"YulIf","src":"11229:59:28"},{"nativeSrc":"11297:17:28","nodeType":"YulAssignment","src":"11297:17:28","value":{"name":"value_2","nativeSrc":"11307:7:28","nodeType":"YulIdentifier","src":"11307:7:28"},"variableNames":[{"name":"value4","nativeSrc":"11297:6:28","nodeType":"YulIdentifier","src":"11297:6:28"}]},{"nativeSrc":"11323:43:28","nodeType":"YulAssignment","src":"11323:43:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11350:9:28","nodeType":"YulIdentifier","src":"11350:9:28"},{"kind":"number","nativeSrc":"11361:3:28","nodeType":"YulLiteral","src":"11361:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"11346:3:28","nodeType":"YulIdentifier","src":"11346:3:28"},"nativeSrc":"11346:19:28","nodeType":"YulFunctionCall","src":"11346:19:28"}],"functionName":{"name":"calldataload","nativeSrc":"11333:12:28","nodeType":"YulIdentifier","src":"11333:12:28"},"nativeSrc":"11333:33:28","nodeType":"YulFunctionCall","src":"11333:33:28"},"variableNames":[{"name":"value5","nativeSrc":"11323:6:28","nodeType":"YulIdentifier","src":"11323:6:28"}]},{"nativeSrc":"11375:43:28","nodeType":"YulAssignment","src":"11375:43:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11402:9:28","nodeType":"YulIdentifier","src":"11402:9:28"},{"kind":"number","nativeSrc":"11413:3:28","nodeType":"YulLiteral","src":"11413:3:28","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"11398:3:28","nodeType":"YulIdentifier","src":"11398:3:28"},"nativeSrc":"11398:19:28","nodeType":"YulFunctionCall","src":"11398:19:28"}],"functionName":{"name":"calldataload","nativeSrc":"11385:12:28","nodeType":"YulIdentifier","src":"11385:12:28"},"nativeSrc":"11385:33:28","nodeType":"YulFunctionCall","src":"11385:33:28"},"variableNames":[{"name":"value6","nativeSrc":"11375:6:28","nodeType":"YulIdentifier","src":"11375:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nativeSrc":"10595:829:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10683:9:28","nodeType":"YulTypedName","src":"10683:9:28","type":""},{"name":"dataEnd","nativeSrc":"10694:7:28","nodeType":"YulTypedName","src":"10694:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10706:6:28","nodeType":"YulTypedName","src":"10706:6:28","type":""},{"name":"value1","nativeSrc":"10714:6:28","nodeType":"YulTypedName","src":"10714:6:28","type":""},{"name":"value2","nativeSrc":"10722:6:28","nodeType":"YulTypedName","src":"10722:6:28","type":""},{"name":"value3","nativeSrc":"10730:6:28","nodeType":"YulTypedName","src":"10730:6:28","type":""},{"name":"value4","nativeSrc":"10738:6:28","nodeType":"YulTypedName","src":"10738:6:28","type":""},{"name":"value5","nativeSrc":"10746:6:28","nodeType":"YulTypedName","src":"10746:6:28","type":""},{"name":"value6","nativeSrc":"10754:6:28","nodeType":"YulTypedName","src":"10754:6:28","type":""}],"src":"10595:829:28"},{"body":{"nativeSrc":"11525:177:28","nodeType":"YulBlock","src":"11525:177:28","statements":[{"body":{"nativeSrc":"11571:16:28","nodeType":"YulBlock","src":"11571:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11580:1:28","nodeType":"YulLiteral","src":"11580:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"11583:1:28","nodeType":"YulLiteral","src":"11583:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11573:6:28","nodeType":"YulIdentifier","src":"11573:6:28"},"nativeSrc":"11573:12:28","nodeType":"YulFunctionCall","src":"11573:12:28"},"nativeSrc":"11573:12:28","nodeType":"YulExpressionStatement","src":"11573:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11546:7:28","nodeType":"YulIdentifier","src":"11546:7:28"},{"name":"headStart","nativeSrc":"11555:9:28","nodeType":"YulIdentifier","src":"11555:9:28"}],"functionName":{"name":"sub","nativeSrc":"11542:3:28","nodeType":"YulIdentifier","src":"11542:3:28"},"nativeSrc":"11542:23:28","nodeType":"YulFunctionCall","src":"11542:23:28"},{"kind":"number","nativeSrc":"11567:2:28","nodeType":"YulLiteral","src":"11567:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11538:3:28","nodeType":"YulIdentifier","src":"11538:3:28"},"nativeSrc":"11538:32:28","nodeType":"YulFunctionCall","src":"11538:32:28"},"nativeSrc":"11535:52:28","nodeType":"YulIf","src":"11535:52:28"},{"nativeSrc":"11596:36:28","nodeType":"YulVariableDeclaration","src":"11596:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"11622:9:28","nodeType":"YulIdentifier","src":"11622:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"11609:12:28","nodeType":"YulIdentifier","src":"11609:12:28"},"nativeSrc":"11609:23:28","nodeType":"YulFunctionCall","src":"11609:23:28"},"variables":[{"name":"value","nativeSrc":"11600:5:28","nodeType":"YulTypedName","src":"11600:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11666:5:28","nodeType":"YulIdentifier","src":"11666:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11641:24:28","nodeType":"YulIdentifier","src":"11641:24:28"},"nativeSrc":"11641:31:28","nodeType":"YulFunctionCall","src":"11641:31:28"},"nativeSrc":"11641:31:28","nodeType":"YulExpressionStatement","src":"11641:31:28"},{"nativeSrc":"11681:15:28","nodeType":"YulAssignment","src":"11681:15:28","value":{"name":"value","nativeSrc":"11691:5:28","nodeType":"YulIdentifier","src":"11691:5:28"},"variableNames":[{"name":"value0","nativeSrc":"11681:6:28","nodeType":"YulIdentifier","src":"11681:6:28"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149","nativeSrc":"11429:273:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11491:9:28","nodeType":"YulTypedName","src":"11491:9:28","type":""},{"name":"dataEnd","nativeSrc":"11502:7:28","nodeType":"YulTypedName","src":"11502:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11514:6:28","nodeType":"YulTypedName","src":"11514:6:28","type":""}],"src":"11429:273:28"},{"body":{"nativeSrc":"11794:301:28","nodeType":"YulBlock","src":"11794:301:28","statements":[{"body":{"nativeSrc":"11840:16:28","nodeType":"YulBlock","src":"11840:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11849:1:28","nodeType":"YulLiteral","src":"11849:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"11852:1:28","nodeType":"YulLiteral","src":"11852:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11842:6:28","nodeType":"YulIdentifier","src":"11842:6:28"},"nativeSrc":"11842:12:28","nodeType":"YulFunctionCall","src":"11842:12:28"},"nativeSrc":"11842:12:28","nodeType":"YulExpressionStatement","src":"11842:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11815:7:28","nodeType":"YulIdentifier","src":"11815:7:28"},{"name":"headStart","nativeSrc":"11824:9:28","nodeType":"YulIdentifier","src":"11824:9:28"}],"functionName":{"name":"sub","nativeSrc":"11811:3:28","nodeType":"YulIdentifier","src":"11811:3:28"},"nativeSrc":"11811:23:28","nodeType":"YulFunctionCall","src":"11811:23:28"},{"kind":"number","nativeSrc":"11836:2:28","nodeType":"YulLiteral","src":"11836:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"11807:3:28","nodeType":"YulIdentifier","src":"11807:3:28"},"nativeSrc":"11807:32:28","nodeType":"YulFunctionCall","src":"11807:32:28"},"nativeSrc":"11804:52:28","nodeType":"YulIf","src":"11804:52:28"},{"nativeSrc":"11865:36:28","nodeType":"YulVariableDeclaration","src":"11865:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"11891:9:28","nodeType":"YulIdentifier","src":"11891:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"11878:12:28","nodeType":"YulIdentifier","src":"11878:12:28"},"nativeSrc":"11878:23:28","nodeType":"YulFunctionCall","src":"11878:23:28"},"variables":[{"name":"value","nativeSrc":"11869:5:28","nodeType":"YulTypedName","src":"11869:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11935:5:28","nodeType":"YulIdentifier","src":"11935:5:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11910:24:28","nodeType":"YulIdentifier","src":"11910:24:28"},"nativeSrc":"11910:31:28","nodeType":"YulFunctionCall","src":"11910:31:28"},"nativeSrc":"11910:31:28","nodeType":"YulExpressionStatement","src":"11910:31:28"},{"nativeSrc":"11950:15:28","nodeType":"YulAssignment","src":"11950:15:28","value":{"name":"value","nativeSrc":"11960:5:28","nodeType":"YulIdentifier","src":"11960:5:28"},"variableNames":[{"name":"value0","nativeSrc":"11950:6:28","nodeType":"YulIdentifier","src":"11950:6:28"}]},{"nativeSrc":"11974:47:28","nodeType":"YulVariableDeclaration","src":"11974:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12006:9:28","nodeType":"YulIdentifier","src":"12006:9:28"},{"kind":"number","nativeSrc":"12017:2:28","nodeType":"YulLiteral","src":"12017:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12002:3:28","nodeType":"YulIdentifier","src":"12002:3:28"},"nativeSrc":"12002:18:28","nodeType":"YulFunctionCall","src":"12002:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"11989:12:28","nodeType":"YulIdentifier","src":"11989:12:28"},"nativeSrc":"11989:32:28","nodeType":"YulFunctionCall","src":"11989:32:28"},"variables":[{"name":"value_1","nativeSrc":"11978:7:28","nodeType":"YulTypedName","src":"11978:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"12055:7:28","nodeType":"YulIdentifier","src":"12055:7:28"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12030:24:28","nodeType":"YulIdentifier","src":"12030:24:28"},"nativeSrc":"12030:33:28","nodeType":"YulFunctionCall","src":"12030:33:28"},"nativeSrc":"12030:33:28","nodeType":"YulExpressionStatement","src":"12030:33:28"},{"nativeSrc":"12072:17:28","nodeType":"YulAssignment","src":"12072:17:28","value":{"name":"value_1","nativeSrc":"12082:7:28","nodeType":"YulIdentifier","src":"12082:7:28"},"variableNames":[{"name":"value1","nativeSrc":"12072:6:28","nodeType":"YulIdentifier","src":"12072:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"11707:388:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11752:9:28","nodeType":"YulTypedName","src":"11752:9:28","type":""},{"name":"dataEnd","nativeSrc":"11763:7:28","nodeType":"YulTypedName","src":"11763:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11775:6:28","nodeType":"YulTypedName","src":"11775:6:28","type":""},{"name":"value1","nativeSrc":"11783:6:28","nodeType":"YulTypedName","src":"11783:6:28","type":""}],"src":"11707:388:28"},{"body":{"nativeSrc":"12307:345:28","nodeType":"YulBlock","src":"12307:345:28","statements":[{"nativeSrc":"12317:27:28","nodeType":"YulAssignment","src":"12317:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"12329:9:28","nodeType":"YulIdentifier","src":"12329:9:28"},{"kind":"number","nativeSrc":"12340:3:28","nodeType":"YulLiteral","src":"12340:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"12325:3:28","nodeType":"YulIdentifier","src":"12325:3:28"},"nativeSrc":"12325:19:28","nodeType":"YulFunctionCall","src":"12325:19:28"},"variableNames":[{"name":"tail","nativeSrc":"12317:4:28","nodeType":"YulIdentifier","src":"12317:4:28"}]},{"nativeSrc":"12353:52:28","nodeType":"YulVariableDeclaration","src":"12353:52:28","value":{"kind":"number","nativeSrc":"12363:42:28","nodeType":"YulLiteral","src":"12363:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"12357:2:28","nodeType":"YulTypedName","src":"12357:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12421:9:28","nodeType":"YulIdentifier","src":"12421:9:28"},{"arguments":[{"name":"value0","nativeSrc":"12436:6:28","nodeType":"YulIdentifier","src":"12436:6:28"},{"name":"_1","nativeSrc":"12444:2:28","nodeType":"YulIdentifier","src":"12444:2:28"}],"functionName":{"name":"and","nativeSrc":"12432:3:28","nodeType":"YulIdentifier","src":"12432:3:28"},"nativeSrc":"12432:15:28","nodeType":"YulFunctionCall","src":"12432:15:28"}],"functionName":{"name":"mstore","nativeSrc":"12414:6:28","nodeType":"YulIdentifier","src":"12414:6:28"},"nativeSrc":"12414:34:28","nodeType":"YulFunctionCall","src":"12414:34:28"},"nativeSrc":"12414:34:28","nodeType":"YulExpressionStatement","src":"12414:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12468:9:28","nodeType":"YulIdentifier","src":"12468:9:28"},{"kind":"number","nativeSrc":"12479:2:28","nodeType":"YulLiteral","src":"12479:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12464:3:28","nodeType":"YulIdentifier","src":"12464:3:28"},"nativeSrc":"12464:18:28","nodeType":"YulFunctionCall","src":"12464:18:28"},{"name":"value1","nativeSrc":"12484:6:28","nodeType":"YulIdentifier","src":"12484:6:28"}],"functionName":{"name":"mstore","nativeSrc":"12457:6:28","nodeType":"YulIdentifier","src":"12457:6:28"},"nativeSrc":"12457:34:28","nodeType":"YulFunctionCall","src":"12457:34:28"},"nativeSrc":"12457:34:28","nodeType":"YulExpressionStatement","src":"12457:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12511:9:28","nodeType":"YulIdentifier","src":"12511:9:28"},{"kind":"number","nativeSrc":"12522:2:28","nodeType":"YulLiteral","src":"12522:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12507:3:28","nodeType":"YulIdentifier","src":"12507:3:28"},"nativeSrc":"12507:18:28","nodeType":"YulFunctionCall","src":"12507:18:28"},{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"12541:6:28","nodeType":"YulIdentifier","src":"12541:6:28"}],"functionName":{"name":"iszero","nativeSrc":"12534:6:28","nodeType":"YulIdentifier","src":"12534:6:28"},"nativeSrc":"12534:14:28","nodeType":"YulFunctionCall","src":"12534:14:28"}],"functionName":{"name":"iszero","nativeSrc":"12527:6:28","nodeType":"YulIdentifier","src":"12527:6:28"},"nativeSrc":"12527:22:28","nodeType":"YulFunctionCall","src":"12527:22:28"}],"functionName":{"name":"mstore","nativeSrc":"12500:6:28","nodeType":"YulIdentifier","src":"12500:6:28"},"nativeSrc":"12500:50:28","nodeType":"YulFunctionCall","src":"12500:50:28"},"nativeSrc":"12500:50:28","nodeType":"YulExpressionStatement","src":"12500:50:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12570:9:28","nodeType":"YulIdentifier","src":"12570:9:28"},{"kind":"number","nativeSrc":"12581:2:28","nodeType":"YulLiteral","src":"12581:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12566:3:28","nodeType":"YulIdentifier","src":"12566:3:28"},"nativeSrc":"12566:18:28","nodeType":"YulFunctionCall","src":"12566:18:28"},{"arguments":[{"name":"value3","nativeSrc":"12590:6:28","nodeType":"YulIdentifier","src":"12590:6:28"},{"name":"_1","nativeSrc":"12598:2:28","nodeType":"YulIdentifier","src":"12598:2:28"}],"functionName":{"name":"and","nativeSrc":"12586:3:28","nodeType":"YulIdentifier","src":"12586:3:28"},"nativeSrc":"12586:15:28","nodeType":"YulFunctionCall","src":"12586:15:28"}],"functionName":{"name":"mstore","nativeSrc":"12559:6:28","nodeType":"YulIdentifier","src":"12559:6:28"},"nativeSrc":"12559:43:28","nodeType":"YulFunctionCall","src":"12559:43:28"},"nativeSrc":"12559:43:28","nodeType":"YulExpressionStatement","src":"12559:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12622:9:28","nodeType":"YulIdentifier","src":"12622:9:28"},{"kind":"number","nativeSrc":"12633:3:28","nodeType":"YulLiteral","src":"12633:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12618:3:28","nodeType":"YulIdentifier","src":"12618:3:28"},"nativeSrc":"12618:19:28","nodeType":"YulFunctionCall","src":"12618:19:28"},{"name":"value4","nativeSrc":"12639:6:28","nodeType":"YulIdentifier","src":"12639:6:28"}],"functionName":{"name":"mstore","nativeSrc":"12611:6:28","nodeType":"YulIdentifier","src":"12611:6:28"},"nativeSrc":"12611:35:28","nodeType":"YulFunctionCall","src":"12611:35:28"},"nativeSrc":"12611:35:28","nodeType":"YulExpressionStatement","src":"12611:35:28"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bool_t_address_t_uint256__to_t_address_t_uint256_t_bool_t_address_t_uint256__fromStack_reversed","nativeSrc":"12100:552:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12244:9:28","nodeType":"YulTypedName","src":"12244:9:28","type":""},{"name":"value4","nativeSrc":"12255:6:28","nodeType":"YulTypedName","src":"12255:6:28","type":""},{"name":"value3","nativeSrc":"12263:6:28","nodeType":"YulTypedName","src":"12263:6:28","type":""},{"name":"value2","nativeSrc":"12271:6:28","nodeType":"YulTypedName","src":"12271:6:28","type":""},{"name":"value1","nativeSrc":"12279:6:28","nodeType":"YulTypedName","src":"12279:6:28","type":""},{"name":"value0","nativeSrc":"12287:6:28","nodeType":"YulTypedName","src":"12287:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12298:4:28","nodeType":"YulTypedName","src":"12298:4:28","type":""}],"src":"12100:552:28"},{"body":{"nativeSrc":"12712:382:28","nodeType":"YulBlock","src":"12712:382:28","statements":[{"nativeSrc":"12722:22:28","nodeType":"YulAssignment","src":"12722:22:28","value":{"arguments":[{"kind":"number","nativeSrc":"12736:1:28","nodeType":"YulLiteral","src":"12736:1:28","type":"","value":"1"},{"name":"data","nativeSrc":"12739:4:28","nodeType":"YulIdentifier","src":"12739:4:28"}],"functionName":{"name":"shr","nativeSrc":"12732:3:28","nodeType":"YulIdentifier","src":"12732:3:28"},"nativeSrc":"12732:12:28","nodeType":"YulFunctionCall","src":"12732:12:28"},"variableNames":[{"name":"length","nativeSrc":"12722:6:28","nodeType":"YulIdentifier","src":"12722:6:28"}]},{"nativeSrc":"12753:38:28","nodeType":"YulVariableDeclaration","src":"12753:38:28","value":{"arguments":[{"name":"data","nativeSrc":"12783:4:28","nodeType":"YulIdentifier","src":"12783:4:28"},{"kind":"number","nativeSrc":"12789:1:28","nodeType":"YulLiteral","src":"12789:1:28","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"12779:3:28","nodeType":"YulIdentifier","src":"12779:3:28"},"nativeSrc":"12779:12:28","nodeType":"YulFunctionCall","src":"12779:12:28"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"12757:18:28","nodeType":"YulTypedName","src":"12757:18:28","type":""}]},{"body":{"nativeSrc":"12830:31:28","nodeType":"YulBlock","src":"12830:31:28","statements":[{"nativeSrc":"12832:27:28","nodeType":"YulAssignment","src":"12832:27:28","value":{"arguments":[{"name":"length","nativeSrc":"12846:6:28","nodeType":"YulIdentifier","src":"12846:6:28"},{"kind":"number","nativeSrc":"12854:4:28","nodeType":"YulLiteral","src":"12854:4:28","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"12842:3:28","nodeType":"YulIdentifier","src":"12842:3:28"},"nativeSrc":"12842:17:28","nodeType":"YulFunctionCall","src":"12842:17:28"},"variableNames":[{"name":"length","nativeSrc":"12832:6:28","nodeType":"YulIdentifier","src":"12832:6:28"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"12810:18:28","nodeType":"YulIdentifier","src":"12810:18:28"}],"functionName":{"name":"iszero","nativeSrc":"12803:6:28","nodeType":"YulIdentifier","src":"12803:6:28"},"nativeSrc":"12803:26:28","nodeType":"YulFunctionCall","src":"12803:26:28"},"nativeSrc":"12800:61:28","nodeType":"YulIf","src":"12800:61:28"},{"body":{"nativeSrc":"12920:168:28","nodeType":"YulBlock","src":"12920:168:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12941:1:28","nodeType":"YulLiteral","src":"12941:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"12944:77:28","nodeType":"YulLiteral","src":"12944:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"12934:6:28","nodeType":"YulIdentifier","src":"12934:6:28"},"nativeSrc":"12934:88:28","nodeType":"YulFunctionCall","src":"12934:88:28"},"nativeSrc":"12934:88:28","nodeType":"YulExpressionStatement","src":"12934:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13042:1:28","nodeType":"YulLiteral","src":"13042:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"13045:4:28","nodeType":"YulLiteral","src":"13045:4:28","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"13035:6:28","nodeType":"YulIdentifier","src":"13035:6:28"},"nativeSrc":"13035:15:28","nodeType":"YulFunctionCall","src":"13035:15:28"},"nativeSrc":"13035:15:28","nodeType":"YulExpressionStatement","src":"13035:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13070:1:28","nodeType":"YulLiteral","src":"13070:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"13073:4:28","nodeType":"YulLiteral","src":"13073:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"13063:6:28","nodeType":"YulIdentifier","src":"13063:6:28"},"nativeSrc":"13063:15:28","nodeType":"YulFunctionCall","src":"13063:15:28"},"nativeSrc":"13063:15:28","nodeType":"YulExpressionStatement","src":"13063:15:28"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"12876:18:28","nodeType":"YulIdentifier","src":"12876:18:28"},{"arguments":[{"name":"length","nativeSrc":"12899:6:28","nodeType":"YulIdentifier","src":"12899:6:28"},{"kind":"number","nativeSrc":"12907:2:28","nodeType":"YulLiteral","src":"12907:2:28","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"12896:2:28","nodeType":"YulIdentifier","src":"12896:2:28"},"nativeSrc":"12896:14:28","nodeType":"YulFunctionCall","src":"12896:14:28"}],"functionName":{"name":"eq","nativeSrc":"12873:2:28","nodeType":"YulIdentifier","src":"12873:2:28"},"nativeSrc":"12873:38:28","nodeType":"YulFunctionCall","src":"12873:38:28"},"nativeSrc":"12870:218:28","nodeType":"YulIf","src":"12870:218:28"}]},"name":"extract_byte_array_length","nativeSrc":"12657:437:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"12692:4:28","nodeType":"YulTypedName","src":"12692:4:28","type":""}],"returnVariables":[{"name":"length","nativeSrc":"12701:6:28","nodeType":"YulTypedName","src":"12701:6:28","type":""}],"src":"12657:437:28"},{"body":{"nativeSrc":"13174:634:28","nodeType":"YulBlock","src":"13174:634:28","statements":[{"body":{"nativeSrc":"13223:16:28","nodeType":"YulBlock","src":"13223:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13232:1:28","nodeType":"YulLiteral","src":"13232:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"13235:1:28","nodeType":"YulLiteral","src":"13235:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13225:6:28","nodeType":"YulIdentifier","src":"13225:6:28"},"nativeSrc":"13225:12:28","nodeType":"YulFunctionCall","src":"13225:12:28"},"nativeSrc":"13225:12:28","nodeType":"YulExpressionStatement","src":"13225:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"13202:6:28","nodeType":"YulIdentifier","src":"13202:6:28"},{"kind":"number","nativeSrc":"13210:4:28","nodeType":"YulLiteral","src":"13210:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"13198:3:28","nodeType":"YulIdentifier","src":"13198:3:28"},"nativeSrc":"13198:17:28","nodeType":"YulFunctionCall","src":"13198:17:28"},{"name":"end","nativeSrc":"13217:3:28","nodeType":"YulIdentifier","src":"13217:3:28"}],"functionName":{"name":"slt","nativeSrc":"13194:3:28","nodeType":"YulIdentifier","src":"13194:3:28"},"nativeSrc":"13194:27:28","nodeType":"YulFunctionCall","src":"13194:27:28"}],"functionName":{"name":"iszero","nativeSrc":"13187:6:28","nodeType":"YulIdentifier","src":"13187:6:28"},"nativeSrc":"13187:35:28","nodeType":"YulFunctionCall","src":"13187:35:28"},"nativeSrc":"13184:55:28","nodeType":"YulIf","src":"13184:55:28"},{"nativeSrc":"13248:23:28","nodeType":"YulVariableDeclaration","src":"13248:23:28","value":{"arguments":[{"name":"offset","nativeSrc":"13264:6:28","nodeType":"YulIdentifier","src":"13264:6:28"}],"functionName":{"name":"mload","nativeSrc":"13258:5:28","nodeType":"YulIdentifier","src":"13258:5:28"},"nativeSrc":"13258:13:28","nodeType":"YulFunctionCall","src":"13258:13:28"},"variables":[{"name":"_1","nativeSrc":"13252:2:28","nodeType":"YulTypedName","src":"13252:2:28","type":""}]},{"nativeSrc":"13280:14:28","nodeType":"YulVariableDeclaration","src":"13280:14:28","value":{"kind":"number","nativeSrc":"13290:4:28","nodeType":"YulLiteral","src":"13290:4:28","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"13284:2:28","nodeType":"YulTypedName","src":"13284:2:28","type":""}]},{"body":{"nativeSrc":"13333:22:28","nodeType":"YulBlock","src":"13333:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"13335:16:28","nodeType":"YulIdentifier","src":"13335:16:28"},"nativeSrc":"13335:18:28","nodeType":"YulFunctionCall","src":"13335:18:28"},"nativeSrc":"13335:18:28","nodeType":"YulExpressionStatement","src":"13335:18:28"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"13309:2:28","nodeType":"YulIdentifier","src":"13309:2:28"},{"kind":"number","nativeSrc":"13313:18:28","nodeType":"YulLiteral","src":"13313:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"13306:2:28","nodeType":"YulIdentifier","src":"13306:2:28"},"nativeSrc":"13306:26:28","nodeType":"YulFunctionCall","src":"13306:26:28"},"nativeSrc":"13303:52:28","nodeType":"YulIf","src":"13303:52:28"},{"nativeSrc":"13364:20:28","nodeType":"YulVariableDeclaration","src":"13364:20:28","value":{"arguments":[{"kind":"number","nativeSrc":"13378:1:28","nodeType":"YulLiteral","src":"13378:1:28","type":"","value":"5"},{"name":"_1","nativeSrc":"13381:2:28","nodeType":"YulIdentifier","src":"13381:2:28"}],"functionName":{"name":"shl","nativeSrc":"13374:3:28","nodeType":"YulIdentifier","src":"13374:3:28"},"nativeSrc":"13374:10:28","nodeType":"YulFunctionCall","src":"13374:10:28"},"variables":[{"name":"_3","nativeSrc":"13368:2:28","nodeType":"YulTypedName","src":"13368:2:28","type":""}]},{"nativeSrc":"13393:39:28","nodeType":"YulVariableDeclaration","src":"13393:39:28","value":{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"13424:2:28","nodeType":"YulIdentifier","src":"13424:2:28"},{"name":"_2","nativeSrc":"13428:2:28","nodeType":"YulIdentifier","src":"13428:2:28"}],"functionName":{"name":"add","nativeSrc":"13420:3:28","nodeType":"YulIdentifier","src":"13420:3:28"},"nativeSrc":"13420:11:28","nodeType":"YulFunctionCall","src":"13420:11:28"}],"functionName":{"name":"allocate_memory","nativeSrc":"13404:15:28","nodeType":"YulIdentifier","src":"13404:15:28"},"nativeSrc":"13404:28:28","nodeType":"YulFunctionCall","src":"13404:28:28"},"variables":[{"name":"dst","nativeSrc":"13397:3:28","nodeType":"YulTypedName","src":"13397:3:28","type":""}]},{"nativeSrc":"13441:16:28","nodeType":"YulVariableDeclaration","src":"13441:16:28","value":{"name":"dst","nativeSrc":"13454:3:28","nodeType":"YulIdentifier","src":"13454:3:28"},"variables":[{"name":"dst_1","nativeSrc":"13445:5:28","nodeType":"YulTypedName","src":"13445:5:28","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"13473:3:28","nodeType":"YulIdentifier","src":"13473:3:28"},{"name":"_1","nativeSrc":"13478:2:28","nodeType":"YulIdentifier","src":"13478:2:28"}],"functionName":{"name":"mstore","nativeSrc":"13466:6:28","nodeType":"YulIdentifier","src":"13466:6:28"},"nativeSrc":"13466:15:28","nodeType":"YulFunctionCall","src":"13466:15:28"},"nativeSrc":"13466:15:28","nodeType":"YulExpressionStatement","src":"13466:15:28"},{"nativeSrc":"13490:19:28","nodeType":"YulAssignment","src":"13490:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"13501:3:28","nodeType":"YulIdentifier","src":"13501:3:28"},{"name":"_2","nativeSrc":"13506:2:28","nodeType":"YulIdentifier","src":"13506:2:28"}],"functionName":{"name":"add","nativeSrc":"13497:3:28","nodeType":"YulIdentifier","src":"13497:3:28"},"nativeSrc":"13497:12:28","nodeType":"YulFunctionCall","src":"13497:12:28"},"variableNames":[{"name":"dst","nativeSrc":"13490:3:28","nodeType":"YulIdentifier","src":"13490:3:28"}]},{"nativeSrc":"13518:38:28","nodeType":"YulVariableDeclaration","src":"13518:38:28","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"13540:6:28","nodeType":"YulIdentifier","src":"13540:6:28"},{"name":"_3","nativeSrc":"13548:2:28","nodeType":"YulIdentifier","src":"13548:2:28"}],"functionName":{"name":"add","nativeSrc":"13536:3:28","nodeType":"YulIdentifier","src":"13536:3:28"},"nativeSrc":"13536:15:28","nodeType":"YulFunctionCall","src":"13536:15:28"},{"name":"_2","nativeSrc":"13553:2:28","nodeType":"YulIdentifier","src":"13553:2:28"}],"functionName":{"name":"add","nativeSrc":"13532:3:28","nodeType":"YulIdentifier","src":"13532:3:28"},"nativeSrc":"13532:24:28","nodeType":"YulFunctionCall","src":"13532:24:28"},"variables":[{"name":"srcEnd","nativeSrc":"13522:6:28","nodeType":"YulTypedName","src":"13522:6:28","type":""}]},{"body":{"nativeSrc":"13584:16:28","nodeType":"YulBlock","src":"13584:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13593:1:28","nodeType":"YulLiteral","src":"13593:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"13596:1:28","nodeType":"YulLiteral","src":"13596:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13586:6:28","nodeType":"YulIdentifier","src":"13586:6:28"},"nativeSrc":"13586:12:28","nodeType":"YulFunctionCall","src":"13586:12:28"},"nativeSrc":"13586:12:28","nodeType":"YulExpressionStatement","src":"13586:12:28"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"13571:6:28","nodeType":"YulIdentifier","src":"13571:6:28"},{"name":"end","nativeSrc":"13579:3:28","nodeType":"YulIdentifier","src":"13579:3:28"}],"functionName":{"name":"gt","nativeSrc":"13568:2:28","nodeType":"YulIdentifier","src":"13568:2:28"},"nativeSrc":"13568:15:28","nodeType":"YulFunctionCall","src":"13568:15:28"},"nativeSrc":"13565:35:28","nodeType":"YulIf","src":"13565:35:28"},{"nativeSrc":"13609:26:28","nodeType":"YulVariableDeclaration","src":"13609:26:28","value":{"arguments":[{"name":"offset","nativeSrc":"13624:6:28","nodeType":"YulIdentifier","src":"13624:6:28"},{"name":"_2","nativeSrc":"13632:2:28","nodeType":"YulIdentifier","src":"13632:2:28"}],"functionName":{"name":"add","nativeSrc":"13620:3:28","nodeType":"YulIdentifier","src":"13620:3:28"},"nativeSrc":"13620:15:28","nodeType":"YulFunctionCall","src":"13620:15:28"},"variables":[{"name":"src","nativeSrc":"13613:3:28","nodeType":"YulTypedName","src":"13613:3:28","type":""}]},{"body":{"nativeSrc":"13700:79:28","nodeType":"YulBlock","src":"13700:79:28","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"13721:3:28","nodeType":"YulIdentifier","src":"13721:3:28"},{"arguments":[{"name":"src","nativeSrc":"13732:3:28","nodeType":"YulIdentifier","src":"13732:3:28"}],"functionName":{"name":"mload","nativeSrc":"13726:5:28","nodeType":"YulIdentifier","src":"13726:5:28"},"nativeSrc":"13726:10:28","nodeType":"YulFunctionCall","src":"13726:10:28"}],"functionName":{"name":"mstore","nativeSrc":"13714:6:28","nodeType":"YulIdentifier","src":"13714:6:28"},"nativeSrc":"13714:23:28","nodeType":"YulFunctionCall","src":"13714:23:28"},"nativeSrc":"13714:23:28","nodeType":"YulExpressionStatement","src":"13714:23:28"},{"nativeSrc":"13750:19:28","nodeType":"YulAssignment","src":"13750:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"13761:3:28","nodeType":"YulIdentifier","src":"13761:3:28"},{"name":"_2","nativeSrc":"13766:2:28","nodeType":"YulIdentifier","src":"13766:2:28"}],"functionName":{"name":"add","nativeSrc":"13757:3:28","nodeType":"YulIdentifier","src":"13757:3:28"},"nativeSrc":"13757:12:28","nodeType":"YulFunctionCall","src":"13757:12:28"},"variableNames":[{"name":"dst","nativeSrc":"13750:3:28","nodeType":"YulIdentifier","src":"13750:3:28"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"13655:3:28","nodeType":"YulIdentifier","src":"13655:3:28"},{"name":"srcEnd","nativeSrc":"13660:6:28","nodeType":"YulIdentifier","src":"13660:6:28"}],"functionName":{"name":"lt","nativeSrc":"13652:2:28","nodeType":"YulIdentifier","src":"13652:2:28"},"nativeSrc":"13652:15:28","nodeType":"YulFunctionCall","src":"13652:15:28"},"nativeSrc":"13644:135:28","nodeType":"YulForLoop","post":{"nativeSrc":"13668:23:28","nodeType":"YulBlock","src":"13668:23:28","statements":[{"nativeSrc":"13670:19:28","nodeType":"YulAssignment","src":"13670:19:28","value":{"arguments":[{"name":"src","nativeSrc":"13681:3:28","nodeType":"YulIdentifier","src":"13681:3:28"},{"name":"_2","nativeSrc":"13686:2:28","nodeType":"YulIdentifier","src":"13686:2:28"}],"functionName":{"name":"add","nativeSrc":"13677:3:28","nodeType":"YulIdentifier","src":"13677:3:28"},"nativeSrc":"13677:12:28","nodeType":"YulFunctionCall","src":"13677:12:28"},"variableNames":[{"name":"src","nativeSrc":"13670:3:28","nodeType":"YulIdentifier","src":"13670:3:28"}]}]},"pre":{"nativeSrc":"13648:3:28","nodeType":"YulBlock","src":"13648:3:28","statements":[]},"src":"13644:135:28"},{"nativeSrc":"13788:14:28","nodeType":"YulAssignment","src":"13788:14:28","value":{"name":"dst_1","nativeSrc":"13797:5:28","nodeType":"YulIdentifier","src":"13797:5:28"},"variableNames":[{"name":"array","nativeSrc":"13788:5:28","nodeType":"YulIdentifier","src":"13788:5:28"}]}]},"name":"abi_decode_array_uint256_dyn_fromMemory","nativeSrc":"13099:709:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"13148:6:28","nodeType":"YulTypedName","src":"13148:6:28","type":""},{"name":"end","nativeSrc":"13156:3:28","nodeType":"YulTypedName","src":"13156:3:28","type":""}],"returnVariables":[{"name":"array","nativeSrc":"13164:5:28","nodeType":"YulTypedName","src":"13164:5:28","type":""}],"src":"13099:709:28"},{"body":{"nativeSrc":"13870:75:28","nodeType":"YulBlock","src":"13870:75:28","statements":[{"nativeSrc":"13880:22:28","nodeType":"YulAssignment","src":"13880:22:28","value":{"arguments":[{"name":"offset","nativeSrc":"13895:6:28","nodeType":"YulIdentifier","src":"13895:6:28"}],"functionName":{"name":"mload","nativeSrc":"13889:5:28","nodeType":"YulIdentifier","src":"13889:5:28"},"nativeSrc":"13889:13:28","nodeType":"YulFunctionCall","src":"13889:13:28"},"variableNames":[{"name":"value","nativeSrc":"13880:5:28","nodeType":"YulIdentifier","src":"13880:5:28"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"13933:5:28","nodeType":"YulIdentifier","src":"13933:5:28"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"13911:21:28","nodeType":"YulIdentifier","src":"13911:21:28"},"nativeSrc":"13911:28:28","nodeType":"YulFunctionCall","src":"13911:28:28"},"nativeSrc":"13911:28:28","nodeType":"YulExpressionStatement","src":"13911:28:28"}]},"name":"abi_decode_bool_fromMemory","nativeSrc":"13813:132:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"13849:6:28","nodeType":"YulTypedName","src":"13849:6:28","type":""}],"returnVariables":[{"name":"value","nativeSrc":"13860:5:28","nodeType":"YulTypedName","src":"13860:5:28","type":""}],"src":"13813:132:28"},{"body":{"nativeSrc":"14073:1447:28","nodeType":"YulBlock","src":"14073:1447:28","statements":[{"body":{"nativeSrc":"14119:16:28","nodeType":"YulBlock","src":"14119:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14128:1:28","nodeType":"YulLiteral","src":"14128:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"14131:1:28","nodeType":"YulLiteral","src":"14131:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14121:6:28","nodeType":"YulIdentifier","src":"14121:6:28"},"nativeSrc":"14121:12:28","nodeType":"YulFunctionCall","src":"14121:12:28"},"nativeSrc":"14121:12:28","nodeType":"YulExpressionStatement","src":"14121:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14094:7:28","nodeType":"YulIdentifier","src":"14094:7:28"},{"name":"headStart","nativeSrc":"14103:9:28","nodeType":"YulIdentifier","src":"14103:9:28"}],"functionName":{"name":"sub","nativeSrc":"14090:3:28","nodeType":"YulIdentifier","src":"14090:3:28"},"nativeSrc":"14090:23:28","nodeType":"YulFunctionCall","src":"14090:23:28"},{"kind":"number","nativeSrc":"14115:2:28","nodeType":"YulLiteral","src":"14115:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"14086:3:28","nodeType":"YulIdentifier","src":"14086:3:28"},"nativeSrc":"14086:32:28","nodeType":"YulFunctionCall","src":"14086:32:28"},"nativeSrc":"14083:52:28","nodeType":"YulIf","src":"14083:52:28"},{"nativeSrc":"14144:30:28","nodeType":"YulVariableDeclaration","src":"14144:30:28","value":{"arguments":[{"name":"headStart","nativeSrc":"14164:9:28","nodeType":"YulIdentifier","src":"14164:9:28"}],"functionName":{"name":"mload","nativeSrc":"14158:5:28","nodeType":"YulIdentifier","src":"14158:5:28"},"nativeSrc":"14158:16:28","nodeType":"YulFunctionCall","src":"14158:16:28"},"variables":[{"name":"offset","nativeSrc":"14148:6:28","nodeType":"YulTypedName","src":"14148:6:28","type":""}]},{"nativeSrc":"14183:28:28","nodeType":"YulVariableDeclaration","src":"14183:28:28","value":{"kind":"number","nativeSrc":"14193:18:28","nodeType":"YulLiteral","src":"14193:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"14187:2:28","nodeType":"YulTypedName","src":"14187:2:28","type":""}]},{"body":{"nativeSrc":"14238:16:28","nodeType":"YulBlock","src":"14238:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14247:1:28","nodeType":"YulLiteral","src":"14247:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"14250:1:28","nodeType":"YulLiteral","src":"14250:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14240:6:28","nodeType":"YulIdentifier","src":"14240:6:28"},"nativeSrc":"14240:12:28","nodeType":"YulFunctionCall","src":"14240:12:28"},"nativeSrc":"14240:12:28","nodeType":"YulExpressionStatement","src":"14240:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"14226:6:28","nodeType":"YulIdentifier","src":"14226:6:28"},{"name":"_1","nativeSrc":"14234:2:28","nodeType":"YulIdentifier","src":"14234:2:28"}],"functionName":{"name":"gt","nativeSrc":"14223:2:28","nodeType":"YulIdentifier","src":"14223:2:28"},"nativeSrc":"14223:14:28","nodeType":"YulFunctionCall","src":"14223:14:28"},"nativeSrc":"14220:34:28","nodeType":"YulIf","src":"14220:34:28"},{"nativeSrc":"14263:32:28","nodeType":"YulVariableDeclaration","src":"14263:32:28","value":{"arguments":[{"name":"headStart","nativeSrc":"14277:9:28","nodeType":"YulIdentifier","src":"14277:9:28"},{"name":"offset","nativeSrc":"14288:6:28","nodeType":"YulIdentifier","src":"14288:6:28"}],"functionName":{"name":"add","nativeSrc":"14273:3:28","nodeType":"YulIdentifier","src":"14273:3:28"},"nativeSrc":"14273:22:28","nodeType":"YulFunctionCall","src":"14273:22:28"},"variables":[{"name":"_2","nativeSrc":"14267:2:28","nodeType":"YulTypedName","src":"14267:2:28","type":""}]},{"body":{"nativeSrc":"14337:16:28","nodeType":"YulBlock","src":"14337:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14346:1:28","nodeType":"YulLiteral","src":"14346:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"14349:1:28","nodeType":"YulLiteral","src":"14349:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14339:6:28","nodeType":"YulIdentifier","src":"14339:6:28"},"nativeSrc":"14339:12:28","nodeType":"YulFunctionCall","src":"14339:12:28"},"nativeSrc":"14339:12:28","nodeType":"YulExpressionStatement","src":"14339:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14315:7:28","nodeType":"YulIdentifier","src":"14315:7:28"},{"name":"_2","nativeSrc":"14324:2:28","nodeType":"YulIdentifier","src":"14324:2:28"}],"functionName":{"name":"sub","nativeSrc":"14311:3:28","nodeType":"YulIdentifier","src":"14311:3:28"},"nativeSrc":"14311:16:28","nodeType":"YulFunctionCall","src":"14311:16:28"},{"kind":"number","nativeSrc":"14329:6:28","nodeType":"YulLiteral","src":"14329:6:28","type":"","value":"0x0160"}],"functionName":{"name":"slt","nativeSrc":"14307:3:28","nodeType":"YulIdentifier","src":"14307:3:28"},"nativeSrc":"14307:29:28","nodeType":"YulFunctionCall","src":"14307:29:28"},"nativeSrc":"14304:49:28","nodeType":"YulIf","src":"14304:49:28"},{"nativeSrc":"14362:35:28","nodeType":"YulVariableDeclaration","src":"14362:35:28","value":{"arguments":[],"functionName":{"name":"allocate_memory_5211","nativeSrc":"14375:20:28","nodeType":"YulIdentifier","src":"14375:20:28"},"nativeSrc":"14375:22:28","nodeType":"YulFunctionCall","src":"14375:22:28"},"variables":[{"name":"value","nativeSrc":"14366:5:28","nodeType":"YulTypedName","src":"14366:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"14413:5:28","nodeType":"YulIdentifier","src":"14413:5:28"},{"arguments":[{"name":"_2","nativeSrc":"14426:2:28","nodeType":"YulIdentifier","src":"14426:2:28"}],"functionName":{"name":"mload","nativeSrc":"14420:5:28","nodeType":"YulIdentifier","src":"14420:5:28"},"nativeSrc":"14420:9:28","nodeType":"YulFunctionCall","src":"14420:9:28"}],"functionName":{"name":"mstore","nativeSrc":"14406:6:28","nodeType":"YulIdentifier","src":"14406:6:28"},"nativeSrc":"14406:24:28","nodeType":"YulFunctionCall","src":"14406:24:28"},"nativeSrc":"14406:24:28","nodeType":"YulExpressionStatement","src":"14406:24:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14450:5:28","nodeType":"YulIdentifier","src":"14450:5:28"},{"kind":"number","nativeSrc":"14457:2:28","nodeType":"YulLiteral","src":"14457:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14446:3:28","nodeType":"YulIdentifier","src":"14446:3:28"},"nativeSrc":"14446:14:28","nodeType":"YulFunctionCall","src":"14446:14:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14472:2:28","nodeType":"YulIdentifier","src":"14472:2:28"},{"kind":"number","nativeSrc":"14476:2:28","nodeType":"YulLiteral","src":"14476:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14468:3:28","nodeType":"YulIdentifier","src":"14468:3:28"},"nativeSrc":"14468:11:28","nodeType":"YulFunctionCall","src":"14468:11:28"}],"functionName":{"name":"mload","nativeSrc":"14462:5:28","nodeType":"YulIdentifier","src":"14462:5:28"},"nativeSrc":"14462:18:28","nodeType":"YulFunctionCall","src":"14462:18:28"}],"functionName":{"name":"mstore","nativeSrc":"14439:6:28","nodeType":"YulIdentifier","src":"14439:6:28"},"nativeSrc":"14439:42:28","nodeType":"YulFunctionCall","src":"14439:42:28"},"nativeSrc":"14439:42:28","nodeType":"YulExpressionStatement","src":"14439:42:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14501:5:28","nodeType":"YulIdentifier","src":"14501:5:28"},{"kind":"number","nativeSrc":"14508:2:28","nodeType":"YulLiteral","src":"14508:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14497:3:28","nodeType":"YulIdentifier","src":"14497:3:28"},"nativeSrc":"14497:14:28","nodeType":"YulFunctionCall","src":"14497:14:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14523:2:28","nodeType":"YulIdentifier","src":"14523:2:28"},{"kind":"number","nativeSrc":"14527:2:28","nodeType":"YulLiteral","src":"14527:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14519:3:28","nodeType":"YulIdentifier","src":"14519:3:28"},"nativeSrc":"14519:11:28","nodeType":"YulFunctionCall","src":"14519:11:28"}],"functionName":{"name":"mload","nativeSrc":"14513:5:28","nodeType":"YulIdentifier","src":"14513:5:28"},"nativeSrc":"14513:18:28","nodeType":"YulFunctionCall","src":"14513:18:28"}],"functionName":{"name":"mstore","nativeSrc":"14490:6:28","nodeType":"YulIdentifier","src":"14490:6:28"},"nativeSrc":"14490:42:28","nodeType":"YulFunctionCall","src":"14490:42:28"},"nativeSrc":"14490:42:28","nodeType":"YulExpressionStatement","src":"14490:42:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14552:5:28","nodeType":"YulIdentifier","src":"14552:5:28"},{"kind":"number","nativeSrc":"14559:2:28","nodeType":"YulLiteral","src":"14559:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14548:3:28","nodeType":"YulIdentifier","src":"14548:3:28"},"nativeSrc":"14548:14:28","nodeType":"YulFunctionCall","src":"14548:14:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14574:2:28","nodeType":"YulIdentifier","src":"14574:2:28"},{"kind":"number","nativeSrc":"14578:2:28","nodeType":"YulLiteral","src":"14578:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14570:3:28","nodeType":"YulIdentifier","src":"14570:3:28"},"nativeSrc":"14570:11:28","nodeType":"YulFunctionCall","src":"14570:11:28"}],"functionName":{"name":"mload","nativeSrc":"14564:5:28","nodeType":"YulIdentifier","src":"14564:5:28"},"nativeSrc":"14564:18:28","nodeType":"YulFunctionCall","src":"14564:18:28"}],"functionName":{"name":"mstore","nativeSrc":"14541:6:28","nodeType":"YulIdentifier","src":"14541:6:28"},"nativeSrc":"14541:42:28","nodeType":"YulFunctionCall","src":"14541:42:28"},"nativeSrc":"14541:42:28","nodeType":"YulExpressionStatement","src":"14541:42:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14603:5:28","nodeType":"YulIdentifier","src":"14603:5:28"},{"kind":"number","nativeSrc":"14610:3:28","nodeType":"YulLiteral","src":"14610:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14599:3:28","nodeType":"YulIdentifier","src":"14599:3:28"},"nativeSrc":"14599:15:28","nodeType":"YulFunctionCall","src":"14599:15:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14626:2:28","nodeType":"YulIdentifier","src":"14626:2:28"},{"kind":"number","nativeSrc":"14630:3:28","nodeType":"YulLiteral","src":"14630:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14622:3:28","nodeType":"YulIdentifier","src":"14622:3:28"},"nativeSrc":"14622:12:28","nodeType":"YulFunctionCall","src":"14622:12:28"}],"functionName":{"name":"mload","nativeSrc":"14616:5:28","nodeType":"YulIdentifier","src":"14616:5:28"},"nativeSrc":"14616:19:28","nodeType":"YulFunctionCall","src":"14616:19:28"}],"functionName":{"name":"mstore","nativeSrc":"14592:6:28","nodeType":"YulIdentifier","src":"14592:6:28"},"nativeSrc":"14592:44:28","nodeType":"YulFunctionCall","src":"14592:44:28"},"nativeSrc":"14592:44:28","nodeType":"YulExpressionStatement","src":"14592:44:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14656:5:28","nodeType":"YulIdentifier","src":"14656:5:28"},{"kind":"number","nativeSrc":"14663:3:28","nodeType":"YulLiteral","src":"14663:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"14652:3:28","nodeType":"YulIdentifier","src":"14652:3:28"},"nativeSrc":"14652:15:28","nodeType":"YulFunctionCall","src":"14652:15:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14679:2:28","nodeType":"YulIdentifier","src":"14679:2:28"},{"kind":"number","nativeSrc":"14683:3:28","nodeType":"YulLiteral","src":"14683:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"14675:3:28","nodeType":"YulIdentifier","src":"14675:3:28"},"nativeSrc":"14675:12:28","nodeType":"YulFunctionCall","src":"14675:12:28"}],"functionName":{"name":"mload","nativeSrc":"14669:5:28","nodeType":"YulIdentifier","src":"14669:5:28"},"nativeSrc":"14669:19:28","nodeType":"YulFunctionCall","src":"14669:19:28"}],"functionName":{"name":"mstore","nativeSrc":"14645:6:28","nodeType":"YulIdentifier","src":"14645:6:28"},"nativeSrc":"14645:44:28","nodeType":"YulFunctionCall","src":"14645:44:28"},"nativeSrc":"14645:44:28","nodeType":"YulExpressionStatement","src":"14645:44:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14709:5:28","nodeType":"YulIdentifier","src":"14709:5:28"},{"kind":"number","nativeSrc":"14716:3:28","nodeType":"YulLiteral","src":"14716:3:28","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"14705:3:28","nodeType":"YulIdentifier","src":"14705:3:28"},"nativeSrc":"14705:15:28","nodeType":"YulFunctionCall","src":"14705:15:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14732:2:28","nodeType":"YulIdentifier","src":"14732:2:28"},{"kind":"number","nativeSrc":"14736:3:28","nodeType":"YulLiteral","src":"14736:3:28","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"14728:3:28","nodeType":"YulIdentifier","src":"14728:3:28"},"nativeSrc":"14728:12:28","nodeType":"YulFunctionCall","src":"14728:12:28"}],"functionName":{"name":"mload","nativeSrc":"14722:5:28","nodeType":"YulIdentifier","src":"14722:5:28"},"nativeSrc":"14722:19:28","nodeType":"YulFunctionCall","src":"14722:19:28"}],"functionName":{"name":"mstore","nativeSrc":"14698:6:28","nodeType":"YulIdentifier","src":"14698:6:28"},"nativeSrc":"14698:44:28","nodeType":"YulFunctionCall","src":"14698:44:28"},"nativeSrc":"14698:44:28","nodeType":"YulExpressionStatement","src":"14698:44:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14762:5:28","nodeType":"YulIdentifier","src":"14762:5:28"},{"kind":"number","nativeSrc":"14769:3:28","nodeType":"YulLiteral","src":"14769:3:28","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"14758:3:28","nodeType":"YulIdentifier","src":"14758:3:28"},"nativeSrc":"14758:15:28","nodeType":"YulFunctionCall","src":"14758:15:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14785:2:28","nodeType":"YulIdentifier","src":"14785:2:28"},{"kind":"number","nativeSrc":"14789:3:28","nodeType":"YulLiteral","src":"14789:3:28","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"14781:3:28","nodeType":"YulIdentifier","src":"14781:3:28"},"nativeSrc":"14781:12:28","nodeType":"YulFunctionCall","src":"14781:12:28"}],"functionName":{"name":"mload","nativeSrc":"14775:5:28","nodeType":"YulIdentifier","src":"14775:5:28"},"nativeSrc":"14775:19:28","nodeType":"YulFunctionCall","src":"14775:19:28"}],"functionName":{"name":"mstore","nativeSrc":"14751:6:28","nodeType":"YulIdentifier","src":"14751:6:28"},"nativeSrc":"14751:44:28","nodeType":"YulFunctionCall","src":"14751:44:28"},"nativeSrc":"14751:44:28","nodeType":"YulExpressionStatement","src":"14751:44:28"},{"nativeSrc":"14804:13:28","nodeType":"YulVariableDeclaration","src":"14804:13:28","value":{"kind":"number","nativeSrc":"14814:3:28","nodeType":"YulLiteral","src":"14814:3:28","type":"","value":"256"},"variables":[{"name":"_3","nativeSrc":"14808:2:28","nodeType":"YulTypedName","src":"14808:2:28","type":""}]},{"nativeSrc":"14826:34:28","nodeType":"YulVariableDeclaration","src":"14826:34:28","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14852:2:28","nodeType":"YulIdentifier","src":"14852:2:28"},{"name":"_3","nativeSrc":"14856:2:28","nodeType":"YulIdentifier","src":"14856:2:28"}],"functionName":{"name":"add","nativeSrc":"14848:3:28","nodeType":"YulIdentifier","src":"14848:3:28"},"nativeSrc":"14848:11:28","nodeType":"YulFunctionCall","src":"14848:11:28"}],"functionName":{"name":"mload","nativeSrc":"14842:5:28","nodeType":"YulIdentifier","src":"14842:5:28"},"nativeSrc":"14842:18:28","nodeType":"YulFunctionCall","src":"14842:18:28"},"variables":[{"name":"offset_1","nativeSrc":"14830:8:28","nodeType":"YulTypedName","src":"14830:8:28","type":""}]},{"body":{"nativeSrc":"14889:16:28","nodeType":"YulBlock","src":"14889:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14898:1:28","nodeType":"YulLiteral","src":"14898:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"14901:1:28","nodeType":"YulLiteral","src":"14901:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14891:6:28","nodeType":"YulIdentifier","src":"14891:6:28"},"nativeSrc":"14891:12:28","nodeType":"YulFunctionCall","src":"14891:12:28"},"nativeSrc":"14891:12:28","nodeType":"YulExpressionStatement","src":"14891:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"14875:8:28","nodeType":"YulIdentifier","src":"14875:8:28"},{"name":"_1","nativeSrc":"14885:2:28","nodeType":"YulIdentifier","src":"14885:2:28"}],"functionName":{"name":"gt","nativeSrc":"14872:2:28","nodeType":"YulIdentifier","src":"14872:2:28"},"nativeSrc":"14872:16:28","nodeType":"YulFunctionCall","src":"14872:16:28"},"nativeSrc":"14869:36:28","nodeType":"YulIf","src":"14869:36:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14925:5:28","nodeType":"YulIdentifier","src":"14925:5:28"},{"name":"_3","nativeSrc":"14932:2:28","nodeType":"YulIdentifier","src":"14932:2:28"}],"functionName":{"name":"add","nativeSrc":"14921:3:28","nodeType":"YulIdentifier","src":"14921:3:28"},"nativeSrc":"14921:14:28","nodeType":"YulFunctionCall","src":"14921:14:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14981:2:28","nodeType":"YulIdentifier","src":"14981:2:28"},{"name":"offset_1","nativeSrc":"14985:8:28","nodeType":"YulIdentifier","src":"14985:8:28"}],"functionName":{"name":"add","nativeSrc":"14977:3:28","nodeType":"YulIdentifier","src":"14977:3:28"},"nativeSrc":"14977:17:28","nodeType":"YulFunctionCall","src":"14977:17:28"},{"name":"dataEnd","nativeSrc":"14996:7:28","nodeType":"YulIdentifier","src":"14996:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn_fromMemory","nativeSrc":"14937:39:28","nodeType":"YulIdentifier","src":"14937:39:28"},"nativeSrc":"14937:67:28","nodeType":"YulFunctionCall","src":"14937:67:28"}],"functionName":{"name":"mstore","nativeSrc":"14914:6:28","nodeType":"YulIdentifier","src":"14914:6:28"},"nativeSrc":"14914:91:28","nodeType":"YulFunctionCall","src":"14914:91:28"},"nativeSrc":"14914:91:28","nodeType":"YulExpressionStatement","src":"14914:91:28"},{"nativeSrc":"15014:13:28","nodeType":"YulVariableDeclaration","src":"15014:13:28","value":{"kind":"number","nativeSrc":"15024:3:28","nodeType":"YulLiteral","src":"15024:3:28","type":"","value":"288"},"variables":[{"name":"_4","nativeSrc":"15018:2:28","nodeType":"YulTypedName","src":"15018:2:28","type":""}]},{"nativeSrc":"15036:34:28","nodeType":"YulVariableDeclaration","src":"15036:34:28","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"15062:2:28","nodeType":"YulIdentifier","src":"15062:2:28"},{"name":"_4","nativeSrc":"15066:2:28","nodeType":"YulIdentifier","src":"15066:2:28"}],"functionName":{"name":"add","nativeSrc":"15058:3:28","nodeType":"YulIdentifier","src":"15058:3:28"},"nativeSrc":"15058:11:28","nodeType":"YulFunctionCall","src":"15058:11:28"}],"functionName":{"name":"mload","nativeSrc":"15052:5:28","nodeType":"YulIdentifier","src":"15052:5:28"},"nativeSrc":"15052:18:28","nodeType":"YulFunctionCall","src":"15052:18:28"},"variables":[{"name":"offset_2","nativeSrc":"15040:8:28","nodeType":"YulTypedName","src":"15040:8:28","type":""}]},{"body":{"nativeSrc":"15099:16:28","nodeType":"YulBlock","src":"15099:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15108:1:28","nodeType":"YulLiteral","src":"15108:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"15111:1:28","nodeType":"YulLiteral","src":"15111:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15101:6:28","nodeType":"YulIdentifier","src":"15101:6:28"},"nativeSrc":"15101:12:28","nodeType":"YulFunctionCall","src":"15101:12:28"},"nativeSrc":"15101:12:28","nodeType":"YulExpressionStatement","src":"15101:12:28"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"15085:8:28","nodeType":"YulIdentifier","src":"15085:8:28"},{"name":"_1","nativeSrc":"15095:2:28","nodeType":"YulIdentifier","src":"15095:2:28"}],"functionName":{"name":"gt","nativeSrc":"15082:2:28","nodeType":"YulIdentifier","src":"15082:2:28"},"nativeSrc":"15082:16:28","nodeType":"YulFunctionCall","src":"15082:16:28"},"nativeSrc":"15079:36:28","nodeType":"YulIf","src":"15079:36:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"15135:5:28","nodeType":"YulIdentifier","src":"15135:5:28"},{"name":"_4","nativeSrc":"15142:2:28","nodeType":"YulIdentifier","src":"15142:2:28"}],"functionName":{"name":"add","nativeSrc":"15131:3:28","nodeType":"YulIdentifier","src":"15131:3:28"},"nativeSrc":"15131:14:28","nodeType":"YulFunctionCall","src":"15131:14:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"15191:2:28","nodeType":"YulIdentifier","src":"15191:2:28"},{"name":"offset_2","nativeSrc":"15195:8:28","nodeType":"YulIdentifier","src":"15195:8:28"}],"functionName":{"name":"add","nativeSrc":"15187:3:28","nodeType":"YulIdentifier","src":"15187:3:28"},"nativeSrc":"15187:17:28","nodeType":"YulFunctionCall","src":"15187:17:28"},{"name":"dataEnd","nativeSrc":"15206:7:28","nodeType":"YulIdentifier","src":"15206:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn_fromMemory","nativeSrc":"15147:39:28","nodeType":"YulIdentifier","src":"15147:39:28"},"nativeSrc":"15147:67:28","nodeType":"YulFunctionCall","src":"15147:67:28"}],"functionName":{"name":"mstore","nativeSrc":"15124:6:28","nodeType":"YulIdentifier","src":"15124:6:28"},"nativeSrc":"15124:91:28","nodeType":"YulFunctionCall","src":"15124:91:28"},"nativeSrc":"15124:91:28","nodeType":"YulExpressionStatement","src":"15124:91:28"},{"nativeSrc":"15224:13:28","nodeType":"YulVariableDeclaration","src":"15224:13:28","value":{"kind":"number","nativeSrc":"15234:3:28","nodeType":"YulLiteral","src":"15234:3:28","type":"","value":"320"},"variables":[{"name":"_5","nativeSrc":"15228:2:28","nodeType":"YulTypedName","src":"15228:2:28","type":""}]},{"nativeSrc":"15246:34:28","nodeType":"YulVariableDeclaration","src":"15246:34:28","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"15272:2:28","nodeType":"YulIdentifier","src":"15272:2:28"},{"name":"_5","nativeSrc":"15276:2:28","nodeType":"YulIdentifier","src":"15276:2:28"}],"functionName":{"name":"add","nativeSrc":"15268:3:28","nodeType":"YulIdentifier","src":"15268:3:28"},"nativeSrc":"15268:11:28","nodeType":"YulFunctionCall","src":"15268:11:28"}],"functionName":{"name":"mload","nativeSrc":"15262:5:28","nodeType":"YulIdentifier","src":"15262:5:28"},"nativeSrc":"15262:18:28","nodeType":"YulFunctionCall","src":"15262:18:28"},"variables":[{"name":"offset_3","nativeSrc":"15250:8:28","nodeType":"YulTypedName","src":"15250:8:28","type":""}]},{"body":{"nativeSrc":"15309:16:28","nodeType":"YulBlock","src":"15309:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15318:1:28","nodeType":"YulLiteral","src":"15318:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"15321:1:28","nodeType":"YulLiteral","src":"15321:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15311:6:28","nodeType":"YulIdentifier","src":"15311:6:28"},"nativeSrc":"15311:12:28","nodeType":"YulFunctionCall","src":"15311:12:28"},"nativeSrc":"15311:12:28","nodeType":"YulExpressionStatement","src":"15311:12:28"}]},"condition":{"arguments":[{"name":"offset_3","nativeSrc":"15295:8:28","nodeType":"YulIdentifier","src":"15295:8:28"},{"name":"_1","nativeSrc":"15305:2:28","nodeType":"YulIdentifier","src":"15305:2:28"}],"functionName":{"name":"gt","nativeSrc":"15292:2:28","nodeType":"YulIdentifier","src":"15292:2:28"},"nativeSrc":"15292:16:28","nodeType":"YulFunctionCall","src":"15292:16:28"},"nativeSrc":"15289:36:28","nodeType":"YulIf","src":"15289:36:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"15345:5:28","nodeType":"YulIdentifier","src":"15345:5:28"},{"name":"_5","nativeSrc":"15352:2:28","nodeType":"YulIdentifier","src":"15352:2:28"}],"functionName":{"name":"add","nativeSrc":"15341:3:28","nodeType":"YulIdentifier","src":"15341:3:28"},"nativeSrc":"15341:14:28","nodeType":"YulFunctionCall","src":"15341:14:28"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"15401:2:28","nodeType":"YulIdentifier","src":"15401:2:28"},{"name":"offset_3","nativeSrc":"15405:8:28","nodeType":"YulIdentifier","src":"15405:8:28"}],"functionName":{"name":"add","nativeSrc":"15397:3:28","nodeType":"YulIdentifier","src":"15397:3:28"},"nativeSrc":"15397:17:28","nodeType":"YulFunctionCall","src":"15397:17:28"},{"name":"dataEnd","nativeSrc":"15416:7:28","nodeType":"YulIdentifier","src":"15416:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn_fromMemory","nativeSrc":"15357:39:28","nodeType":"YulIdentifier","src":"15357:39:28"},"nativeSrc":"15357:67:28","nodeType":"YulFunctionCall","src":"15357:67:28"}],"functionName":{"name":"mstore","nativeSrc":"15334:6:28","nodeType":"YulIdentifier","src":"15334:6:28"},"nativeSrc":"15334:91:28","nodeType":"YulFunctionCall","src":"15334:91:28"},"nativeSrc":"15334:91:28","nodeType":"YulExpressionStatement","src":"15334:91:28"},{"nativeSrc":"15434:15:28","nodeType":"YulAssignment","src":"15434:15:28","value":{"name":"value","nativeSrc":"15444:5:28","nodeType":"YulIdentifier","src":"15444:5:28"},"variableNames":[{"name":"value0","nativeSrc":"15434:6:28","nodeType":"YulIdentifier","src":"15434:6:28"}]},{"nativeSrc":"15458:56:28","nodeType":"YulAssignment","src":"15458:56:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15499:9:28","nodeType":"YulIdentifier","src":"15499:9:28"},{"kind":"number","nativeSrc":"15510:2:28","nodeType":"YulLiteral","src":"15510:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15495:3:28","nodeType":"YulIdentifier","src":"15495:3:28"},"nativeSrc":"15495:18:28","nodeType":"YulFunctionCall","src":"15495:18:28"}],"functionName":{"name":"abi_decode_bool_fromMemory","nativeSrc":"15468:26:28","nodeType":"YulIdentifier","src":"15468:26:28"},"nativeSrc":"15468:46:28","nodeType":"YulFunctionCall","src":"15468:46:28"},"variableNames":[{"name":"value1","nativeSrc":"15458:6:28","nodeType":"YulIdentifier","src":"15458:6:28"}]}]},"name":"abi_decode_tuple_t_struct$_PlanetData_$5649_memory_ptrt_bool_fromMemory","nativeSrc":"13950:1570:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14031:9:28","nodeType":"YulTypedName","src":"14031:9:28","type":""},{"name":"dataEnd","nativeSrc":"14042:7:28","nodeType":"YulTypedName","src":"14042:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"14054:6:28","nodeType":"YulTypedName","src":"14054:6:28","type":""},{"name":"value1","nativeSrc":"14062:6:28","nodeType":"YulTypedName","src":"14062:6:28","type":""}],"src":"13950:1570:28"},{"body":{"nativeSrc":"15557:152:28","nodeType":"YulBlock","src":"15557:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15574:1:28","nodeType":"YulLiteral","src":"15574:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"15577:77:28","nodeType":"YulLiteral","src":"15577:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"15567:6:28","nodeType":"YulIdentifier","src":"15567:6:28"},"nativeSrc":"15567:88:28","nodeType":"YulFunctionCall","src":"15567:88:28"},"nativeSrc":"15567:88:28","nodeType":"YulExpressionStatement","src":"15567:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15671:1:28","nodeType":"YulLiteral","src":"15671:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"15674:4:28","nodeType":"YulLiteral","src":"15674:4:28","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"15664:6:28","nodeType":"YulIdentifier","src":"15664:6:28"},"nativeSrc":"15664:15:28","nodeType":"YulFunctionCall","src":"15664:15:28"},"nativeSrc":"15664:15:28","nodeType":"YulExpressionStatement","src":"15664:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15695:1:28","nodeType":"YulLiteral","src":"15695:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"15698:4:28","nodeType":"YulLiteral","src":"15698:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"15688:6:28","nodeType":"YulIdentifier","src":"15688:6:28"},"nativeSrc":"15688:15:28","nodeType":"YulFunctionCall","src":"15688:15:28"},"nativeSrc":"15688:15:28","nodeType":"YulExpressionStatement","src":"15688:15:28"}]},"name":"panic_error_0x32","nativeSrc":"15525:184:28","nodeType":"YulFunctionDefinition","src":"15525:184:28"},{"body":{"nativeSrc":"16018:480:28","nodeType":"YulBlock","src":"16018:480:28","statements":[{"nativeSrc":"16028:52:28","nodeType":"YulVariableDeclaration","src":"16028:52:28","value":{"kind":"number","nativeSrc":"16038:42:28","nodeType":"YulLiteral","src":"16038:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"16032:2:28","nodeType":"YulTypedName","src":"16032:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16096:9:28","nodeType":"YulIdentifier","src":"16096:9:28"},{"arguments":[{"name":"value0","nativeSrc":"16111:6:28","nodeType":"YulIdentifier","src":"16111:6:28"},{"name":"_1","nativeSrc":"16119:2:28","nodeType":"YulIdentifier","src":"16119:2:28"}],"functionName":{"name":"and","nativeSrc":"16107:3:28","nodeType":"YulIdentifier","src":"16107:3:28"},"nativeSrc":"16107:15:28","nodeType":"YulFunctionCall","src":"16107:15:28"}],"functionName":{"name":"mstore","nativeSrc":"16089:6:28","nodeType":"YulIdentifier","src":"16089:6:28"},"nativeSrc":"16089:34:28","nodeType":"YulFunctionCall","src":"16089:34:28"},"nativeSrc":"16089:34:28","nodeType":"YulExpressionStatement","src":"16089:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16143:9:28","nodeType":"YulIdentifier","src":"16143:9:28"},{"kind":"number","nativeSrc":"16154:2:28","nodeType":"YulLiteral","src":"16154:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16139:3:28","nodeType":"YulIdentifier","src":"16139:3:28"},"nativeSrc":"16139:18:28","nodeType":"YulFunctionCall","src":"16139:18:28"},{"arguments":[{"name":"value1","nativeSrc":"16163:6:28","nodeType":"YulIdentifier","src":"16163:6:28"},{"name":"_1","nativeSrc":"16171:2:28","nodeType":"YulIdentifier","src":"16171:2:28"}],"functionName":{"name":"and","nativeSrc":"16159:3:28","nodeType":"YulIdentifier","src":"16159:3:28"},"nativeSrc":"16159:15:28","nodeType":"YulFunctionCall","src":"16159:15:28"}],"functionName":{"name":"mstore","nativeSrc":"16132:6:28","nodeType":"YulIdentifier","src":"16132:6:28"},"nativeSrc":"16132:43:28","nodeType":"YulFunctionCall","src":"16132:43:28"},"nativeSrc":"16132:43:28","nodeType":"YulExpressionStatement","src":"16132:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16195:9:28","nodeType":"YulIdentifier","src":"16195:9:28"},{"kind":"number","nativeSrc":"16206:2:28","nodeType":"YulLiteral","src":"16206:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16191:3:28","nodeType":"YulIdentifier","src":"16191:3:28"},"nativeSrc":"16191:18:28","nodeType":"YulFunctionCall","src":"16191:18:28"},{"name":"value2","nativeSrc":"16211:6:28","nodeType":"YulIdentifier","src":"16211:6:28"}],"functionName":{"name":"mstore","nativeSrc":"16184:6:28","nodeType":"YulIdentifier","src":"16184:6:28"},"nativeSrc":"16184:34:28","nodeType":"YulFunctionCall","src":"16184:34:28"},"nativeSrc":"16184:34:28","nodeType":"YulExpressionStatement","src":"16184:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16238:9:28","nodeType":"YulIdentifier","src":"16238:9:28"},{"kind":"number","nativeSrc":"16249:2:28","nodeType":"YulLiteral","src":"16249:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16234:3:28","nodeType":"YulIdentifier","src":"16234:3:28"},"nativeSrc":"16234:18:28","nodeType":"YulFunctionCall","src":"16234:18:28"},{"kind":"number","nativeSrc":"16254:3:28","nodeType":"YulLiteral","src":"16254:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"16227:6:28","nodeType":"YulIdentifier","src":"16227:6:28"},"nativeSrc":"16227:31:28","nodeType":"YulFunctionCall","src":"16227:31:28"},"nativeSrc":"16227:31:28","nodeType":"YulExpressionStatement","src":"16227:31:28"},{"nativeSrc":"16267:60:28","nodeType":"YulVariableDeclaration","src":"16267:60:28","value":{"arguments":[{"name":"value3","nativeSrc":"16299:6:28","nodeType":"YulIdentifier","src":"16299:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"16311:9:28","nodeType":"YulIdentifier","src":"16311:9:28"},{"kind":"number","nativeSrc":"16322:3:28","nodeType":"YulLiteral","src":"16322:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"16307:3:28","nodeType":"YulIdentifier","src":"16307:3:28"},"nativeSrc":"16307:19:28","nodeType":"YulFunctionCall","src":"16307:19:28"}],"functionName":{"name":"abi_encode_string","nativeSrc":"16281:17:28","nodeType":"YulIdentifier","src":"16281:17:28"},"nativeSrc":"16281:46:28","nodeType":"YulFunctionCall","src":"16281:46:28"},"variables":[{"name":"tail_1","nativeSrc":"16271:6:28","nodeType":"YulTypedName","src":"16271:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16347:9:28","nodeType":"YulIdentifier","src":"16347:9:28"},{"kind":"number","nativeSrc":"16358:3:28","nodeType":"YulLiteral","src":"16358:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"16343:3:28","nodeType":"YulIdentifier","src":"16343:3:28"},"nativeSrc":"16343:19:28","nodeType":"YulFunctionCall","src":"16343:19:28"},{"arguments":[{"name":"tail_1","nativeSrc":"16368:6:28","nodeType":"YulIdentifier","src":"16368:6:28"},{"name":"headStart","nativeSrc":"16376:9:28","nodeType":"YulIdentifier","src":"16376:9:28"}],"functionName":{"name":"sub","nativeSrc":"16364:3:28","nodeType":"YulIdentifier","src":"16364:3:28"},"nativeSrc":"16364:22:28","nodeType":"YulFunctionCall","src":"16364:22:28"}],"functionName":{"name":"mstore","nativeSrc":"16336:6:28","nodeType":"YulIdentifier","src":"16336:6:28"},"nativeSrc":"16336:51:28","nodeType":"YulFunctionCall","src":"16336:51:28"},"nativeSrc":"16336:51:28","nodeType":"YulExpressionStatement","src":"16336:51:28"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"16403:6:28","nodeType":"YulIdentifier","src":"16403:6:28"},{"kind":"number","nativeSrc":"16411:2:28","nodeType":"YulLiteral","src":"16411:2:28","type":"","value":"10"}],"functionName":{"name":"mstore","nativeSrc":"16396:6:28","nodeType":"YulIdentifier","src":"16396:6:28"},"nativeSrc":"16396:18:28","nodeType":"YulFunctionCall","src":"16396:18:28"},"nativeSrc":"16396:18:28","nodeType":"YulExpressionStatement","src":"16396:18:28"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"16434:6:28","nodeType":"YulIdentifier","src":"16434:6:28"},{"kind":"number","nativeSrc":"16442:2:28","nodeType":"YulLiteral","src":"16442:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16430:3:28","nodeType":"YulIdentifier","src":"16430:3:28"},"nativeSrc":"16430:15:28","nodeType":"YulFunctionCall","src":"16430:15:28"},{"hexValue":"6e657720706c616e6574","kind":"string","nativeSrc":"16447:12:28","nodeType":"YulLiteral","src":"16447:12:28","type":"","value":"new planet"}],"functionName":{"name":"mstore","nativeSrc":"16423:6:28","nodeType":"YulIdentifier","src":"16423:6:28"},"nativeSrc":"16423:37:28","nodeType":"YulFunctionCall","src":"16423:37:28"},"nativeSrc":"16423:37:28","nodeType":"YulExpressionStatement","src":"16423:37:28"},{"nativeSrc":"16469:23:28","nodeType":"YulAssignment","src":"16469:23:28","value":{"arguments":[{"name":"tail_1","nativeSrc":"16481:6:28","nodeType":"YulIdentifier","src":"16481:6:28"},{"kind":"number","nativeSrc":"16489:2:28","nodeType":"YulLiteral","src":"16489:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16477:3:28","nodeType":"YulIdentifier","src":"16477:3:28"},"nativeSrc":"16477:15:28","nodeType":"YulFunctionCall","src":"16477:15:28"},"variableNames":[{"name":"tail","nativeSrc":"16469:4:28","nodeType":"YulIdentifier","src":"16469:4:28"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_ca181fe5e4c063d04ec53e8a75cc85eb34077458a0a7c765eb51999ac22c9153__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15714:784:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15963:9:28","nodeType":"YulTypedName","src":"15963:9:28","type":""},{"name":"value3","nativeSrc":"15974:6:28","nodeType":"YulTypedName","src":"15974:6:28","type":""},{"name":"value2","nativeSrc":"15982:6:28","nodeType":"YulTypedName","src":"15982:6:28","type":""},{"name":"value1","nativeSrc":"15990:6:28","nodeType":"YulTypedName","src":"15990:6:28","type":""},{"name":"value0","nativeSrc":"15998:6:28","nodeType":"YulTypedName","src":"15998:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16009:4:28","nodeType":"YulTypedName","src":"16009:4:28","type":""}],"src":"15714:784:28"},{"body":{"nativeSrc":"16584:103:28","nodeType":"YulBlock","src":"16584:103:28","statements":[{"body":{"nativeSrc":"16630:16:28","nodeType":"YulBlock","src":"16630:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16639:1:28","nodeType":"YulLiteral","src":"16639:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"16642:1:28","nodeType":"YulLiteral","src":"16642:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16632:6:28","nodeType":"YulIdentifier","src":"16632:6:28"},"nativeSrc":"16632:12:28","nodeType":"YulFunctionCall","src":"16632:12:28"},"nativeSrc":"16632:12:28","nodeType":"YulExpressionStatement","src":"16632:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"16605:7:28","nodeType":"YulIdentifier","src":"16605:7:28"},{"name":"headStart","nativeSrc":"16614:9:28","nodeType":"YulIdentifier","src":"16614:9:28"}],"functionName":{"name":"sub","nativeSrc":"16601:3:28","nodeType":"YulIdentifier","src":"16601:3:28"},"nativeSrc":"16601:23:28","nodeType":"YulFunctionCall","src":"16601:23:28"},{"kind":"number","nativeSrc":"16626:2:28","nodeType":"YulLiteral","src":"16626:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"16597:3:28","nodeType":"YulIdentifier","src":"16597:3:28"},"nativeSrc":"16597:32:28","nodeType":"YulFunctionCall","src":"16597:32:28"},"nativeSrc":"16594:52:28","nodeType":"YulIf","src":"16594:52:28"},{"nativeSrc":"16655:26:28","nodeType":"YulAssignment","src":"16655:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"16671:9:28","nodeType":"YulIdentifier","src":"16671:9:28"}],"functionName":{"name":"mload","nativeSrc":"16665:5:28","nodeType":"YulIdentifier","src":"16665:5:28"},"nativeSrc":"16665:16:28","nodeType":"YulFunctionCall","src":"16665:16:28"},"variableNames":[{"name":"value0","nativeSrc":"16655:6:28","nodeType":"YulIdentifier","src":"16655:6:28"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"16503:184:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16550:9:28","nodeType":"YulTypedName","src":"16550:9:28","type":""},{"name":"dataEnd","nativeSrc":"16561:7:28","nodeType":"YulTypedName","src":"16561:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"16573:6:28","nodeType":"YulTypedName","src":"16573:6:28","type":""}],"src":"16503:184:28"},{"body":{"nativeSrc":"16996:484:28","nodeType":"YulBlock","src":"16996:484:28","statements":[{"nativeSrc":"17006:52:28","nodeType":"YulVariableDeclaration","src":"17006:52:28","value":{"kind":"number","nativeSrc":"17016:42:28","nodeType":"YulLiteral","src":"17016:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17010:2:28","nodeType":"YulTypedName","src":"17010:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17074:9:28","nodeType":"YulIdentifier","src":"17074:9:28"},{"arguments":[{"name":"value0","nativeSrc":"17089:6:28","nodeType":"YulIdentifier","src":"17089:6:28"},{"name":"_1","nativeSrc":"17097:2:28","nodeType":"YulIdentifier","src":"17097:2:28"}],"functionName":{"name":"and","nativeSrc":"17085:3:28","nodeType":"YulIdentifier","src":"17085:3:28"},"nativeSrc":"17085:15:28","nodeType":"YulFunctionCall","src":"17085:15:28"}],"functionName":{"name":"mstore","nativeSrc":"17067:6:28","nodeType":"YulIdentifier","src":"17067:6:28"},"nativeSrc":"17067:34:28","nodeType":"YulFunctionCall","src":"17067:34:28"},"nativeSrc":"17067:34:28","nodeType":"YulExpressionStatement","src":"17067:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17121:9:28","nodeType":"YulIdentifier","src":"17121:9:28"},{"kind":"number","nativeSrc":"17132:2:28","nodeType":"YulLiteral","src":"17132:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17117:3:28","nodeType":"YulIdentifier","src":"17117:3:28"},"nativeSrc":"17117:18:28","nodeType":"YulFunctionCall","src":"17117:18:28"},{"arguments":[{"name":"value1","nativeSrc":"17141:6:28","nodeType":"YulIdentifier","src":"17141:6:28"},{"name":"_1","nativeSrc":"17149:2:28","nodeType":"YulIdentifier","src":"17149:2:28"}],"functionName":{"name":"and","nativeSrc":"17137:3:28","nodeType":"YulIdentifier","src":"17137:3:28"},"nativeSrc":"17137:15:28","nodeType":"YulFunctionCall","src":"17137:15:28"}],"functionName":{"name":"mstore","nativeSrc":"17110:6:28","nodeType":"YulIdentifier","src":"17110:6:28"},"nativeSrc":"17110:43:28","nodeType":"YulFunctionCall","src":"17110:43:28"},"nativeSrc":"17110:43:28","nodeType":"YulExpressionStatement","src":"17110:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17173:9:28","nodeType":"YulIdentifier","src":"17173:9:28"},{"kind":"number","nativeSrc":"17184:2:28","nodeType":"YulLiteral","src":"17184:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17169:3:28","nodeType":"YulIdentifier","src":"17169:3:28"},"nativeSrc":"17169:18:28","nodeType":"YulFunctionCall","src":"17169:18:28"},{"name":"value2","nativeSrc":"17189:6:28","nodeType":"YulIdentifier","src":"17189:6:28"}],"functionName":{"name":"mstore","nativeSrc":"17162:6:28","nodeType":"YulIdentifier","src":"17162:6:28"},"nativeSrc":"17162:34:28","nodeType":"YulFunctionCall","src":"17162:34:28"},"nativeSrc":"17162:34:28","nodeType":"YulExpressionStatement","src":"17162:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17216:9:28","nodeType":"YulIdentifier","src":"17216:9:28"},{"kind":"number","nativeSrc":"17227:2:28","nodeType":"YulLiteral","src":"17227:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17212:3:28","nodeType":"YulIdentifier","src":"17212:3:28"},"nativeSrc":"17212:18:28","nodeType":"YulFunctionCall","src":"17212:18:28"},{"kind":"number","nativeSrc":"17232:3:28","nodeType":"YulLiteral","src":"17232:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"17205:6:28","nodeType":"YulIdentifier","src":"17205:6:28"},"nativeSrc":"17205:31:28","nodeType":"YulFunctionCall","src":"17205:31:28"},"nativeSrc":"17205:31:28","nodeType":"YulExpressionStatement","src":"17205:31:28"},{"nativeSrc":"17245:60:28","nodeType":"YulVariableDeclaration","src":"17245:60:28","value":{"arguments":[{"name":"value3","nativeSrc":"17277:6:28","nodeType":"YulIdentifier","src":"17277:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"17289:9:28","nodeType":"YulIdentifier","src":"17289:9:28"},{"kind":"number","nativeSrc":"17300:3:28","nodeType":"YulLiteral","src":"17300:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"17285:3:28","nodeType":"YulIdentifier","src":"17285:3:28"},"nativeSrc":"17285:19:28","nodeType":"YulFunctionCall","src":"17285:19:28"}],"functionName":{"name":"abi_encode_string","nativeSrc":"17259:17:28","nodeType":"YulIdentifier","src":"17259:17:28"},"nativeSrc":"17259:46:28","nodeType":"YulFunctionCall","src":"17259:46:28"},"variables":[{"name":"tail_1","nativeSrc":"17249:6:28","nodeType":"YulTypedName","src":"17249:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17325:9:28","nodeType":"YulIdentifier","src":"17325:9:28"},{"kind":"number","nativeSrc":"17336:3:28","nodeType":"YulLiteral","src":"17336:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17321:3:28","nodeType":"YulIdentifier","src":"17321:3:28"},"nativeSrc":"17321:19:28","nodeType":"YulFunctionCall","src":"17321:19:28"},{"arguments":[{"name":"tail_1","nativeSrc":"17346:6:28","nodeType":"YulIdentifier","src":"17346:6:28"},{"name":"headStart","nativeSrc":"17354:9:28","nodeType":"YulIdentifier","src":"17354:9:28"}],"functionName":{"name":"sub","nativeSrc":"17342:3:28","nodeType":"YulIdentifier","src":"17342:3:28"},"nativeSrc":"17342:22:28","nodeType":"YulFunctionCall","src":"17342:22:28"}],"functionName":{"name":"mstore","nativeSrc":"17314:6:28","nodeType":"YulIdentifier","src":"17314:6:28"},"nativeSrc":"17314:51:28","nodeType":"YulFunctionCall","src":"17314:51:28"},"nativeSrc":"17314:51:28","nodeType":"YulExpressionStatement","src":"17314:51:28"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"17381:6:28","nodeType":"YulIdentifier","src":"17381:6:28"},{"kind":"number","nativeSrc":"17389:2:28","nodeType":"YulLiteral","src":"17389:2:28","type":"","value":"14"}],"functionName":{"name":"mstore","nativeSrc":"17374:6:28","nodeType":"YulIdentifier","src":"17374:6:28"},"nativeSrc":"17374:18:28","nodeType":"YulFunctionCall","src":"17374:18:28"},"nativeSrc":"17374:18:28","nodeType":"YulExpressionStatement","src":"17374:18:28"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"17412:6:28","nodeType":"YulIdentifier","src":"17412:6:28"},{"kind":"number","nativeSrc":"17420:2:28","nodeType":"YulLiteral","src":"17420:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17408:3:28","nodeType":"YulIdentifier","src":"17408:3:28"},"nativeSrc":"17408:15:28","nodeType":"YulFunctionCall","src":"17408:15:28"},{"hexValue":"6c697374696e6720706c616e6574","kind":"string","nativeSrc":"17425:16:28","nodeType":"YulLiteral","src":"17425:16:28","type":"","value":"listing planet"}],"functionName":{"name":"mstore","nativeSrc":"17401:6:28","nodeType":"YulIdentifier","src":"17401:6:28"},"nativeSrc":"17401:41:28","nodeType":"YulFunctionCall","src":"17401:41:28"},"nativeSrc":"17401:41:28","nodeType":"YulExpressionStatement","src":"17401:41:28"},{"nativeSrc":"17451:23:28","nodeType":"YulAssignment","src":"17451:23:28","value":{"arguments":[{"name":"tail_1","nativeSrc":"17463:6:28","nodeType":"YulIdentifier","src":"17463:6:28"},{"kind":"number","nativeSrc":"17471:2:28","nodeType":"YulLiteral","src":"17471:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17459:3:28","nodeType":"YulIdentifier","src":"17459:3:28"},"nativeSrc":"17459:15:28","nodeType":"YulFunctionCall","src":"17459:15:28"},"variableNames":[{"name":"tail","nativeSrc":"17451:4:28","nodeType":"YulIdentifier","src":"17451:4:28"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_023f9cd908fc44c67a48322a2e671798c9e64d33ee119cc3c32d0b4c10f8f0a4__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16692:788:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16941:9:28","nodeType":"YulTypedName","src":"16941:9:28","type":""},{"name":"value3","nativeSrc":"16952:6:28","nodeType":"YulTypedName","src":"16952:6:28","type":""},{"name":"value2","nativeSrc":"16960:6:28","nodeType":"YulTypedName","src":"16960:6:28","type":""},{"name":"value1","nativeSrc":"16968:6:28","nodeType":"YulTypedName","src":"16968:6:28","type":""},{"name":"value0","nativeSrc":"16976:6:28","nodeType":"YulTypedName","src":"16976:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16987:4:28","nodeType":"YulTypedName","src":"16987:4:28","type":""}],"src":"16692:788:28"},{"body":{"nativeSrc":"17789:483:28","nodeType":"YulBlock","src":"17789:483:28","statements":[{"nativeSrc":"17799:52:28","nodeType":"YulVariableDeclaration","src":"17799:52:28","value":{"kind":"number","nativeSrc":"17809:42:28","nodeType":"YulLiteral","src":"17809:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17803:2:28","nodeType":"YulTypedName","src":"17803:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17867:9:28","nodeType":"YulIdentifier","src":"17867:9:28"},{"arguments":[{"name":"value0","nativeSrc":"17882:6:28","nodeType":"YulIdentifier","src":"17882:6:28"},{"name":"_1","nativeSrc":"17890:2:28","nodeType":"YulIdentifier","src":"17890:2:28"}],"functionName":{"name":"and","nativeSrc":"17878:3:28","nodeType":"YulIdentifier","src":"17878:3:28"},"nativeSrc":"17878:15:28","nodeType":"YulFunctionCall","src":"17878:15:28"}],"functionName":{"name":"mstore","nativeSrc":"17860:6:28","nodeType":"YulIdentifier","src":"17860:6:28"},"nativeSrc":"17860:34:28","nodeType":"YulFunctionCall","src":"17860:34:28"},"nativeSrc":"17860:34:28","nodeType":"YulExpressionStatement","src":"17860:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17914:9:28","nodeType":"YulIdentifier","src":"17914:9:28"},{"kind":"number","nativeSrc":"17925:2:28","nodeType":"YulLiteral","src":"17925:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17910:3:28","nodeType":"YulIdentifier","src":"17910:3:28"},"nativeSrc":"17910:18:28","nodeType":"YulFunctionCall","src":"17910:18:28"},{"arguments":[{"name":"value1","nativeSrc":"17934:6:28","nodeType":"YulIdentifier","src":"17934:6:28"},{"name":"_1","nativeSrc":"17942:2:28","nodeType":"YulIdentifier","src":"17942:2:28"}],"functionName":{"name":"and","nativeSrc":"17930:3:28","nodeType":"YulIdentifier","src":"17930:3:28"},"nativeSrc":"17930:15:28","nodeType":"YulFunctionCall","src":"17930:15:28"}],"functionName":{"name":"mstore","nativeSrc":"17903:6:28","nodeType":"YulIdentifier","src":"17903:6:28"},"nativeSrc":"17903:43:28","nodeType":"YulFunctionCall","src":"17903:43:28"},"nativeSrc":"17903:43:28","nodeType":"YulExpressionStatement","src":"17903:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17966:9:28","nodeType":"YulIdentifier","src":"17966:9:28"},{"kind":"number","nativeSrc":"17977:2:28","nodeType":"YulLiteral","src":"17977:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17962:3:28","nodeType":"YulIdentifier","src":"17962:3:28"},"nativeSrc":"17962:18:28","nodeType":"YulFunctionCall","src":"17962:18:28"},{"name":"value2","nativeSrc":"17982:6:28","nodeType":"YulIdentifier","src":"17982:6:28"}],"functionName":{"name":"mstore","nativeSrc":"17955:6:28","nodeType":"YulIdentifier","src":"17955:6:28"},"nativeSrc":"17955:34:28","nodeType":"YulFunctionCall","src":"17955:34:28"},"nativeSrc":"17955:34:28","nodeType":"YulExpressionStatement","src":"17955:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18009:9:28","nodeType":"YulIdentifier","src":"18009:9:28"},{"kind":"number","nativeSrc":"18020:2:28","nodeType":"YulLiteral","src":"18020:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18005:3:28","nodeType":"YulIdentifier","src":"18005:3:28"},"nativeSrc":"18005:18:28","nodeType":"YulFunctionCall","src":"18005:18:28"},{"kind":"number","nativeSrc":"18025:3:28","nodeType":"YulLiteral","src":"18025:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"17998:6:28","nodeType":"YulIdentifier","src":"17998:6:28"},"nativeSrc":"17998:31:28","nodeType":"YulFunctionCall","src":"17998:31:28"},"nativeSrc":"17998:31:28","nodeType":"YulExpressionStatement","src":"17998:31:28"},{"nativeSrc":"18038:60:28","nodeType":"YulVariableDeclaration","src":"18038:60:28","value":{"arguments":[{"name":"value3","nativeSrc":"18070:6:28","nodeType":"YulIdentifier","src":"18070:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"18082:9:28","nodeType":"YulIdentifier","src":"18082:9:28"},{"kind":"number","nativeSrc":"18093:3:28","nodeType":"YulLiteral","src":"18093:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"18078:3:28","nodeType":"YulIdentifier","src":"18078:3:28"},"nativeSrc":"18078:19:28","nodeType":"YulFunctionCall","src":"18078:19:28"}],"functionName":{"name":"abi_encode_string","nativeSrc":"18052:17:28","nodeType":"YulIdentifier","src":"18052:17:28"},"nativeSrc":"18052:46:28","nodeType":"YulFunctionCall","src":"18052:46:28"},"variables":[{"name":"tail_1","nativeSrc":"18042:6:28","nodeType":"YulTypedName","src":"18042:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18118:9:28","nodeType":"YulIdentifier","src":"18118:9:28"},{"kind":"number","nativeSrc":"18129:3:28","nodeType":"YulLiteral","src":"18129:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18114:3:28","nodeType":"YulIdentifier","src":"18114:3:28"},"nativeSrc":"18114:19:28","nodeType":"YulFunctionCall","src":"18114:19:28"},{"arguments":[{"name":"tail_1","nativeSrc":"18139:6:28","nodeType":"YulIdentifier","src":"18139:6:28"},{"name":"headStart","nativeSrc":"18147:9:28","nodeType":"YulIdentifier","src":"18147:9:28"}],"functionName":{"name":"sub","nativeSrc":"18135:3:28","nodeType":"YulIdentifier","src":"18135:3:28"},"nativeSrc":"18135:22:28","nodeType":"YulFunctionCall","src":"18135:22:28"}],"functionName":{"name":"mstore","nativeSrc":"18107:6:28","nodeType":"YulIdentifier","src":"18107:6:28"},"nativeSrc":"18107:51:28","nodeType":"YulFunctionCall","src":"18107:51:28"},"nativeSrc":"18107:51:28","nodeType":"YulExpressionStatement","src":"18107:51:28"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"18174:6:28","nodeType":"YulIdentifier","src":"18174:6:28"},{"kind":"number","nativeSrc":"18182:2:28","nodeType":"YulLiteral","src":"18182:2:28","type":"","value":"13"}],"functionName":{"name":"mstore","nativeSrc":"18167:6:28","nodeType":"YulIdentifier","src":"18167:6:28"},"nativeSrc":"18167:18:28","nodeType":"YulFunctionCall","src":"18167:18:28"},"nativeSrc":"18167:18:28","nodeType":"YulExpressionStatement","src":"18167:18:28"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"18205:6:28","nodeType":"YulIdentifier","src":"18205:6:28"},{"kind":"number","nativeSrc":"18213:2:28","nodeType":"YulLiteral","src":"18213:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18201:3:28","nodeType":"YulIdentifier","src":"18201:3:28"},"nativeSrc":"18201:15:28","nodeType":"YulFunctionCall","src":"18201:15:28"},{"hexValue":"756e63617465676f72697a6564","kind":"string","nativeSrc":"18218:15:28","nodeType":"YulLiteral","src":"18218:15:28","type":"","value":"uncategorized"}],"functionName":{"name":"mstore","nativeSrc":"18194:6:28","nodeType":"YulIdentifier","src":"18194:6:28"},"nativeSrc":"18194:40:28","nodeType":"YulFunctionCall","src":"18194:40:28"},"nativeSrc":"18194:40:28","nodeType":"YulExpressionStatement","src":"18194:40:28"},{"nativeSrc":"18243:23:28","nodeType":"YulAssignment","src":"18243:23:28","value":{"arguments":[{"name":"tail_1","nativeSrc":"18255:6:28","nodeType":"YulIdentifier","src":"18255:6:28"},{"kind":"number","nativeSrc":"18263:2:28","nodeType":"YulLiteral","src":"18263:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18251:3:28","nodeType":"YulIdentifier","src":"18251:3:28"},"nativeSrc":"18251:15:28","nodeType":"YulFunctionCall","src":"18251:15:28"},"variableNames":[{"name":"tail","nativeSrc":"18243:4:28","nodeType":"YulIdentifier","src":"18243:4:28"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_91f8baf9efb51cfab6fd65a63f4dc181a441df51c27a087b6c0bda584f32be41__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17485:787:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17734:9:28","nodeType":"YulTypedName","src":"17734:9:28","type":""},{"name":"value3","nativeSrc":"17745:6:28","nodeType":"YulTypedName","src":"17745:6:28","type":""},{"name":"value2","nativeSrc":"17753:6:28","nodeType":"YulTypedName","src":"17753:6:28","type":""},{"name":"value1","nativeSrc":"17761:6:28","nodeType":"YulTypedName","src":"17761:6:28","type":""},{"name":"value0","nativeSrc":"17769:6:28","nodeType":"YulTypedName","src":"17769:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17780:4:28","nodeType":"YulTypedName","src":"17780:4:28","type":""}],"src":"17485:787:28"},{"body":{"nativeSrc":"18451:228:28","nodeType":"YulBlock","src":"18451:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18468:9:28","nodeType":"YulIdentifier","src":"18468:9:28"},{"kind":"number","nativeSrc":"18479:2:28","nodeType":"YulLiteral","src":"18479:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18461:6:28","nodeType":"YulIdentifier","src":"18461:6:28"},"nativeSrc":"18461:21:28","nodeType":"YulFunctionCall","src":"18461:21:28"},"nativeSrc":"18461:21:28","nodeType":"YulExpressionStatement","src":"18461:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18502:9:28","nodeType":"YulIdentifier","src":"18502:9:28"},{"kind":"number","nativeSrc":"18513:2:28","nodeType":"YulLiteral","src":"18513:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18498:3:28","nodeType":"YulIdentifier","src":"18498:3:28"},"nativeSrc":"18498:18:28","nodeType":"YulFunctionCall","src":"18498:18:28"},{"kind":"number","nativeSrc":"18518:2:28","nodeType":"YulLiteral","src":"18518:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"18491:6:28","nodeType":"YulIdentifier","src":"18491:6:28"},"nativeSrc":"18491:30:28","nodeType":"YulFunctionCall","src":"18491:30:28"},"nativeSrc":"18491:30:28","nodeType":"YulExpressionStatement","src":"18491:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18541:9:28","nodeType":"YulIdentifier","src":"18541:9:28"},{"kind":"number","nativeSrc":"18552:2:28","nodeType":"YulLiteral","src":"18552:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18537:3:28","nodeType":"YulIdentifier","src":"18537:3:28"},"nativeSrc":"18537:18:28","nodeType":"YulFunctionCall","src":"18537:18:28"},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e7420686173206e6f20","kind":"string","nativeSrc":"18557:34:28","nodeType":"YulLiteral","src":"18557:34:28","type":"","value":"PaymentSplitter: account has no "}],"functionName":{"name":"mstore","nativeSrc":"18530:6:28","nodeType":"YulIdentifier","src":"18530:6:28"},"nativeSrc":"18530:62:28","nodeType":"YulFunctionCall","src":"18530:62:28"},"nativeSrc":"18530:62:28","nodeType":"YulExpressionStatement","src":"18530:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18612:9:28","nodeType":"YulIdentifier","src":"18612:9:28"},{"kind":"number","nativeSrc":"18623:2:28","nodeType":"YulLiteral","src":"18623:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18608:3:28","nodeType":"YulIdentifier","src":"18608:3:28"},"nativeSrc":"18608:18:28","nodeType":"YulFunctionCall","src":"18608:18:28"},{"hexValue":"736861726573","kind":"string","nativeSrc":"18628:8:28","nodeType":"YulLiteral","src":"18628:8:28","type":"","value":"shares"}],"functionName":{"name":"mstore","nativeSrc":"18601:6:28","nodeType":"YulIdentifier","src":"18601:6:28"},"nativeSrc":"18601:36:28","nodeType":"YulFunctionCall","src":"18601:36:28"},"nativeSrc":"18601:36:28","nodeType":"YulExpressionStatement","src":"18601:36:28"},{"nativeSrc":"18646:27:28","nodeType":"YulAssignment","src":"18646:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"18658:9:28","nodeType":"YulIdentifier","src":"18658:9:28"},{"kind":"number","nativeSrc":"18669:3:28","nodeType":"YulLiteral","src":"18669:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18654:3:28","nodeType":"YulIdentifier","src":"18654:3:28"},"nativeSrc":"18654:19:28","nodeType":"YulFunctionCall","src":"18654:19:28"},"variableNames":[{"name":"tail","nativeSrc":"18646:4:28","nodeType":"YulIdentifier","src":"18646:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18277:402:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18428:9:28","nodeType":"YulTypedName","src":"18428:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18442:4:28","nodeType":"YulTypedName","src":"18442:4:28","type":""}],"src":"18277:402:28"},{"body":{"nativeSrc":"18858:233:28","nodeType":"YulBlock","src":"18858:233:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18875:9:28","nodeType":"YulIdentifier","src":"18875:9:28"},{"kind":"number","nativeSrc":"18886:2:28","nodeType":"YulLiteral","src":"18886:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18868:6:28","nodeType":"YulIdentifier","src":"18868:6:28"},"nativeSrc":"18868:21:28","nodeType":"YulFunctionCall","src":"18868:21:28"},"nativeSrc":"18868:21:28","nodeType":"YulExpressionStatement","src":"18868:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18909:9:28","nodeType":"YulIdentifier","src":"18909:9:28"},{"kind":"number","nativeSrc":"18920:2:28","nodeType":"YulLiteral","src":"18920:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18905:3:28","nodeType":"YulIdentifier","src":"18905:3:28"},"nativeSrc":"18905:18:28","nodeType":"YulFunctionCall","src":"18905:18:28"},{"kind":"number","nativeSrc":"18925:2:28","nodeType":"YulLiteral","src":"18925:2:28","type":"","value":"43"}],"functionName":{"name":"mstore","nativeSrc":"18898:6:28","nodeType":"YulIdentifier","src":"18898:6:28"},"nativeSrc":"18898:30:28","nodeType":"YulFunctionCall","src":"18898:30:28"},"nativeSrc":"18898:30:28","nodeType":"YulExpressionStatement","src":"18898:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18948:9:28","nodeType":"YulIdentifier","src":"18948:9:28"},{"kind":"number","nativeSrc":"18959:2:28","nodeType":"YulLiteral","src":"18959:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18944:3:28","nodeType":"YulIdentifier","src":"18944:3:28"},"nativeSrc":"18944:18:28","nodeType":"YulFunctionCall","src":"18944:18:28"},{"hexValue":"5061796d656e7453706c69747465723a206163636f756e74206973206e6f7420","kind":"string","nativeSrc":"18964:34:28","nodeType":"YulLiteral","src":"18964:34:28","type":"","value":"PaymentSplitter: account is not "}],"functionName":{"name":"mstore","nativeSrc":"18937:6:28","nodeType":"YulIdentifier","src":"18937:6:28"},"nativeSrc":"18937:62:28","nodeType":"YulFunctionCall","src":"18937:62:28"},"nativeSrc":"18937:62:28","nodeType":"YulExpressionStatement","src":"18937:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19019:9:28","nodeType":"YulIdentifier","src":"19019:9:28"},{"kind":"number","nativeSrc":"19030:2:28","nodeType":"YulLiteral","src":"19030:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19015:3:28","nodeType":"YulIdentifier","src":"19015:3:28"},"nativeSrc":"19015:18:28","nodeType":"YulFunctionCall","src":"19015:18:28"},{"hexValue":"647565207061796d656e74","kind":"string","nativeSrc":"19035:13:28","nodeType":"YulLiteral","src":"19035:13:28","type":"","value":"due payment"}],"functionName":{"name":"mstore","nativeSrc":"19008:6:28","nodeType":"YulIdentifier","src":"19008:6:28"},"nativeSrc":"19008:41:28","nodeType":"YulFunctionCall","src":"19008:41:28"},"nativeSrc":"19008:41:28","nodeType":"YulExpressionStatement","src":"19008:41:28"},{"nativeSrc":"19058:27:28","nodeType":"YulAssignment","src":"19058:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"19070:9:28","nodeType":"YulIdentifier","src":"19070:9:28"},{"kind":"number","nativeSrc":"19081:3:28","nodeType":"YulLiteral","src":"19081:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"19066:3:28","nodeType":"YulIdentifier","src":"19066:3:28"},"nativeSrc":"19066:19:28","nodeType":"YulFunctionCall","src":"19066:19:28"},"variableNames":[{"name":"tail","nativeSrc":"19058:4:28","nodeType":"YulIdentifier","src":"19058:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18684:407:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18835:9:28","nodeType":"YulTypedName","src":"18835:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18849:4:28","nodeType":"YulTypedName","src":"18849:4:28","type":""}],"src":"18684:407:28"},{"body":{"nativeSrc":"19128:152:28","nodeType":"YulBlock","src":"19128:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19145:1:28","nodeType":"YulLiteral","src":"19145:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"19148:77:28","nodeType":"YulLiteral","src":"19148:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"19138:6:28","nodeType":"YulIdentifier","src":"19138:6:28"},"nativeSrc":"19138:88:28","nodeType":"YulFunctionCall","src":"19138:88:28"},"nativeSrc":"19138:88:28","nodeType":"YulExpressionStatement","src":"19138:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19242:1:28","nodeType":"YulLiteral","src":"19242:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"19245:4:28","nodeType":"YulLiteral","src":"19245:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"19235:6:28","nodeType":"YulIdentifier","src":"19235:6:28"},"nativeSrc":"19235:15:28","nodeType":"YulFunctionCall","src":"19235:15:28"},"nativeSrc":"19235:15:28","nodeType":"YulExpressionStatement","src":"19235:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19266:1:28","nodeType":"YulLiteral","src":"19266:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"19269:4:28","nodeType":"YulLiteral","src":"19269:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"19259:6:28","nodeType":"YulIdentifier","src":"19259:6:28"},"nativeSrc":"19259:15:28","nodeType":"YulFunctionCall","src":"19259:15:28"},"nativeSrc":"19259:15:28","nodeType":"YulExpressionStatement","src":"19259:15:28"}]},"name":"panic_error_0x11","nativeSrc":"19096:184:28","nodeType":"YulFunctionDefinition","src":"19096:184:28"},{"body":{"nativeSrc":"19333:77:28","nodeType":"YulBlock","src":"19333:77:28","statements":[{"nativeSrc":"19343:16:28","nodeType":"YulAssignment","src":"19343:16:28","value":{"arguments":[{"name":"x","nativeSrc":"19354:1:28","nodeType":"YulIdentifier","src":"19354:1:28"},{"name":"y","nativeSrc":"19357:1:28","nodeType":"YulIdentifier","src":"19357:1:28"}],"functionName":{"name":"add","nativeSrc":"19350:3:28","nodeType":"YulIdentifier","src":"19350:3:28"},"nativeSrc":"19350:9:28","nodeType":"YulFunctionCall","src":"19350:9:28"},"variableNames":[{"name":"sum","nativeSrc":"19343:3:28","nodeType":"YulIdentifier","src":"19343:3:28"}]},{"body":{"nativeSrc":"19382:22:28","nodeType":"YulBlock","src":"19382:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"19384:16:28","nodeType":"YulIdentifier","src":"19384:16:28"},"nativeSrc":"19384:18:28","nodeType":"YulFunctionCall","src":"19384:18:28"},"nativeSrc":"19384:18:28","nodeType":"YulExpressionStatement","src":"19384:18:28"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"19374:1:28","nodeType":"YulIdentifier","src":"19374:1:28"},{"name":"sum","nativeSrc":"19377:3:28","nodeType":"YulIdentifier","src":"19377:3:28"}],"functionName":{"name":"gt","nativeSrc":"19371:2:28","nodeType":"YulIdentifier","src":"19371:2:28"},"nativeSrc":"19371:10:28","nodeType":"YulFunctionCall","src":"19371:10:28"},"nativeSrc":"19368:36:28","nodeType":"YulIf","src":"19368:36:28"}]},"name":"checked_add_t_uint256","nativeSrc":"19285:125:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"19316:1:28","nodeType":"YulTypedName","src":"19316:1:28","type":""},{"name":"y","nativeSrc":"19319:1:28","nodeType":"YulTypedName","src":"19319:1:28","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"19325:3:28","nodeType":"YulTypedName","src":"19325:3:28","type":""}],"src":"19285:125:28"},{"body":{"nativeSrc":"19552:168:28","nodeType":"YulBlock","src":"19552:168:28","statements":[{"nativeSrc":"19562:26:28","nodeType":"YulAssignment","src":"19562:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"19574:9:28","nodeType":"YulIdentifier","src":"19574:9:28"},{"kind":"number","nativeSrc":"19585:2:28","nodeType":"YulLiteral","src":"19585:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19570:3:28","nodeType":"YulIdentifier","src":"19570:3:28"},"nativeSrc":"19570:18:28","nodeType":"YulFunctionCall","src":"19570:18:28"},"variableNames":[{"name":"tail","nativeSrc":"19562:4:28","nodeType":"YulIdentifier","src":"19562:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19604:9:28","nodeType":"YulIdentifier","src":"19604:9:28"},{"arguments":[{"name":"value0","nativeSrc":"19619:6:28","nodeType":"YulIdentifier","src":"19619:6:28"},{"kind":"number","nativeSrc":"19627:42:28","nodeType":"YulLiteral","src":"19627:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"19615:3:28","nodeType":"YulIdentifier","src":"19615:3:28"},"nativeSrc":"19615:55:28","nodeType":"YulFunctionCall","src":"19615:55:28"}],"functionName":{"name":"mstore","nativeSrc":"19597:6:28","nodeType":"YulIdentifier","src":"19597:6:28"},"nativeSrc":"19597:74:28","nodeType":"YulFunctionCall","src":"19597:74:28"},"nativeSrc":"19597:74:28","nodeType":"YulExpressionStatement","src":"19597:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19691:9:28","nodeType":"YulIdentifier","src":"19691:9:28"},{"kind":"number","nativeSrc":"19702:2:28","nodeType":"YulLiteral","src":"19702:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19687:3:28","nodeType":"YulIdentifier","src":"19687:3:28"},"nativeSrc":"19687:18:28","nodeType":"YulFunctionCall","src":"19687:18:28"},{"name":"value1","nativeSrc":"19707:6:28","nodeType":"YulIdentifier","src":"19707:6:28"}],"functionName":{"name":"mstore","nativeSrc":"19680:6:28","nodeType":"YulIdentifier","src":"19680:6:28"},"nativeSrc":"19680:34:28","nodeType":"YulFunctionCall","src":"19680:34:28"},"nativeSrc":"19680:34:28","nodeType":"YulExpressionStatement","src":"19680:34:28"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"19415:305:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19513:9:28","nodeType":"YulTypedName","src":"19513:9:28","type":""},{"name":"value1","nativeSrc":"19524:6:28","nodeType":"YulTypedName","src":"19524:6:28","type":""},{"name":"value0","nativeSrc":"19532:6:28","nodeType":"YulTypedName","src":"19532:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19543:4:28","nodeType":"YulTypedName","src":"19543:4:28","type":""}],"src":"19415:305:28"},{"body":{"nativeSrc":"19899:163:28","nodeType":"YulBlock","src":"19899:163:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19916:9:28","nodeType":"YulIdentifier","src":"19916:9:28"},{"kind":"number","nativeSrc":"19927:2:28","nodeType":"YulLiteral","src":"19927:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19909:6:28","nodeType":"YulIdentifier","src":"19909:6:28"},"nativeSrc":"19909:21:28","nodeType":"YulFunctionCall","src":"19909:21:28"},"nativeSrc":"19909:21:28","nodeType":"YulExpressionStatement","src":"19909:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19950:9:28","nodeType":"YulIdentifier","src":"19950:9:28"},{"kind":"number","nativeSrc":"19961:2:28","nodeType":"YulLiteral","src":"19961:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19946:3:28","nodeType":"YulIdentifier","src":"19946:3:28"},"nativeSrc":"19946:18:28","nodeType":"YulFunctionCall","src":"19946:18:28"},{"kind":"number","nativeSrc":"19966:2:28","nodeType":"YulLiteral","src":"19966:2:28","type":"","value":"13"}],"functionName":{"name":"mstore","nativeSrc":"19939:6:28","nodeType":"YulIdentifier","src":"19939:6:28"},"nativeSrc":"19939:30:28","nodeType":"YulFunctionCall","src":"19939:30:28"},"nativeSrc":"19939:30:28","nodeType":"YulExpressionStatement","src":"19939:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19989:9:28","nodeType":"YulIdentifier","src":"19989:9:28"},{"kind":"number","nativeSrc":"20000:2:28","nodeType":"YulLiteral","src":"20000:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19985:3:28","nodeType":"YulIdentifier","src":"19985:3:28"},"nativeSrc":"19985:18:28","nodeType":"YulFunctionCall","src":"19985:18:28"},{"hexValue":"496e76616c696420696e646578","kind":"string","nativeSrc":"20005:15:28","nodeType":"YulLiteral","src":"20005:15:28","type":"","value":"Invalid index"}],"functionName":{"name":"mstore","nativeSrc":"19978:6:28","nodeType":"YulIdentifier","src":"19978:6:28"},"nativeSrc":"19978:43:28","nodeType":"YulFunctionCall","src":"19978:43:28"},"nativeSrc":"19978:43:28","nodeType":"YulExpressionStatement","src":"19978:43:28"},{"nativeSrc":"20030:26:28","nodeType":"YulAssignment","src":"20030:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"20042:9:28","nodeType":"YulIdentifier","src":"20042:9:28"},{"kind":"number","nativeSrc":"20053:2:28","nodeType":"YulLiteral","src":"20053:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20038:3:28","nodeType":"YulIdentifier","src":"20038:3:28"},"nativeSrc":"20038:18:28","nodeType":"YulFunctionCall","src":"20038:18:28"},"variableNames":[{"name":"tail","nativeSrc":"20030:4:28","nodeType":"YulIdentifier","src":"20030:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_32cc480c4f0e15e5ce7060ec5e004886ed5a15831cba1ff1aa7cb787be55bb60__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19725:337:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19876:9:28","nodeType":"YulTypedName","src":"19876:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19890:4:28","nodeType":"YulTypedName","src":"19890:4:28","type":""}],"src":"19725:337:28"},{"body":{"nativeSrc":"20241:169:28","nodeType":"YulBlock","src":"20241:169:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20258:9:28","nodeType":"YulIdentifier","src":"20258:9:28"},{"kind":"number","nativeSrc":"20269:2:28","nodeType":"YulLiteral","src":"20269:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20251:6:28","nodeType":"YulIdentifier","src":"20251:6:28"},"nativeSrc":"20251:21:28","nodeType":"YulFunctionCall","src":"20251:21:28"},"nativeSrc":"20251:21:28","nodeType":"YulExpressionStatement","src":"20251:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20292:9:28","nodeType":"YulIdentifier","src":"20292:9:28"},{"kind":"number","nativeSrc":"20303:2:28","nodeType":"YulLiteral","src":"20303:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20288:3:28","nodeType":"YulIdentifier","src":"20288:3:28"},"nativeSrc":"20288:18:28","nodeType":"YulFunctionCall","src":"20288:18:28"},{"kind":"number","nativeSrc":"20308:2:28","nodeType":"YulLiteral","src":"20308:2:28","type":"","value":"19"}],"functionName":{"name":"mstore","nativeSrc":"20281:6:28","nodeType":"YulIdentifier","src":"20281:6:28"},"nativeSrc":"20281:30:28","nodeType":"YulFunctionCall","src":"20281:30:28"},"nativeSrc":"20281:30:28","nodeType":"YulExpressionStatement","src":"20281:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20331:9:28","nodeType":"YulIdentifier","src":"20331:9:28"},{"kind":"number","nativeSrc":"20342:2:28","nodeType":"YulLiteral","src":"20342:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20327:3:28","nodeType":"YulIdentifier","src":"20327:3:28"},"nativeSrc":"20327:18:28","nodeType":"YulFunctionCall","src":"20327:18:28"},{"hexValue":"496e646578206f7574206f6620626f756e6473","kind":"string","nativeSrc":"20347:21:28","nodeType":"YulLiteral","src":"20347:21:28","type":"","value":"Index out of bounds"}],"functionName":{"name":"mstore","nativeSrc":"20320:6:28","nodeType":"YulIdentifier","src":"20320:6:28"},"nativeSrc":"20320:49:28","nodeType":"YulFunctionCall","src":"20320:49:28"},"nativeSrc":"20320:49:28","nodeType":"YulExpressionStatement","src":"20320:49:28"},{"nativeSrc":"20378:26:28","nodeType":"YulAssignment","src":"20378:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"20390:9:28","nodeType":"YulIdentifier","src":"20390:9:28"},{"kind":"number","nativeSrc":"20401:2:28","nodeType":"YulLiteral","src":"20401:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20386:3:28","nodeType":"YulIdentifier","src":"20386:3:28"},"nativeSrc":"20386:18:28","nodeType":"YulFunctionCall","src":"20386:18:28"},"variableNames":[{"name":"tail","nativeSrc":"20378:4:28","nodeType":"YulIdentifier","src":"20378:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20067:343:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20218:9:28","nodeType":"YulTypedName","src":"20218:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20232:4:28","nodeType":"YulTypedName","src":"20232:4:28","type":""}],"src":"20067:343:28"},{"body":{"nativeSrc":"20464:79:28","nodeType":"YulBlock","src":"20464:79:28","statements":[{"nativeSrc":"20474:17:28","nodeType":"YulAssignment","src":"20474:17:28","value":{"arguments":[{"name":"x","nativeSrc":"20486:1:28","nodeType":"YulIdentifier","src":"20486:1:28"},{"name":"y","nativeSrc":"20489:1:28","nodeType":"YulIdentifier","src":"20489:1:28"}],"functionName":{"name":"sub","nativeSrc":"20482:3:28","nodeType":"YulIdentifier","src":"20482:3:28"},"nativeSrc":"20482:9:28","nodeType":"YulFunctionCall","src":"20482:9:28"},"variableNames":[{"name":"diff","nativeSrc":"20474:4:28","nodeType":"YulIdentifier","src":"20474:4:28"}]},{"body":{"nativeSrc":"20515:22:28","nodeType":"YulBlock","src":"20515:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"20517:16:28","nodeType":"YulIdentifier","src":"20517:16:28"},"nativeSrc":"20517:18:28","nodeType":"YulFunctionCall","src":"20517:18:28"},"nativeSrc":"20517:18:28","nodeType":"YulExpressionStatement","src":"20517:18:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"20506:4:28","nodeType":"YulIdentifier","src":"20506:4:28"},{"name":"x","nativeSrc":"20512:1:28","nodeType":"YulIdentifier","src":"20512:1:28"}],"functionName":{"name":"gt","nativeSrc":"20503:2:28","nodeType":"YulIdentifier","src":"20503:2:28"},"nativeSrc":"20503:11:28","nodeType":"YulFunctionCall","src":"20503:11:28"},"nativeSrc":"20500:37:28","nodeType":"YulIf","src":"20500:37:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"20415:128:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"20446:1:28","nodeType":"YulTypedName","src":"20446:1:28","type":""},{"name":"y","nativeSrc":"20449:1:28","nodeType":"YulTypedName","src":"20449:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"20455:4:28","nodeType":"YulTypedName","src":"20455:4:28","type":""}],"src":"20415:128:28"},{"body":{"nativeSrc":"20722:234:28","nodeType":"YulBlock","src":"20722:234:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20739:9:28","nodeType":"YulIdentifier","src":"20739:9:28"},{"kind":"number","nativeSrc":"20750:2:28","nodeType":"YulLiteral","src":"20750:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20732:6:28","nodeType":"YulIdentifier","src":"20732:6:28"},"nativeSrc":"20732:21:28","nodeType":"YulFunctionCall","src":"20732:21:28"},"nativeSrc":"20732:21:28","nodeType":"YulExpressionStatement","src":"20732:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20773:9:28","nodeType":"YulIdentifier","src":"20773:9:28"},{"kind":"number","nativeSrc":"20784:2:28","nodeType":"YulLiteral","src":"20784:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20769:3:28","nodeType":"YulIdentifier","src":"20769:3:28"},"nativeSrc":"20769:18:28","nodeType":"YulFunctionCall","src":"20769:18:28"},{"kind":"number","nativeSrc":"20789:2:28","nodeType":"YulLiteral","src":"20789:2:28","type":"","value":"44"}],"functionName":{"name":"mstore","nativeSrc":"20762:6:28","nodeType":"YulIdentifier","src":"20762:6:28"},"nativeSrc":"20762:30:28","nodeType":"YulFunctionCall","src":"20762:30:28"},"nativeSrc":"20762:30:28","nodeType":"YulExpressionStatement","src":"20762:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20812:9:28","nodeType":"YulIdentifier","src":"20812:9:28"},{"kind":"number","nativeSrc":"20823:2:28","nodeType":"YulLiteral","src":"20823:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20808:3:28","nodeType":"YulIdentifier","src":"20808:3:28"},"nativeSrc":"20808:18:28","nodeType":"YulFunctionCall","src":"20808:18:28"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nativeSrc":"20828:34:28","nodeType":"YulLiteral","src":"20828:34:28","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nativeSrc":"20801:6:28","nodeType":"YulIdentifier","src":"20801:6:28"},"nativeSrc":"20801:62:28","nodeType":"YulFunctionCall","src":"20801:62:28"},"nativeSrc":"20801:62:28","nodeType":"YulExpressionStatement","src":"20801:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20883:9:28","nodeType":"YulIdentifier","src":"20883:9:28"},{"kind":"number","nativeSrc":"20894:2:28","nodeType":"YulLiteral","src":"20894:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20879:3:28","nodeType":"YulIdentifier","src":"20879:3:28"},"nativeSrc":"20879:18:28","nodeType":"YulFunctionCall","src":"20879:18:28"},{"hexValue":"64656c656761746563616c6c","kind":"string","nativeSrc":"20899:14:28","nodeType":"YulLiteral","src":"20899:14:28","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nativeSrc":"20872:6:28","nodeType":"YulIdentifier","src":"20872:6:28"},"nativeSrc":"20872:42:28","nodeType":"YulFunctionCall","src":"20872:42:28"},"nativeSrc":"20872:42:28","nodeType":"YulExpressionStatement","src":"20872:42:28"},{"nativeSrc":"20923:27:28","nodeType":"YulAssignment","src":"20923:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"20935:9:28","nodeType":"YulIdentifier","src":"20935:9:28"},{"kind":"number","nativeSrc":"20946:3:28","nodeType":"YulLiteral","src":"20946:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20931:3:28","nodeType":"YulIdentifier","src":"20931:3:28"},"nativeSrc":"20931:19:28","nodeType":"YulFunctionCall","src":"20931:19:28"},"variableNames":[{"name":"tail","nativeSrc":"20923:4:28","nodeType":"YulIdentifier","src":"20923:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20548:408:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20699:9:28","nodeType":"YulTypedName","src":"20699:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20713:4:28","nodeType":"YulTypedName","src":"20713:4:28","type":""}],"src":"20548:408:28"},{"body":{"nativeSrc":"21135:234:28","nodeType":"YulBlock","src":"21135:234:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21152:9:28","nodeType":"YulIdentifier","src":"21152:9:28"},{"kind":"number","nativeSrc":"21163:2:28","nodeType":"YulLiteral","src":"21163:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21145:6:28","nodeType":"YulIdentifier","src":"21145:6:28"},"nativeSrc":"21145:21:28","nodeType":"YulFunctionCall","src":"21145:21:28"},"nativeSrc":"21145:21:28","nodeType":"YulExpressionStatement","src":"21145:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21186:9:28","nodeType":"YulIdentifier","src":"21186:9:28"},{"kind":"number","nativeSrc":"21197:2:28","nodeType":"YulLiteral","src":"21197:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21182:3:28","nodeType":"YulIdentifier","src":"21182:3:28"},"nativeSrc":"21182:18:28","nodeType":"YulFunctionCall","src":"21182:18:28"},{"kind":"number","nativeSrc":"21202:2:28","nodeType":"YulLiteral","src":"21202:2:28","type":"","value":"44"}],"functionName":{"name":"mstore","nativeSrc":"21175:6:28","nodeType":"YulIdentifier","src":"21175:6:28"},"nativeSrc":"21175:30:28","nodeType":"YulFunctionCall","src":"21175:30:28"},"nativeSrc":"21175:30:28","nodeType":"YulExpressionStatement","src":"21175:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21225:9:28","nodeType":"YulIdentifier","src":"21225:9:28"},{"kind":"number","nativeSrc":"21236:2:28","nodeType":"YulLiteral","src":"21236:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21221:3:28","nodeType":"YulIdentifier","src":"21221:3:28"},"nativeSrc":"21221:18:28","nodeType":"YulFunctionCall","src":"21221:18:28"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nativeSrc":"21241:34:28","nodeType":"YulLiteral","src":"21241:34:28","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nativeSrc":"21214:6:28","nodeType":"YulIdentifier","src":"21214:6:28"},"nativeSrc":"21214:62:28","nodeType":"YulFunctionCall","src":"21214:62:28"},"nativeSrc":"21214:62:28","nodeType":"YulExpressionStatement","src":"21214:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21296:9:28","nodeType":"YulIdentifier","src":"21296:9:28"},{"kind":"number","nativeSrc":"21307:2:28","nodeType":"YulLiteral","src":"21307:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21292:3:28","nodeType":"YulIdentifier","src":"21292:3:28"},"nativeSrc":"21292:18:28","nodeType":"YulFunctionCall","src":"21292:18:28"},{"hexValue":"6163746976652070726f7879","kind":"string","nativeSrc":"21312:14:28","nodeType":"YulLiteral","src":"21312:14:28","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nativeSrc":"21285:6:28","nodeType":"YulIdentifier","src":"21285:6:28"},"nativeSrc":"21285:42:28","nodeType":"YulFunctionCall","src":"21285:42:28"},"nativeSrc":"21285:42:28","nodeType":"YulExpressionStatement","src":"21285:42:28"},{"nativeSrc":"21336:27:28","nodeType":"YulAssignment","src":"21336:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"21348:9:28","nodeType":"YulIdentifier","src":"21348:9:28"},{"kind":"number","nativeSrc":"21359:3:28","nodeType":"YulLiteral","src":"21359:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"21344:3:28","nodeType":"YulIdentifier","src":"21344:3:28"},"nativeSrc":"21344:19:28","nodeType":"YulFunctionCall","src":"21344:19:28"},"variableNames":[{"name":"tail","nativeSrc":"21336:4:28","nodeType":"YulIdentifier","src":"21336:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20961:408:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21112:9:28","nodeType":"YulTypedName","src":"21112:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21126:4:28","nodeType":"YulTypedName","src":"21126:4:28","type":""}],"src":"20961:408:28"},{"body":{"nativeSrc":"21548:246:28","nodeType":"YulBlock","src":"21548:246:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21565:9:28","nodeType":"YulIdentifier","src":"21565:9:28"},{"kind":"number","nativeSrc":"21576:2:28","nodeType":"YulLiteral","src":"21576:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21558:6:28","nodeType":"YulIdentifier","src":"21558:6:28"},"nativeSrc":"21558:21:28","nodeType":"YulFunctionCall","src":"21558:21:28"},"nativeSrc":"21558:21:28","nodeType":"YulExpressionStatement","src":"21558:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21599:9:28","nodeType":"YulIdentifier","src":"21599:9:28"},{"kind":"number","nativeSrc":"21610:2:28","nodeType":"YulLiteral","src":"21610:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21595:3:28","nodeType":"YulIdentifier","src":"21595:3:28"},"nativeSrc":"21595:18:28","nodeType":"YulFunctionCall","src":"21595:18:28"},{"kind":"number","nativeSrc":"21615:2:28","nodeType":"YulLiteral","src":"21615:2:28","type":"","value":"56"}],"functionName":{"name":"mstore","nativeSrc":"21588:6:28","nodeType":"YulIdentifier","src":"21588:6:28"},"nativeSrc":"21588:30:28","nodeType":"YulFunctionCall","src":"21588:30:28"},"nativeSrc":"21588:30:28","nodeType":"YulExpressionStatement","src":"21588:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21638:9:28","nodeType":"YulIdentifier","src":"21638:9:28"},{"kind":"number","nativeSrc":"21649:2:28","nodeType":"YulLiteral","src":"21649:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21634:3:28","nodeType":"YulIdentifier","src":"21634:3:28"},"nativeSrc":"21634:18:28","nodeType":"YulFunctionCall","src":"21634:18:28"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nativeSrc":"21654:34:28","nodeType":"YulLiteral","src":"21654:34:28","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nativeSrc":"21627:6:28","nodeType":"YulIdentifier","src":"21627:6:28"},"nativeSrc":"21627:62:28","nodeType":"YulFunctionCall","src":"21627:62:28"},"nativeSrc":"21627:62:28","nodeType":"YulExpressionStatement","src":"21627:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21709:9:28","nodeType":"YulIdentifier","src":"21709:9:28"},{"kind":"number","nativeSrc":"21720:2:28","nodeType":"YulLiteral","src":"21720:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21705:3:28","nodeType":"YulIdentifier","src":"21705:3:28"},"nativeSrc":"21705:18:28","nodeType":"YulFunctionCall","src":"21705:18:28"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nativeSrc":"21725:26:28","nodeType":"YulLiteral","src":"21725:26:28","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nativeSrc":"21698:6:28","nodeType":"YulIdentifier","src":"21698:6:28"},"nativeSrc":"21698:54:28","nodeType":"YulFunctionCall","src":"21698:54:28"},"nativeSrc":"21698:54:28","nodeType":"YulExpressionStatement","src":"21698:54:28"},{"nativeSrc":"21761:27:28","nodeType":"YulAssignment","src":"21761:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"21773:9:28","nodeType":"YulIdentifier","src":"21773:9:28"},{"kind":"number","nativeSrc":"21784:3:28","nodeType":"YulLiteral","src":"21784:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"21769:3:28","nodeType":"YulIdentifier","src":"21769:3:28"},"nativeSrc":"21769:19:28","nodeType":"YulFunctionCall","src":"21769:19:28"},"variableNames":[{"name":"tail","nativeSrc":"21761:4:28","nodeType":"YulIdentifier","src":"21761:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21374:420:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21525:9:28","nodeType":"YulTypedName","src":"21525:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21539:4:28","nodeType":"YulTypedName","src":"21539:4:28","type":""}],"src":"21374:420:28"},{"body":{"nativeSrc":"21973:236:28","nodeType":"YulBlock","src":"21973:236:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21990:9:28","nodeType":"YulIdentifier","src":"21990:9:28"},{"kind":"number","nativeSrc":"22001:2:28","nodeType":"YulLiteral","src":"22001:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21983:6:28","nodeType":"YulIdentifier","src":"21983:6:28"},"nativeSrc":"21983:21:28","nodeType":"YulFunctionCall","src":"21983:21:28"},"nativeSrc":"21983:21:28","nodeType":"YulExpressionStatement","src":"21983:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22024:9:28","nodeType":"YulIdentifier","src":"22024:9:28"},{"kind":"number","nativeSrc":"22035:2:28","nodeType":"YulLiteral","src":"22035:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22020:3:28","nodeType":"YulIdentifier","src":"22020:3:28"},"nativeSrc":"22020:18:28","nodeType":"YulFunctionCall","src":"22020:18:28"},{"kind":"number","nativeSrc":"22040:2:28","nodeType":"YulLiteral","src":"22040:2:28","type":"","value":"46"}],"functionName":{"name":"mstore","nativeSrc":"22013:6:28","nodeType":"YulIdentifier","src":"22013:6:28"},"nativeSrc":"22013:30:28","nodeType":"YulFunctionCall","src":"22013:30:28"},"nativeSrc":"22013:30:28","nodeType":"YulExpressionStatement","src":"22013:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22063:9:28","nodeType":"YulIdentifier","src":"22063:9:28"},{"kind":"number","nativeSrc":"22074:2:28","nodeType":"YulLiteral","src":"22074:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22059:3:28","nodeType":"YulIdentifier","src":"22059:3:28"},"nativeSrc":"22059:18:28","nodeType":"YulFunctionCall","src":"22059:18:28"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nativeSrc":"22079:34:28","nodeType":"YulLiteral","src":"22079:34:28","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nativeSrc":"22052:6:28","nodeType":"YulIdentifier","src":"22052:6:28"},"nativeSrc":"22052:62:28","nodeType":"YulFunctionCall","src":"22052:62:28"},"nativeSrc":"22052:62:28","nodeType":"YulExpressionStatement","src":"22052:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22134:9:28","nodeType":"YulIdentifier","src":"22134:9:28"},{"kind":"number","nativeSrc":"22145:2:28","nodeType":"YulLiteral","src":"22145:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22130:3:28","nodeType":"YulIdentifier","src":"22130:3:28"},"nativeSrc":"22130:18:28","nodeType":"YulFunctionCall","src":"22130:18:28"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nativeSrc":"22150:16:28","nodeType":"YulLiteral","src":"22150:16:28","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nativeSrc":"22123:6:28","nodeType":"YulIdentifier","src":"22123:6:28"},"nativeSrc":"22123:44:28","nodeType":"YulFunctionCall","src":"22123:44:28"},"nativeSrc":"22123:44:28","nodeType":"YulExpressionStatement","src":"22123:44:28"},{"nativeSrc":"22176:27:28","nodeType":"YulAssignment","src":"22176:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"22188:9:28","nodeType":"YulIdentifier","src":"22188:9:28"},{"kind":"number","nativeSrc":"22199:3:28","nodeType":"YulLiteral","src":"22199:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22184:3:28","nodeType":"YulIdentifier","src":"22184:3:28"},"nativeSrc":"22184:19:28","nodeType":"YulFunctionCall","src":"22184:19:28"},"variableNames":[{"name":"tail","nativeSrc":"22176:4:28","nodeType":"YulIdentifier","src":"22176:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21799:410:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21950:9:28","nodeType":"YulTypedName","src":"21950:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21964:4:28","nodeType":"YulTypedName","src":"21964:4:28","type":""}],"src":"21799:410:28"},{"body":{"nativeSrc":"22321:87:28","nodeType":"YulBlock","src":"22321:87:28","statements":[{"nativeSrc":"22331:26:28","nodeType":"YulAssignment","src":"22331:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"22343:9:28","nodeType":"YulIdentifier","src":"22343:9:28"},{"kind":"number","nativeSrc":"22354:2:28","nodeType":"YulLiteral","src":"22354:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22339:3:28","nodeType":"YulIdentifier","src":"22339:3:28"},"nativeSrc":"22339:18:28","nodeType":"YulFunctionCall","src":"22339:18:28"},"variableNames":[{"name":"tail","nativeSrc":"22331:4:28","nodeType":"YulIdentifier","src":"22331:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"22373:9:28","nodeType":"YulIdentifier","src":"22373:9:28"},{"arguments":[{"name":"value0","nativeSrc":"22388:6:28","nodeType":"YulIdentifier","src":"22388:6:28"},{"kind":"number","nativeSrc":"22396:4:28","nodeType":"YulLiteral","src":"22396:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"22384:3:28","nodeType":"YulIdentifier","src":"22384:3:28"},"nativeSrc":"22384:17:28","nodeType":"YulFunctionCall","src":"22384:17:28"}],"functionName":{"name":"mstore","nativeSrc":"22366:6:28","nodeType":"YulIdentifier","src":"22366:6:28"},"nativeSrc":"22366:36:28","nodeType":"YulFunctionCall","src":"22366:36:28"},"nativeSrc":"22366:36:28","nodeType":"YulExpressionStatement","src":"22366:36:28"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nativeSrc":"22214:194:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22290:9:28","nodeType":"YulTypedName","src":"22290:9:28","type":""},{"name":"value0","nativeSrc":"22301:6:28","nodeType":"YulTypedName","src":"22301:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22312:4:28","nodeType":"YulTypedName","src":"22312:4:28","type":""}],"src":"22214:194:28"},{"body":{"nativeSrc":"22604:14:28","nodeType":"YulBlock","src":"22604:14:28","statements":[{"nativeSrc":"22606:10:28","nodeType":"YulAssignment","src":"22606:10:28","value":{"name":"pos","nativeSrc":"22613:3:28","nodeType":"YulIdentifier","src":"22613:3:28"},"variableNames":[{"name":"end","nativeSrc":"22606:3:28","nodeType":"YulIdentifier","src":"22606:3:28"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"22413:205:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"22588:3:28","nodeType":"YulTypedName","src":"22588:3:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"22596:3:28","nodeType":"YulTypedName","src":"22596:3:28","type":""}],"src":"22413:205:28"},{"body":{"nativeSrc":"22797:170:28","nodeType":"YulBlock","src":"22797:170:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"22814:9:28","nodeType":"YulIdentifier","src":"22814:9:28"},{"kind":"number","nativeSrc":"22825:2:28","nodeType":"YulLiteral","src":"22825:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"22807:6:28","nodeType":"YulIdentifier","src":"22807:6:28"},"nativeSrc":"22807:21:28","nodeType":"YulFunctionCall","src":"22807:21:28"},"nativeSrc":"22807:21:28","nodeType":"YulExpressionStatement","src":"22807:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22848:9:28","nodeType":"YulIdentifier","src":"22848:9:28"},{"kind":"number","nativeSrc":"22859:2:28","nodeType":"YulLiteral","src":"22859:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22844:3:28","nodeType":"YulIdentifier","src":"22844:3:28"},"nativeSrc":"22844:18:28","nodeType":"YulFunctionCall","src":"22844:18:28"},{"kind":"number","nativeSrc":"22864:2:28","nodeType":"YulLiteral","src":"22864:2:28","type":"","value":"20"}],"functionName":{"name":"mstore","nativeSrc":"22837:6:28","nodeType":"YulIdentifier","src":"22837:6:28"},"nativeSrc":"22837:30:28","nodeType":"YulFunctionCall","src":"22837:30:28"},"nativeSrc":"22837:30:28","nodeType":"YulExpressionStatement","src":"22837:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22887:9:28","nodeType":"YulIdentifier","src":"22887:9:28"},{"kind":"number","nativeSrc":"22898:2:28","nodeType":"YulLiteral","src":"22898:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22883:3:28","nodeType":"YulIdentifier","src":"22883:3:28"},"nativeSrc":"22883:18:28","nodeType":"YulFunctionCall","src":"22883:18:28"},{"hexValue":"4661696c656420746f2073656e64204574686572","kind":"string","nativeSrc":"22903:22:28","nodeType":"YulLiteral","src":"22903:22:28","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nativeSrc":"22876:6:28","nodeType":"YulIdentifier","src":"22876:6:28"},"nativeSrc":"22876:50:28","nodeType":"YulFunctionCall","src":"22876:50:28"},"nativeSrc":"22876:50:28","nodeType":"YulExpressionStatement","src":"22876:50:28"},{"nativeSrc":"22935:26:28","nodeType":"YulAssignment","src":"22935:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"22947:9:28","nodeType":"YulIdentifier","src":"22947:9:28"},{"kind":"number","nativeSrc":"22958:2:28","nodeType":"YulLiteral","src":"22958:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22943:3:28","nodeType":"YulIdentifier","src":"22943:3:28"},"nativeSrc":"22943:18:28","nodeType":"YulFunctionCall","src":"22943:18:28"},"variableNames":[{"name":"tail","nativeSrc":"22935:4:28","nodeType":"YulIdentifier","src":"22935:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"22623:344:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22774:9:28","nodeType":"YulTypedName","src":"22774:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22788:4:28","nodeType":"YulTypedName","src":"22788:4:28","type":""}],"src":"22623:344:28"},{"body":{"nativeSrc":"23151:222:28","nodeType":"YulBlock","src":"23151:222:28","statements":[{"nativeSrc":"23161:27:28","nodeType":"YulAssignment","src":"23161:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"23173:9:28","nodeType":"YulIdentifier","src":"23173:9:28"},{"kind":"number","nativeSrc":"23184:3:28","nodeType":"YulLiteral","src":"23184:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"23169:3:28","nodeType":"YulIdentifier","src":"23169:3:28"},"nativeSrc":"23169:19:28","nodeType":"YulFunctionCall","src":"23169:19:28"},"variableNames":[{"name":"tail","nativeSrc":"23161:4:28","nodeType":"YulIdentifier","src":"23161:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"23204:9:28","nodeType":"YulIdentifier","src":"23204:9:28"},{"name":"value0","nativeSrc":"23215:6:28","nodeType":"YulIdentifier","src":"23215:6:28"}],"functionName":{"name":"mstore","nativeSrc":"23197:6:28","nodeType":"YulIdentifier","src":"23197:6:28"},"nativeSrc":"23197:25:28","nodeType":"YulFunctionCall","src":"23197:25:28"},"nativeSrc":"23197:25:28","nodeType":"YulExpressionStatement","src":"23197:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23242:9:28","nodeType":"YulIdentifier","src":"23242:9:28"},{"kind":"number","nativeSrc":"23253:2:28","nodeType":"YulLiteral","src":"23253:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23238:3:28","nodeType":"YulIdentifier","src":"23238:3:28"},"nativeSrc":"23238:18:28","nodeType":"YulFunctionCall","src":"23238:18:28"},{"name":"value1","nativeSrc":"23258:6:28","nodeType":"YulIdentifier","src":"23258:6:28"}],"functionName":{"name":"mstore","nativeSrc":"23231:6:28","nodeType":"YulIdentifier","src":"23231:6:28"},"nativeSrc":"23231:34:28","nodeType":"YulFunctionCall","src":"23231:34:28"},"nativeSrc":"23231:34:28","nodeType":"YulExpressionStatement","src":"23231:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23285:9:28","nodeType":"YulIdentifier","src":"23285:9:28"},{"kind":"number","nativeSrc":"23296:2:28","nodeType":"YulLiteral","src":"23296:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23281:3:28","nodeType":"YulIdentifier","src":"23281:3:28"},"nativeSrc":"23281:18:28","nodeType":"YulFunctionCall","src":"23281:18:28"},{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"23315:6:28","nodeType":"YulIdentifier","src":"23315:6:28"}],"functionName":{"name":"iszero","nativeSrc":"23308:6:28","nodeType":"YulIdentifier","src":"23308:6:28"},"nativeSrc":"23308:14:28","nodeType":"YulFunctionCall","src":"23308:14:28"}],"functionName":{"name":"iszero","nativeSrc":"23301:6:28","nodeType":"YulIdentifier","src":"23301:6:28"},"nativeSrc":"23301:22:28","nodeType":"YulFunctionCall","src":"23301:22:28"}],"functionName":{"name":"mstore","nativeSrc":"23274:6:28","nodeType":"YulIdentifier","src":"23274:6:28"},"nativeSrc":"23274:50:28","nodeType":"YulFunctionCall","src":"23274:50:28"},"nativeSrc":"23274:50:28","nodeType":"YulExpressionStatement","src":"23274:50:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23344:9:28","nodeType":"YulIdentifier","src":"23344:9:28"},{"kind":"number","nativeSrc":"23355:2:28","nodeType":"YulLiteral","src":"23355:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"23340:3:28","nodeType":"YulIdentifier","src":"23340:3:28"},"nativeSrc":"23340:18:28","nodeType":"YulFunctionCall","src":"23340:18:28"},{"name":"value3","nativeSrc":"23360:6:28","nodeType":"YulIdentifier","src":"23360:6:28"}],"functionName":{"name":"mstore","nativeSrc":"23333:6:28","nodeType":"YulIdentifier","src":"23333:6:28"},"nativeSrc":"23333:34:28","nodeType":"YulFunctionCall","src":"23333:34:28"},"nativeSrc":"23333:34:28","nodeType":"YulExpressionStatement","src":"23333:34:28"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_bool_t_uint256__to_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed","nativeSrc":"22972:401:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23096:9:28","nodeType":"YulTypedName","src":"23096:9:28","type":""},{"name":"value3","nativeSrc":"23107:6:28","nodeType":"YulTypedName","src":"23107:6:28","type":""},{"name":"value2","nativeSrc":"23115:6:28","nodeType":"YulTypedName","src":"23115:6:28","type":""},{"name":"value1","nativeSrc":"23123:6:28","nodeType":"YulTypedName","src":"23123:6:28","type":""},{"name":"value0","nativeSrc":"23131:6:28","nodeType":"YulTypedName","src":"23131:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23142:4:28","nodeType":"YulTypedName","src":"23142:4:28","type":""}],"src":"22972:401:28"},{"body":{"nativeSrc":"23459:103:28","nodeType":"YulBlock","src":"23459:103:28","statements":[{"body":{"nativeSrc":"23505:16:28","nodeType":"YulBlock","src":"23505:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"23514:1:28","nodeType":"YulLiteral","src":"23514:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"23517:1:28","nodeType":"YulLiteral","src":"23517:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"23507:6:28","nodeType":"YulIdentifier","src":"23507:6:28"},"nativeSrc":"23507:12:28","nodeType":"YulFunctionCall","src":"23507:12:28"},"nativeSrc":"23507:12:28","nodeType":"YulExpressionStatement","src":"23507:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"23480:7:28","nodeType":"YulIdentifier","src":"23480:7:28"},{"name":"headStart","nativeSrc":"23489:9:28","nodeType":"YulIdentifier","src":"23489:9:28"}],"functionName":{"name":"sub","nativeSrc":"23476:3:28","nodeType":"YulIdentifier","src":"23476:3:28"},"nativeSrc":"23476:23:28","nodeType":"YulFunctionCall","src":"23476:23:28"},{"kind":"number","nativeSrc":"23501:2:28","nodeType":"YulLiteral","src":"23501:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"23472:3:28","nodeType":"YulIdentifier","src":"23472:3:28"},"nativeSrc":"23472:32:28","nodeType":"YulFunctionCall","src":"23472:32:28"},"nativeSrc":"23469:52:28","nodeType":"YulIf","src":"23469:52:28"},{"nativeSrc":"23530:26:28","nodeType":"YulAssignment","src":"23530:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"23546:9:28","nodeType":"YulIdentifier","src":"23546:9:28"}],"functionName":{"name":"mload","nativeSrc":"23540:5:28","nodeType":"YulIdentifier","src":"23540:5:28"},"nativeSrc":"23540:16:28","nodeType":"YulFunctionCall","src":"23540:16:28"},"variableNames":[{"name":"value0","nativeSrc":"23530:6:28","nodeType":"YulIdentifier","src":"23530:6:28"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nativeSrc":"23378:184:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23425:9:28","nodeType":"YulTypedName","src":"23425:9:28","type":""},{"name":"dataEnd","nativeSrc":"23436:7:28","nodeType":"YulTypedName","src":"23436:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"23448:6:28","nodeType":"YulTypedName","src":"23448:6:28","type":""}],"src":"23378:184:28"},{"body":{"nativeSrc":"23741:179:28","nodeType":"YulBlock","src":"23741:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"23758:9:28","nodeType":"YulIdentifier","src":"23758:9:28"},{"kind":"number","nativeSrc":"23769:2:28","nodeType":"YulLiteral","src":"23769:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"23751:6:28","nodeType":"YulIdentifier","src":"23751:6:28"},"nativeSrc":"23751:21:28","nodeType":"YulFunctionCall","src":"23751:21:28"},"nativeSrc":"23751:21:28","nodeType":"YulExpressionStatement","src":"23751:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23792:9:28","nodeType":"YulIdentifier","src":"23792:9:28"},{"kind":"number","nativeSrc":"23803:2:28","nodeType":"YulLiteral","src":"23803:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23788:3:28","nodeType":"YulIdentifier","src":"23788:3:28"},"nativeSrc":"23788:18:28","nodeType":"YulFunctionCall","src":"23788:18:28"},{"kind":"number","nativeSrc":"23808:2:28","nodeType":"YulLiteral","src":"23808:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"23781:6:28","nodeType":"YulIdentifier","src":"23781:6:28"},"nativeSrc":"23781:30:28","nodeType":"YulFunctionCall","src":"23781:30:28"},"nativeSrc":"23781:30:28","nodeType":"YulExpressionStatement","src":"23781:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23831:9:28","nodeType":"YulIdentifier","src":"23831:9:28"},{"kind":"number","nativeSrc":"23842:2:28","nodeType":"YulLiteral","src":"23842:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23827:3:28","nodeType":"YulIdentifier","src":"23827:3:28"},"nativeSrc":"23827:18:28","nodeType":"YulFunctionCall","src":"23827:18:28"},{"hexValue":"4661696c656420746f20726566756e6420657863657373204574686572","kind":"string","nativeSrc":"23847:31:28","nodeType":"YulLiteral","src":"23847:31:28","type":"","value":"Failed to refund excess Ether"}],"functionName":{"name":"mstore","nativeSrc":"23820:6:28","nodeType":"YulIdentifier","src":"23820:6:28"},"nativeSrc":"23820:59:28","nodeType":"YulFunctionCall","src":"23820:59:28"},"nativeSrc":"23820:59:28","nodeType":"YulExpressionStatement","src":"23820:59:28"},{"nativeSrc":"23888:26:28","nodeType":"YulAssignment","src":"23888:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"23900:9:28","nodeType":"YulIdentifier","src":"23900:9:28"},{"kind":"number","nativeSrc":"23911:2:28","nodeType":"YulLiteral","src":"23911:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"23896:3:28","nodeType":"YulIdentifier","src":"23896:3:28"},"nativeSrc":"23896:18:28","nodeType":"YulFunctionCall","src":"23896:18:28"},"variableNames":[{"name":"tail","nativeSrc":"23888:4:28","nodeType":"YulIdentifier","src":"23888:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_d9cb5a535dd6e8649f5b16f2bf5320a3bd41435311ffe94f95d27e82891f029d__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"23567:353:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23718:9:28","nodeType":"YulTypedName","src":"23718:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23732:4:28","nodeType":"YulTypedName","src":"23732:4:28","type":""}],"src":"23567:353:28"},{"body":{"nativeSrc":"24110:285:28","nodeType":"YulBlock","src":"24110:285:28","statements":[{"nativeSrc":"24120:27:28","nodeType":"YulAssignment","src":"24120:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"24132:9:28","nodeType":"YulIdentifier","src":"24132:9:28"},{"kind":"number","nativeSrc":"24143:3:28","nodeType":"YulLiteral","src":"24143:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"24128:3:28","nodeType":"YulIdentifier","src":"24128:3:28"},"nativeSrc":"24128:19:28","nodeType":"YulFunctionCall","src":"24128:19:28"},"variableNames":[{"name":"tail","nativeSrc":"24120:4:28","nodeType":"YulIdentifier","src":"24120:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"24163:9:28","nodeType":"YulIdentifier","src":"24163:9:28"},{"name":"value0","nativeSrc":"24174:6:28","nodeType":"YulIdentifier","src":"24174:6:28"}],"functionName":{"name":"mstore","nativeSrc":"24156:6:28","nodeType":"YulIdentifier","src":"24156:6:28"},"nativeSrc":"24156:25:28","nodeType":"YulFunctionCall","src":"24156:25:28"},"nativeSrc":"24156:25:28","nodeType":"YulExpressionStatement","src":"24156:25:28"},{"nativeSrc":"24190:52:28","nodeType":"YulVariableDeclaration","src":"24190:52:28","value":{"kind":"number","nativeSrc":"24200:42:28","nodeType":"YulLiteral","src":"24200:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"24194:2:28","nodeType":"YulTypedName","src":"24194:2:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24262:9:28","nodeType":"YulIdentifier","src":"24262:9:28"},{"kind":"number","nativeSrc":"24273:2:28","nodeType":"YulLiteral","src":"24273:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24258:3:28","nodeType":"YulIdentifier","src":"24258:3:28"},"nativeSrc":"24258:18:28","nodeType":"YulFunctionCall","src":"24258:18:28"},{"arguments":[{"name":"value1","nativeSrc":"24282:6:28","nodeType":"YulIdentifier","src":"24282:6:28"},{"name":"_1","nativeSrc":"24290:2:28","nodeType":"YulIdentifier","src":"24290:2:28"}],"functionName":{"name":"and","nativeSrc":"24278:3:28","nodeType":"YulIdentifier","src":"24278:3:28"},"nativeSrc":"24278:15:28","nodeType":"YulFunctionCall","src":"24278:15:28"}],"functionName":{"name":"mstore","nativeSrc":"24251:6:28","nodeType":"YulIdentifier","src":"24251:6:28"},"nativeSrc":"24251:43:28","nodeType":"YulFunctionCall","src":"24251:43:28"},"nativeSrc":"24251:43:28","nodeType":"YulExpressionStatement","src":"24251:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24314:9:28","nodeType":"YulIdentifier","src":"24314:9:28"},{"kind":"number","nativeSrc":"24325:2:28","nodeType":"YulLiteral","src":"24325:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"24310:3:28","nodeType":"YulIdentifier","src":"24310:3:28"},"nativeSrc":"24310:18:28","nodeType":"YulFunctionCall","src":"24310:18:28"},{"name":"value2","nativeSrc":"24330:6:28","nodeType":"YulIdentifier","src":"24330:6:28"}],"functionName":{"name":"mstore","nativeSrc":"24303:6:28","nodeType":"YulIdentifier","src":"24303:6:28"},"nativeSrc":"24303:34:28","nodeType":"YulFunctionCall","src":"24303:34:28"},"nativeSrc":"24303:34:28","nodeType":"YulExpressionStatement","src":"24303:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24357:9:28","nodeType":"YulIdentifier","src":"24357:9:28"},{"kind":"number","nativeSrc":"24368:2:28","nodeType":"YulLiteral","src":"24368:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"24353:3:28","nodeType":"YulIdentifier","src":"24353:3:28"},"nativeSrc":"24353:18:28","nodeType":"YulFunctionCall","src":"24353:18:28"},{"arguments":[{"name":"value3","nativeSrc":"24377:6:28","nodeType":"YulIdentifier","src":"24377:6:28"},{"name":"_1","nativeSrc":"24385:2:28","nodeType":"YulIdentifier","src":"24385:2:28"}],"functionName":{"name":"and","nativeSrc":"24373:3:28","nodeType":"YulIdentifier","src":"24373:3:28"},"nativeSrc":"24373:15:28","nodeType":"YulFunctionCall","src":"24373:15:28"}],"functionName":{"name":"mstore","nativeSrc":"24346:6:28","nodeType":"YulIdentifier","src":"24346:6:28"},"nativeSrc":"24346:43:28","nodeType":"YulFunctionCall","src":"24346:43:28"},"nativeSrc":"24346:43:28","nodeType":"YulExpressionStatement","src":"24346:43:28"}]},"name":"abi_encode_tuple_t_uint256_t_address_t_uint256_t_address__to_t_uint256_t_address_t_uint256_t_address__fromStack_reversed","nativeSrc":"23925:470:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24055:9:28","nodeType":"YulTypedName","src":"24055:9:28","type":""},{"name":"value3","nativeSrc":"24066:6:28","nodeType":"YulTypedName","src":"24066:6:28","type":""},{"name":"value2","nativeSrc":"24074:6:28","nodeType":"YulTypedName","src":"24074:6:28","type":""},{"name":"value1","nativeSrc":"24082:6:28","nodeType":"YulTypedName","src":"24082:6:28","type":""},{"name":"value0","nativeSrc":"24090:6:28","nodeType":"YulTypedName","src":"24090:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24101:4:28","nodeType":"YulTypedName","src":"24101:4:28","type":""}],"src":"23925:470:28"},{"body":{"nativeSrc":"24574:171:28","nodeType":"YulBlock","src":"24574:171:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"24591:9:28","nodeType":"YulIdentifier","src":"24591:9:28"},{"kind":"number","nativeSrc":"24602:2:28","nodeType":"YulLiteral","src":"24602:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"24584:6:28","nodeType":"YulIdentifier","src":"24584:6:28"},"nativeSrc":"24584:21:28","nodeType":"YulFunctionCall","src":"24584:21:28"},"nativeSrc":"24584:21:28","nodeType":"YulExpressionStatement","src":"24584:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24625:9:28","nodeType":"YulIdentifier","src":"24625:9:28"},{"kind":"number","nativeSrc":"24636:2:28","nodeType":"YulLiteral","src":"24636:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24621:3:28","nodeType":"YulIdentifier","src":"24621:3:28"},"nativeSrc":"24621:18:28","nodeType":"YulFunctionCall","src":"24621:18:28"},{"kind":"number","nativeSrc":"24641:2:28","nodeType":"YulLiteral","src":"24641:2:28","type":"","value":"21"}],"functionName":{"name":"mstore","nativeSrc":"24614:6:28","nodeType":"YulIdentifier","src":"24614:6:28"},"nativeSrc":"24614:30:28","nodeType":"YulFunctionCall","src":"24614:30:28"},"nativeSrc":"24614:30:28","nodeType":"YulExpressionStatement","src":"24614:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24664:9:28","nodeType":"YulIdentifier","src":"24664:9:28"},{"kind":"number","nativeSrc":"24675:2:28","nodeType":"YulLiteral","src":"24675:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"24660:3:28","nodeType":"YulIdentifier","src":"24660:3:28"},"nativeSrc":"24660:18:28","nodeType":"YulFunctionCall","src":"24660:18:28"},{"hexValue":"4549503731323a20556e696e697469616c697a6564","kind":"string","nativeSrc":"24680:23:28","nodeType":"YulLiteral","src":"24680:23:28","type":"","value":"EIP712: Uninitialized"}],"functionName":{"name":"mstore","nativeSrc":"24653:6:28","nodeType":"YulIdentifier","src":"24653:6:28"},"nativeSrc":"24653:51:28","nodeType":"YulFunctionCall","src":"24653:51:28"},"nativeSrc":"24653:51:28","nodeType":"YulExpressionStatement","src":"24653:51:28"},{"nativeSrc":"24713:26:28","nodeType":"YulAssignment","src":"24713:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"24725:9:28","nodeType":"YulIdentifier","src":"24725:9:28"},{"kind":"number","nativeSrc":"24736:2:28","nodeType":"YulLiteral","src":"24736:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"24721:3:28","nodeType":"YulIdentifier","src":"24721:3:28"},"nativeSrc":"24721:18:28","nodeType":"YulFunctionCall","src":"24721:18:28"},"variableNames":[{"name":"tail","nativeSrc":"24713:4:28","nodeType":"YulIdentifier","src":"24713:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"24400:345:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24551:9:28","nodeType":"YulTypedName","src":"24551:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24565:4:28","nodeType":"YulTypedName","src":"24565:4:28","type":""}],"src":"24400:345:28"},{"body":{"nativeSrc":"24924:227:28","nodeType":"YulBlock","src":"24924:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"24941:9:28","nodeType":"YulIdentifier","src":"24941:9:28"},{"kind":"number","nativeSrc":"24952:2:28","nodeType":"YulLiteral","src":"24952:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"24934:6:28","nodeType":"YulIdentifier","src":"24934:6:28"},"nativeSrc":"24934:21:28","nodeType":"YulFunctionCall","src":"24934:21:28"},"nativeSrc":"24934:21:28","nodeType":"YulExpressionStatement","src":"24934:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24975:9:28","nodeType":"YulIdentifier","src":"24975:9:28"},{"kind":"number","nativeSrc":"24986:2:28","nodeType":"YulLiteral","src":"24986:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24971:3:28","nodeType":"YulIdentifier","src":"24971:3:28"},"nativeSrc":"24971:18:28","nodeType":"YulFunctionCall","src":"24971:18:28"},{"kind":"number","nativeSrc":"24991:2:28","nodeType":"YulLiteral","src":"24991:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nativeSrc":"24964:6:28","nodeType":"YulIdentifier","src":"24964:6:28"},"nativeSrc":"24964:30:28","nodeType":"YulFunctionCall","src":"24964:30:28"},"nativeSrc":"24964:30:28","nodeType":"YulExpressionStatement","src":"24964:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25014:9:28","nodeType":"YulIdentifier","src":"25014:9:28"},{"kind":"number","nativeSrc":"25025:2:28","nodeType":"YulLiteral","src":"25025:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25010:3:28","nodeType":"YulIdentifier","src":"25010:3:28"},"nativeSrc":"25010:18:28","nodeType":"YulFunctionCall","src":"25010:18:28"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nativeSrc":"25030:34:28","nodeType":"YulLiteral","src":"25030:34:28","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nativeSrc":"25003:6:28","nodeType":"YulIdentifier","src":"25003:6:28"},"nativeSrc":"25003:62:28","nodeType":"YulFunctionCall","src":"25003:62:28"},"nativeSrc":"25003:62:28","nodeType":"YulExpressionStatement","src":"25003:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25085:9:28","nodeType":"YulIdentifier","src":"25085:9:28"},{"kind":"number","nativeSrc":"25096:2:28","nodeType":"YulLiteral","src":"25096:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25081:3:28","nodeType":"YulIdentifier","src":"25081:3:28"},"nativeSrc":"25081:18:28","nodeType":"YulFunctionCall","src":"25081:18:28"},{"hexValue":"207a65726f","kind":"string","nativeSrc":"25101:7:28","nodeType":"YulLiteral","src":"25101:7:28","type":"","value":" zero"}],"functionName":{"name":"mstore","nativeSrc":"25074:6:28","nodeType":"YulIdentifier","src":"25074:6:28"},"nativeSrc":"25074:35:28","nodeType":"YulFunctionCall","src":"25074:35:28"},"nativeSrc":"25074:35:28","nodeType":"YulExpressionStatement","src":"25074:35:28"},{"nativeSrc":"25118:27:28","nodeType":"YulAssignment","src":"25118:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"25130:9:28","nodeType":"YulIdentifier","src":"25130:9:28"},{"kind":"number","nativeSrc":"25141:3:28","nodeType":"YulLiteral","src":"25141:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"25126:3:28","nodeType":"YulIdentifier","src":"25126:3:28"},"nativeSrc":"25126:19:28","nodeType":"YulFunctionCall","src":"25126:19:28"},"variableNames":[{"name":"tail","nativeSrc":"25118:4:28","nodeType":"YulIdentifier","src":"25118:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"24750:401:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24901:9:28","nodeType":"YulTypedName","src":"24901:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24915:4:28","nodeType":"YulTypedName","src":"24915:4:28","type":""}],"src":"24750:401:28"},{"body":{"nativeSrc":"25313:241:28","nodeType":"YulBlock","src":"25313:241:28","statements":[{"nativeSrc":"25323:26:28","nodeType":"YulAssignment","src":"25323:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"25335:9:28","nodeType":"YulIdentifier","src":"25335:9:28"},{"kind":"number","nativeSrc":"25346:2:28","nodeType":"YulLiteral","src":"25346:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25331:3:28","nodeType":"YulIdentifier","src":"25331:3:28"},"nativeSrc":"25331:18:28","nodeType":"YulFunctionCall","src":"25331:18:28"},"variableNames":[{"name":"tail","nativeSrc":"25323:4:28","nodeType":"YulIdentifier","src":"25323:4:28"}]},{"nativeSrc":"25358:52:28","nodeType":"YulVariableDeclaration","src":"25358:52:28","value":{"kind":"number","nativeSrc":"25368:42:28","nodeType":"YulLiteral","src":"25368:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"25362:2:28","nodeType":"YulTypedName","src":"25362:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"25426:9:28","nodeType":"YulIdentifier","src":"25426:9:28"},{"arguments":[{"name":"value0","nativeSrc":"25441:6:28","nodeType":"YulIdentifier","src":"25441:6:28"},{"name":"_1","nativeSrc":"25449:2:28","nodeType":"YulIdentifier","src":"25449:2:28"}],"functionName":{"name":"and","nativeSrc":"25437:3:28","nodeType":"YulIdentifier","src":"25437:3:28"},"nativeSrc":"25437:15:28","nodeType":"YulFunctionCall","src":"25437:15:28"}],"functionName":{"name":"mstore","nativeSrc":"25419:6:28","nodeType":"YulIdentifier","src":"25419:6:28"},"nativeSrc":"25419:34:28","nodeType":"YulFunctionCall","src":"25419:34:28"},"nativeSrc":"25419:34:28","nodeType":"YulExpressionStatement","src":"25419:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25473:9:28","nodeType":"YulIdentifier","src":"25473:9:28"},{"kind":"number","nativeSrc":"25484:2:28","nodeType":"YulLiteral","src":"25484:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25469:3:28","nodeType":"YulIdentifier","src":"25469:3:28"},"nativeSrc":"25469:18:28","nodeType":"YulFunctionCall","src":"25469:18:28"},{"arguments":[{"name":"value1","nativeSrc":"25493:6:28","nodeType":"YulIdentifier","src":"25493:6:28"},{"name":"_1","nativeSrc":"25501:2:28","nodeType":"YulIdentifier","src":"25501:2:28"}],"functionName":{"name":"and","nativeSrc":"25489:3:28","nodeType":"YulIdentifier","src":"25489:3:28"},"nativeSrc":"25489:15:28","nodeType":"YulFunctionCall","src":"25489:15:28"}],"functionName":{"name":"mstore","nativeSrc":"25462:6:28","nodeType":"YulIdentifier","src":"25462:6:28"},"nativeSrc":"25462:43:28","nodeType":"YulFunctionCall","src":"25462:43:28"},"nativeSrc":"25462:43:28","nodeType":"YulExpressionStatement","src":"25462:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25525:9:28","nodeType":"YulIdentifier","src":"25525:9:28"},{"kind":"number","nativeSrc":"25536:2:28","nodeType":"YulLiteral","src":"25536:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25521:3:28","nodeType":"YulIdentifier","src":"25521:3:28"},"nativeSrc":"25521:18:28","nodeType":"YulFunctionCall","src":"25521:18:28"},{"name":"value2","nativeSrc":"25541:6:28","nodeType":"YulIdentifier","src":"25541:6:28"}],"functionName":{"name":"mstore","nativeSrc":"25514:6:28","nodeType":"YulIdentifier","src":"25514:6:28"},"nativeSrc":"25514:34:28","nodeType":"YulFunctionCall","src":"25514:34:28"},"nativeSrc":"25514:34:28","nodeType":"YulExpressionStatement","src":"25514:34:28"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"25156:398:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25266:9:28","nodeType":"YulTypedName","src":"25266:9:28","type":""},{"name":"value2","nativeSrc":"25277:6:28","nodeType":"YulTypedName","src":"25277:6:28","type":""},{"name":"value1","nativeSrc":"25285:6:28","nodeType":"YulTypedName","src":"25285:6:28","type":""},{"name":"value0","nativeSrc":"25293:6:28","nodeType":"YulTypedName","src":"25293:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25304:4:28","nodeType":"YulTypedName","src":"25304:4:28","type":""}],"src":"25156:398:28"},{"body":{"nativeSrc":"25682:184:28","nodeType":"YulBlock","src":"25682:184:28","statements":[{"nativeSrc":"25692:26:28","nodeType":"YulAssignment","src":"25692:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"25704:9:28","nodeType":"YulIdentifier","src":"25704:9:28"},{"kind":"number","nativeSrc":"25715:2:28","nodeType":"YulLiteral","src":"25715:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25700:3:28","nodeType":"YulIdentifier","src":"25700:3:28"},"nativeSrc":"25700:18:28","nodeType":"YulFunctionCall","src":"25700:18:28"},"variableNames":[{"name":"tail","nativeSrc":"25692:4:28","nodeType":"YulIdentifier","src":"25692:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"25734:9:28","nodeType":"YulIdentifier","src":"25734:9:28"},{"arguments":[{"name":"value0","nativeSrc":"25749:6:28","nodeType":"YulIdentifier","src":"25749:6:28"},{"kind":"number","nativeSrc":"25757:42:28","nodeType":"YulLiteral","src":"25757:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"25745:3:28","nodeType":"YulIdentifier","src":"25745:3:28"},"nativeSrc":"25745:55:28","nodeType":"YulFunctionCall","src":"25745:55:28"}],"functionName":{"name":"mstore","nativeSrc":"25727:6:28","nodeType":"YulIdentifier","src":"25727:6:28"},"nativeSrc":"25727:74:28","nodeType":"YulFunctionCall","src":"25727:74:28"},"nativeSrc":"25727:74:28","nodeType":"YulExpressionStatement","src":"25727:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25821:9:28","nodeType":"YulIdentifier","src":"25821:9:28"},{"kind":"number","nativeSrc":"25832:2:28","nodeType":"YulLiteral","src":"25832:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25817:3:28","nodeType":"YulIdentifier","src":"25817:3:28"},"nativeSrc":"25817:18:28","nodeType":"YulFunctionCall","src":"25817:18:28"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"25851:6:28","nodeType":"YulIdentifier","src":"25851:6:28"}],"functionName":{"name":"iszero","nativeSrc":"25844:6:28","nodeType":"YulIdentifier","src":"25844:6:28"},"nativeSrc":"25844:14:28","nodeType":"YulFunctionCall","src":"25844:14:28"}],"functionName":{"name":"iszero","nativeSrc":"25837:6:28","nodeType":"YulIdentifier","src":"25837:6:28"},"nativeSrc":"25837:22:28","nodeType":"YulFunctionCall","src":"25837:22:28"}],"functionName":{"name":"mstore","nativeSrc":"25810:6:28","nodeType":"YulIdentifier","src":"25810:6:28"},"nativeSrc":"25810:50:28","nodeType":"YulFunctionCall","src":"25810:50:28"},"nativeSrc":"25810:50:28","nodeType":"YulExpressionStatement","src":"25810:50:28"}]},"name":"abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed","nativeSrc":"25559:307:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25643:9:28","nodeType":"YulTypedName","src":"25643:9:28","type":""},{"name":"value1","nativeSrc":"25654:6:28","nodeType":"YulTypedName","src":"25654:6:28","type":""},{"name":"value0","nativeSrc":"25662:6:28","nodeType":"YulTypedName","src":"25662:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25673:4:28","nodeType":"YulTypedName","src":"25673:4:28","type":""}],"src":"25559:307:28"},{"body":{"nativeSrc":"26045:179:28","nodeType":"YulBlock","src":"26045:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"26062:9:28","nodeType":"YulIdentifier","src":"26062:9:28"},{"kind":"number","nativeSrc":"26073:2:28","nodeType":"YulLiteral","src":"26073:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"26055:6:28","nodeType":"YulIdentifier","src":"26055:6:28"},"nativeSrc":"26055:21:28","nodeType":"YulFunctionCall","src":"26055:21:28"},"nativeSrc":"26055:21:28","nodeType":"YulExpressionStatement","src":"26055:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26096:9:28","nodeType":"YulIdentifier","src":"26096:9:28"},{"kind":"number","nativeSrc":"26107:2:28","nodeType":"YulLiteral","src":"26107:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26092:3:28","nodeType":"YulIdentifier","src":"26092:3:28"},"nativeSrc":"26092:18:28","nodeType":"YulFunctionCall","src":"26092:18:28"},{"kind":"number","nativeSrc":"26112:2:28","nodeType":"YulLiteral","src":"26112:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"26085:6:28","nodeType":"YulIdentifier","src":"26085:6:28"},"nativeSrc":"26085:30:28","nodeType":"YulFunctionCall","src":"26085:30:28"},"nativeSrc":"26085:30:28","nodeType":"YulExpressionStatement","src":"26085:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26135:9:28","nodeType":"YulIdentifier","src":"26135:9:28"},{"kind":"number","nativeSrc":"26146:2:28","nodeType":"YulLiteral","src":"26146:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"26131:3:28","nodeType":"YulIdentifier","src":"26131:3:28"},"nativeSrc":"26131:18:28","nodeType":"YulFunctionCall","src":"26131:18:28"},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","kind":"string","nativeSrc":"26151:31:28","nodeType":"YulLiteral","src":"26151:31:28","type":"","value":"ERC20Permit: expired deadline"}],"functionName":{"name":"mstore","nativeSrc":"26124:6:28","nodeType":"YulIdentifier","src":"26124:6:28"},"nativeSrc":"26124:59:28","nodeType":"YulFunctionCall","src":"26124:59:28"},"nativeSrc":"26124:59:28","nodeType":"YulExpressionStatement","src":"26124:59:28"},{"nativeSrc":"26192:26:28","nodeType":"YulAssignment","src":"26192:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"26204:9:28","nodeType":"YulIdentifier","src":"26204:9:28"},{"kind":"number","nativeSrc":"26215:2:28","nodeType":"YulLiteral","src":"26215:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"26200:3:28","nodeType":"YulIdentifier","src":"26200:3:28"},"nativeSrc":"26200:18:28","nodeType":"YulFunctionCall","src":"26200:18:28"},"variableNames":[{"name":"tail","nativeSrc":"26192:4:28","nodeType":"YulIdentifier","src":"26192:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"25871:353:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26022:9:28","nodeType":"YulTypedName","src":"26022:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26036:4:28","nodeType":"YulTypedName","src":"26036:4:28","type":""}],"src":"25871:353:28"},{"body":{"nativeSrc":"26470:373:28","nodeType":"YulBlock","src":"26470:373:28","statements":[{"nativeSrc":"26480:27:28","nodeType":"YulAssignment","src":"26480:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"26492:9:28","nodeType":"YulIdentifier","src":"26492:9:28"},{"kind":"number","nativeSrc":"26503:3:28","nodeType":"YulLiteral","src":"26503:3:28","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"26488:3:28","nodeType":"YulIdentifier","src":"26488:3:28"},"nativeSrc":"26488:19:28","nodeType":"YulFunctionCall","src":"26488:19:28"},"variableNames":[{"name":"tail","nativeSrc":"26480:4:28","nodeType":"YulIdentifier","src":"26480:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"26523:9:28","nodeType":"YulIdentifier","src":"26523:9:28"},{"name":"value0","nativeSrc":"26534:6:28","nodeType":"YulIdentifier","src":"26534:6:28"}],"functionName":{"name":"mstore","nativeSrc":"26516:6:28","nodeType":"YulIdentifier","src":"26516:6:28"},"nativeSrc":"26516:25:28","nodeType":"YulFunctionCall","src":"26516:25:28"},"nativeSrc":"26516:25:28","nodeType":"YulExpressionStatement","src":"26516:25:28"},{"nativeSrc":"26550:52:28","nodeType":"YulVariableDeclaration","src":"26550:52:28","value":{"kind":"number","nativeSrc":"26560:42:28","nodeType":"YulLiteral","src":"26560:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"26554:2:28","nodeType":"YulTypedName","src":"26554:2:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26622:9:28","nodeType":"YulIdentifier","src":"26622:9:28"},{"kind":"number","nativeSrc":"26633:2:28","nodeType":"YulLiteral","src":"26633:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26618:3:28","nodeType":"YulIdentifier","src":"26618:3:28"},"nativeSrc":"26618:18:28","nodeType":"YulFunctionCall","src":"26618:18:28"},{"arguments":[{"name":"value1","nativeSrc":"26642:6:28","nodeType":"YulIdentifier","src":"26642:6:28"},{"name":"_1","nativeSrc":"26650:2:28","nodeType":"YulIdentifier","src":"26650:2:28"}],"functionName":{"name":"and","nativeSrc":"26638:3:28","nodeType":"YulIdentifier","src":"26638:3:28"},"nativeSrc":"26638:15:28","nodeType":"YulFunctionCall","src":"26638:15:28"}],"functionName":{"name":"mstore","nativeSrc":"26611:6:28","nodeType":"YulIdentifier","src":"26611:6:28"},"nativeSrc":"26611:43:28","nodeType":"YulFunctionCall","src":"26611:43:28"},"nativeSrc":"26611:43:28","nodeType":"YulExpressionStatement","src":"26611:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26674:9:28","nodeType":"YulIdentifier","src":"26674:9:28"},{"kind":"number","nativeSrc":"26685:2:28","nodeType":"YulLiteral","src":"26685:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"26670:3:28","nodeType":"YulIdentifier","src":"26670:3:28"},"nativeSrc":"26670:18:28","nodeType":"YulFunctionCall","src":"26670:18:28"},{"arguments":[{"name":"value2","nativeSrc":"26694:6:28","nodeType":"YulIdentifier","src":"26694:6:28"},{"name":"_1","nativeSrc":"26702:2:28","nodeType":"YulIdentifier","src":"26702:2:28"}],"functionName":{"name":"and","nativeSrc":"26690:3:28","nodeType":"YulIdentifier","src":"26690:3:28"},"nativeSrc":"26690:15:28","nodeType":"YulFunctionCall","src":"26690:15:28"}],"functionName":{"name":"mstore","nativeSrc":"26663:6:28","nodeType":"YulIdentifier","src":"26663:6:28"},"nativeSrc":"26663:43:28","nodeType":"YulFunctionCall","src":"26663:43:28"},"nativeSrc":"26663:43:28","nodeType":"YulExpressionStatement","src":"26663:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26726:9:28","nodeType":"YulIdentifier","src":"26726:9:28"},{"kind":"number","nativeSrc":"26737:2:28","nodeType":"YulLiteral","src":"26737:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"26722:3:28","nodeType":"YulIdentifier","src":"26722:3:28"},"nativeSrc":"26722:18:28","nodeType":"YulFunctionCall","src":"26722:18:28"},{"name":"value3","nativeSrc":"26742:6:28","nodeType":"YulIdentifier","src":"26742:6:28"}],"functionName":{"name":"mstore","nativeSrc":"26715:6:28","nodeType":"YulIdentifier","src":"26715:6:28"},"nativeSrc":"26715:34:28","nodeType":"YulFunctionCall","src":"26715:34:28"},"nativeSrc":"26715:34:28","nodeType":"YulExpressionStatement","src":"26715:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26769:9:28","nodeType":"YulIdentifier","src":"26769:9:28"},{"kind":"number","nativeSrc":"26780:3:28","nodeType":"YulLiteral","src":"26780:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"26765:3:28","nodeType":"YulIdentifier","src":"26765:3:28"},"nativeSrc":"26765:19:28","nodeType":"YulFunctionCall","src":"26765:19:28"},{"name":"value4","nativeSrc":"26786:6:28","nodeType":"YulIdentifier","src":"26786:6:28"}],"functionName":{"name":"mstore","nativeSrc":"26758:6:28","nodeType":"YulIdentifier","src":"26758:6:28"},"nativeSrc":"26758:35:28","nodeType":"YulFunctionCall","src":"26758:35:28"},"nativeSrc":"26758:35:28","nodeType":"YulExpressionStatement","src":"26758:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26813:9:28","nodeType":"YulIdentifier","src":"26813:9:28"},{"kind":"number","nativeSrc":"26824:3:28","nodeType":"YulLiteral","src":"26824:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"26809:3:28","nodeType":"YulIdentifier","src":"26809:3:28"},"nativeSrc":"26809:19:28","nodeType":"YulFunctionCall","src":"26809:19:28"},{"name":"value5","nativeSrc":"26830:6:28","nodeType":"YulIdentifier","src":"26830:6:28"}],"functionName":{"name":"mstore","nativeSrc":"26802:6:28","nodeType":"YulIdentifier","src":"26802:6:28"},"nativeSrc":"26802:35:28","nodeType":"YulFunctionCall","src":"26802:35:28"},"nativeSrc":"26802:35:28","nodeType":"YulExpressionStatement","src":"26802:35:28"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"26229:614:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26399:9:28","nodeType":"YulTypedName","src":"26399:9:28","type":""},{"name":"value5","nativeSrc":"26410:6:28","nodeType":"YulTypedName","src":"26410:6:28","type":""},{"name":"value4","nativeSrc":"26418:6:28","nodeType":"YulTypedName","src":"26418:6:28","type":""},{"name":"value3","nativeSrc":"26426:6:28","nodeType":"YulTypedName","src":"26426:6:28","type":""},{"name":"value2","nativeSrc":"26434:6:28","nodeType":"YulTypedName","src":"26434:6:28","type":""},{"name":"value1","nativeSrc":"26442:6:28","nodeType":"YulTypedName","src":"26442:6:28","type":""},{"name":"value0","nativeSrc":"26450:6:28","nodeType":"YulTypedName","src":"26450:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26461:4:28","nodeType":"YulTypedName","src":"26461:4:28","type":""}],"src":"26229:614:28"},{"body":{"nativeSrc":"27022:180:28","nodeType":"YulBlock","src":"27022:180:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"27039:9:28","nodeType":"YulIdentifier","src":"27039:9:28"},{"kind":"number","nativeSrc":"27050:2:28","nodeType":"YulLiteral","src":"27050:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"27032:6:28","nodeType":"YulIdentifier","src":"27032:6:28"},"nativeSrc":"27032:21:28","nodeType":"YulFunctionCall","src":"27032:21:28"},"nativeSrc":"27032:21:28","nodeType":"YulExpressionStatement","src":"27032:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27073:9:28","nodeType":"YulIdentifier","src":"27073:9:28"},{"kind":"number","nativeSrc":"27084:2:28","nodeType":"YulLiteral","src":"27084:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27069:3:28","nodeType":"YulIdentifier","src":"27069:3:28"},"nativeSrc":"27069:18:28","nodeType":"YulFunctionCall","src":"27069:18:28"},{"kind":"number","nativeSrc":"27089:2:28","nodeType":"YulLiteral","src":"27089:2:28","type":"","value":"30"}],"functionName":{"name":"mstore","nativeSrc":"27062:6:28","nodeType":"YulIdentifier","src":"27062:6:28"},"nativeSrc":"27062:30:28","nodeType":"YulFunctionCall","src":"27062:30:28"},"nativeSrc":"27062:30:28","nodeType":"YulExpressionStatement","src":"27062:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27112:9:28","nodeType":"YulIdentifier","src":"27112:9:28"},{"kind":"number","nativeSrc":"27123:2:28","nodeType":"YulLiteral","src":"27123:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27108:3:28","nodeType":"YulIdentifier","src":"27108:3:28"},"nativeSrc":"27108:18:28","nodeType":"YulFunctionCall","src":"27108:18:28"},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","kind":"string","nativeSrc":"27128:32:28","nodeType":"YulLiteral","src":"27128:32:28","type":"","value":"ERC20Permit: invalid signature"}],"functionName":{"name":"mstore","nativeSrc":"27101:6:28","nodeType":"YulIdentifier","src":"27101:6:28"},"nativeSrc":"27101:60:28","nodeType":"YulFunctionCall","src":"27101:60:28"},"nativeSrc":"27101:60:28","nodeType":"YulExpressionStatement","src":"27101:60:28"},{"nativeSrc":"27170:26:28","nodeType":"YulAssignment","src":"27170:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"27182:9:28","nodeType":"YulIdentifier","src":"27182:9:28"},{"kind":"number","nativeSrc":"27193:2:28","nodeType":"YulLiteral","src":"27193:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"27178:3:28","nodeType":"YulIdentifier","src":"27178:3:28"},"nativeSrc":"27178:18:28","nodeType":"YulFunctionCall","src":"27178:18:28"},"variableNames":[{"name":"tail","nativeSrc":"27170:4:28","nodeType":"YulIdentifier","src":"27170:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"26848:354:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26999:9:28","nodeType":"YulTypedName","src":"26999:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"27013:4:28","nodeType":"YulTypedName","src":"27013:4:28","type":""}],"src":"26848:354:28"},{"body":{"nativeSrc":"27336:198:28","nodeType":"YulBlock","src":"27336:198:28","statements":[{"nativeSrc":"27346:26:28","nodeType":"YulAssignment","src":"27346:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"27358:9:28","nodeType":"YulIdentifier","src":"27358:9:28"},{"kind":"number","nativeSrc":"27369:2:28","nodeType":"YulLiteral","src":"27369:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27354:3:28","nodeType":"YulIdentifier","src":"27354:3:28"},"nativeSrc":"27354:18:28","nodeType":"YulFunctionCall","src":"27354:18:28"},"variableNames":[{"name":"tail","nativeSrc":"27346:4:28","nodeType":"YulIdentifier","src":"27346:4:28"}]},{"nativeSrc":"27381:52:28","nodeType":"YulVariableDeclaration","src":"27381:52:28","value":{"kind":"number","nativeSrc":"27391:42:28","nodeType":"YulLiteral","src":"27391:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"27385:2:28","nodeType":"YulTypedName","src":"27385:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"27449:9:28","nodeType":"YulIdentifier","src":"27449:9:28"},{"arguments":[{"name":"value0","nativeSrc":"27464:6:28","nodeType":"YulIdentifier","src":"27464:6:28"},{"name":"_1","nativeSrc":"27472:2:28","nodeType":"YulIdentifier","src":"27472:2:28"}],"functionName":{"name":"and","nativeSrc":"27460:3:28","nodeType":"YulIdentifier","src":"27460:3:28"},"nativeSrc":"27460:15:28","nodeType":"YulFunctionCall","src":"27460:15:28"}],"functionName":{"name":"mstore","nativeSrc":"27442:6:28","nodeType":"YulIdentifier","src":"27442:6:28"},"nativeSrc":"27442:34:28","nodeType":"YulFunctionCall","src":"27442:34:28"},"nativeSrc":"27442:34:28","nodeType":"YulExpressionStatement","src":"27442:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27496:9:28","nodeType":"YulIdentifier","src":"27496:9:28"},{"kind":"number","nativeSrc":"27507:2:28","nodeType":"YulLiteral","src":"27507:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27492:3:28","nodeType":"YulIdentifier","src":"27492:3:28"},"nativeSrc":"27492:18:28","nodeType":"YulFunctionCall","src":"27492:18:28"},{"arguments":[{"name":"value1","nativeSrc":"27516:6:28","nodeType":"YulIdentifier","src":"27516:6:28"},{"name":"_1","nativeSrc":"27524:2:28","nodeType":"YulIdentifier","src":"27524:2:28"}],"functionName":{"name":"and","nativeSrc":"27512:3:28","nodeType":"YulIdentifier","src":"27512:3:28"},"nativeSrc":"27512:15:28","nodeType":"YulFunctionCall","src":"27512:15:28"}],"functionName":{"name":"mstore","nativeSrc":"27485:6:28","nodeType":"YulIdentifier","src":"27485:6:28"},"nativeSrc":"27485:43:28","nodeType":"YulFunctionCall","src":"27485:43:28"},"nativeSrc":"27485:43:28","nodeType":"YulExpressionStatement","src":"27485:43:28"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"27207:327:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"27297:9:28","nodeType":"YulTypedName","src":"27297:9:28","type":""},{"name":"value1","nativeSrc":"27308:6:28","nodeType":"YulTypedName","src":"27308:6:28","type":""},{"name":"value0","nativeSrc":"27316:6:28","nodeType":"YulTypedName","src":"27316:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"27327:4:28","nodeType":"YulTypedName","src":"27327:4:28","type":""}],"src":"27207:327:28"},{"body":{"nativeSrc":"27617:167:28","nodeType":"YulBlock","src":"27617:167:28","statements":[{"body":{"nativeSrc":"27663:16:28","nodeType":"YulBlock","src":"27663:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"27672:1:28","nodeType":"YulLiteral","src":"27672:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"27675:1:28","nodeType":"YulLiteral","src":"27675:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"27665:6:28","nodeType":"YulIdentifier","src":"27665:6:28"},"nativeSrc":"27665:12:28","nodeType":"YulFunctionCall","src":"27665:12:28"},"nativeSrc":"27665:12:28","nodeType":"YulExpressionStatement","src":"27665:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"27638:7:28","nodeType":"YulIdentifier","src":"27638:7:28"},{"name":"headStart","nativeSrc":"27647:9:28","nodeType":"YulIdentifier","src":"27647:9:28"}],"functionName":{"name":"sub","nativeSrc":"27634:3:28","nodeType":"YulIdentifier","src":"27634:3:28"},"nativeSrc":"27634:23:28","nodeType":"YulFunctionCall","src":"27634:23:28"},{"kind":"number","nativeSrc":"27659:2:28","nodeType":"YulLiteral","src":"27659:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"27630:3:28","nodeType":"YulIdentifier","src":"27630:3:28"},"nativeSrc":"27630:32:28","nodeType":"YulFunctionCall","src":"27630:32:28"},"nativeSrc":"27627:52:28","nodeType":"YulIf","src":"27627:52:28"},{"nativeSrc":"27688:29:28","nodeType":"YulVariableDeclaration","src":"27688:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"27707:9:28","nodeType":"YulIdentifier","src":"27707:9:28"}],"functionName":{"name":"mload","nativeSrc":"27701:5:28","nodeType":"YulIdentifier","src":"27701:5:28"},"nativeSrc":"27701:16:28","nodeType":"YulFunctionCall","src":"27701:16:28"},"variables":[{"name":"value","nativeSrc":"27692:5:28","nodeType":"YulTypedName","src":"27692:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"27748:5:28","nodeType":"YulIdentifier","src":"27748:5:28"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"27726:21:28","nodeType":"YulIdentifier","src":"27726:21:28"},"nativeSrc":"27726:28:28","nodeType":"YulFunctionCall","src":"27726:28:28"},"nativeSrc":"27726:28:28","nodeType":"YulExpressionStatement","src":"27726:28:28"},{"nativeSrc":"27763:15:28","nodeType":"YulAssignment","src":"27763:15:28","value":{"name":"value","nativeSrc":"27773:5:28","nodeType":"YulIdentifier","src":"27773:5:28"},"variableNames":[{"name":"value0","nativeSrc":"27763:6:28","nodeType":"YulIdentifier","src":"27763:6:28"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"27539:245:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"27583:9:28","nodeType":"YulTypedName","src":"27583:9:28","type":""},{"name":"dataEnd","nativeSrc":"27594:7:28","nodeType":"YulTypedName","src":"27594:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"27606:6:28","nodeType":"YulTypedName","src":"27606:6:28","type":""}],"src":"27539:245:28"},{"body":{"nativeSrc":"27963:228:28","nodeType":"YulBlock","src":"27963:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"27980:9:28","nodeType":"YulIdentifier","src":"27980:9:28"},{"kind":"number","nativeSrc":"27991:2:28","nodeType":"YulLiteral","src":"27991:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"27973:6:28","nodeType":"YulIdentifier","src":"27973:6:28"},"nativeSrc":"27973:21:28","nodeType":"YulFunctionCall","src":"27973:21:28"},"nativeSrc":"27973:21:28","nodeType":"YulExpressionStatement","src":"27973:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28014:9:28","nodeType":"YulIdentifier","src":"28014:9:28"},{"kind":"number","nativeSrc":"28025:2:28","nodeType":"YulLiteral","src":"28025:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28010:3:28","nodeType":"YulIdentifier","src":"28010:3:28"},"nativeSrc":"28010:18:28","nodeType":"YulFunctionCall","src":"28010:18:28"},{"kind":"number","nativeSrc":"28030:2:28","nodeType":"YulLiteral","src":"28030:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"28003:6:28","nodeType":"YulIdentifier","src":"28003:6:28"},"nativeSrc":"28003:30:28","nodeType":"YulFunctionCall","src":"28003:30:28"},"nativeSrc":"28003:30:28","nodeType":"YulExpressionStatement","src":"28003:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28053:9:28","nodeType":"YulIdentifier","src":"28053:9:28"},{"kind":"number","nativeSrc":"28064:2:28","nodeType":"YulLiteral","src":"28064:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"28049:3:28","nodeType":"YulIdentifier","src":"28049:3:28"},"nativeSrc":"28049:18:28","nodeType":"YulFunctionCall","src":"28049:18:28"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nativeSrc":"28069:34:28","nodeType":"YulLiteral","src":"28069:34:28","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nativeSrc":"28042:6:28","nodeType":"YulIdentifier","src":"28042:6:28"},"nativeSrc":"28042:62:28","nodeType":"YulFunctionCall","src":"28042:62:28"},"nativeSrc":"28042:62:28","nodeType":"YulExpressionStatement","src":"28042:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28124:9:28","nodeType":"YulIdentifier","src":"28124:9:28"},{"kind":"number","nativeSrc":"28135:2:28","nodeType":"YulLiteral","src":"28135:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"28120:3:28","nodeType":"YulIdentifier","src":"28120:3:28"},"nativeSrc":"28120:18:28","nodeType":"YulFunctionCall","src":"28120:18:28"},{"hexValue":"646472657373","kind":"string","nativeSrc":"28140:8:28","nodeType":"YulLiteral","src":"28140:8:28","type":"","value":"ddress"}],"functionName":{"name":"mstore","nativeSrc":"28113:6:28","nodeType":"YulIdentifier","src":"28113:6:28"},"nativeSrc":"28113:36:28","nodeType":"YulFunctionCall","src":"28113:36:28"},"nativeSrc":"28113:36:28","nodeType":"YulExpressionStatement","src":"28113:36:28"},{"nativeSrc":"28158:27:28","nodeType":"YulAssignment","src":"28158:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"28170:9:28","nodeType":"YulIdentifier","src":"28170:9:28"},{"kind":"number","nativeSrc":"28181:3:28","nodeType":"YulLiteral","src":"28181:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"28166:3:28","nodeType":"YulIdentifier","src":"28166:3:28"},"nativeSrc":"28166:19:28","nodeType":"YulFunctionCall","src":"28166:19:28"},"variableNames":[{"name":"tail","nativeSrc":"28158:4:28","nodeType":"YulIdentifier","src":"28158:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"27789:402:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"27940:9:28","nodeType":"YulTypedName","src":"27940:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"27954:4:28","nodeType":"YulTypedName","src":"27954:4:28","type":""}],"src":"27789:402:28"},{"body":{"nativeSrc":"28370:226:28","nodeType":"YulBlock","src":"28370:226:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"28387:9:28","nodeType":"YulIdentifier","src":"28387:9:28"},{"kind":"number","nativeSrc":"28398:2:28","nodeType":"YulLiteral","src":"28398:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"28380:6:28","nodeType":"YulIdentifier","src":"28380:6:28"},"nativeSrc":"28380:21:28","nodeType":"YulFunctionCall","src":"28380:21:28"},"nativeSrc":"28380:21:28","nodeType":"YulExpressionStatement","src":"28380:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28421:9:28","nodeType":"YulIdentifier","src":"28421:9:28"},{"kind":"number","nativeSrc":"28432:2:28","nodeType":"YulLiteral","src":"28432:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28417:3:28","nodeType":"YulIdentifier","src":"28417:3:28"},"nativeSrc":"28417:18:28","nodeType":"YulFunctionCall","src":"28417:18:28"},{"kind":"number","nativeSrc":"28437:2:28","nodeType":"YulLiteral","src":"28437:2:28","type":"","value":"36"}],"functionName":{"name":"mstore","nativeSrc":"28410:6:28","nodeType":"YulIdentifier","src":"28410:6:28"},"nativeSrc":"28410:30:28","nodeType":"YulFunctionCall","src":"28410:30:28"},"nativeSrc":"28410:30:28","nodeType":"YulExpressionStatement","src":"28410:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28460:9:28","nodeType":"YulIdentifier","src":"28460:9:28"},{"kind":"number","nativeSrc":"28471:2:28","nodeType":"YulLiteral","src":"28471:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"28456:3:28","nodeType":"YulIdentifier","src":"28456:3:28"},"nativeSrc":"28456:18:28","nodeType":"YulFunctionCall","src":"28456:18:28"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nativeSrc":"28476:34:28","nodeType":"YulLiteral","src":"28476:34:28","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nativeSrc":"28449:6:28","nodeType":"YulIdentifier","src":"28449:6:28"},"nativeSrc":"28449:62:28","nodeType":"YulFunctionCall","src":"28449:62:28"},"nativeSrc":"28449:62:28","nodeType":"YulExpressionStatement","src":"28449:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28531:9:28","nodeType":"YulIdentifier","src":"28531:9:28"},{"kind":"number","nativeSrc":"28542:2:28","nodeType":"YulLiteral","src":"28542:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"28527:3:28","nodeType":"YulIdentifier","src":"28527:3:28"},"nativeSrc":"28527:18:28","nodeType":"YulFunctionCall","src":"28527:18:28"},{"hexValue":"72657373","kind":"string","nativeSrc":"28547:6:28","nodeType":"YulLiteral","src":"28547:6:28","type":"","value":"ress"}],"functionName":{"name":"mstore","nativeSrc":"28520:6:28","nodeType":"YulIdentifier","src":"28520:6:28"},"nativeSrc":"28520:34:28","nodeType":"YulFunctionCall","src":"28520:34:28"},"nativeSrc":"28520:34:28","nodeType":"YulExpressionStatement","src":"28520:34:28"},{"nativeSrc":"28563:27:28","nodeType":"YulAssignment","src":"28563:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"28575:9:28","nodeType":"YulIdentifier","src":"28575:9:28"},{"kind":"number","nativeSrc":"28586:3:28","nodeType":"YulLiteral","src":"28586:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"28571:3:28","nodeType":"YulIdentifier","src":"28571:3:28"},"nativeSrc":"28571:19:28","nodeType":"YulFunctionCall","src":"28571:19:28"},"variableNames":[{"name":"tail","nativeSrc":"28563:4:28","nodeType":"YulIdentifier","src":"28563:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"28196:400:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"28347:9:28","nodeType":"YulTypedName","src":"28347:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"28361:4:28","nodeType":"YulTypedName","src":"28361:4:28","type":""}],"src":"28196:400:28"},{"body":{"nativeSrc":"28775:224:28","nodeType":"YulBlock","src":"28775:224:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"28792:9:28","nodeType":"YulIdentifier","src":"28792:9:28"},{"kind":"number","nativeSrc":"28803:2:28","nodeType":"YulLiteral","src":"28803:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"28785:6:28","nodeType":"YulIdentifier","src":"28785:6:28"},"nativeSrc":"28785:21:28","nodeType":"YulFunctionCall","src":"28785:21:28"},"nativeSrc":"28785:21:28","nodeType":"YulExpressionStatement","src":"28785:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28826:9:28","nodeType":"YulIdentifier","src":"28826:9:28"},{"kind":"number","nativeSrc":"28837:2:28","nodeType":"YulLiteral","src":"28837:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28822:3:28","nodeType":"YulIdentifier","src":"28822:3:28"},"nativeSrc":"28822:18:28","nodeType":"YulFunctionCall","src":"28822:18:28"},{"kind":"number","nativeSrc":"28842:2:28","nodeType":"YulLiteral","src":"28842:2:28","type":"","value":"34"}],"functionName":{"name":"mstore","nativeSrc":"28815:6:28","nodeType":"YulIdentifier","src":"28815:6:28"},"nativeSrc":"28815:30:28","nodeType":"YulFunctionCall","src":"28815:30:28"},"nativeSrc":"28815:30:28","nodeType":"YulExpressionStatement","src":"28815:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28865:9:28","nodeType":"YulIdentifier","src":"28865:9:28"},{"kind":"number","nativeSrc":"28876:2:28","nodeType":"YulLiteral","src":"28876:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"28861:3:28","nodeType":"YulIdentifier","src":"28861:3:28"},"nativeSrc":"28861:18:28","nodeType":"YulFunctionCall","src":"28861:18:28"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nativeSrc":"28881:34:28","nodeType":"YulLiteral","src":"28881:34:28","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nativeSrc":"28854:6:28","nodeType":"YulIdentifier","src":"28854:6:28"},"nativeSrc":"28854:62:28","nodeType":"YulFunctionCall","src":"28854:62:28"},"nativeSrc":"28854:62:28","nodeType":"YulExpressionStatement","src":"28854:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28936:9:28","nodeType":"YulIdentifier","src":"28936:9:28"},{"kind":"number","nativeSrc":"28947:2:28","nodeType":"YulLiteral","src":"28947:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"28932:3:28","nodeType":"YulIdentifier","src":"28932:3:28"},"nativeSrc":"28932:18:28","nodeType":"YulFunctionCall","src":"28932:18:28"},{"hexValue":"7373","kind":"string","nativeSrc":"28952:4:28","nodeType":"YulLiteral","src":"28952:4:28","type":"","value":"ss"}],"functionName":{"name":"mstore","nativeSrc":"28925:6:28","nodeType":"YulIdentifier","src":"28925:6:28"},"nativeSrc":"28925:32:28","nodeType":"YulFunctionCall","src":"28925:32:28"},"nativeSrc":"28925:32:28","nodeType":"YulExpressionStatement","src":"28925:32:28"},{"nativeSrc":"28966:27:28","nodeType":"YulAssignment","src":"28966:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"28978:9:28","nodeType":"YulIdentifier","src":"28978:9:28"},{"kind":"number","nativeSrc":"28989:3:28","nodeType":"YulLiteral","src":"28989:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"28974:3:28","nodeType":"YulIdentifier","src":"28974:3:28"},"nativeSrc":"28974:19:28","nodeType":"YulFunctionCall","src":"28974:19:28"},"variableNames":[{"name":"tail","nativeSrc":"28966:4:28","nodeType":"YulIdentifier","src":"28966:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"28601:398:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"28752:9:28","nodeType":"YulTypedName","src":"28752:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"28766:4:28","nodeType":"YulTypedName","src":"28766:4:28","type":""}],"src":"28601:398:28"},{"body":{"nativeSrc":"29178:227:28","nodeType":"YulBlock","src":"29178:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"29195:9:28","nodeType":"YulIdentifier","src":"29195:9:28"},{"kind":"number","nativeSrc":"29206:2:28","nodeType":"YulLiteral","src":"29206:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"29188:6:28","nodeType":"YulIdentifier","src":"29188:6:28"},"nativeSrc":"29188:21:28","nodeType":"YulFunctionCall","src":"29188:21:28"},"nativeSrc":"29188:21:28","nodeType":"YulExpressionStatement","src":"29188:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29229:9:28","nodeType":"YulIdentifier","src":"29229:9:28"},{"kind":"number","nativeSrc":"29240:2:28","nodeType":"YulLiteral","src":"29240:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29225:3:28","nodeType":"YulIdentifier","src":"29225:3:28"},"nativeSrc":"29225:18:28","nodeType":"YulFunctionCall","src":"29225:18:28"},{"kind":"number","nativeSrc":"29245:2:28","nodeType":"YulLiteral","src":"29245:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nativeSrc":"29218:6:28","nodeType":"YulIdentifier","src":"29218:6:28"},"nativeSrc":"29218:30:28","nodeType":"YulFunctionCall","src":"29218:30:28"},"nativeSrc":"29218:30:28","nodeType":"YulExpressionStatement","src":"29218:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29268:9:28","nodeType":"YulIdentifier","src":"29268:9:28"},{"kind":"number","nativeSrc":"29279:2:28","nodeType":"YulLiteral","src":"29279:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"29264:3:28","nodeType":"YulIdentifier","src":"29264:3:28"},"nativeSrc":"29264:18:28","nodeType":"YulFunctionCall","src":"29264:18:28"},{"hexValue":"706c616e65742073656e7420657272616e746c792c206e6f206f6e6520746f20","kind":"string","nativeSrc":"29284:34:28","nodeType":"YulLiteral","src":"29284:34:28","type":"","value":"planet sent errantly, no one to "}],"functionName":{"name":"mstore","nativeSrc":"29257:6:28","nodeType":"YulIdentifier","src":"29257:6:28"},"nativeSrc":"29257:62:28","nodeType":"YulFunctionCall","src":"29257:62:28"},"nativeSrc":"29257:62:28","nodeType":"YulExpressionStatement","src":"29257:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29339:9:28","nodeType":"YulIdentifier","src":"29339:9:28"},{"kind":"number","nativeSrc":"29350:2:28","nodeType":"YulLiteral","src":"29350:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"29335:3:28","nodeType":"YulIdentifier","src":"29335:3:28"},"nativeSrc":"29335:18:28","nodeType":"YulFunctionCall","src":"29335:18:28"},{"hexValue":"636c61696d","kind":"string","nativeSrc":"29355:7:28","nodeType":"YulLiteral","src":"29355:7:28","type":"","value":"claim"}],"functionName":{"name":"mstore","nativeSrc":"29328:6:28","nodeType":"YulIdentifier","src":"29328:6:28"},"nativeSrc":"29328:35:28","nodeType":"YulFunctionCall","src":"29328:35:28"},"nativeSrc":"29328:35:28","nodeType":"YulExpressionStatement","src":"29328:35:28"},{"nativeSrc":"29372:27:28","nodeType":"YulAssignment","src":"29372:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"29384:9:28","nodeType":"YulIdentifier","src":"29384:9:28"},{"kind":"number","nativeSrc":"29395:3:28","nodeType":"YulLiteral","src":"29395:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"29380:3:28","nodeType":"YulIdentifier","src":"29380:3:28"},"nativeSrc":"29380:19:28","nodeType":"YulFunctionCall","src":"29380:19:28"},"variableNames":[{"name":"tail","nativeSrc":"29372:4:28","nodeType":"YulIdentifier","src":"29372:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_5406e50ea7864718d453083f078f6e8ce8b9eb471a337acbc04c0fadffe18ffe__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"29004:401:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"29155:9:28","nodeType":"YulTypedName","src":"29155:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"29169:4:28","nodeType":"YulTypedName","src":"29169:4:28","type":""}],"src":"29004:401:28"},{"body":{"nativeSrc":"29595:285:28","nodeType":"YulBlock","src":"29595:285:28","statements":[{"nativeSrc":"29605:27:28","nodeType":"YulAssignment","src":"29605:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"29617:9:28","nodeType":"YulIdentifier","src":"29617:9:28"},{"kind":"number","nativeSrc":"29628:3:28","nodeType":"YulLiteral","src":"29628:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"29613:3:28","nodeType":"YulIdentifier","src":"29613:3:28"},"nativeSrc":"29613:19:28","nodeType":"YulFunctionCall","src":"29613:19:28"},"variableNames":[{"name":"tail","nativeSrc":"29605:4:28","nodeType":"YulIdentifier","src":"29605:4:28"}]},{"nativeSrc":"29641:52:28","nodeType":"YulVariableDeclaration","src":"29641:52:28","value":{"kind":"number","nativeSrc":"29651:42:28","nodeType":"YulLiteral","src":"29651:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"29645:2:28","nodeType":"YulTypedName","src":"29645:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"29709:9:28","nodeType":"YulIdentifier","src":"29709:9:28"},{"arguments":[{"name":"value0","nativeSrc":"29724:6:28","nodeType":"YulIdentifier","src":"29724:6:28"},{"name":"_1","nativeSrc":"29732:2:28","nodeType":"YulIdentifier","src":"29732:2:28"}],"functionName":{"name":"and","nativeSrc":"29720:3:28","nodeType":"YulIdentifier","src":"29720:3:28"},"nativeSrc":"29720:15:28","nodeType":"YulFunctionCall","src":"29720:15:28"}],"functionName":{"name":"mstore","nativeSrc":"29702:6:28","nodeType":"YulIdentifier","src":"29702:6:28"},"nativeSrc":"29702:34:28","nodeType":"YulFunctionCall","src":"29702:34:28"},"nativeSrc":"29702:34:28","nodeType":"YulExpressionStatement","src":"29702:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29756:9:28","nodeType":"YulIdentifier","src":"29756:9:28"},{"kind":"number","nativeSrc":"29767:2:28","nodeType":"YulLiteral","src":"29767:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29752:3:28","nodeType":"YulIdentifier","src":"29752:3:28"},"nativeSrc":"29752:18:28","nodeType":"YulFunctionCall","src":"29752:18:28"},{"arguments":[{"name":"value1","nativeSrc":"29776:6:28","nodeType":"YulIdentifier","src":"29776:6:28"},{"name":"_1","nativeSrc":"29784:2:28","nodeType":"YulIdentifier","src":"29784:2:28"}],"functionName":{"name":"and","nativeSrc":"29772:3:28","nodeType":"YulIdentifier","src":"29772:3:28"},"nativeSrc":"29772:15:28","nodeType":"YulFunctionCall","src":"29772:15:28"}],"functionName":{"name":"mstore","nativeSrc":"29745:6:28","nodeType":"YulIdentifier","src":"29745:6:28"},"nativeSrc":"29745:43:28","nodeType":"YulFunctionCall","src":"29745:43:28"},"nativeSrc":"29745:43:28","nodeType":"YulExpressionStatement","src":"29745:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29808:9:28","nodeType":"YulIdentifier","src":"29808:9:28"},{"kind":"number","nativeSrc":"29819:2:28","nodeType":"YulLiteral","src":"29819:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"29804:3:28","nodeType":"YulIdentifier","src":"29804:3:28"},"nativeSrc":"29804:18:28","nodeType":"YulFunctionCall","src":"29804:18:28"},{"name":"value2","nativeSrc":"29824:6:28","nodeType":"YulIdentifier","src":"29824:6:28"}],"functionName":{"name":"mstore","nativeSrc":"29797:6:28","nodeType":"YulIdentifier","src":"29797:6:28"},"nativeSrc":"29797:34:28","nodeType":"YulFunctionCall","src":"29797:34:28"},"nativeSrc":"29797:34:28","nodeType":"YulExpressionStatement","src":"29797:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29851:9:28","nodeType":"YulIdentifier","src":"29851:9:28"},{"kind":"number","nativeSrc":"29862:2:28","nodeType":"YulLiteral","src":"29862:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"29847:3:28","nodeType":"YulIdentifier","src":"29847:3:28"},"nativeSrc":"29847:18:28","nodeType":"YulFunctionCall","src":"29847:18:28"},{"name":"value3","nativeSrc":"29867:6:28","nodeType":"YulIdentifier","src":"29867:6:28"}],"functionName":{"name":"mstore","nativeSrc":"29840:6:28","nodeType":"YulIdentifier","src":"29840:6:28"},"nativeSrc":"29840:34:28","nodeType":"YulFunctionCall","src":"29840:34:28"},"nativeSrc":"29840:34:28","nodeType":"YulExpressionStatement","src":"29840:34:28"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"29410:470:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"29540:9:28","nodeType":"YulTypedName","src":"29540:9:28","type":""},{"name":"value3","nativeSrc":"29551:6:28","nodeType":"YulTypedName","src":"29551:6:28","type":""},{"name":"value2","nativeSrc":"29559:6:28","nodeType":"YulTypedName","src":"29559:6:28","type":""},{"name":"value1","nativeSrc":"29567:6:28","nodeType":"YulTypedName","src":"29567:6:28","type":""},{"name":"value0","nativeSrc":"29575:6:28","nodeType":"YulTypedName","src":"29575:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"29586:4:28","nodeType":"YulTypedName","src":"29586:4:28","type":""}],"src":"29410:470:28"},{"body":{"nativeSrc":"30059:179:28","nodeType":"YulBlock","src":"30059:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"30076:9:28","nodeType":"YulIdentifier","src":"30076:9:28"},{"kind":"number","nativeSrc":"30087:2:28","nodeType":"YulLiteral","src":"30087:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"30069:6:28","nodeType":"YulIdentifier","src":"30069:6:28"},"nativeSrc":"30069:21:28","nodeType":"YulFunctionCall","src":"30069:21:28"},"nativeSrc":"30069:21:28","nodeType":"YulExpressionStatement","src":"30069:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30110:9:28","nodeType":"YulIdentifier","src":"30110:9:28"},{"kind":"number","nativeSrc":"30121:2:28","nodeType":"YulLiteral","src":"30121:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30106:3:28","nodeType":"YulIdentifier","src":"30106:3:28"},"nativeSrc":"30106:18:28","nodeType":"YulFunctionCall","src":"30106:18:28"},{"kind":"number","nativeSrc":"30126:2:28","nodeType":"YulLiteral","src":"30126:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"30099:6:28","nodeType":"YulIdentifier","src":"30099:6:28"},"nativeSrc":"30099:30:28","nodeType":"YulFunctionCall","src":"30099:30:28"},"nativeSrc":"30099:30:28","nodeType":"YulExpressionStatement","src":"30099:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30149:9:28","nodeType":"YulIdentifier","src":"30149:9:28"},{"kind":"number","nativeSrc":"30160:2:28","nodeType":"YulLiteral","src":"30160:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30145:3:28","nodeType":"YulIdentifier","src":"30145:3:28"},"nativeSrc":"30145:18:28","nodeType":"YulFunctionCall","src":"30145:18:28"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"30165:31:28","nodeType":"YulLiteral","src":"30165:31:28","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"30138:6:28","nodeType":"YulIdentifier","src":"30138:6:28"},"nativeSrc":"30138:59:28","nodeType":"YulFunctionCall","src":"30138:59:28"},"nativeSrc":"30138:59:28","nodeType":"YulExpressionStatement","src":"30138:59:28"},{"nativeSrc":"30206:26:28","nodeType":"YulAssignment","src":"30206:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"30218:9:28","nodeType":"YulIdentifier","src":"30218:9:28"},{"kind":"number","nativeSrc":"30229:2:28","nodeType":"YulLiteral","src":"30229:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"30214:3:28","nodeType":"YulIdentifier","src":"30214:3:28"},"nativeSrc":"30214:18:28","nodeType":"YulFunctionCall","src":"30214:18:28"},"variableNames":[{"name":"tail","nativeSrc":"30206:4:28","nodeType":"YulIdentifier","src":"30206:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"29885:353:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"30036:9:28","nodeType":"YulTypedName","src":"30036:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"30050:4:28","nodeType":"YulTypedName","src":"30050:4:28","type":""}],"src":"29885:353:28"},{"body":{"nativeSrc":"30417:248:28","nodeType":"YulBlock","src":"30417:248:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"30434:9:28","nodeType":"YulIdentifier","src":"30434:9:28"},{"kind":"number","nativeSrc":"30445:2:28","nodeType":"YulLiteral","src":"30445:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"30427:6:28","nodeType":"YulIdentifier","src":"30427:6:28"},"nativeSrc":"30427:21:28","nodeType":"YulFunctionCall","src":"30427:21:28"},"nativeSrc":"30427:21:28","nodeType":"YulExpressionStatement","src":"30427:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30468:9:28","nodeType":"YulIdentifier","src":"30468:9:28"},{"kind":"number","nativeSrc":"30479:2:28","nodeType":"YulLiteral","src":"30479:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30464:3:28","nodeType":"YulIdentifier","src":"30464:3:28"},"nativeSrc":"30464:18:28","nodeType":"YulFunctionCall","src":"30464:18:28"},{"kind":"number","nativeSrc":"30484:2:28","nodeType":"YulLiteral","src":"30484:2:28","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"30457:6:28","nodeType":"YulIdentifier","src":"30457:6:28"},"nativeSrc":"30457:30:28","nodeType":"YulFunctionCall","src":"30457:30:28"},"nativeSrc":"30457:30:28","nodeType":"YulExpressionStatement","src":"30457:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30507:9:28","nodeType":"YulIdentifier","src":"30507:9:28"},{"kind":"number","nativeSrc":"30518:2:28","nodeType":"YulLiteral","src":"30518:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30503:3:28","nodeType":"YulIdentifier","src":"30503:3:28"},"nativeSrc":"30503:18:28","nodeType":"YulFunctionCall","src":"30503:18:28"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"30523:34:28","nodeType":"YulLiteral","src":"30523:34:28","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"30496:6:28","nodeType":"YulIdentifier","src":"30496:6:28"},"nativeSrc":"30496:62:28","nodeType":"YulFunctionCall","src":"30496:62:28"},"nativeSrc":"30496:62:28","nodeType":"YulExpressionStatement","src":"30496:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30578:9:28","nodeType":"YulIdentifier","src":"30578:9:28"},{"kind":"number","nativeSrc":"30589:2:28","nodeType":"YulLiteral","src":"30589:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"30574:3:28","nodeType":"YulIdentifier","src":"30574:3:28"},"nativeSrc":"30574:18:28","nodeType":"YulFunctionCall","src":"30574:18:28"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"30594:28:28","nodeType":"YulLiteral","src":"30594:28:28","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"30567:6:28","nodeType":"YulIdentifier","src":"30567:6:28"},"nativeSrc":"30567:56:28","nodeType":"YulFunctionCall","src":"30567:56:28"},"nativeSrc":"30567:56:28","nodeType":"YulExpressionStatement","src":"30567:56:28"},{"nativeSrc":"30632:27:28","nodeType":"YulAssignment","src":"30632:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"30644:9:28","nodeType":"YulIdentifier","src":"30644:9:28"},{"kind":"number","nativeSrc":"30655:3:28","nodeType":"YulLiteral","src":"30655:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"30640:3:28","nodeType":"YulIdentifier","src":"30640:3:28"},"nativeSrc":"30640:19:28","nodeType":"YulFunctionCall","src":"30640:19:28"},"variableNames":[{"name":"tail","nativeSrc":"30632:4:28","nodeType":"YulIdentifier","src":"30632:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"30243:422:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"30394:9:28","nodeType":"YulTypedName","src":"30394:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"30408:4:28","nodeType":"YulTypedName","src":"30408:4:28","type":""}],"src":"30243:422:28"},{"body":{"nativeSrc":"30844:182:28","nodeType":"YulBlock","src":"30844:182:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"30861:9:28","nodeType":"YulIdentifier","src":"30861:9:28"},{"kind":"number","nativeSrc":"30872:2:28","nodeType":"YulLiteral","src":"30872:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"30854:6:28","nodeType":"YulIdentifier","src":"30854:6:28"},"nativeSrc":"30854:21:28","nodeType":"YulFunctionCall","src":"30854:21:28"},"nativeSrc":"30854:21:28","nodeType":"YulExpressionStatement","src":"30854:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30895:9:28","nodeType":"YulIdentifier","src":"30895:9:28"},{"kind":"number","nativeSrc":"30906:2:28","nodeType":"YulLiteral","src":"30906:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30891:3:28","nodeType":"YulIdentifier","src":"30891:3:28"},"nativeSrc":"30891:18:28","nodeType":"YulFunctionCall","src":"30891:18:28"},{"kind":"number","nativeSrc":"30911:2:28","nodeType":"YulLiteral","src":"30911:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"30884:6:28","nodeType":"YulIdentifier","src":"30884:6:28"},"nativeSrc":"30884:30:28","nodeType":"YulFunctionCall","src":"30884:30:28"},"nativeSrc":"30884:30:28","nodeType":"YulExpressionStatement","src":"30884:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30934:9:28","nodeType":"YulIdentifier","src":"30934:9:28"},{"kind":"number","nativeSrc":"30945:2:28","nodeType":"YulLiteral","src":"30945:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30930:3:28","nodeType":"YulIdentifier","src":"30930:3:28"},"nativeSrc":"30930:18:28","nodeType":"YulFunctionCall","src":"30930:18:28"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nativeSrc":"30950:34:28","nodeType":"YulLiteral","src":"30950:34:28","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nativeSrc":"30923:6:28","nodeType":"YulIdentifier","src":"30923:6:28"},"nativeSrc":"30923:62:28","nodeType":"YulFunctionCall","src":"30923:62:28"},"nativeSrc":"30923:62:28","nodeType":"YulExpressionStatement","src":"30923:62:28"},{"nativeSrc":"30994:26:28","nodeType":"YulAssignment","src":"30994:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"31006:9:28","nodeType":"YulIdentifier","src":"31006:9:28"},{"kind":"number","nativeSrc":"31017:2:28","nodeType":"YulLiteral","src":"31017:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"31002:3:28","nodeType":"YulIdentifier","src":"31002:3:28"},"nativeSrc":"31002:18:28","nodeType":"YulFunctionCall","src":"31002:18:28"},"variableNames":[{"name":"tail","nativeSrc":"30994:4:28","nodeType":"YulIdentifier","src":"30994:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"30670:356:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"30821:9:28","nodeType":"YulTypedName","src":"30821:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"30835:4:28","nodeType":"YulTypedName","src":"30835:4:28","type":""}],"src":"30670:356:28"},{"body":{"nativeSrc":"31205:179:28","nodeType":"YulBlock","src":"31205:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"31222:9:28","nodeType":"YulIdentifier","src":"31222:9:28"},{"kind":"number","nativeSrc":"31233:2:28","nodeType":"YulLiteral","src":"31233:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"31215:6:28","nodeType":"YulIdentifier","src":"31215:6:28"},"nativeSrc":"31215:21:28","nodeType":"YulFunctionCall","src":"31215:21:28"},"nativeSrc":"31215:21:28","nodeType":"YulExpressionStatement","src":"31215:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31256:9:28","nodeType":"YulIdentifier","src":"31256:9:28"},{"kind":"number","nativeSrc":"31267:2:28","nodeType":"YulLiteral","src":"31267:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"31252:3:28","nodeType":"YulIdentifier","src":"31252:3:28"},"nativeSrc":"31252:18:28","nodeType":"YulFunctionCall","src":"31252:18:28"},{"kind":"number","nativeSrc":"31272:2:28","nodeType":"YulLiteral","src":"31272:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"31245:6:28","nodeType":"YulIdentifier","src":"31245:6:28"},"nativeSrc":"31245:30:28","nodeType":"YulFunctionCall","src":"31245:30:28"},"nativeSrc":"31245:30:28","nodeType":"YulExpressionStatement","src":"31245:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31295:9:28","nodeType":"YulIdentifier","src":"31295:9:28"},{"kind":"number","nativeSrc":"31306:2:28","nodeType":"YulLiteral","src":"31306:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"31291:3:28","nodeType":"YulIdentifier","src":"31291:3:28"},"nativeSrc":"31291:18:28","nodeType":"YulFunctionCall","src":"31291:18:28"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nativeSrc":"31311:31:28","nodeType":"YulLiteral","src":"31311:31:28","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nativeSrc":"31284:6:28","nodeType":"YulIdentifier","src":"31284:6:28"},"nativeSrc":"31284:59:28","nodeType":"YulFunctionCall","src":"31284:59:28"},"nativeSrc":"31284:59:28","nodeType":"YulExpressionStatement","src":"31284:59:28"},{"nativeSrc":"31352:26:28","nodeType":"YulAssignment","src":"31352:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"31364:9:28","nodeType":"YulIdentifier","src":"31364:9:28"},{"kind":"number","nativeSrc":"31375:2:28","nodeType":"YulLiteral","src":"31375:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"31360:3:28","nodeType":"YulIdentifier","src":"31360:3:28"},"nativeSrc":"31360:18:28","nodeType":"YulFunctionCall","src":"31360:18:28"},"variableNames":[{"name":"tail","nativeSrc":"31352:4:28","nodeType":"YulIdentifier","src":"31352:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"31031:353:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"31182:9:28","nodeType":"YulTypedName","src":"31182:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"31196:4:28","nodeType":"YulTypedName","src":"31196:4:28","type":""}],"src":"31031:353:28"},{"body":{"nativeSrc":"31563:227:28","nodeType":"YulBlock","src":"31563:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"31580:9:28","nodeType":"YulIdentifier","src":"31580:9:28"},{"kind":"number","nativeSrc":"31591:2:28","nodeType":"YulLiteral","src":"31591:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"31573:6:28","nodeType":"YulIdentifier","src":"31573:6:28"},"nativeSrc":"31573:21:28","nodeType":"YulFunctionCall","src":"31573:21:28"},"nativeSrc":"31573:21:28","nodeType":"YulExpressionStatement","src":"31573:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31614:9:28","nodeType":"YulIdentifier","src":"31614:9:28"},{"kind":"number","nativeSrc":"31625:2:28","nodeType":"YulLiteral","src":"31625:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"31610:3:28","nodeType":"YulIdentifier","src":"31610:3:28"},"nativeSrc":"31610:18:28","nodeType":"YulFunctionCall","src":"31610:18:28"},{"kind":"number","nativeSrc":"31630:2:28","nodeType":"YulLiteral","src":"31630:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nativeSrc":"31603:6:28","nodeType":"YulIdentifier","src":"31603:6:28"},"nativeSrc":"31603:30:28","nodeType":"YulFunctionCall","src":"31603:30:28"},"nativeSrc":"31603:30:28","nodeType":"YulExpressionStatement","src":"31603:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31653:9:28","nodeType":"YulIdentifier","src":"31653:9:28"},{"kind":"number","nativeSrc":"31664:2:28","nodeType":"YulLiteral","src":"31664:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"31649:3:28","nodeType":"YulIdentifier","src":"31649:3:28"},"nativeSrc":"31649:18:28","nodeType":"YulFunctionCall","src":"31649:18:28"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nativeSrc":"31669:34:28","nodeType":"YulLiteral","src":"31669:34:28","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nativeSrc":"31642:6:28","nodeType":"YulIdentifier","src":"31642:6:28"},"nativeSrc":"31642:62:28","nodeType":"YulFunctionCall","src":"31642:62:28"},"nativeSrc":"31642:62:28","nodeType":"YulExpressionStatement","src":"31642:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31724:9:28","nodeType":"YulIdentifier","src":"31724:9:28"},{"kind":"number","nativeSrc":"31735:2:28","nodeType":"YulLiteral","src":"31735:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"31720:3:28","nodeType":"YulIdentifier","src":"31720:3:28"},"nativeSrc":"31720:18:28","nodeType":"YulFunctionCall","src":"31720:18:28"},{"hexValue":"6472657373","kind":"string","nativeSrc":"31740:7:28","nodeType":"YulLiteral","src":"31740:7:28","type":"","value":"dress"}],"functionName":{"name":"mstore","nativeSrc":"31713:6:28","nodeType":"YulIdentifier","src":"31713:6:28"},"nativeSrc":"31713:35:28","nodeType":"YulFunctionCall","src":"31713:35:28"},"nativeSrc":"31713:35:28","nodeType":"YulExpressionStatement","src":"31713:35:28"},{"nativeSrc":"31757:27:28","nodeType":"YulAssignment","src":"31757:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"31769:9:28","nodeType":"YulIdentifier","src":"31769:9:28"},{"kind":"number","nativeSrc":"31780:3:28","nodeType":"YulLiteral","src":"31780:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"31765:3:28","nodeType":"YulIdentifier","src":"31765:3:28"},"nativeSrc":"31765:19:28","nodeType":"YulFunctionCall","src":"31765:19:28"},"variableNames":[{"name":"tail","nativeSrc":"31757:4:28","nodeType":"YulIdentifier","src":"31757:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"31389:401:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"31540:9:28","nodeType":"YulTypedName","src":"31540:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"31554:4:28","nodeType":"YulTypedName","src":"31554:4:28","type":""}],"src":"31389:401:28"},{"body":{"nativeSrc":"31969:225:28","nodeType":"YulBlock","src":"31969:225:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"31986:9:28","nodeType":"YulIdentifier","src":"31986:9:28"},{"kind":"number","nativeSrc":"31997:2:28","nodeType":"YulLiteral","src":"31997:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"31979:6:28","nodeType":"YulIdentifier","src":"31979:6:28"},"nativeSrc":"31979:21:28","nodeType":"YulFunctionCall","src":"31979:21:28"},"nativeSrc":"31979:21:28","nodeType":"YulExpressionStatement","src":"31979:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32020:9:28","nodeType":"YulIdentifier","src":"32020:9:28"},{"kind":"number","nativeSrc":"32031:2:28","nodeType":"YulLiteral","src":"32031:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"32016:3:28","nodeType":"YulIdentifier","src":"32016:3:28"},"nativeSrc":"32016:18:28","nodeType":"YulFunctionCall","src":"32016:18:28"},{"kind":"number","nativeSrc":"32036:2:28","nodeType":"YulLiteral","src":"32036:2:28","type":"","value":"35"}],"functionName":{"name":"mstore","nativeSrc":"32009:6:28","nodeType":"YulIdentifier","src":"32009:6:28"},"nativeSrc":"32009:30:28","nodeType":"YulFunctionCall","src":"32009:30:28"},"nativeSrc":"32009:30:28","nodeType":"YulExpressionStatement","src":"32009:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32059:9:28","nodeType":"YulIdentifier","src":"32059:9:28"},{"kind":"number","nativeSrc":"32070:2:28","nodeType":"YulLiteral","src":"32070:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"32055:3:28","nodeType":"YulIdentifier","src":"32055:3:28"},"nativeSrc":"32055:18:28","nodeType":"YulFunctionCall","src":"32055:18:28"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nativeSrc":"32075:34:28","nodeType":"YulLiteral","src":"32075:34:28","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nativeSrc":"32048:6:28","nodeType":"YulIdentifier","src":"32048:6:28"},"nativeSrc":"32048:62:28","nodeType":"YulFunctionCall","src":"32048:62:28"},"nativeSrc":"32048:62:28","nodeType":"YulExpressionStatement","src":"32048:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32130:9:28","nodeType":"YulIdentifier","src":"32130:9:28"},{"kind":"number","nativeSrc":"32141:2:28","nodeType":"YulLiteral","src":"32141:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"32126:3:28","nodeType":"YulIdentifier","src":"32126:3:28"},"nativeSrc":"32126:18:28","nodeType":"YulFunctionCall","src":"32126:18:28"},{"hexValue":"657373","kind":"string","nativeSrc":"32146:5:28","nodeType":"YulLiteral","src":"32146:5:28","type":"","value":"ess"}],"functionName":{"name":"mstore","nativeSrc":"32119:6:28","nodeType":"YulIdentifier","src":"32119:6:28"},"nativeSrc":"32119:33:28","nodeType":"YulFunctionCall","src":"32119:33:28"},"nativeSrc":"32119:33:28","nodeType":"YulExpressionStatement","src":"32119:33:28"},{"nativeSrc":"32161:27:28","nodeType":"YulAssignment","src":"32161:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"32173:9:28","nodeType":"YulIdentifier","src":"32173:9:28"},{"kind":"number","nativeSrc":"32184:3:28","nodeType":"YulLiteral","src":"32184:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"32169:3:28","nodeType":"YulIdentifier","src":"32169:3:28"},"nativeSrc":"32169:19:28","nodeType":"YulFunctionCall","src":"32169:19:28"},"variableNames":[{"name":"tail","nativeSrc":"32161:4:28","nodeType":"YulIdentifier","src":"32161:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"31795:399:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"31946:9:28","nodeType":"YulTypedName","src":"31946:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"31960:4:28","nodeType":"YulTypedName","src":"31960:4:28","type":""}],"src":"31795:399:28"},{"body":{"nativeSrc":"32373:228:28","nodeType":"YulBlock","src":"32373:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"32390:9:28","nodeType":"YulIdentifier","src":"32390:9:28"},{"kind":"number","nativeSrc":"32401:2:28","nodeType":"YulLiteral","src":"32401:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"32383:6:28","nodeType":"YulIdentifier","src":"32383:6:28"},"nativeSrc":"32383:21:28","nodeType":"YulFunctionCall","src":"32383:21:28"},"nativeSrc":"32383:21:28","nodeType":"YulExpressionStatement","src":"32383:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32424:9:28","nodeType":"YulIdentifier","src":"32424:9:28"},{"kind":"number","nativeSrc":"32435:2:28","nodeType":"YulLiteral","src":"32435:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"32420:3:28","nodeType":"YulIdentifier","src":"32420:3:28"},"nativeSrc":"32420:18:28","nodeType":"YulFunctionCall","src":"32420:18:28"},{"kind":"number","nativeSrc":"32440:2:28","nodeType":"YulLiteral","src":"32440:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"32413:6:28","nodeType":"YulIdentifier","src":"32413:6:28"},"nativeSrc":"32413:30:28","nodeType":"YulFunctionCall","src":"32413:30:28"},"nativeSrc":"32413:30:28","nodeType":"YulExpressionStatement","src":"32413:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32463:9:28","nodeType":"YulIdentifier","src":"32463:9:28"},{"kind":"number","nativeSrc":"32474:2:28","nodeType":"YulLiteral","src":"32474:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"32459:3:28","nodeType":"YulIdentifier","src":"32459:3:28"},"nativeSrc":"32459:18:28","nodeType":"YulFunctionCall","src":"32459:18:28"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nativeSrc":"32479:34:28","nodeType":"YulLiteral","src":"32479:34:28","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nativeSrc":"32452:6:28","nodeType":"YulIdentifier","src":"32452:6:28"},"nativeSrc":"32452:62:28","nodeType":"YulFunctionCall","src":"32452:62:28"},"nativeSrc":"32452:62:28","nodeType":"YulExpressionStatement","src":"32452:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32534:9:28","nodeType":"YulIdentifier","src":"32534:9:28"},{"kind":"number","nativeSrc":"32545:2:28","nodeType":"YulLiteral","src":"32545:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"32530:3:28","nodeType":"YulIdentifier","src":"32530:3:28"},"nativeSrc":"32530:18:28","nodeType":"YulFunctionCall","src":"32530:18:28"},{"hexValue":"616c616e6365","kind":"string","nativeSrc":"32550:8:28","nodeType":"YulLiteral","src":"32550:8:28","type":"","value":"alance"}],"functionName":{"name":"mstore","nativeSrc":"32523:6:28","nodeType":"YulIdentifier","src":"32523:6:28"},"nativeSrc":"32523:36:28","nodeType":"YulFunctionCall","src":"32523:36:28"},"nativeSrc":"32523:36:28","nodeType":"YulExpressionStatement","src":"32523:36:28"},{"nativeSrc":"32568:27:28","nodeType":"YulAssignment","src":"32568:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"32580:9:28","nodeType":"YulIdentifier","src":"32580:9:28"},{"kind":"number","nativeSrc":"32591:3:28","nodeType":"YulLiteral","src":"32591:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"32576:3:28","nodeType":"YulIdentifier","src":"32576:3:28"},"nativeSrc":"32576:19:28","nodeType":"YulFunctionCall","src":"32576:19:28"},"variableNames":[{"name":"tail","nativeSrc":"32568:4:28","nodeType":"YulIdentifier","src":"32568:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"32199:402:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"32350:9:28","nodeType":"YulTypedName","src":"32350:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"32364:4:28","nodeType":"YulTypedName","src":"32364:4:28","type":""}],"src":"32199:402:28"},{"body":{"nativeSrc":"32780:166:28","nodeType":"YulBlock","src":"32780:166:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"32797:9:28","nodeType":"YulIdentifier","src":"32797:9:28"},{"kind":"number","nativeSrc":"32808:2:28","nodeType":"YulLiteral","src":"32808:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"32790:6:28","nodeType":"YulIdentifier","src":"32790:6:28"},"nativeSrc":"32790:21:28","nodeType":"YulFunctionCall","src":"32790:21:28"},"nativeSrc":"32790:21:28","nodeType":"YulExpressionStatement","src":"32790:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32831:9:28","nodeType":"YulIdentifier","src":"32831:9:28"},{"kind":"number","nativeSrc":"32842:2:28","nodeType":"YulLiteral","src":"32842:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"32827:3:28","nodeType":"YulIdentifier","src":"32827:3:28"},"nativeSrc":"32827:18:28","nodeType":"YulFunctionCall","src":"32827:18:28"},{"kind":"number","nativeSrc":"32847:2:28","nodeType":"YulLiteral","src":"32847:2:28","type":"","value":"16"}],"functionName":{"name":"mstore","nativeSrc":"32820:6:28","nodeType":"YulIdentifier","src":"32820:6:28"},"nativeSrc":"32820:30:28","nodeType":"YulFunctionCall","src":"32820:30:28"},"nativeSrc":"32820:30:28","nodeType":"YulExpressionStatement","src":"32820:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32870:9:28","nodeType":"YulIdentifier","src":"32870:9:28"},{"kind":"number","nativeSrc":"32881:2:28","nodeType":"YulLiteral","src":"32881:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"32866:3:28","nodeType":"YulIdentifier","src":"32866:3:28"},"nativeSrc":"32866:18:28","nodeType":"YulFunctionCall","src":"32866:18:28"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nativeSrc":"32886:18:28","nodeType":"YulLiteral","src":"32886:18:28","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nativeSrc":"32859:6:28","nodeType":"YulIdentifier","src":"32859:6:28"},"nativeSrc":"32859:46:28","nodeType":"YulFunctionCall","src":"32859:46:28"},"nativeSrc":"32859:46:28","nodeType":"YulExpressionStatement","src":"32859:46:28"},{"nativeSrc":"32914:26:28","nodeType":"YulAssignment","src":"32914:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"32926:9:28","nodeType":"YulIdentifier","src":"32926:9:28"},{"kind":"number","nativeSrc":"32937:2:28","nodeType":"YulLiteral","src":"32937:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"32922:3:28","nodeType":"YulIdentifier","src":"32922:3:28"},"nativeSrc":"32922:18:28","nodeType":"YulFunctionCall","src":"32922:18:28"},"variableNames":[{"name":"tail","nativeSrc":"32914:4:28","nodeType":"YulIdentifier","src":"32914:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"32606:340:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"32757:9:28","nodeType":"YulTypedName","src":"32757:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"32771:4:28","nodeType":"YulTypedName","src":"32771:4:28","type":""}],"src":"32606:340:28"},{"body":{"nativeSrc":"33125:236:28","nodeType":"YulBlock","src":"33125:236:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"33142:9:28","nodeType":"YulIdentifier","src":"33142:9:28"},{"kind":"number","nativeSrc":"33153:2:28","nodeType":"YulLiteral","src":"33153:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"33135:6:28","nodeType":"YulIdentifier","src":"33135:6:28"},"nativeSrc":"33135:21:28","nodeType":"YulFunctionCall","src":"33135:21:28"},"nativeSrc":"33135:21:28","nodeType":"YulExpressionStatement","src":"33135:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"33176:9:28","nodeType":"YulIdentifier","src":"33176:9:28"},{"kind":"number","nativeSrc":"33187:2:28","nodeType":"YulLiteral","src":"33187:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"33172:3:28","nodeType":"YulIdentifier","src":"33172:3:28"},"nativeSrc":"33172:18:28","nodeType":"YulFunctionCall","src":"33172:18:28"},{"kind":"number","nativeSrc":"33192:2:28","nodeType":"YulLiteral","src":"33192:2:28","type":"","value":"46"}],"functionName":{"name":"mstore","nativeSrc":"33165:6:28","nodeType":"YulIdentifier","src":"33165:6:28"},"nativeSrc":"33165:30:28","nodeType":"YulFunctionCall","src":"33165:30:28"},"nativeSrc":"33165:30:28","nodeType":"YulExpressionStatement","src":"33165:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"33215:9:28","nodeType":"YulIdentifier","src":"33215:9:28"},{"kind":"number","nativeSrc":"33226:2:28","nodeType":"YulLiteral","src":"33226:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"33211:3:28","nodeType":"YulIdentifier","src":"33211:3:28"},"nativeSrc":"33211:18:28","nodeType":"YulFunctionCall","src":"33211:18:28"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nativeSrc":"33231:34:28","nodeType":"YulLiteral","src":"33231:34:28","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nativeSrc":"33204:6:28","nodeType":"YulIdentifier","src":"33204:6:28"},"nativeSrc":"33204:62:28","nodeType":"YulFunctionCall","src":"33204:62:28"},"nativeSrc":"33204:62:28","nodeType":"YulExpressionStatement","src":"33204:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"33286:9:28","nodeType":"YulIdentifier","src":"33286:9:28"},{"kind":"number","nativeSrc":"33297:2:28","nodeType":"YulLiteral","src":"33297:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"33282:3:28","nodeType":"YulIdentifier","src":"33282:3:28"},"nativeSrc":"33282:18:28","nodeType":"YulFunctionCall","src":"33282:18:28"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nativeSrc":"33302:16:28","nodeType":"YulLiteral","src":"33302:16:28","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nativeSrc":"33275:6:28","nodeType":"YulIdentifier","src":"33275:6:28"},"nativeSrc":"33275:44:28","nodeType":"YulFunctionCall","src":"33275:44:28"},"nativeSrc":"33275:44:28","nodeType":"YulExpressionStatement","src":"33275:44:28"},{"nativeSrc":"33328:27:28","nodeType":"YulAssignment","src":"33328:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"33340:9:28","nodeType":"YulIdentifier","src":"33340:9:28"},{"kind":"number","nativeSrc":"33351:3:28","nodeType":"YulLiteral","src":"33351:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"33336:3:28","nodeType":"YulIdentifier","src":"33336:3:28"},"nativeSrc":"33336:19:28","nodeType":"YulFunctionCall","src":"33336:19:28"},"variableNames":[{"name":"tail","nativeSrc":"33328:4:28","nodeType":"YulIdentifier","src":"33328:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"32951:410:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"33102:9:28","nodeType":"YulTypedName","src":"33102:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"33116:4:28","nodeType":"YulTypedName","src":"33116:4:28","type":""}],"src":"32951:410:28"},{"body":{"nativeSrc":"33540:231:28","nodeType":"YulBlock","src":"33540:231:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"33557:9:28","nodeType":"YulIdentifier","src":"33557:9:28"},{"kind":"number","nativeSrc":"33568:2:28","nodeType":"YulLiteral","src":"33568:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"33550:6:28","nodeType":"YulIdentifier","src":"33550:6:28"},"nativeSrc":"33550:21:28","nodeType":"YulFunctionCall","src":"33550:21:28"},"nativeSrc":"33550:21:28","nodeType":"YulExpressionStatement","src":"33550:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"33591:9:28","nodeType":"YulIdentifier","src":"33591:9:28"},{"kind":"number","nativeSrc":"33602:2:28","nodeType":"YulLiteral","src":"33602:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"33587:3:28","nodeType":"YulIdentifier","src":"33587:3:28"},"nativeSrc":"33587:18:28","nodeType":"YulFunctionCall","src":"33587:18:28"},{"kind":"number","nativeSrc":"33607:2:28","nodeType":"YulLiteral","src":"33607:2:28","type":"","value":"41"}],"functionName":{"name":"mstore","nativeSrc":"33580:6:28","nodeType":"YulIdentifier","src":"33580:6:28"},"nativeSrc":"33580:30:28","nodeType":"YulFunctionCall","src":"33580:30:28"},"nativeSrc":"33580:30:28","nodeType":"YulExpressionStatement","src":"33580:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"33630:9:28","nodeType":"YulIdentifier","src":"33630:9:28"},{"kind":"number","nativeSrc":"33641:2:28","nodeType":"YulLiteral","src":"33641:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"33626:3:28","nodeType":"YulIdentifier","src":"33626:3:28"},"nativeSrc":"33626:18:28","nodeType":"YulFunctionCall","src":"33626:18:28"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nativeSrc":"33646:34:28","nodeType":"YulLiteral","src":"33646:34:28","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nativeSrc":"33619:6:28","nodeType":"YulIdentifier","src":"33619:6:28"},"nativeSrc":"33619:62:28","nodeType":"YulFunctionCall","src":"33619:62:28"},"nativeSrc":"33619:62:28","nodeType":"YulExpressionStatement","src":"33619:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"33701:9:28","nodeType":"YulIdentifier","src":"33701:9:28"},{"kind":"number","nativeSrc":"33712:2:28","nodeType":"YulLiteral","src":"33712:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"33697:3:28","nodeType":"YulIdentifier","src":"33697:3:28"},"nativeSrc":"33697:18:28","nodeType":"YulFunctionCall","src":"33697:18:28"},{"hexValue":"6961626c6555554944","kind":"string","nativeSrc":"33717:11:28","nodeType":"YulLiteral","src":"33717:11:28","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nativeSrc":"33690:6:28","nodeType":"YulIdentifier","src":"33690:6:28"},"nativeSrc":"33690:39:28","nodeType":"YulFunctionCall","src":"33690:39:28"},"nativeSrc":"33690:39:28","nodeType":"YulExpressionStatement","src":"33690:39:28"},{"nativeSrc":"33738:27:28","nodeType":"YulAssignment","src":"33738:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"33750:9:28","nodeType":"YulIdentifier","src":"33750:9:28"},{"kind":"number","nativeSrc":"33761:3:28","nodeType":"YulLiteral","src":"33761:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"33746:3:28","nodeType":"YulIdentifier","src":"33746:3:28"},"nativeSrc":"33746:19:28","nodeType":"YulFunctionCall","src":"33746:19:28"},"variableNames":[{"name":"tail","nativeSrc":"33738:4:28","nodeType":"YulIdentifier","src":"33738:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"33366:405:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"33517:9:28","nodeType":"YulTypedName","src":"33517:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"33531:4:28","nodeType":"YulTypedName","src":"33531:4:28","type":""}],"src":"33366:405:28"},{"body":{"nativeSrc":"33950:233:28","nodeType":"YulBlock","src":"33950:233:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"33967:9:28","nodeType":"YulIdentifier","src":"33967:9:28"},{"kind":"number","nativeSrc":"33978:2:28","nodeType":"YulLiteral","src":"33978:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"33960:6:28","nodeType":"YulIdentifier","src":"33960:6:28"},"nativeSrc":"33960:21:28","nodeType":"YulFunctionCall","src":"33960:21:28"},"nativeSrc":"33960:21:28","nodeType":"YulExpressionStatement","src":"33960:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"34001:9:28","nodeType":"YulIdentifier","src":"34001:9:28"},{"kind":"number","nativeSrc":"34012:2:28","nodeType":"YulLiteral","src":"34012:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"33997:3:28","nodeType":"YulIdentifier","src":"33997:3:28"},"nativeSrc":"33997:18:28","nodeType":"YulFunctionCall","src":"33997:18:28"},{"kind":"number","nativeSrc":"34017:2:28","nodeType":"YulLiteral","src":"34017:2:28","type":"","value":"43"}],"functionName":{"name":"mstore","nativeSrc":"33990:6:28","nodeType":"YulIdentifier","src":"33990:6:28"},"nativeSrc":"33990:30:28","nodeType":"YulFunctionCall","src":"33990:30:28"},"nativeSrc":"33990:30:28","nodeType":"YulExpressionStatement","src":"33990:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"34040:9:28","nodeType":"YulIdentifier","src":"34040:9:28"},{"kind":"number","nativeSrc":"34051:2:28","nodeType":"YulLiteral","src":"34051:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"34036:3:28","nodeType":"YulIdentifier","src":"34036:3:28"},"nativeSrc":"34036:18:28","nodeType":"YulFunctionCall","src":"34036:18:28"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nativeSrc":"34056:34:28","nodeType":"YulLiteral","src":"34056:34:28","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nativeSrc":"34029:6:28","nodeType":"YulIdentifier","src":"34029:6:28"},"nativeSrc":"34029:62:28","nodeType":"YulFunctionCall","src":"34029:62:28"},"nativeSrc":"34029:62:28","nodeType":"YulExpressionStatement","src":"34029:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"34111:9:28","nodeType":"YulIdentifier","src":"34111:9:28"},{"kind":"number","nativeSrc":"34122:2:28","nodeType":"YulLiteral","src":"34122:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"34107:3:28","nodeType":"YulIdentifier","src":"34107:3:28"},"nativeSrc":"34107:18:28","nodeType":"YulFunctionCall","src":"34107:18:28"},{"hexValue":"6e697469616c697a696e67","kind":"string","nativeSrc":"34127:13:28","nodeType":"YulLiteral","src":"34127:13:28","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nativeSrc":"34100:6:28","nodeType":"YulIdentifier","src":"34100:6:28"},"nativeSrc":"34100:41:28","nodeType":"YulFunctionCall","src":"34100:41:28"},"nativeSrc":"34100:41:28","nodeType":"YulExpressionStatement","src":"34100:41:28"},{"nativeSrc":"34150:27:28","nodeType":"YulAssignment","src":"34150:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"34162:9:28","nodeType":"YulIdentifier","src":"34162:9:28"},{"kind":"number","nativeSrc":"34173:3:28","nodeType":"YulLiteral","src":"34173:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"34158:3:28","nodeType":"YulIdentifier","src":"34158:3:28"},"nativeSrc":"34158:19:28","nodeType":"YulFunctionCall","src":"34158:19:28"},"variableNames":[{"name":"tail","nativeSrc":"34150:4:28","nodeType":"YulIdentifier","src":"34150:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"33776:407:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"33927:9:28","nodeType":"YulTypedName","src":"33927:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"33941:4:28","nodeType":"YulTypedName","src":"33941:4:28","type":""}],"src":"33776:407:28"},{"body":{"nativeSrc":"34240:116:28","nodeType":"YulBlock","src":"34240:116:28","statements":[{"nativeSrc":"34250:20:28","nodeType":"YulAssignment","src":"34250:20:28","value":{"arguments":[{"name":"x","nativeSrc":"34265:1:28","nodeType":"YulIdentifier","src":"34265:1:28"},{"name":"y","nativeSrc":"34268:1:28","nodeType":"YulIdentifier","src":"34268:1:28"}],"functionName":{"name":"mul","nativeSrc":"34261:3:28","nodeType":"YulIdentifier","src":"34261:3:28"},"nativeSrc":"34261:9:28","nodeType":"YulFunctionCall","src":"34261:9:28"},"variableNames":[{"name":"product","nativeSrc":"34250:7:28","nodeType":"YulIdentifier","src":"34250:7:28"}]},{"body":{"nativeSrc":"34328:22:28","nodeType":"YulBlock","src":"34328:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"34330:16:28","nodeType":"YulIdentifier","src":"34330:16:28"},"nativeSrc":"34330:18:28","nodeType":"YulFunctionCall","src":"34330:18:28"},"nativeSrc":"34330:18:28","nodeType":"YulExpressionStatement","src":"34330:18:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"34299:1:28","nodeType":"YulIdentifier","src":"34299:1:28"}],"functionName":{"name":"iszero","nativeSrc":"34292:6:28","nodeType":"YulIdentifier","src":"34292:6:28"},"nativeSrc":"34292:9:28","nodeType":"YulFunctionCall","src":"34292:9:28"},{"arguments":[{"name":"y","nativeSrc":"34306:1:28","nodeType":"YulIdentifier","src":"34306:1:28"},{"arguments":[{"name":"product","nativeSrc":"34313:7:28","nodeType":"YulIdentifier","src":"34313:7:28"},{"name":"x","nativeSrc":"34322:1:28","nodeType":"YulIdentifier","src":"34322:1:28"}],"functionName":{"name":"div","nativeSrc":"34309:3:28","nodeType":"YulIdentifier","src":"34309:3:28"},"nativeSrc":"34309:15:28","nodeType":"YulFunctionCall","src":"34309:15:28"}],"functionName":{"name":"eq","nativeSrc":"34303:2:28","nodeType":"YulIdentifier","src":"34303:2:28"},"nativeSrc":"34303:22:28","nodeType":"YulFunctionCall","src":"34303:22:28"}],"functionName":{"name":"or","nativeSrc":"34289:2:28","nodeType":"YulIdentifier","src":"34289:2:28"},"nativeSrc":"34289:37:28","nodeType":"YulFunctionCall","src":"34289:37:28"}],"functionName":{"name":"iszero","nativeSrc":"34282:6:28","nodeType":"YulIdentifier","src":"34282:6:28"},"nativeSrc":"34282:45:28","nodeType":"YulFunctionCall","src":"34282:45:28"},"nativeSrc":"34279:71:28","nodeType":"YulIf","src":"34279:71:28"}]},"name":"checked_mul_t_uint256","nativeSrc":"34188:168:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"34219:1:28","nodeType":"YulTypedName","src":"34219:1:28","type":""},{"name":"y","nativeSrc":"34222:1:28","nodeType":"YulTypedName","src":"34222:1:28","type":""}],"returnVariables":[{"name":"product","nativeSrc":"34228:7:28","nodeType":"YulTypedName","src":"34228:7:28","type":""}],"src":"34188:168:28"},{"body":{"nativeSrc":"34407:228:28","nodeType":"YulBlock","src":"34407:228:28","statements":[{"body":{"nativeSrc":"34438:168:28","nodeType":"YulBlock","src":"34438:168:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"34459:1:28","nodeType":"YulLiteral","src":"34459:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"34462:77:28","nodeType":"YulLiteral","src":"34462:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"34452:6:28","nodeType":"YulIdentifier","src":"34452:6:28"},"nativeSrc":"34452:88:28","nodeType":"YulFunctionCall","src":"34452:88:28"},"nativeSrc":"34452:88:28","nodeType":"YulExpressionStatement","src":"34452:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"34560:1:28","nodeType":"YulLiteral","src":"34560:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"34563:4:28","nodeType":"YulLiteral","src":"34563:4:28","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"34553:6:28","nodeType":"YulIdentifier","src":"34553:6:28"},"nativeSrc":"34553:15:28","nodeType":"YulFunctionCall","src":"34553:15:28"},"nativeSrc":"34553:15:28","nodeType":"YulExpressionStatement","src":"34553:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"34588:1:28","nodeType":"YulLiteral","src":"34588:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"34591:4:28","nodeType":"YulLiteral","src":"34591:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"34581:6:28","nodeType":"YulIdentifier","src":"34581:6:28"},"nativeSrc":"34581:15:28","nodeType":"YulFunctionCall","src":"34581:15:28"},"nativeSrc":"34581:15:28","nodeType":"YulExpressionStatement","src":"34581:15:28"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"34427:1:28","nodeType":"YulIdentifier","src":"34427:1:28"}],"functionName":{"name":"iszero","nativeSrc":"34420:6:28","nodeType":"YulIdentifier","src":"34420:6:28"},"nativeSrc":"34420:9:28","nodeType":"YulFunctionCall","src":"34420:9:28"},"nativeSrc":"34417:189:28","nodeType":"YulIf","src":"34417:189:28"},{"nativeSrc":"34615:14:28","nodeType":"YulAssignment","src":"34615:14:28","value":{"arguments":[{"name":"x","nativeSrc":"34624:1:28","nodeType":"YulIdentifier","src":"34624:1:28"},{"name":"y","nativeSrc":"34627:1:28","nodeType":"YulIdentifier","src":"34627:1:28"}],"functionName":{"name":"div","nativeSrc":"34620:3:28","nodeType":"YulIdentifier","src":"34620:3:28"},"nativeSrc":"34620:9:28","nodeType":"YulFunctionCall","src":"34620:9:28"},"variableNames":[{"name":"r","nativeSrc":"34615:1:28","nodeType":"YulIdentifier","src":"34615:1:28"}]}]},"name":"checked_div_t_uint256","nativeSrc":"34361:274:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"34392:1:28","nodeType":"YulTypedName","src":"34392:1:28","type":""},{"name":"y","nativeSrc":"34395:1:28","nodeType":"YulTypedName","src":"34395:1:28","type":""}],"returnVariables":[{"name":"r","nativeSrc":"34401:1:28","nodeType":"YulTypedName","src":"34401:1:28","type":""}],"src":"34361:274:28"},{"body":{"nativeSrc":"34853:299:28","nodeType":"YulBlock","src":"34853:299:28","statements":[{"nativeSrc":"34863:27:28","nodeType":"YulAssignment","src":"34863:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"34875:9:28","nodeType":"YulIdentifier","src":"34875:9:28"},{"kind":"number","nativeSrc":"34886:3:28","nodeType":"YulLiteral","src":"34886:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"34871:3:28","nodeType":"YulIdentifier","src":"34871:3:28"},"nativeSrc":"34871:19:28","nodeType":"YulFunctionCall","src":"34871:19:28"},"variableNames":[{"name":"tail","nativeSrc":"34863:4:28","nodeType":"YulIdentifier","src":"34863:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"34906:9:28","nodeType":"YulIdentifier","src":"34906:9:28"},{"name":"value0","nativeSrc":"34917:6:28","nodeType":"YulIdentifier","src":"34917:6:28"}],"functionName":{"name":"mstore","nativeSrc":"34899:6:28","nodeType":"YulIdentifier","src":"34899:6:28"},"nativeSrc":"34899:25:28","nodeType":"YulFunctionCall","src":"34899:25:28"},"nativeSrc":"34899:25:28","nodeType":"YulExpressionStatement","src":"34899:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"34944:9:28","nodeType":"YulIdentifier","src":"34944:9:28"},{"kind":"number","nativeSrc":"34955:2:28","nodeType":"YulLiteral","src":"34955:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"34940:3:28","nodeType":"YulIdentifier","src":"34940:3:28"},"nativeSrc":"34940:18:28","nodeType":"YulFunctionCall","src":"34940:18:28"},{"name":"value1","nativeSrc":"34960:6:28","nodeType":"YulIdentifier","src":"34960:6:28"}],"functionName":{"name":"mstore","nativeSrc":"34933:6:28","nodeType":"YulIdentifier","src":"34933:6:28"},"nativeSrc":"34933:34:28","nodeType":"YulFunctionCall","src":"34933:34:28"},"nativeSrc":"34933:34:28","nodeType":"YulExpressionStatement","src":"34933:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"34987:9:28","nodeType":"YulIdentifier","src":"34987:9:28"},{"kind":"number","nativeSrc":"34998:2:28","nodeType":"YulLiteral","src":"34998:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"34983:3:28","nodeType":"YulIdentifier","src":"34983:3:28"},"nativeSrc":"34983:18:28","nodeType":"YulFunctionCall","src":"34983:18:28"},{"name":"value2","nativeSrc":"35003:6:28","nodeType":"YulIdentifier","src":"35003:6:28"}],"functionName":{"name":"mstore","nativeSrc":"34976:6:28","nodeType":"YulIdentifier","src":"34976:6:28"},"nativeSrc":"34976:34:28","nodeType":"YulFunctionCall","src":"34976:34:28"},"nativeSrc":"34976:34:28","nodeType":"YulExpressionStatement","src":"34976:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"35030:9:28","nodeType":"YulIdentifier","src":"35030:9:28"},{"kind":"number","nativeSrc":"35041:2:28","nodeType":"YulLiteral","src":"35041:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"35026:3:28","nodeType":"YulIdentifier","src":"35026:3:28"},"nativeSrc":"35026:18:28","nodeType":"YulFunctionCall","src":"35026:18:28"},{"name":"value3","nativeSrc":"35046:6:28","nodeType":"YulIdentifier","src":"35046:6:28"}],"functionName":{"name":"mstore","nativeSrc":"35019:6:28","nodeType":"YulIdentifier","src":"35019:6:28"},"nativeSrc":"35019:34:28","nodeType":"YulFunctionCall","src":"35019:34:28"},"nativeSrc":"35019:34:28","nodeType":"YulExpressionStatement","src":"35019:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"35073:9:28","nodeType":"YulIdentifier","src":"35073:9:28"},{"kind":"number","nativeSrc":"35084:3:28","nodeType":"YulLiteral","src":"35084:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"35069:3:28","nodeType":"YulIdentifier","src":"35069:3:28"},"nativeSrc":"35069:19:28","nodeType":"YulFunctionCall","src":"35069:19:28"},{"arguments":[{"name":"value4","nativeSrc":"35094:6:28","nodeType":"YulIdentifier","src":"35094:6:28"},{"kind":"number","nativeSrc":"35102:42:28","nodeType":"YulLiteral","src":"35102:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"35090:3:28","nodeType":"YulIdentifier","src":"35090:3:28"},"nativeSrc":"35090:55:28","nodeType":"YulFunctionCall","src":"35090:55:28"}],"functionName":{"name":"mstore","nativeSrc":"35062:6:28","nodeType":"YulIdentifier","src":"35062:6:28"},"nativeSrc":"35062:84:28","nodeType":"YulFunctionCall","src":"35062:84:28"},"nativeSrc":"35062:84:28","nodeType":"YulExpressionStatement","src":"35062:84:28"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nativeSrc":"34640:512:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"34790:9:28","nodeType":"YulTypedName","src":"34790:9:28","type":""},{"name":"value4","nativeSrc":"34801:6:28","nodeType":"YulTypedName","src":"34801:6:28","type":""},{"name":"value3","nativeSrc":"34809:6:28","nodeType":"YulTypedName","src":"34809:6:28","type":""},{"name":"value2","nativeSrc":"34817:6:28","nodeType":"YulTypedName","src":"34817:6:28","type":""},{"name":"value1","nativeSrc":"34825:6:28","nodeType":"YulTypedName","src":"34825:6:28","type":""},{"name":"value0","nativeSrc":"34833:6:28","nodeType":"YulTypedName","src":"34833:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"34844:4:28","nodeType":"YulTypedName","src":"34844:4:28","type":""}],"src":"34640:512:28"},{"body":{"nativeSrc":"35331:235:28","nodeType":"YulBlock","src":"35331:235:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"35348:9:28","nodeType":"YulIdentifier","src":"35348:9:28"},{"kind":"number","nativeSrc":"35359:2:28","nodeType":"YulLiteral","src":"35359:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"35341:6:28","nodeType":"YulIdentifier","src":"35341:6:28"},"nativeSrc":"35341:21:28","nodeType":"YulFunctionCall","src":"35341:21:28"},"nativeSrc":"35341:21:28","nodeType":"YulExpressionStatement","src":"35341:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"35382:9:28","nodeType":"YulIdentifier","src":"35382:9:28"},{"kind":"number","nativeSrc":"35393:2:28","nodeType":"YulLiteral","src":"35393:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"35378:3:28","nodeType":"YulIdentifier","src":"35378:3:28"},"nativeSrc":"35378:18:28","nodeType":"YulFunctionCall","src":"35378:18:28"},{"kind":"number","nativeSrc":"35398:2:28","nodeType":"YulLiteral","src":"35398:2:28","type":"","value":"45"}],"functionName":{"name":"mstore","nativeSrc":"35371:6:28","nodeType":"YulIdentifier","src":"35371:6:28"},"nativeSrc":"35371:30:28","nodeType":"YulFunctionCall","src":"35371:30:28"},"nativeSrc":"35371:30:28","nodeType":"YulExpressionStatement","src":"35371:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"35421:9:28","nodeType":"YulIdentifier","src":"35421:9:28"},{"kind":"number","nativeSrc":"35432:2:28","nodeType":"YulLiteral","src":"35432:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"35417:3:28","nodeType":"YulIdentifier","src":"35417:3:28"},"nativeSrc":"35417:18:28","nodeType":"YulFunctionCall","src":"35417:18:28"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nativeSrc":"35437:34:28","nodeType":"YulLiteral","src":"35437:34:28","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nativeSrc":"35410:6:28","nodeType":"YulIdentifier","src":"35410:6:28"},"nativeSrc":"35410:62:28","nodeType":"YulFunctionCall","src":"35410:62:28"},"nativeSrc":"35410:62:28","nodeType":"YulExpressionStatement","src":"35410:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"35492:9:28","nodeType":"YulIdentifier","src":"35492:9:28"},{"kind":"number","nativeSrc":"35503:2:28","nodeType":"YulLiteral","src":"35503:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"35488:3:28","nodeType":"YulIdentifier","src":"35488:3:28"},"nativeSrc":"35488:18:28","nodeType":"YulFunctionCall","src":"35488:18:28"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nativeSrc":"35508:15:28","nodeType":"YulLiteral","src":"35508:15:28","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nativeSrc":"35481:6:28","nodeType":"YulIdentifier","src":"35481:6:28"},"nativeSrc":"35481:43:28","nodeType":"YulFunctionCall","src":"35481:43:28"},"nativeSrc":"35481:43:28","nodeType":"YulExpressionStatement","src":"35481:43:28"},{"nativeSrc":"35533:27:28","nodeType":"YulAssignment","src":"35533:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"35545:9:28","nodeType":"YulIdentifier","src":"35545:9:28"},{"kind":"number","nativeSrc":"35556:3:28","nodeType":"YulLiteral","src":"35556:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"35541:3:28","nodeType":"YulIdentifier","src":"35541:3:28"},"nativeSrc":"35541:19:28","nodeType":"YulFunctionCall","src":"35541:19:28"},"variableNames":[{"name":"tail","nativeSrc":"35533:4:28","nodeType":"YulIdentifier","src":"35533:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"35157:409:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"35308:9:28","nodeType":"YulTypedName","src":"35308:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"35322:4:28","nodeType":"YulTypedName","src":"35322:4:28","type":""}],"src":"35157:409:28"},{"body":{"nativeSrc":"35745:170:28","nodeType":"YulBlock","src":"35745:170:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"35762:9:28","nodeType":"YulIdentifier","src":"35762:9:28"},{"kind":"number","nativeSrc":"35773:2:28","nodeType":"YulLiteral","src":"35773:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"35755:6:28","nodeType":"YulIdentifier","src":"35755:6:28"},"nativeSrc":"35755:21:28","nodeType":"YulFunctionCall","src":"35755:21:28"},"nativeSrc":"35755:21:28","nodeType":"YulExpressionStatement","src":"35755:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"35796:9:28","nodeType":"YulIdentifier","src":"35796:9:28"},{"kind":"number","nativeSrc":"35807:2:28","nodeType":"YulLiteral","src":"35807:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"35792:3:28","nodeType":"YulIdentifier","src":"35792:3:28"},"nativeSrc":"35792:18:28","nodeType":"YulFunctionCall","src":"35792:18:28"},{"kind":"number","nativeSrc":"35812:2:28","nodeType":"YulLiteral","src":"35812:2:28","type":"","value":"20"}],"functionName":{"name":"mstore","nativeSrc":"35785:6:28","nodeType":"YulIdentifier","src":"35785:6:28"},"nativeSrc":"35785:30:28","nodeType":"YulFunctionCall","src":"35785:30:28"},"nativeSrc":"35785:30:28","nodeType":"YulExpressionStatement","src":"35785:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"35835:9:28","nodeType":"YulIdentifier","src":"35835:9:28"},{"kind":"number","nativeSrc":"35846:2:28","nodeType":"YulLiteral","src":"35846:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"35831:3:28","nodeType":"YulIdentifier","src":"35831:3:28"},"nativeSrc":"35831:18:28","nodeType":"YulFunctionCall","src":"35831:18:28"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nativeSrc":"35851:22:28","nodeType":"YulLiteral","src":"35851:22:28","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nativeSrc":"35824:6:28","nodeType":"YulIdentifier","src":"35824:6:28"},"nativeSrc":"35824:50:28","nodeType":"YulFunctionCall","src":"35824:50:28"},"nativeSrc":"35824:50:28","nodeType":"YulExpressionStatement","src":"35824:50:28"},{"nativeSrc":"35883:26:28","nodeType":"YulAssignment","src":"35883:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"35895:9:28","nodeType":"YulIdentifier","src":"35895:9:28"},{"kind":"number","nativeSrc":"35906:2:28","nodeType":"YulLiteral","src":"35906:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"35891:3:28","nodeType":"YulIdentifier","src":"35891:3:28"},"nativeSrc":"35891:18:28","nodeType":"YulFunctionCall","src":"35891:18:28"},"variableNames":[{"name":"tail","nativeSrc":"35883:4:28","nodeType":"YulIdentifier","src":"35883:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"35571:344:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"35722:9:28","nodeType":"YulTypedName","src":"35722:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"35736:4:28","nodeType":"YulTypedName","src":"35736:4:28","type":""}],"src":"35571:344:28"},{"body":{"nativeSrc":"36094:232:28","nodeType":"YulBlock","src":"36094:232:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"36111:9:28","nodeType":"YulIdentifier","src":"36111:9:28"},{"kind":"number","nativeSrc":"36122:2:28","nodeType":"YulLiteral","src":"36122:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"36104:6:28","nodeType":"YulIdentifier","src":"36104:6:28"},"nativeSrc":"36104:21:28","nodeType":"YulFunctionCall","src":"36104:21:28"},"nativeSrc":"36104:21:28","nodeType":"YulExpressionStatement","src":"36104:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"36145:9:28","nodeType":"YulIdentifier","src":"36145:9:28"},{"kind":"number","nativeSrc":"36156:2:28","nodeType":"YulLiteral","src":"36156:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"36141:3:28","nodeType":"YulIdentifier","src":"36141:3:28"},"nativeSrc":"36141:18:28","nodeType":"YulFunctionCall","src":"36141:18:28"},{"kind":"number","nativeSrc":"36161:2:28","nodeType":"YulLiteral","src":"36161:2:28","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"36134:6:28","nodeType":"YulIdentifier","src":"36134:6:28"},"nativeSrc":"36134:30:28","nodeType":"YulFunctionCall","src":"36134:30:28"},"nativeSrc":"36134:30:28","nodeType":"YulExpressionStatement","src":"36134:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"36184:9:28","nodeType":"YulIdentifier","src":"36184:9:28"},{"kind":"number","nativeSrc":"36195:2:28","nodeType":"YulLiteral","src":"36195:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"36180:3:28","nodeType":"YulIdentifier","src":"36180:3:28"},"nativeSrc":"36180:18:28","nodeType":"YulFunctionCall","src":"36180:18:28"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"36200:34:28","nodeType":"YulLiteral","src":"36200:34:28","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"36173:6:28","nodeType":"YulIdentifier","src":"36173:6:28"},"nativeSrc":"36173:62:28","nodeType":"YulFunctionCall","src":"36173:62:28"},"nativeSrc":"36173:62:28","nodeType":"YulExpressionStatement","src":"36173:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"36255:9:28","nodeType":"YulIdentifier","src":"36255:9:28"},{"kind":"number","nativeSrc":"36266:2:28","nodeType":"YulLiteral","src":"36266:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"36251:3:28","nodeType":"YulIdentifier","src":"36251:3:28"},"nativeSrc":"36251:18:28","nodeType":"YulFunctionCall","src":"36251:18:28"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"36271:12:28","nodeType":"YulLiteral","src":"36271:12:28","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"36244:6:28","nodeType":"YulIdentifier","src":"36244:6:28"},"nativeSrc":"36244:40:28","nodeType":"YulFunctionCall","src":"36244:40:28"},"nativeSrc":"36244:40:28","nodeType":"YulExpressionStatement","src":"36244:40:28"},{"nativeSrc":"36293:27:28","nodeType":"YulAssignment","src":"36293:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"36305:9:28","nodeType":"YulIdentifier","src":"36305:9:28"},{"kind":"number","nativeSrc":"36316:3:28","nodeType":"YulLiteral","src":"36316:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"36301:3:28","nodeType":"YulIdentifier","src":"36301:3:28"},"nativeSrc":"36301:19:28","nodeType":"YulFunctionCall","src":"36301:19:28"},"variableNames":[{"name":"tail","nativeSrc":"36293:4:28","nodeType":"YulIdentifier","src":"36293:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"35920:406:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"36071:9:28","nodeType":"YulTypedName","src":"36071:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"36085:4:28","nodeType":"YulTypedName","src":"36085:4:28","type":""}],"src":"35920:406:28"},{"body":{"nativeSrc":"36512:217:28","nodeType":"YulBlock","src":"36512:217:28","statements":[{"nativeSrc":"36522:27:28","nodeType":"YulAssignment","src":"36522:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"36534:9:28","nodeType":"YulIdentifier","src":"36534:9:28"},{"kind":"number","nativeSrc":"36545:3:28","nodeType":"YulLiteral","src":"36545:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"36530:3:28","nodeType":"YulIdentifier","src":"36530:3:28"},"nativeSrc":"36530:19:28","nodeType":"YulFunctionCall","src":"36530:19:28"},"variableNames":[{"name":"tail","nativeSrc":"36522:4:28","nodeType":"YulIdentifier","src":"36522:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"36565:9:28","nodeType":"YulIdentifier","src":"36565:9:28"},{"name":"value0","nativeSrc":"36576:6:28","nodeType":"YulIdentifier","src":"36576:6:28"}],"functionName":{"name":"mstore","nativeSrc":"36558:6:28","nodeType":"YulIdentifier","src":"36558:6:28"},"nativeSrc":"36558:25:28","nodeType":"YulFunctionCall","src":"36558:25:28"},"nativeSrc":"36558:25:28","nodeType":"YulExpressionStatement","src":"36558:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"36603:9:28","nodeType":"YulIdentifier","src":"36603:9:28"},{"kind":"number","nativeSrc":"36614:2:28","nodeType":"YulLiteral","src":"36614:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"36599:3:28","nodeType":"YulIdentifier","src":"36599:3:28"},"nativeSrc":"36599:18:28","nodeType":"YulFunctionCall","src":"36599:18:28"},{"arguments":[{"name":"value1","nativeSrc":"36623:6:28","nodeType":"YulIdentifier","src":"36623:6:28"},{"kind":"number","nativeSrc":"36631:4:28","nodeType":"YulLiteral","src":"36631:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"36619:3:28","nodeType":"YulIdentifier","src":"36619:3:28"},"nativeSrc":"36619:17:28","nodeType":"YulFunctionCall","src":"36619:17:28"}],"functionName":{"name":"mstore","nativeSrc":"36592:6:28","nodeType":"YulIdentifier","src":"36592:6:28"},"nativeSrc":"36592:45:28","nodeType":"YulFunctionCall","src":"36592:45:28"},"nativeSrc":"36592:45:28","nodeType":"YulExpressionStatement","src":"36592:45:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"36657:9:28","nodeType":"YulIdentifier","src":"36657:9:28"},{"kind":"number","nativeSrc":"36668:2:28","nodeType":"YulLiteral","src":"36668:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"36653:3:28","nodeType":"YulIdentifier","src":"36653:3:28"},"nativeSrc":"36653:18:28","nodeType":"YulFunctionCall","src":"36653:18:28"},{"name":"value2","nativeSrc":"36673:6:28","nodeType":"YulIdentifier","src":"36673:6:28"}],"functionName":{"name":"mstore","nativeSrc":"36646:6:28","nodeType":"YulIdentifier","src":"36646:6:28"},"nativeSrc":"36646:34:28","nodeType":"YulFunctionCall","src":"36646:34:28"},"nativeSrc":"36646:34:28","nodeType":"YulExpressionStatement","src":"36646:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"36700:9:28","nodeType":"YulIdentifier","src":"36700:9:28"},{"kind":"number","nativeSrc":"36711:2:28","nodeType":"YulLiteral","src":"36711:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"36696:3:28","nodeType":"YulIdentifier","src":"36696:3:28"},"nativeSrc":"36696:18:28","nodeType":"YulFunctionCall","src":"36696:18:28"},{"name":"value3","nativeSrc":"36716:6:28","nodeType":"YulIdentifier","src":"36716:6:28"}],"functionName":{"name":"mstore","nativeSrc":"36689:6:28","nodeType":"YulIdentifier","src":"36689:6:28"},"nativeSrc":"36689:34:28","nodeType":"YulFunctionCall","src":"36689:34:28"},"nativeSrc":"36689:34:28","nodeType":"YulExpressionStatement","src":"36689:34:28"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"36331:398:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"36457:9:28","nodeType":"YulTypedName","src":"36457:9:28","type":""},{"name":"value3","nativeSrc":"36468:6:28","nodeType":"YulTypedName","src":"36468:6:28","type":""},{"name":"value2","nativeSrc":"36476:6:28","nodeType":"YulTypedName","src":"36476:6:28","type":""},{"name":"value1","nativeSrc":"36484:6:28","nodeType":"YulTypedName","src":"36484:6:28","type":""},{"name":"value0","nativeSrc":"36492:6:28","nodeType":"YulTypedName","src":"36492:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"36503:4:28","nodeType":"YulTypedName","src":"36503:4:28","type":""}],"src":"36331:398:28"},{"body":{"nativeSrc":"36766:152:28","nodeType":"YulBlock","src":"36766:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"36783:1:28","nodeType":"YulLiteral","src":"36783:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"36786:77:28","nodeType":"YulLiteral","src":"36786:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"36776:6:28","nodeType":"YulIdentifier","src":"36776:6:28"},"nativeSrc":"36776:88:28","nodeType":"YulFunctionCall","src":"36776:88:28"},"nativeSrc":"36776:88:28","nodeType":"YulExpressionStatement","src":"36776:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"36880:1:28","nodeType":"YulLiteral","src":"36880:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"36883:4:28","nodeType":"YulLiteral","src":"36883:4:28","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"36873:6:28","nodeType":"YulIdentifier","src":"36873:6:28"},"nativeSrc":"36873:15:28","nodeType":"YulFunctionCall","src":"36873:15:28"},"nativeSrc":"36873:15:28","nodeType":"YulExpressionStatement","src":"36873:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"36904:1:28","nodeType":"YulLiteral","src":"36904:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"36907:4:28","nodeType":"YulLiteral","src":"36907:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"36897:6:28","nodeType":"YulIdentifier","src":"36897:6:28"},"nativeSrc":"36897:15:28","nodeType":"YulFunctionCall","src":"36897:15:28"},"nativeSrc":"36897:15:28","nodeType":"YulExpressionStatement","src":"36897:15:28"}]},"name":"panic_error_0x21","nativeSrc":"36734:184:28","nodeType":"YulFunctionDefinition","src":"36734:184:28"},{"body":{"nativeSrc":"37097:174:28","nodeType":"YulBlock","src":"37097:174:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"37114:9:28","nodeType":"YulIdentifier","src":"37114:9:28"},{"kind":"number","nativeSrc":"37125:2:28","nodeType":"YulLiteral","src":"37125:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"37107:6:28","nodeType":"YulIdentifier","src":"37107:6:28"},"nativeSrc":"37107:21:28","nodeType":"YulFunctionCall","src":"37107:21:28"},"nativeSrc":"37107:21:28","nodeType":"YulExpressionStatement","src":"37107:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"37148:9:28","nodeType":"YulIdentifier","src":"37148:9:28"},{"kind":"number","nativeSrc":"37159:2:28","nodeType":"YulLiteral","src":"37159:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"37144:3:28","nodeType":"YulIdentifier","src":"37144:3:28"},"nativeSrc":"37144:18:28","nodeType":"YulFunctionCall","src":"37144:18:28"},{"kind":"number","nativeSrc":"37164:2:28","nodeType":"YulLiteral","src":"37164:2:28","type":"","value":"24"}],"functionName":{"name":"mstore","nativeSrc":"37137:6:28","nodeType":"YulIdentifier","src":"37137:6:28"},"nativeSrc":"37137:30:28","nodeType":"YulFunctionCall","src":"37137:30:28"},"nativeSrc":"37137:30:28","nodeType":"YulExpressionStatement","src":"37137:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"37187:9:28","nodeType":"YulIdentifier","src":"37187:9:28"},{"kind":"number","nativeSrc":"37198:2:28","nodeType":"YulLiteral","src":"37198:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"37183:3:28","nodeType":"YulIdentifier","src":"37183:3:28"},"nativeSrc":"37183:18:28","nodeType":"YulFunctionCall","src":"37183:18:28"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nativeSrc":"37203:26:28","nodeType":"YulLiteral","src":"37203:26:28","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nativeSrc":"37176:6:28","nodeType":"YulIdentifier","src":"37176:6:28"},"nativeSrc":"37176:54:28","nodeType":"YulFunctionCall","src":"37176:54:28"},"nativeSrc":"37176:54:28","nodeType":"YulExpressionStatement","src":"37176:54:28"},{"nativeSrc":"37239:26:28","nodeType":"YulAssignment","src":"37239:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"37251:9:28","nodeType":"YulIdentifier","src":"37251:9:28"},{"kind":"number","nativeSrc":"37262:2:28","nodeType":"YulLiteral","src":"37262:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"37247:3:28","nodeType":"YulIdentifier","src":"37247:3:28"},"nativeSrc":"37247:18:28","nodeType":"YulFunctionCall","src":"37247:18:28"},"variableNames":[{"name":"tail","nativeSrc":"37239:4:28","nodeType":"YulIdentifier","src":"37239:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"36923:348:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"37074:9:28","nodeType":"YulTypedName","src":"37074:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"37088:4:28","nodeType":"YulTypedName","src":"37088:4:28","type":""}],"src":"36923:348:28"},{"body":{"nativeSrc":"37450:181:28","nodeType":"YulBlock","src":"37450:181:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"37467:9:28","nodeType":"YulIdentifier","src":"37467:9:28"},{"kind":"number","nativeSrc":"37478:2:28","nodeType":"YulLiteral","src":"37478:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"37460:6:28","nodeType":"YulIdentifier","src":"37460:6:28"},"nativeSrc":"37460:21:28","nodeType":"YulFunctionCall","src":"37460:21:28"},"nativeSrc":"37460:21:28","nodeType":"YulExpressionStatement","src":"37460:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"37501:9:28","nodeType":"YulIdentifier","src":"37501:9:28"},{"kind":"number","nativeSrc":"37512:2:28","nodeType":"YulLiteral","src":"37512:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"37497:3:28","nodeType":"YulIdentifier","src":"37497:3:28"},"nativeSrc":"37497:18:28","nodeType":"YulFunctionCall","src":"37497:18:28"},{"kind":"number","nativeSrc":"37517:2:28","nodeType":"YulLiteral","src":"37517:2:28","type":"","value":"31"}],"functionName":{"name":"mstore","nativeSrc":"37490:6:28","nodeType":"YulIdentifier","src":"37490:6:28"},"nativeSrc":"37490:30:28","nodeType":"YulFunctionCall","src":"37490:30:28"},"nativeSrc":"37490:30:28","nodeType":"YulExpressionStatement","src":"37490:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"37540:9:28","nodeType":"YulIdentifier","src":"37540:9:28"},{"kind":"number","nativeSrc":"37551:2:28","nodeType":"YulLiteral","src":"37551:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"37536:3:28","nodeType":"YulIdentifier","src":"37536:3:28"},"nativeSrc":"37536:18:28","nodeType":"YulFunctionCall","src":"37536:18:28"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nativeSrc":"37556:33:28","nodeType":"YulLiteral","src":"37556:33:28","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nativeSrc":"37529:6:28","nodeType":"YulIdentifier","src":"37529:6:28"},"nativeSrc":"37529:61:28","nodeType":"YulFunctionCall","src":"37529:61:28"},"nativeSrc":"37529:61:28","nodeType":"YulExpressionStatement","src":"37529:61:28"},{"nativeSrc":"37599:26:28","nodeType":"YulAssignment","src":"37599:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"37611:9:28","nodeType":"YulIdentifier","src":"37611:9:28"},{"kind":"number","nativeSrc":"37622:2:28","nodeType":"YulLiteral","src":"37622:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"37607:3:28","nodeType":"YulIdentifier","src":"37607:3:28"},"nativeSrc":"37607:18:28","nodeType":"YulFunctionCall","src":"37607:18:28"},"variableNames":[{"name":"tail","nativeSrc":"37599:4:28","nodeType":"YulIdentifier","src":"37599:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"37276:355:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"37427:9:28","nodeType":"YulTypedName","src":"37427:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"37441:4:28","nodeType":"YulTypedName","src":"37441:4:28","type":""}],"src":"37276:355:28"},{"body":{"nativeSrc":"37810:224:28","nodeType":"YulBlock","src":"37810:224:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"37827:9:28","nodeType":"YulIdentifier","src":"37827:9:28"},{"kind":"number","nativeSrc":"37838:2:28","nodeType":"YulLiteral","src":"37838:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"37820:6:28","nodeType":"YulIdentifier","src":"37820:6:28"},"nativeSrc":"37820:21:28","nodeType":"YulFunctionCall","src":"37820:21:28"},"nativeSrc":"37820:21:28","nodeType":"YulExpressionStatement","src":"37820:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"37861:9:28","nodeType":"YulIdentifier","src":"37861:9:28"},{"kind":"number","nativeSrc":"37872:2:28","nodeType":"YulLiteral","src":"37872:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"37857:3:28","nodeType":"YulIdentifier","src":"37857:3:28"},"nativeSrc":"37857:18:28","nodeType":"YulFunctionCall","src":"37857:18:28"},{"kind":"number","nativeSrc":"37877:2:28","nodeType":"YulLiteral","src":"37877:2:28","type":"","value":"34"}],"functionName":{"name":"mstore","nativeSrc":"37850:6:28","nodeType":"YulIdentifier","src":"37850:6:28"},"nativeSrc":"37850:30:28","nodeType":"YulFunctionCall","src":"37850:30:28"},"nativeSrc":"37850:30:28","nodeType":"YulExpressionStatement","src":"37850:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"37900:9:28","nodeType":"YulIdentifier","src":"37900:9:28"},{"kind":"number","nativeSrc":"37911:2:28","nodeType":"YulLiteral","src":"37911:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"37896:3:28","nodeType":"YulIdentifier","src":"37896:3:28"},"nativeSrc":"37896:18:28","nodeType":"YulFunctionCall","src":"37896:18:28"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nativeSrc":"37916:34:28","nodeType":"YulLiteral","src":"37916:34:28","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nativeSrc":"37889:6:28","nodeType":"YulIdentifier","src":"37889:6:28"},"nativeSrc":"37889:62:28","nodeType":"YulFunctionCall","src":"37889:62:28"},"nativeSrc":"37889:62:28","nodeType":"YulExpressionStatement","src":"37889:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"37971:9:28","nodeType":"YulIdentifier","src":"37971:9:28"},{"kind":"number","nativeSrc":"37982:2:28","nodeType":"YulLiteral","src":"37982:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"37967:3:28","nodeType":"YulIdentifier","src":"37967:3:28"},"nativeSrc":"37967:18:28","nodeType":"YulFunctionCall","src":"37967:18:28"},{"hexValue":"7565","kind":"string","nativeSrc":"37987:4:28","nodeType":"YulLiteral","src":"37987:4:28","type":"","value":"ue"}],"functionName":{"name":"mstore","nativeSrc":"37960:6:28","nodeType":"YulIdentifier","src":"37960:6:28"},"nativeSrc":"37960:32:28","nodeType":"YulFunctionCall","src":"37960:32:28"},"nativeSrc":"37960:32:28","nodeType":"YulExpressionStatement","src":"37960:32:28"},{"nativeSrc":"38001:27:28","nodeType":"YulAssignment","src":"38001:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"38013:9:28","nodeType":"YulIdentifier","src":"38013:9:28"},{"kind":"number","nativeSrc":"38024:3:28","nodeType":"YulLiteral","src":"38024:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"38009:3:28","nodeType":"YulIdentifier","src":"38009:3:28"},"nativeSrc":"38009:19:28","nodeType":"YulFunctionCall","src":"38009:19:28"},"variableNames":[{"name":"tail","nativeSrc":"38001:4:28","nodeType":"YulIdentifier","src":"38001:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"37636:398:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"37787:9:28","nodeType":"YulTypedName","src":"37787:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"37801:4:28","nodeType":"YulTypedName","src":"37801:4:28","type":""}],"src":"37636:398:28"},{"body":{"nativeSrc":"38176:150:28","nodeType":"YulBlock","src":"38176:150:28","statements":[{"nativeSrc":"38186:27:28","nodeType":"YulVariableDeclaration","src":"38186:27:28","value":{"arguments":[{"name":"value0","nativeSrc":"38206:6:28","nodeType":"YulIdentifier","src":"38206:6:28"}],"functionName":{"name":"mload","nativeSrc":"38200:5:28","nodeType":"YulIdentifier","src":"38200:5:28"},"nativeSrc":"38200:13:28","nodeType":"YulFunctionCall","src":"38200:13:28"},"variables":[{"name":"length","nativeSrc":"38190:6:28","nodeType":"YulTypedName","src":"38190:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"38261:6:28","nodeType":"YulIdentifier","src":"38261:6:28"},{"kind":"number","nativeSrc":"38269:4:28","nodeType":"YulLiteral","src":"38269:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"38257:3:28","nodeType":"YulIdentifier","src":"38257:3:28"},"nativeSrc":"38257:17:28","nodeType":"YulFunctionCall","src":"38257:17:28"},{"name":"pos","nativeSrc":"38276:3:28","nodeType":"YulIdentifier","src":"38276:3:28"},{"name":"length","nativeSrc":"38281:6:28","nodeType":"YulIdentifier","src":"38281:6:28"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"38222:34:28","nodeType":"YulIdentifier","src":"38222:34:28"},"nativeSrc":"38222:66:28","nodeType":"YulFunctionCall","src":"38222:66:28"},"nativeSrc":"38222:66:28","nodeType":"YulExpressionStatement","src":"38222:66:28"},{"nativeSrc":"38297:23:28","nodeType":"YulAssignment","src":"38297:23:28","value":{"arguments":[{"name":"pos","nativeSrc":"38308:3:28","nodeType":"YulIdentifier","src":"38308:3:28"},{"name":"length","nativeSrc":"38313:6:28","nodeType":"YulIdentifier","src":"38313:6:28"}],"functionName":{"name":"add","nativeSrc":"38304:3:28","nodeType":"YulIdentifier","src":"38304:3:28"},"nativeSrc":"38304:16:28","nodeType":"YulFunctionCall","src":"38304:16:28"},"variableNames":[{"name":"end","nativeSrc":"38297:3:28","nodeType":"YulIdentifier","src":"38297:3:28"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"38039:287:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"38152:3:28","nodeType":"YulTypedName","src":"38152:3:28","type":""},{"name":"value0","nativeSrc":"38157:6:28","nodeType":"YulTypedName","src":"38157:6:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"38168:3:28","nodeType":"YulTypedName","src":"38168:3:28","type":""}],"src":"38039:287:28"},{"body":{"nativeSrc":"38505:228:28","nodeType":"YulBlock","src":"38505:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"38522:9:28","nodeType":"YulIdentifier","src":"38522:9:28"},{"kind":"number","nativeSrc":"38533:2:28","nodeType":"YulLiteral","src":"38533:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"38515:6:28","nodeType":"YulIdentifier","src":"38515:6:28"},"nativeSrc":"38515:21:28","nodeType":"YulFunctionCall","src":"38515:21:28"},"nativeSrc":"38515:21:28","nodeType":"YulExpressionStatement","src":"38515:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"38556:9:28","nodeType":"YulIdentifier","src":"38556:9:28"},{"kind":"number","nativeSrc":"38567:2:28","nodeType":"YulLiteral","src":"38567:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"38552:3:28","nodeType":"YulIdentifier","src":"38552:3:28"},"nativeSrc":"38552:18:28","nodeType":"YulFunctionCall","src":"38552:18:28"},{"kind":"number","nativeSrc":"38572:2:28","nodeType":"YulLiteral","src":"38572:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"38545:6:28","nodeType":"YulIdentifier","src":"38545:6:28"},"nativeSrc":"38545:30:28","nodeType":"YulFunctionCall","src":"38545:30:28"},"nativeSrc":"38545:30:28","nodeType":"YulExpressionStatement","src":"38545:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"38595:9:28","nodeType":"YulIdentifier","src":"38595:9:28"},{"kind":"number","nativeSrc":"38606:2:28","nodeType":"YulLiteral","src":"38606:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"38591:3:28","nodeType":"YulIdentifier","src":"38591:3:28"},"nativeSrc":"38591:18:28","nodeType":"YulFunctionCall","src":"38591:18:28"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"38611:34:28","nodeType":"YulLiteral","src":"38611:34:28","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"38584:6:28","nodeType":"YulIdentifier","src":"38584:6:28"},"nativeSrc":"38584:62:28","nodeType":"YulFunctionCall","src":"38584:62:28"},"nativeSrc":"38584:62:28","nodeType":"YulExpressionStatement","src":"38584:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"38666:9:28","nodeType":"YulIdentifier","src":"38666:9:28"},{"kind":"number","nativeSrc":"38677:2:28","nodeType":"YulLiteral","src":"38677:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"38662:3:28","nodeType":"YulIdentifier","src":"38662:3:28"},"nativeSrc":"38662:18:28","nodeType":"YulFunctionCall","src":"38662:18:28"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"38682:8:28","nodeType":"YulLiteral","src":"38682:8:28","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"38655:6:28","nodeType":"YulIdentifier","src":"38655:6:28"},"nativeSrc":"38655:36:28","nodeType":"YulFunctionCall","src":"38655:36:28"},"nativeSrc":"38655:36:28","nodeType":"YulExpressionStatement","src":"38655:36:28"},{"nativeSrc":"38700:27:28","nodeType":"YulAssignment","src":"38700:27:28","value":{"arguments":[{"name":"headStart","nativeSrc":"38712:9:28","nodeType":"YulIdentifier","src":"38712:9:28"},{"kind":"number","nativeSrc":"38723:3:28","nodeType":"YulLiteral","src":"38723:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"38708:3:28","nodeType":"YulIdentifier","src":"38708:3:28"},"nativeSrc":"38708:19:28","nodeType":"YulFunctionCall","src":"38708:19:28"},"variableNames":[{"name":"tail","nativeSrc":"38700:4:28","nodeType":"YulIdentifier","src":"38700:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"38331:402:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"38482:9:28","nodeType":"YulTypedName","src":"38482:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"38496:4:28","nodeType":"YulTypedName","src":"38496:4:28","type":""}],"src":"38331:402:28"},{"body":{"nativeSrc":"38912:179:28","nodeType":"YulBlock","src":"38912:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"38929:9:28","nodeType":"YulIdentifier","src":"38929:9:28"},{"kind":"number","nativeSrc":"38940:2:28","nodeType":"YulLiteral","src":"38940:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"38922:6:28","nodeType":"YulIdentifier","src":"38922:6:28"},"nativeSrc":"38922:21:28","nodeType":"YulFunctionCall","src":"38922:21:28"},"nativeSrc":"38922:21:28","nodeType":"YulExpressionStatement","src":"38922:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"38963:9:28","nodeType":"YulIdentifier","src":"38963:9:28"},{"kind":"number","nativeSrc":"38974:2:28","nodeType":"YulLiteral","src":"38974:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"38959:3:28","nodeType":"YulIdentifier","src":"38959:3:28"},"nativeSrc":"38959:18:28","nodeType":"YulFunctionCall","src":"38959:18:28"},{"kind":"number","nativeSrc":"38979:2:28","nodeType":"YulLiteral","src":"38979:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"38952:6:28","nodeType":"YulIdentifier","src":"38952:6:28"},"nativeSrc":"38952:30:28","nodeType":"YulFunctionCall","src":"38952:30:28"},"nativeSrc":"38952:30:28","nodeType":"YulExpressionStatement","src":"38952:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"39002:9:28","nodeType":"YulIdentifier","src":"39002:9:28"},{"kind":"number","nativeSrc":"39013:2:28","nodeType":"YulLiteral","src":"39013:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"38998:3:28","nodeType":"YulIdentifier","src":"38998:3:28"},"nativeSrc":"38998:18:28","nodeType":"YulFunctionCall","src":"38998:18:28"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"39018:31:28","nodeType":"YulLiteral","src":"39018:31:28","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"38991:6:28","nodeType":"YulIdentifier","src":"38991:6:28"},"nativeSrc":"38991:59:28","nodeType":"YulFunctionCall","src":"38991:59:28"},"nativeSrc":"38991:59:28","nodeType":"YulExpressionStatement","src":"38991:59:28"},{"nativeSrc":"39059:26:28","nodeType":"YulAssignment","src":"39059:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"39071:9:28","nodeType":"YulIdentifier","src":"39071:9:28"},{"kind":"number","nativeSrc":"39082:2:28","nodeType":"YulLiteral","src":"39082:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"39067:3:28","nodeType":"YulIdentifier","src":"39067:3:28"},"nativeSrc":"39067:18:28","nodeType":"YulFunctionCall","src":"39067:18:28"},"variableNames":[{"name":"tail","nativeSrc":"39059:4:28","nodeType":"YulIdentifier","src":"39059:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"38738:353:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"38889:9:28","nodeType":"YulTypedName","src":"38889:9:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"38903:4:28","nodeType":"YulTypedName","src":"38903:4:28","type":""}],"src":"38738:353:28"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_5211() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0160)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_ListedPlanet_$5612_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            mstore(pos, mload(_3))\n            mstore(add(pos, _1), mload(add(_3, _1)))\n            mstore(add(pos, _2), and(mload(add(_3, _2)), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, 0x60)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xff00000000000000000000000000000000000000000000000000000000000000))\n        let _1 := 32\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value_2 := calldataload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(0, 0) }\n        value4 := value_2\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_contract$_IERC20Upgradeable_$2149(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bool_t_address_t_uint256__to_t_address_t_uint256_t_bool_t_address_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), value4)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_decode_array_uint256_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let _3 := shl(5, _1)\n        let dst := allocate_memory(add(_3, _2))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, _3), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_bool(value)\n    }\n    function abi_decode_tuple_t_struct$_PlanetData_$5649_memory_ptrt_bool_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0160) { revert(0, 0) }\n        let value := allocate_memory_5211()\n        mstore(value, mload(_2))\n        mstore(add(value, 32), mload(add(_2, 32)))\n        mstore(add(value, 64), mload(add(_2, 64)))\n        mstore(add(value, 96), mload(add(_2, 96)))\n        mstore(add(value, 128), mload(add(_2, 128)))\n        mstore(add(value, 160), mload(add(_2, 160)))\n        mstore(add(value, 192), mload(add(_2, 192)))\n        mstore(add(value, 224), mload(add(_2, 224)))\n        let _3 := 256\n        let offset_1 := mload(add(_2, _3))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, _3), abi_decode_array_uint256_dyn_fromMemory(add(_2, offset_1), dataEnd))\n        let _4 := 288\n        let offset_2 := mload(add(_2, _4))\n        if gt(offset_2, _1) { revert(0, 0) }\n        mstore(add(value, _4), abi_decode_array_uint256_dyn_fromMemory(add(_2, offset_2), dataEnd))\n        let _5 := 320\n        let offset_3 := mload(add(_2, _5))\n        if gt(offset_3, _1) { revert(0, 0) }\n        mstore(add(value, _5), abi_decode_array_uint256_dyn_fromMemory(add(_2, offset_3), dataEnd))\n        value0 := value\n        value1 := abi_decode_bool_fromMemory(add(headStart, 32))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_ca181fe5e4c063d04ec53e8a75cc85eb34077458a0a7c765eb51999ac22c9153__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 160)\n        let tail_1 := abi_encode_string(value3, add(headStart, 160))\n        mstore(add(headStart, 128), sub(tail_1, headStart))\n        mstore(tail_1, 10)\n        mstore(add(tail_1, 32), \"new planet\")\n        tail := add(tail_1, 64)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_023f9cd908fc44c67a48322a2e671798c9e64d33ee119cc3c32d0b4c10f8f0a4__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 160)\n        let tail_1 := abi_encode_string(value3, add(headStart, 160))\n        mstore(add(headStart, 128), sub(tail_1, headStart))\n        mstore(tail_1, 14)\n        mstore(add(tail_1, 32), \"listing planet\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_stringliteral_91f8baf9efb51cfab6fd65a63f4dc181a441df51c27a087b6c0bda584f32be41__to_t_address_t_address_t_uint256_t_bytes_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 160)\n        let tail_1 := abi_encode_string(value3, add(headStart, 160))\n        mstore(add(headStart, 128), sub(tail_1, headStart))\n        mstore(tail_1, 13)\n        mstore(add(tail_1, 32), \"uncategorized\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_t_stringliteral_41702911e7fdf9741c61509216c070cb4be5837176954fb37acaf958eaff82dd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"PaymentSplitter: account has no \")\n        mstore(add(headStart, 96), \"shares\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_57f87f0ebf27afe0d68884e28202f547fd6c4ce1b7243f1356690df65e0fa2e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"PaymentSplitter: account is not \")\n        mstore(add(headStart, 96), \"due payment\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_32cc480c4f0e15e5ce7060ec5e004886ed5a15831cba1ff1aa7cb787be55bb60__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Invalid index\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Index out of bounds\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Failed to send Ether\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bool_t_uint256__to_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_d9cb5a535dd6e8649f5b16f2bf5320a3bd41435311ffe94f95d27e82891f029d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Failed to refund excess Ether\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_uint256_t_address__to_t_uint256_t_address_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"EIP712: Uninitialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Permit: expired deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"ERC20Permit: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5406e50ea7864718d453083f078f6e8ce8b9eb471a337acbc04c0fadffe18ffe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"planet sent errantly, no one to \")\n        mstore(add(headStart, 96), \"claim\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1213":[{"length":32,"start":4585},{"length":32,"start":4718},{"length":32,"start":5521},{"length":32,"start":5654},{"length":32,"start":5884}]},"linkReferences":{},"object":"60806040526004361061034e5760003560e01c8063715018a6116101bb578063a9059cbb116100f7578063d505accf11610095578063dd62ed3e1161006f578063dd62ed3e14610a07578063e22aecb414610a4d578063e33b7de314610aa8578063f2fde38b14610abe57600080fd5b8063d505accf14610990578063d79779b2146109b0578063dd22a9c7146109e757600080fd5b8063cbdf1b5a116100d1578063cbdf1b5a146108f9578063cdb82a3714610919578063ce7c2ac214610939578063d28eb2dc1461097057600080fd5b8063a9059cbb14610899578063c45ac050146108b9578063c7c0e6b1146108d957600080fd5b806385fe72431161016457806395d89b411161013e57806395d89b411461080d5780639852595c14610822578063a3f8eace14610859578063a457c2d71461087957600080fd5b806385fe72431461078a5780638b83209b146107ce5780638da5cb5b146107ee57600080fd5b80638230a784116101955780638230a7841461074f5780638456cb59146104e057806384b0196e1461076257600080fd5b8063715018a6146107055780637ecebe001461071a5780638129fc1c1461073a57600080fd5b80633659cfe61161028a5780634a02099b1161023357806352d1902d1161020d57806352d1902d1461068d5780635c975abb146106a25780636a23befb146106ba57806370a08231146106cf57600080fd5b80634a02099b1461065a5780634f1ef2861461067a57806350842cf3146104d457600080fd5b80633f4ba83a116102645780633f4ba83a146105de578063406072a9146105f357806348b750441461063a57600080fd5b80633659cfe61461058857806339509351146105a85780633a98ef39146105c857600080fd5b80631ac9a91e116102f757806324600fc3116102d157806324600fc314610515578063259478181461052a578063313ce567146105575780633644e5151461057357600080fd5b80631ac9a91e146104d4578063200d2ed2146104e057806323b872dd146104f557600080fd5b8063150b7a0211610328578063150b7a021461044257806318160ddd1461049357806319165587146104b257600080fd5b8063064db8741461039c57806306fdde03146103f0578063095ea7b31461041257600080fd5b36610397577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b3480156103a857600080fd5b506103d36103b7366004613d9d565b6101cc602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103fc57600080fd5b50610405610ade565b6040516103e79190613e06565b34801561041e57600080fd5b5061043261042d366004613e2e565b610b70565b60405190151581526020016103e7565b34801561044e57600080fd5b5061046261045d366004613f3b565b610b8a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016103e7565b34801561049f57600080fd5b5060cb545b6040519081526020016103e7565b3480156104be57600080fd5b506104d26104cd366004613fa7565b610e26565b005b3480156104d257600080fd5b3480156104ec57600080fd5b506104d2610f9a565b34801561050157600080fd5b50610432610510366004613fc4565b610faa565b34801561052157600080fd5b506104d2610fce565b34801561053657600080fd5b5061054a610545366004614005565b611010565b6040516103e79190614027565b34801561056357600080fd5b50604051601281526020016103e7565b34801561057f57600080fd5b506104a46111d0565b34801561059457600080fd5b506104d26105a3366004613fa7565b6111df565b3480156105b457600080fd5b506104326105c3366004613e2e565b61135a565b3480156105d457600080fd5b50610162546104a4565b3480156105ea57600080fd5b506104d2611399565b3480156105ff57600080fd5b506104a461060e366004614089565b6001600160a01b0391821660009081526101686020908152604080832093909416825291909152205490565b34801561064657600080fd5b506104d2610655366004614089565b6113a9565b34801561066657600080fd5b506104d26106753660046140c2565b611540565b6104d2610688366004614104565b611587565b34801561069957600080fd5b506104a46116ef565b3480156106ae57600080fd5b5060335460ff16610432565b3480156106c657600080fd5b5061054a6117b4565b3480156106db57600080fd5b506104a46106ea366004613fa7565b6001600160a01b0316600090815260c9602052604090205490565b34801561071157600080fd5b506104d2611837565b34801561072657600080fd5b506104a4610735366004613fa7565b611849565b34801561074657600080fd5b506104d2611868565b6104d261075d366004614005565b611997565b34801561076e57600080fd5b50610777611cb2565b6040516103e79796959493929190614154565b34801561079657600080fd5b506107aa6107a5366004613e2e565b611d74565b6040805193845260208401929092526001600160a01b0316908201526060016103e7565b3480156107da57600080fd5b506103d36107e9366004613d9d565b611dc0565b3480156107fa57600080fd5b50610194546001600160a01b03166103d3565b34801561081957600080fd5b50610405611df1565b34801561082e57600080fd5b506104a461083d366004613fa7565b6001600160a01b03166000908152610165602052604090205490565b34801561086557600080fd5b506104a4610874366004613fa7565b611e00565b34801561088557600080fd5b50610432610894366004613e2e565b611e4a565b3480156108a557600080fd5b506104326108b4366004613e2e565b611ef4565b3480156108c557600080fd5b506104a46108d4366004614089565b611f02565b3480156108e557600080fd5b506104d26108f4366004613d9d565b611fe0565b34801561090557600080fd5b506104d2610914366004614005565b611ff6565b34801561092557600080fd5b506104d2610934366004613fa7565b61219d565b34801561094557600080fd5b506104a4610954366004613fa7565b6001600160a01b03166000908152610164602052604090205490565b34801561097c57600080fd5b506104d261098b366004614217565b6121d0565b34801561099c57600080fd5b506104d26109ab366004614245565b61225e565b3480156109bc57600080fd5b506104a46109cb366004613fa7565b6001600160a01b03166000908152610167602052604090205490565b3480156109f357600080fd5b50610432610a02366004614089565b6123c2565b348015610a1357600080fd5b506104a4610a22366004614089565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b348015610a5957600080fd5b50610a6d610a68366004613e2e565b612453565b604080516001600160a01b0396871681526020810195909552921515928401929092529092166060820152608081019190915260a0016103e7565b348015610ab457600080fd5b50610163546104a4565b348015610aca57600080fd5b506104d2610ad9366004613fa7565b6124b3565b606060cc8054610aed906142bc565b80601f0160208091040260200160405190810160405280929190818152602001828054610b19906142bc565b8015610b665780601f10610b3b57610100808354040283529160200191610b66565b820191906000526020600020905b815481529060010190602001808311610b4957829003601f168201915b5050505050905090565b600033610b7e818585612540565b60019150505b92915050565b600033158015610ba857506101c8546001600160a01b038681169116145b15610d33576101c8546040517fdc9ce7a5000000000000000000000000000000000000000000000000000000008152600481018590526000916001600160a01b03169063dc9ce7a590602401600060405180830381865afa158015610c11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c399190810190614370565b5090506000816101200151905060006101cc600083600081518110610c6057610c6061448f565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b0316905060006101cc600084600181518110610ca657610ca661448f565b60209081029190910181015182528181019290925260409081016000205481518083019092526001600160a01b03858116835216918101829052909150610cec81612698565b7f13c6ec2a463a35f898a457814a782f1f567808293fa783a31fa4dac8868e60118a8a8a8a604051610d2194939291906144a5565b60405180910390a15050505050610dfb565b60008251118015610d5257506101c8546001600160a01b038681169116145b15610dbd57600082806020019051810190610d6d9190614519565b9050610d7a848287612907565b7f13c6ec2a463a35f898a457814a782f1f567808293fa783a31fa4dac8868e601186868686604051610daf9493929190614532565b60405180910390a150610dfb565b7f13c6ec2a463a35f898a457814a782f1f567808293fa783a31fa4dac8868e601185858585604051610df294939291906145a6565b60405180910390a15b507f150b7a02000000000000000000000000000000000000000000000000000000005b949350505050565b6001600160a01b03811660009081526101646020526040902054610ea05760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084015b60405180910390fd5b6000610eab82611e00565b905080600003610f115760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610e97565b806101636000828254610f249190614630565b90915550506001600160a01b038216600090815261016560205260409020805482019055610f528282612a53565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b565b610fa2612b6c565b610f98612bc7565b600033610fb8858285612c21565b610fc3858585612cad565b506001949350505050565b610fd6612b6c565b610fde612ea1565b604051339081904780156108fc02916000818181858888f1935050505015801561100c573d6000803e3d6000fd5b5050565b60608282116110615760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e646578000000000000000000000000000000000000006044820152606401610e97565b6101cb548211156110b45760405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401610e97565b60006110c08484614643565b67ffffffffffffffff8111156110d8576110d8613e5a565b60405190808252806020026020018201604052801561113657816020015b6111236040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b8152602001906001900390816110f65790505b509050835b838110156111c8576101cb81815481106111575761115761448f565b6000918252602091829020604080516060810182526003909302909101805483526001810154938301939093526002909201546001600160a01b031691810191909152826111a58784614643565b815181106111b5576111b561448f565b602090810291909101015260010161113b565b509392505050565b60006111da612ef4565b905090565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361126c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610e97565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112c77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146113325760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610e97565b61133b81612efe565b6040805160008082526020820190925261135791839190612f06565b50565b33600081815260ca602090815260408083206001600160a01b0387168452909152812054909190610b7e9082908690611394908790614630565b612540565b6113a1612b6c565b610f986130a6565b6001600160a01b0381166000908152610164602052604090205461141e5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610e97565b600061142a8383611f02565b9050806000036114905760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610e97565b6001600160a01b03831660009081526101676020526040812080548392906114b9908490614630565b90915550506001600160a01b038084166000908152610168602090815260408083209386168352929052208054820190556114f58383836130df565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b611548612b6c565b611550612ea1565b6101c9919091556101c680546001600160a01b039384166001600160a01b0319918216179091556101c88054929093169116179055565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036116145760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610e97565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661166f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146116da5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610e97565b6116e382612efe565b61100c82826001612f06565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461178f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610e97565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60606101cb805480602002602001604051908101604052809291908181526020016000905b8282101561182e576000848152602090819020604080516060810182526003860290920180548352600180820154848601526002909101546001600160a01b03169183019190915290835290920191016117d9565b50505050905090565b61183f612b6c565b610f98600061315f565b6001600160a01b038116600090815261012f6020526040812054610b84565b600054610100900460ff16158080156118885750600054600160ff909116105b806118a25750303b1580156118a2575060005460ff166001145b6119145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610e97565b6000805460ff191660011790558015611937576000805461ff0019166101001790555b61193f6131b2565b611947613225565b61194f613298565b8015611357576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b61199f612ea1565b60008060006119ad84613303565b9050806101c9546119be9190614630565b3410156119ca57600080fd5b6000805b6101cb54811015611a4557856101cb82815481106119ee576119ee61448f565b90600052602060002090600302016000015403611a3d576101cb8181548110611a1957611a1961448f565b60009182526020909120600260039092020101546001600160a01b03169150611a45565b6001016119ce565b50604051600b906000906001600160a01b0384169083908381818185875af1925050503d8060008114611a94576040519150601f19603f3d011682016040523d82523d6000602084013e611a99565b606091505b5050905080611aea5760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606401610e97565b6101c6546040517fbf0e57a3000000000000000000000000000000000000000000000000000000008152600481018a905260248101899052600060448201523460648201526001600160a01b039091169063bf0e57a3906084016020604051808303816000875af1158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b879190614519565b50816101c954611b979190614630565b341115611c58576000336001600160a01b0316836101c95434611bba9190614643565b611bc49190614643565b604051600081818185875af1925050503d8060008114611c00576040519150601f19603f3d011682016040523d82523d6000602084013e611c05565b606091505b5050905080611c565760405162461bcd60e51b815260206004820152601d60248201527f4661696c656420746f20726566756e64206578636573732045746865720000006044820152606401610e97565b505b604080518981526001600160a01b0388811660208301528183018a90528716606082015290517f8557df6951fbdd47fe9027516fc896be40f285ed55a6acac460352adbab730cd9181900360800190a15050505050505050565b60006060806000806000606060fb546000801b148015611cd2575060fc54155b611d1e5760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610e97565b611d266133a4565b611d2e6133b3565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b6101ca6020528160005260406000208181548110611d9157600080fd5b60009182526020909120600390910201805460018201546002909201549093509091506001600160a01b031683565b60006101668281548110611dd657611dd661448f565b6000918252602090912001546001600160a01b031692915050565b606060cd8054610aed906142bc565b600080611e0d6101635490565b611e179047614630565b9050611e438382611e3e866001600160a01b03166000908152610165602052604090205490565b6133c2565b9392505050565b33600081815260ca602090815260408083206001600160a01b038716845290915281205490919083811015611ee75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610e97565b610fc38286868403612540565b600033610b7e818585612cad565b6001600160a01b0382166000908152610167602052604081205481906040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9f9190614519565b611fa99190614630565b6001600160a01b0380861660009081526101686020908152604080832093881683529290522054909150610e1e90849083906133c2565b611fe8612b6c565b611ff0612ea1565b6101c955565b611ffe612ea1565b6101cb5482106120505760405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401610e97565b600033905060006101cb848154811061206b5761206b61448f565b6000918252602091829020604080516060810182526003909302909101805483526001810154938301939093526002909201546001600160a01b0316918101829052915033146120ba57600080fd5b6040518060600160405280600081526020016000815260200160006001600160a01b03168152506101cb85815481106120f5576120f561448f565b6000918252602091829020835160039290920201908155908201516001820155604090910151600290910180546001600160a01b0319166001600160a01b039092169190911790556121478383613402565b6101c8548151604080516001600160a01b03808716825290931660208401528201527f0ece05e698e9e143fb75b2ad0aba7f141238c27b6d3e9728898183ee0d68498b906060015b60405180910390a150505050565b6121a5612b6c565b6121ad612ea1565b6101c780546001600160a01b0319166001600160a01b0392909216919091179055565b6121d8612b6c565b6101c8546040517fa22cb4650000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015283151560248301529091169063a22cb465906044015b600060405180830381600087803b15801561224257600080fd5b505af1158015612256573d6000803e3d6000fd5b505050505050565b834211156122ae5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610e97565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886122dd8c61345b565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061233882613482565b90506000612348828787876134ca565b9050896001600160a01b0316816001600160a01b0316146123ab5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610e97565b6123b68a8a8a612540565b50505050505050505050565b6101c8546040517fe985e9c50000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528381166024830152600092169063e985e9c590604401602060405180830381865afa15801561242f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e439190614656565b6101cd602052816000526040600020818154811061247057600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b03928316955090935060ff83169261010090049091169085565b6124bb612b6c565b6001600160a01b0381166125375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610e97565b6113578161315f565b6001600160a01b0383166125bb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610e97565b6001600160a01b0382166126375760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610e97565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b80516020808301516001600160a01b03831660009081526101cd9092526040909120541561279b5760005b6001600160a01b03831660009081526101cd6020526040902054811015612795576001600160a01b0383811660009081526101cd60205260409020805491841691839081106127145761271461448f565b600091825260209091206004909102016002015461010090046001600160a01b03160361278d576001600160a01b03831660009081526101cd602052604090208054600191908390811061276a5761276a61448f565b60009182526020909120600490910201600201805460ff19169115159190911790555b6001016126c3565b50505050565b6020808401516001600160a01b031660009081526101cd9091526040902054156128945760005b6001600160a01b03821660009081526101cd6020526040902054811015612795576001600160a01b0382811660009081526101cd60205260409020805491851691839081106128135761281361448f565b600091825260209091206004909102016002015461010090046001600160a01b03160361288c576001600160a01b03821660009081526101cd60205260409020805460019190839081106128695761286961448f565b60009182526020909120600490910201600201805460ff19169115159190911790555b6001016127c2565b60405162461bcd60e51b815260206004820152602560248201527f706c616e65742073656e7420657272616e746c792c206e6f206f6e6520746f2060448201527f636c61696d0000000000000000000000000000000000000000000000000000006064820152608401610e97565b505050565b604080516060808201835285825260208083018681526001600160a01b0386811685870181815260009182526101ca8552878220805460018082018355918452868420895160039283029091019081558651818401558351600290910180549187166001600160a01b03199283161790556101cb80549384018155909452885191027fe8bbfecd380c4167d6a1f763a233ec73e73f534b1970c4e1683f437ec23c1f4481019190915593517fe8bbfecd380c4167d6a1f763a233ec73e73f534b1970c4e1683f437ec23c1f45850155517fe8bbfecd380c4167d6a1f763a233ec73e73f534b1970c4e1683f437ec23c1f46909301805493831693909116929092179091556101c85485513381529116918101919091529283018690528201849052907fb30319a217488a3ed441c348e935a48d16091e33109bab0c79a353b9797528839060800161218f565b80471015612aa35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610e97565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612af0576040519150601f19603f3d011682016040523d82523d6000602084013e612af5565b606091505b50509050806129025760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610e97565b610194546001600160a01b03163314610f985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e97565b612bcf612ea1565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c043390565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03838116600090815260ca602090815260408083209386168352929052205460001981146127955781811015612ca05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610e97565b6127958484848403612540565b6001600160a01b038316612d295760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610e97565b6001600160a01b038216612da55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610e97565b6001600160a01b038316600090815260c9602052604090205481811015612e345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610e97565b6001600160a01b03808516600081815260c9602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612e949086815260200190565b60405180910390a3612795565b60335460ff1615610f985760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610e97565b60006111da6134f2565b611357612b6c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612f395761290283613566565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612f93575060408051601f3d908101601f19168201909252612f9091810190614519565b60015b6130055760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610e97565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461309a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610e97565b50612902838383613624565b6130ae613649565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612c04565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261290290849061369b565b61019480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661321d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610e97565b610f98613783565b600054610100900460ff166132905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610e97565b610f986137f7565b600054610100900460ff16610f985760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610e97565b600061330d612ea1565b60005b6101cb5481101561339d57826101cb82815481106133305761333061448f565b90600052602060002090600302016000015403613375576101cb818154811061335b5761335b61448f565b906000526020600020906003020160010154915050919050565b6101cb5461338590600190614643565b8103613395575060001992915050565b600101613310565b505b919050565b606060fd8054610aed906142bc565b606060fe8054610aed906142bc565b610162546001600160a01b03841660009081526101646020526040812054909183916133ee9086614673565b6133f8919061468a565b610e1e9190614643565b6101c8546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015260448201859052909116906323b872dd90606401612228565b6001600160a01b038116600090815261012f6020526040902080546001810182559061339d565b6000610b8461348f612ef4565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060006134db8787878761386e565b915091506134e881613932565b5095945050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61351d613a97565b613525613af0565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b0381163b6135e35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610e97565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b61362d83613b21565b60008251118061363a5750805b15612902576127958383613b61565b60335460ff16610f985760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610e97565b60006136f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613b869092919063ffffffff16565b90508051600014806137115750808060200190518101906137119190614656565b6129025760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610e97565b600054610100900460ff166137ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610e97565b610f983361315f565b600054610100900460ff166138625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610e97565b6033805460ff19169055565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156138a55750600090506003613929565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156138f9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661392257600060019250925050613929565b9150600090505b94509492505050565b6000816004811115613946576139466146ac565b0361394e5750565b6001816004811115613962576139626146ac565b036139af5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610e97565b60028160048111156139c3576139c36146ac565b03613a105760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610e97565b6003816004811115613a2457613a246146ac565b036113575760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610e97565b600080613aa26133a4565b805190915015613ab9578051602090910120919050565b60fb548015613ac85792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b600080613afb6133b3565b805190915015613b12578051602090910120919050565b60fc548015613ac85792915050565b613b2a81613566565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611e4383836040518060600160405280602781526020016146df60279139613b95565b6060610e1e8484600085613c0d565b6060600080856001600160a01b031685604051613bb291906146c2565b600060405180830381855af49150503d8060008114613bed576040519150601f19603f3d011682016040523d82523d6000602084013e613bf2565b606091505b5091509150613c0386838387613cff565b9695505050505050565b606082471015613c855760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610e97565b600080866001600160a01b03168587604051613ca191906146c2565b60006040518083038185875af1925050503d8060008114613cde576040519150601f19603f3d011682016040523d82523d6000602084013e613ce3565b606091505b5091509150613cf487838387613cff565b979650505050505050565b60608315613d6e578251600003613d67576001600160a01b0385163b613d675760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e97565b5081610e1e565b610e1e8383815115613d835781518083602001fd5b8060405162461bcd60e51b8152600401610e979190613e06565b600060208284031215613daf57600080fd5b5035919050565b60005b83811015613dd1578181015183820152602001613db9565b50506000910152565b60008151808452613df2816020860160208601613db6565b601f01601f19169290920160200192915050565b602081526000611e436020830184613dda565b6001600160a01b038116811461135757600080fd5b60008060408385031215613e4157600080fd5b8235613e4c81613e19565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715613e9457613e94613e5a565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613ec357613ec3613e5a565b604052919050565b600082601f830112613edc57600080fd5b813567ffffffffffffffff811115613ef657613ef6613e5a565b613f09601f8201601f1916602001613e9a565b818152846020838601011115613f1e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613f5157600080fd5b8435613f5c81613e19565b93506020850135613f6c81613e19565b925060408501359150606085013567ffffffffffffffff811115613f8f57600080fd5b613f9b87828801613ecb565b91505092959194509250565b600060208284031215613fb957600080fd5b8135611e4381613e19565b600080600060608486031215613fd957600080fd5b8335613fe481613e19565b92506020840135613ff481613e19565b929592945050506040919091013590565b6000806040838503121561401857600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b8281101561407c5781518051855286810151878601528501516001600160a01b03168585015260609093019290850190600101614044565b5091979650505050505050565b6000806040838503121561409c57600080fd5b82356140a781613e19565b915060208301356140b781613e19565b809150509250929050565b6000806000606084860312156140d757600080fd5b83356140e281613e19565b92506020840135915060408401356140f981613e19565b809150509250925092565b6000806040838503121561411757600080fd5b823561412281613e19565b9150602083013567ffffffffffffffff81111561413e57600080fd5b61414a85828601613ecb565b9150509250929050565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e0602084015261419160e084018a613dda565b83810360408501526141a3818a613dda565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156141f7578351835292840192918401916001016141db565b50909c9b505050505050505050505050565b801515811461135757600080fd5b6000806040838503121561422a57600080fd5b823561423581613e19565b915060208301356140b781614209565b600080600080600080600060e0888a03121561426057600080fd5b873561426b81613e19565b9650602088013561427b81613e19565b95506040880135945060608801359350608088013560ff8116811461429f57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600181811c908216806142d057607f821691505b60208210810361339d57634e487b7160e01b600052602260045260246000fd5b600082601f83011261430157600080fd5b8151602067ffffffffffffffff82111561431d5761431d613e5a565b8160051b61432c828201613e9a565b928352848101820192828101908785111561434657600080fd5b83870192505b84831015613cf45782518252918301919083019061434c565b805161339f81614209565b6000806040838503121561438357600080fd5b825167ffffffffffffffff8082111561439b57600080fd5b9084019061016082870312156143b057600080fd5b6143b8613e70565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518381111561441657600080fd5b614422898287016142f0565b828401525050610120808401518381111561443c57600080fd5b614448898287016142f0565b828401525050610140808401518381111561446257600080fd5b61446e898287016142f0565b82840152505080945050505061448660208401614365565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260a060608301526144d760a0830184613dda565b8281036080840152600a81527f6e657720706c616e65740000000000000000000000000000000000000000000060208201526040810191505095945050505050565b60006020828403121561452b57600080fd5b5051919050565b60006001600160a01b03808716835280861660208401525083604083015260a0606083015261456460a0830184613dda565b8281036080840152600e81527f6c697374696e6720706c616e657400000000000000000000000000000000000060208201526040810191505095945050505050565b60006001600160a01b03808716835280861660208401525083604083015260a060608301526145d860a0830184613dda565b8281036080840152600d81527f756e63617465676f72697a65640000000000000000000000000000000000000060208201526040810191505095945050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b8457610b8461461a565b81810381811115610b8457610b8461461a565b60006020828403121561466857600080fd5b8151611e4381614209565b8082028115828204841417610b8457610b8461461a565b6000826146a757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600082516146d4818460208701613db6565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204e2dd2834414a912245bd08a021eb05177b40f85244d110b253f1674de2c4a4d64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x1BB JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xA07 JUMPI DUP1 PUSH4 0xE22AECB4 EQ PUSH2 0xA4D JUMPI DUP1 PUSH4 0xE33B7DE3 EQ PUSH2 0xAA8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xABE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x990 JUMPI DUP1 PUSH4 0xD79779B2 EQ PUSH2 0x9B0 JUMPI DUP1 PUSH4 0xDD22A9C7 EQ PUSH2 0x9E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCBDF1B5A GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCBDF1B5A EQ PUSH2 0x8F9 JUMPI DUP1 PUSH4 0xCDB82A37 EQ PUSH2 0x919 JUMPI DUP1 PUSH4 0xCE7C2AC2 EQ PUSH2 0x939 JUMPI DUP1 PUSH4 0xD28EB2DC EQ PUSH2 0x970 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x899 JUMPI DUP1 PUSH4 0xC45AC050 EQ PUSH2 0x8B9 JUMPI DUP1 PUSH4 0xC7C0E6B1 EQ PUSH2 0x8D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x85FE7243 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x80D JUMPI DUP1 PUSH4 0x9852595C EQ PUSH2 0x822 JUMPI DUP1 PUSH4 0xA3F8EACE EQ PUSH2 0x859 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x879 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x85FE7243 EQ PUSH2 0x78A JUMPI DUP1 PUSH4 0x8B83209B EQ PUSH2 0x7CE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8230A784 GT PUSH2 0x195 JUMPI DUP1 PUSH4 0x8230A784 EQ PUSH2 0x74F JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x762 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x705 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH2 0x28A JUMPI DUP1 PUSH4 0x4A02099B GT PUSH2 0x233 JUMPI DUP1 PUSH4 0x52D1902D GT PUSH2 0x20D JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x68D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0x6A23BEFB EQ PUSH2 0x6BA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x6CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A02099B EQ PUSH2 0x65A JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x67A JUMPI DUP1 PUSH4 0x50842CF3 EQ PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x264 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0x406072A9 EQ PUSH2 0x5F3 JUMPI DUP1 PUSH4 0x48B75044 EQ PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x588 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x5A8 JUMPI DUP1 PUSH4 0x3A98EF39 EQ PUSH2 0x5C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1AC9A91E GT PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x24600FC3 GT PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x515 JUMPI DUP1 PUSH4 0x25947818 EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x557 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1AC9A91E EQ PUSH2 0x4D4 JUMPI DUP1 PUSH4 0x200D2ED2 EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x150B7A02 GT PUSH2 0x328 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0x19165587 EQ PUSH2 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x64DB874 EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x397 JUMPI PUSH32 0x6EF95F06320E7A25A04A175CA677B7052BDD97131872C2192525A629F51BE770 CALLER PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLVALUE PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D3 PUSH2 0x3B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D9D JUMP JUMPDEST PUSH2 0x1CC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x405 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E7 SWAP2 SWAP1 PUSH2 0x3E06 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x42D CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0xB70 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x462 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x3F3B JUMP JUMPDEST PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCB SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x4CD CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0xE26 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0xF9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x510 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FC4 JUMP JUMPDEST PUSH2 0xFAA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0xFCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH2 0x545 CALLDATASIZE PUSH1 0x4 PUSH2 0x4005 JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E7 SWAP2 SWAP1 PUSH2 0x4027 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x11D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x5A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x11DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x5C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x135A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 SLOAD PUSH2 0x4A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x1399 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x60E CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x168 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x655 CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH2 0x13A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x675 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C2 JUMP JUMPDEST PUSH2 0x1540 JUMP JUMPDEST PUSH2 0x4D2 PUSH2 0x688 CALLDATASIZE PUSH1 0x4 PUSH2 0x4104 JUMP JUMPDEST PUSH2 0x1587 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x699 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x16EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0xFF AND PUSH2 0x432 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH2 0x17B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x6EA CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x1837 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x726 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x735 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x1849 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x746 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x1868 JUMP JUMPDEST PUSH2 0x4D2 PUSH2 0x75D CALLDATASIZE PUSH1 0x4 PUSH2 0x4005 JUMP JUMPDEST PUSH2 0x1997 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x777 PUSH2 0x1CB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E7 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4154 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7AA PUSH2 0x7A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x1D74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D3 PUSH2 0x7E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D9D JUMP JUMPDEST PUSH2 0x1DC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x194 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x405 PUSH2 0x1DF1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x83D CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x165 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x865 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x874 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x1E00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x885 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x894 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x1E4A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x8B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x1EF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x8D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH2 0x1F02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x8F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D9D JUMP JUMPDEST PUSH2 0x1FE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x905 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x914 CALLDATASIZE PUSH1 0x4 PUSH2 0x4005 JUMP JUMPDEST PUSH2 0x1FF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x934 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x219D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x954 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x164 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x98B CALLDATASIZE PUSH1 0x4 PUSH2 0x4217 JUMP JUMPDEST PUSH2 0x21D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x99C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0x9AB CALLDATASIZE PUSH1 0x4 PUSH2 0x4245 JUMP JUMPDEST PUSH2 0x225E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0x9CB CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x167 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0xA02 CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH2 0x23C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A4 PUSH2 0xA22 CALLDATASIZE PUSH1 0x4 PUSH2 0x4089 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA6D PUSH2 0xA68 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x2453 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP3 ISZERO ISZERO SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP3 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD PUSH2 0x3E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 SLOAD PUSH2 0x4A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xACA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH2 0xAD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA7 JUMP JUMPDEST PUSH2 0x24B3 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xCC DUP1 SLOAD PUSH2 0xAED SWAP1 PUSH2 0x42BC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB19 SWAP1 PUSH2 0x42BC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB66 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB3B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB66 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB49 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xB7E DUP2 DUP6 DUP6 PUSH2 0x2540 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ISZERO DUP1 ISZERO PUSH2 0xBA8 JUMPI POP PUSH2 0x1C8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0xD33 JUMPI PUSH2 0x1C8 SLOAD PUSH1 0x40 MLOAD PUSH32 0xDC9CE7A500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDC9CE7A5 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xC39 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4370 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x120 ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1CC PUSH1 0x0 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC60 JUMPI PUSH2 0xC60 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH2 0x1CC PUSH1 0x0 DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP4 MSTORE AND SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH2 0xCEC DUP2 PUSH2 0x2698 JUMP JUMPDEST PUSH32 0x13C6EC2A463A35F898A457814A782F1F567808293FA783A31FA4DAC8868E6011 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0xD21 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x44A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP PUSH2 0xDFB JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 ISZERO PUSH2 0xD52 JUMPI POP PUSH2 0x1C8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0xDBD JUMPI PUSH1 0x0 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD6D SWAP2 SWAP1 PUSH2 0x4519 JUMP JUMPDEST SWAP1 POP PUSH2 0xD7A DUP5 DUP3 DUP8 PUSH2 0x2907 JUMP JUMPDEST PUSH32 0x13C6EC2A463A35F898A457814A782F1F567808293FA783A31FA4DAC8868E6011 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xDAF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4532 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH2 0xDFB JUMP JUMPDEST PUSH32 0x13C6EC2A463A35F898A457814A782F1F567808293FA783A31FA4DAC8868E6011 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xDF2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x45A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x164 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xEA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E7420686173206E6F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x736861726573 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP3 PUSH2 0x1E00 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xF11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E74206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x191D59481C185E5B595B9D PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST DUP1 PUSH2 0x163 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF24 SWAP2 SWAP1 PUSH2 0x4630 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x165 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0xF52 DUP3 DUP3 PUSH2 0x2A53 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xDF20FD1E76BC69D672E4814FAFB2C449BBA3A5369D8359ADF9E05E6FDE87B056 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xFA2 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0xF98 PUSH2 0x2BC7 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xFB8 DUP6 DUP3 DUP6 PUSH2 0x2C21 JUMP JUMPDEST PUSH2 0xFC3 DUP6 DUP6 DUP6 PUSH2 0x2CAD JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xFD6 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0xFDE PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 DUP2 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x100C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 GT PUSH2 0x1061 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420696E64657800000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x1CB SLOAD DUP3 GT ISZERO PUSH2 0x10B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C0 DUP5 DUP5 PUSH2 0x4643 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10D8 JUMPI PUSH2 0x10D8 PUSH2 0x3E5A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1136 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1123 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x10F6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11C8 JUMPI PUSH2 0x1CB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1157 JUMPI PUSH2 0x1157 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x3 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 PUSH2 0x11A5 DUP8 DUP5 PUSH2 0x4643 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x11B5 JUMPI PUSH2 0x11B5 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x113B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11DA PUSH2 0x2EF4 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x126C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12C7 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1332 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x133B DUP2 PUSH2 0x2EFE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1357 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x2F06 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0xB7E SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x1394 SWAP1 DUP8 SWAP1 PUSH2 0x4630 JUMP JUMPDEST PUSH2 0x2540 JUMP JUMPDEST PUSH2 0x13A1 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0xF98 PUSH2 0x30A6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x164 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x141E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E7420686173206E6F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x736861726573 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x142A DUP4 DUP4 PUSH2 0x1F02 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x1490 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061796D656E7453706C69747465723A206163636F756E74206973206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x191D59481C185E5B595B9D PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x167 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x14B9 SWAP1 DUP5 SWAP1 PUSH2 0x4630 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x168 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x14F5 DUP4 DUP4 DUP4 PUSH2 0x30DF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE DUP6 AND SWAP2 PUSH32 0x3BE5B7A71E84ED12875D241991C70855AC5817D847039E17A9D895C1CEB0F18A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1548 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0x1550 PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x1C9 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x1C6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH2 0x1C8 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x1614 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x166F PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x16DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x16E3 DUP3 PUSH2 0x2EFE JUMP JUMPDEST PUSH2 0x100C DUP3 DUP3 PUSH1 0x1 PUSH2 0x2F06 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x178F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1CB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x182E JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x3 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP1 DUP3 ADD SLOAD DUP5 DUP7 ADD MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x17D9 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x183F PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0xF98 PUSH1 0x0 PUSH2 0x315F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xB84 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1888 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x18A2 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18A2 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x1914 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1937 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x193F PUSH2 0x31B2 JUMP JUMPDEST PUSH2 0x1947 PUSH2 0x3225 JUMP JUMPDEST PUSH2 0x194F PUSH2 0x3298 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1357 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x199F PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x19AD DUP5 PUSH2 0x3303 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C9 SLOAD PUSH2 0x19BE SWAP2 SWAP1 PUSH2 0x4630 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x19CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH2 0x1CB SLOAD DUP2 LT ISZERO PUSH2 0x1A45 JUMPI DUP6 PUSH2 0x1CB DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x19EE JUMPI PUSH2 0x19EE PUSH2 0x448F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1A3D JUMPI PUSH2 0x1CB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1A19 JUMPI PUSH2 0x1A19 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 PUSH1 0x3 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x1A45 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x19CE JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0xB SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A94 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A99 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1AEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F2073656E64204574686572000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x1C6 SLOAD PUSH1 0x40 MLOAD PUSH32 0xBF0E57A300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x44 DUP3 ADD MSTORE CALLVALUE PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xBF0E57A3 SWAP1 PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B63 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B87 SWAP2 SWAP1 PUSH2 0x4519 JUMP JUMPDEST POP DUP2 PUSH2 0x1C9 SLOAD PUSH2 0x1B97 SWAP2 SWAP1 PUSH2 0x4630 JUMP JUMPDEST CALLVALUE GT ISZERO PUSH2 0x1C58 JUMPI PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1C9 SLOAD CALLVALUE PUSH2 0x1BBA SWAP2 SWAP1 PUSH2 0x4643 JUMP JUMPDEST PUSH2 0x1BC4 SWAP2 SWAP1 PUSH2 0x4643 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C00 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C05 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1C56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F20726566756E6420657863657373204574686572000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP2 DUP4 ADD DUP11 SWAP1 MSTORE DUP8 AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 MLOAD PUSH32 0x8557DF6951FBDD47FE9027516FC896BE40F285ED55A6ACAC460352ADBAB730CD SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0xFB SLOAD PUSH1 0x0 DUP1 SHL EQ DUP1 ISZERO PUSH2 0x1CD2 JUMPI POP PUSH1 0xFC SLOAD ISZERO JUMPDEST PUSH2 0x1D1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4549503731323A20556E696E697469616C697A65640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x1D26 PUSH2 0x33A4 JUMP JUMPDEST PUSH2 0x1D2E PUSH2 0x33B3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH2 0x1CA PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1D91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x166 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1DD6 JUMPI PUSH2 0x1DD6 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xCD DUP1 SLOAD PUSH2 0xAED SWAP1 PUSH2 0x42BC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E0D PUSH2 0x163 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1E17 SWAP1 SELFBALANCE PUSH2 0x4630 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E43 DUP4 DUP3 PUSH2 0x1E3E DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x165 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x33C2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x1EE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xFC3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x2540 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xB7E DUP2 DUP6 DUP6 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x167 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F9F SWAP2 SWAP1 PUSH2 0x4519 JUMP JUMPDEST PUSH2 0x1FA9 SWAP2 SWAP1 PUSH2 0x4630 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x168 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xE1E SWAP1 DUP5 SWAP1 DUP4 SWAP1 PUSH2 0x33C2 JUMP JUMPDEST PUSH2 0x1FE8 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0x1FF0 PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x1C9 SSTORE JUMP JUMPDEST PUSH2 0x1FFE PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x1CB SLOAD DUP3 LT PUSH2 0x2050 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 PUSH2 0x1CB DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x206B JUMPI PUSH2 0x206B PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x3 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 POP CALLER EQ PUSH2 0x20BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x1CB DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x20F5 JUMPI PUSH2 0x20F5 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 SSTORE SWAP1 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2147 DUP4 DUP4 PUSH2 0x3402 JUMP JUMPDEST PUSH2 0x1C8 SLOAD DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP3 MSTORE SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0xECE05E698E9E143FB75B2AD0ABA7F141238C27B6D3E9728898183EE0D68498B SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x21A5 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0x21AD PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x1C7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x21D8 PUSH2 0x2B6C JUMP JUMPDEST PUSH2 0x1C8 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA22CB46500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA22CB465 SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2256 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x22AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x22DD DUP13 PUSH2 0x345B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x2338 DUP3 PUSH2 0x3482 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2348 DUP3 DUP8 DUP8 DUP8 PUSH2 0x34CA JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x23AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x23B6 DUP11 DUP11 DUP11 PUSH2 0x2540 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1C8 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xE985E9C5 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x242F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E43 SWAP2 SWAP1 PUSH2 0x4656 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x2470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP6 POP SWAP1 SWAP4 POP PUSH1 0xFF DUP4 AND SWAP3 PUSH2 0x100 SWAP1 DIV SWAP1 SWAP2 AND SWAP1 DUP6 JUMP JUMPDEST PUSH2 0x24BB PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x1357 DUP2 PUSH2 0x315F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x25BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2637 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD ISZERO PUSH2 0x279B JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2795 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP5 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x2714 JUMPI PUSH2 0x2714 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x278D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x276A JUMPI PUSH2 0x276A PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x26C3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x2894 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2795 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x2813 JUMPI PUSH2 0x2813 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x288C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x1CD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x2869 JUMPI PUSH2 0x2869 PUSH2 0x448F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x27C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x706C616E65742073656E7420657272616E746C792C206E6F206F6E6520746F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636C61696D000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE DUP6 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP6 DUP8 ADD DUP2 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH2 0x1CA DUP6 MSTORE DUP8 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP5 MSTORE DUP7 DUP5 KECCAK256 DUP10 MLOAD PUSH1 0x3 SWAP3 DUP4 MUL SWAP1 SWAP2 ADD SWAP1 DUP2 SSTORE DUP7 MLOAD DUP2 DUP5 ADD SSTORE DUP4 MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP2 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH2 0x1CB DUP1 SLOAD SWAP4 DUP5 ADD DUP2 SSTORE SWAP1 SWAP5 MSTORE DUP9 MLOAD SWAP2 MUL PUSH32 0xE8BBFECD380C4167D6A1F763A233EC73E73F534B1970C4E1683F437EC23C1F44 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP4 MLOAD PUSH32 0xE8BBFECD380C4167D6A1F763A233EC73E73F534B1970C4E1683F437EC23C1F45 DUP6 ADD SSTORE MLOAD PUSH32 0xE8BBFECD380C4167D6A1F763A233EC73E73F534B1970C4E1683F437EC23C1F46 SWAP1 SWAP4 ADD DUP1 SLOAD SWAP4 DUP4 AND SWAP4 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0x1C8 SLOAD DUP6 MLOAD CALLER DUP2 MSTORE SWAP2 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 PUSH32 0xB30319A217488A3ED441C348E935A48D16091E33109BAB0C79A353B979752883 SWAP1 PUSH1 0x80 ADD PUSH2 0x218F JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x2AA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2AF0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2902 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x194 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x2BCF PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2C04 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x2795 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x2CA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0x2795 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x2540 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2DA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x2E34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x2E94 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x2795 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11DA PUSH2 0x34F2 JUMP JUMPDEST PUSH2 0x1357 PUSH2 0x2B6C JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2F39 JUMPI PUSH2 0x2902 DUP4 PUSH2 0x3566 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2F93 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2F90 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3005 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x309A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST POP PUSH2 0x2902 DUP4 DUP4 DUP4 PUSH2 0x3624 JUMP JUMPDEST PUSH2 0x30AE PUSH2 0x3649 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER PUSH2 0x2C04 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x2902 SWAP1 DUP5 SWAP1 PUSH2 0x369B JUMP JUMPDEST PUSH2 0x194 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x321D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xF98 PUSH2 0x3783 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3290 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xF98 PUSH2 0x37F7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x330D PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH2 0x1CB SLOAD DUP2 LT ISZERO PUSH2 0x339D JUMPI DUP3 PUSH2 0x1CB DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3330 JUMPI PUSH2 0x3330 PUSH2 0x448F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x0 ADD SLOAD SUB PUSH2 0x3375 JUMPI PUSH2 0x1CB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x335B JUMPI PUSH2 0x335B PUSH2 0x448F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CB SLOAD PUSH2 0x3385 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x4643 JUMP JUMPDEST DUP2 SUB PUSH2 0x3395 JUMPI POP PUSH1 0x0 NOT SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3310 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFD DUP1 SLOAD PUSH2 0xAED SWAP1 PUSH2 0x42BC JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFE DUP1 SLOAD PUSH2 0xAED SWAP1 PUSH2 0x42BC JUMP JUMPDEST PUSH2 0x162 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x164 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH2 0x33EE SWAP1 DUP7 PUSH2 0x4673 JUMP JUMPDEST PUSH2 0x33F8 SWAP2 SWAP1 PUSH2 0x468A JUMP JUMPDEST PUSH2 0xE1E SWAP2 SWAP1 PUSH2 0x4643 JUMP JUMPDEST PUSH2 0x1C8 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH2 0x2228 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 PUSH2 0x348F PUSH2 0x2EF4 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x34DB DUP8 DUP8 DUP8 DUP8 PUSH2 0x386E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x34E8 DUP2 PUSH2 0x3932 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x351D PUSH2 0x3A97 JUMP JUMPDEST PUSH2 0x3525 PUSH2 0x3AF0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x35E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x362D DUP4 PUSH2 0x3B21 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x363A JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x2902 JUMPI PUSH2 0x2795 DUP4 DUP4 PUSH2 0x3B61 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0xFF AND PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36F0 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B86 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3711 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3711 SWAP2 SWAP1 PUSH2 0x4656 JUMP JUMPDEST PUSH2 0x2902 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x37EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xF98 CALLER PUSH2 0x315F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3862 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x38A5 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x3929 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x38F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3922 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x3929 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3946 JUMPI PUSH2 0x3946 PUSH2 0x46AC JUMP JUMPDEST SUB PUSH2 0x394E JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3962 JUMPI PUSH2 0x3962 PUSH2 0x46AC JUMP JUMPDEST SUB PUSH2 0x39AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x39C3 JUMPI PUSH2 0x39C3 PUSH2 0x46AC JUMP JUMPDEST SUB PUSH2 0x3A10 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3A24 JUMPI PUSH2 0x3A24 PUSH2 0x46AC JUMP JUMPDEST SUB PUSH2 0x1357 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3AA2 PUSH2 0x33A4 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3AB9 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xFB SLOAD DUP1 ISZERO PUSH2 0x3AC8 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3AFB PUSH2 0x33B3 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3B12 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xFC SLOAD DUP1 ISZERO PUSH2 0x3AC8 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3B2A DUP2 PUSH2 0x3566 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1E43 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x46DF PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x3B95 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE1E DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x3C0D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x3BB2 SWAP2 SWAP1 PUSH2 0x46C2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3BF2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3C03 DUP7 DUP4 DUP4 DUP8 PUSH2 0x3CFF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x3C85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3CA1 SWAP2 SWAP1 PUSH2 0x46C2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3CDE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3CE3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3CF4 DUP8 DUP4 DUP4 DUP8 PUSH2 0x3CFF JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3D6E JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x3D67 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x3D67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE97 JUMP JUMPDEST POP DUP2 PUSH2 0xE1E JUMP JUMPDEST PUSH2 0xE1E DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3D83 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE97 SWAP2 SWAP1 PUSH2 0x3E06 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3DAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3DD1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3DB9 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3DF2 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3DB6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1E43 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3DDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3E4C DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3E94 JUMPI PUSH2 0x3E94 PUSH2 0x3E5A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3EC3 JUMPI PUSH2 0x3EC3 PUSH2 0x3E5A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3EDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EF6 JUMPI PUSH2 0x3EF6 PUSH2 0x3E5A JUMP JUMPDEST PUSH2 0x3F09 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x3E9A JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x3F1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3F5C DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3F6C DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F9B DUP8 DUP3 DUP9 ADD PUSH2 0x3ECB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E43 DUP2 PUSH2 0x3E19 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3FD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3FE4 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3FF4 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4018 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x407C JUMPI DUP2 MLOAD DUP1 MLOAD DUP6 MSTORE DUP7 DUP2 ADD MLOAD DUP8 DUP7 ADD MSTORE DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 ADD MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4044 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x409C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x40A7 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x40B7 DUP2 PUSH2 0x3E19 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x40D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x40E2 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x40F9 DUP2 PUSH2 0x3E19 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4122 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x413E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x414A DUP6 DUP3 DUP7 ADD PUSH2 0x3ECB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4191 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x3DDA JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x41A3 DUP2 DUP11 PUSH2 0x3DDA JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x41F7 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x41DB JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x422A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4235 DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x40B7 DUP2 PUSH2 0x4209 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x4260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x426B DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x427B DUP2 PUSH2 0x3E19 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x429F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x42D0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x339D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x431D JUMPI PUSH2 0x431D PUSH2 0x3E5A JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x432C DUP3 DUP3 ADD PUSH2 0x3E9A JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x4346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x3CF4 JUMPI DUP3 MLOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x434C JUMP JUMPDEST DUP1 MLOAD PUSH2 0x339F DUP2 PUSH2 0x4209 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x439B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH2 0x160 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x43B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43B8 PUSH2 0x3E70 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x4416 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4422 DUP10 DUP3 DUP8 ADD PUSH2 0x42F0 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x443C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4448 DUP10 DUP3 DUP8 ADD PUSH2 0x42F0 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x4462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x446E DUP10 DUP3 DUP8 ADD PUSH2 0x42F0 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP DUP1 SWAP5 POP POP POP POP PUSH2 0x4486 PUSH1 0x20 DUP5 ADD PUSH2 0x4365 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x44D7 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3DDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA DUP2 MSTORE PUSH32 0x6E657720706C616E657400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x452B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4564 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3DDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x6C697374696E6720706C616E6574000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x45D8 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3DDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xD DUP2 MSTORE PUSH32 0x756E63617465676F72697A656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xB84 JUMPI PUSH2 0xB84 PUSH2 0x461A JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xB84 JUMPI PUSH2 0xB84 PUSH2 0x461A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1E43 DUP2 PUSH2 0x4209 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xB84 JUMPI PUSH2 0xB84 PUSH2 0x461A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x46A7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x46D4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3DB6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212204E2DD2 DUP4 PREVRANDAO EQ 0xA9 SLT 0x24 JUMPDEST 0xD0 DUP11 MUL 0x1E 0xB0 MLOAD PUSH24 0xB40F85244D110B253F1674DE2C4A4D64736F6C6343000818 STOP CALLER ","sourceMap":"2379:11970:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3765:40:1;965:10:18;3765:40:1;;;-1:-1:-1;;;;;206:55:28;;;188:74;;3795:9:1;293:2:28;278:18;;271:34;161:18;3765:40:1;;;;;;;2379:11970:27;;;;;3352:65;;;;;;;;;;-1:-1:-1;3352:65:27;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;3352:65:27;;;;;;-1:-1:-1;;;;;665:55:28;;;647:74;;635:2;620:18;3352:65:27;;;;;;;;2516:98:10;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4802:197::-;;;;;;;;;;-1:-1:-1;4802:197:10;;;;;:::i;:::-;;:::i;:::-;;;2132:14:28;;2125:22;2107:41;;2095:2;2080:18;4802:197:10;1967:187:28;6749:1571:27;;;;;;;;;;-1:-1:-1;6749:1571:27;;;;;:::i;:::-;;:::i;:::-;;;4267:66:28;4255:79;;;4237:98;;4225:2;4210:18;6749:1571:27;4093:248:28;3613:106:10;;;;;;;;;;-1:-1:-1;3700:12:10;;3613:106;;;4492:25:28;;;4480:2;4465:18;3613:106:10;4346:177:28;6244:666:1;;;;;;;;;;-1:-1:-1;6244:666:1;;;;;:::i;:::-;;:::i;:::-;;8943:144:27;;;;;;;;;12965:54;;;;;;;;;;;;;:::i;5561:256:10:-;;;;;;;;;;-1:-1:-1;5561:256:10;;;;;:::i;:::-;;:::i;13898:147:27:-;;;;;;;;;;;;;:::i;8360:443::-;;;;;;;;;;-1:-1:-1;8360:443:27;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3462:91:10:-;;;;;;;;;;-1:-1:-1;3462:91:10;;3544:2;6551:36:28;;6539:2;6524:18;3462:91:10;6409:184:28;3287:113:12;;;;;;;;;;;;;:::i;3408:195:8:-;;;;;;;;;;-1:-1:-1;3408:195:8;;;;;:::i;:::-;;:::i;6212:234:10:-;;;;;;;;;;-1:-1:-1;6212:234:10;;;;;:::i;:::-;;:::i;3890:89:1:-;;;;;;;;;;-1:-1:-1;3960:12:1;;3890:89;;13292:57:27;;;;;;;;;;;;;:::i;4993:144:1:-;;;;;;;;;;-1:-1:-1;4993:144:1;;;;;:::i;:::-;-1:-1:-1;;;;;5100:21:1;;;5074:7;5100:21;;;:14;:21;;;;;;;;:30;;;;;;;;;;;;;4993:144;7171:797;;;;;;;;;;-1:-1:-1;7171:797:1;;;;;:::i;:::-;;:::i;3975:280:27:-;;;;;;;;;;-1:-1:-1;3975:280:27;;;;;:::i;:::-;;:::i;3922:220:8:-;;;;;;:::i;:::-;;:::i;3027:131::-;;;;;;;;;;;;;:::i;1879:84:9:-;;;;;;;;;;-1:-1:-1;1949:7:9;;;;1879:84;;8839:100:27;;;;;;;;;;;;;:::i;3777:125:10:-;;;;;;;;;;-1:-1:-1;3777:125:10;;;;;:::i;:::-;-1:-1:-1;;;;;3877:18:10;3851:7;3877:18;;;:9;:18;;;;;;;3777:125;2085:101:0;;;;;;;;;;;;;:::i;3043:126:12:-;;;;;;;;;;-1:-1:-1;3043:126:12;;;;;:::i;:::-;;:::i;4532:207:27:-;;;;;;;;;;;;;:::i;11068:1760::-;;;;;;:::i;:::-;;:::i;4521:861:23:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;3219:61:27:-;;;;;;;;;;-1:-1:-1;3219:61:27;;;;;:::i;:::-;;:::i;:::-;;;;9914:25:28;;;9970:2;9955:18;;9948:34;;;;-1:-1:-1;;;;;10018:55:28;9998:18;;;9991:83;9902:2;9887:18;3219:61:27;9712:368:28;5223:98:1;;;;;;;;;;-1:-1:-1;5223:98:1;;;;;:::i;:::-;;:::i;1462:85:0:-;;;;;;;;;;-1:-1:-1;1534:6:0;;-1:-1:-1;;;;;1534:6:0;1462:85;;2727:102:10;;;;;;;;;;;;;:::i;4723:107:1:-;;;;;;;;;;-1:-1:-1;4723:107:1;;;;;:::i;:::-;-1:-1:-1;;;;;4805:18:1;4779:7;4805:18;;;:9;:18;;;;;;;4723:107;5406:222;;;;;;;;;;-1:-1:-1;5406:222:1;;;;;:::i;:::-;;:::i;6933:427:10:-;;;;;;;;;;-1:-1:-1;6933:427:10;;;;;:::i;:::-;;:::i;4098:189::-;;;;;;;;;;-1:-1:-1;4098:189:10;;;;;:::i;:::-;;:::i;5782:268:1:-;;;;;;;;;;-1:-1:-1;5782:268:1;;;;;:::i;:::-;;:::i;4743:99:27:-;;;;;;;;;;-1:-1:-1;4743:99:27;;;;;:::i;:::-;;:::i;9090:1058::-;;;;;;;;;;-1:-1:-1;9090:1058:27;;;;;:::i;:::-;;:::i;3792:106::-;;;;;;;;;;-1:-1:-1;3792:106:27;;;;;:::i;:::-;;:::i;4526:103:1:-;;;;;;;;;;-1:-1:-1;4526:103:1;;;;;:::i;:::-;-1:-1:-1;;;;;4606:16:1;4580:7;4606:16;;;:7;:16;;;;;;;4526:103;13436:158:27;;;;;;;;;;-1:-1:-1;13436:158:27;;;;;:::i;:::-;;:::i;2341:637:12:-;;;;;;;;;;-1:-1:-1;2341:637:12;;;;;:::i;:::-;;:::i;4312:128:1:-;;;;;;;;;;-1:-1:-1;4312:128:1;;;;;:::i;:::-;-1:-1:-1;;;;;4407:26:1;4381:7;4407:26;;;:19;:26;;;;;;;4312:128;13598:170:27;;;;;;;;;;-1:-1:-1;13598:170:27;;;;;:::i;:::-;;:::i;4345:149:10:-;;;;;;;;;;-1:-1:-1;4345:149:10;;;;;:::i;:::-;-1:-1:-1;;;;;4460:18:10;;;4434:7;4460:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4345:149;3466:61:27;;;;;;;;;;-1:-1:-1;3466:61:27;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;12432:15:28;;;12414:34;;12479:2;12464:18;;12457:34;;;;12534:14;;12527:22;12507:18;;;12500:50;;;;12586:15;;;12581:2;12566:18;;12559:43;12633:3;12618:19;;12611:35;;;;12340:3;12325:19;3466:61:27;12100:552:28;4068:93:1;;;;;;;;;;-1:-1:-1;4140:14:1;;4068:93;;2335:198:0;;;;;;;;;;-1:-1:-1;2335:198:0;;;;;:::i;:::-;;:::i;2516:98:10:-;2570:13;2602:5;2595:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2516:98;:::o;4802:197::-;4885:4;965:10:18;4939:32:10;965:10:18;4955:7:10;4964:6;4939:8;:32::i;:::-;4988:4;4981:11;;;4802:197;;;;;:::o;6749:1571:27:-;6888:6;6935:10;:24;:66;;;;-1:-1:-1;6983:17:27;;-1:-1:-1;;;;;6963:38:27;;;6983:17;;6963:38;6935:66;6931:1319;;;7070:17;;:56;;;;;;;;4492:25:28;;;7033:31:27;;-1:-1:-1;;;;;7070:17:27;;:31;;4465:18:28;;7070:56:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7070:56:27;;;;;;;;;;;;:::i;:::-;7032:94;;;7179:27;7209:13;:21;;;7179:51;;7286:22;7311:30;:45;7342:10;7353:1;7342:13;;;;;;;;:::i;:::-;;;;;;;7311:45;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7311:45:27;7286:70;;7364:22;7389:30;:45;7420:10;7431:1;7420:13;;;;;;;;:::i;:::-;;;;;;;;;;;;7389:45;;;;;;;;;;;;;-1:-1:-1;7389:45:27;;7470:60;;;;;;;;-1:-1:-1;;;;;7470:60:27;;;;;7389:45;7470:60;;;;;;7389:45;;-1:-1:-1;7590:26:27;7470:60;7590:17;:26::i;:::-;7688:56;7700:8;7710:4;7716:7;7725:4;7688:56;;;;;;;;;:::i;:::-;;;;;;;;7003:748;;;;;6931:1319;;;7775:1;7761:4;:11;:15;:57;;;;-1:-1:-1;7800:17:27;;-1:-1:-1;;;;;7780:38:27;;;7800:17;;7780:38;7761:57;7757:493;;;7828:17;7859:4;7848:27;;;;;;;;;;;;:::i;:::-;7828:47;;7883:30;7888:7;7897:9;7908:4;7883;:30::i;:::-;8039:60;8051:8;8061:4;8067:7;8076:4;8039:60;;;;;;;;;:::i;:::-;;;;;;;;7820:286;7757:493;;;8184:59;8196:8;8206:4;8212:7;8221:4;8184:59;;;;;;;;;:::i;:::-;;;;;;;;7757:493;-1:-1:-1;8263:52:27;6749:1571;;;;;;;:::o;6244:666:1:-;-1:-1:-1;;;;;6319:16:1;;6338:1;6319:16;;;:7;:16;;;;;;6311:71;;;;-1:-1:-1;;;6311:71:1;;18479:2:28;6311:71:1;;;18461:21:28;18518:2;18498:18;;;18491:30;18557:34;18537:18;;;18530:62;-1:-1:-1;;;18608:18:28;;;18601:36;18654:19;;6311:71:1;;;;;;;;;6393:15;6411:19;6422:7;6411:10;:19::i;:::-;6393:37;;6449:7;6460:1;6449:12;6441:68;;;;-1:-1:-1;;;6441:68:1;;18886:2:28;6441:68:1;;;18868:21:28;18925:2;18905:18;;;18898:30;18964:34;18944:18;;;18937:62;-1:-1:-1;;;19015:18:28;;;19008:41;19066:19;;6441:68:1;18684:407:28;6441:68:1;6718:7;6700:14;;:25;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;6759:18:1;;;;;;:9;:18;;;;;:29;;;;;;6809:46;6769:7;6781;6809:28;:46::i;:::-;6870:33;;;-1:-1:-1;;;;;206:55:28;;188:74;;293:2;278:18;;271:34;;;6870:33:1;;161:18:28;6870:33:1;;;;;;;6301:609;6244:666;:::o;8943:144:27:-;:::o;12965:54::-;1355:13:0;:11;:13::i;:::-;13006:8:27::1;:6;:8::i;5561:256:10:-:0;5658:4;965:10:18;5714:38:10;5730:4;965:10:18;5745:6:10;5714:15;:38::i;:::-;5762:27;5772:4;5778:2;5782:6;5762:9;:27::i;:::-;-1:-1:-1;5806:4:10;;5561:256;-1:-1:-1;;;;5561:256:10:o;13898:147:27:-;1355:13:0;:11;:13::i;:::-;1503:19:9::1;:17;:19::i;:::-;14006:34:27::2;::::0;13989:10:::2;::::0;;;14018:21:::2;14006:34:::0;::::2;;;::::0;13960:18:::2;14006:34:::0;13960:18;14006:34;14018:21;13989:10;14006:34;::::2;;;;;;;;;;;;;::::0;::::2;;;;;;13954:91;13898:147::o:0;8360:443::-;8454:21;8502:10;8491:8;:21;8483:47;;;;-1:-1:-1;;;8483:47:27;;19927:2:28;8483:47:27;;;19909:21:28;19966:2;19946:18;;;19939:30;20005:15;19985:18;;;19978:43;20038:18;;8483:47:27;19725:337:28;8483:47:27;8556:13;:20;8544:32;;;8536:64;;;;-1:-1:-1;;;8536:64:27;;20269:2:28;8536:64:27;;;20251:21:28;20308:2;20288:18;;;20281:30;20347:21;20327:18;;;20320:49;20386:18;;8536:64:27;20067:343:28;8536:64:27;8607:26;8655:21;8666:10;8655:8;:21;:::i;:::-;8636:41;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8636:41:27;;;;;;;;;;;;;;;;-1:-1:-1;8607:70:27;-1:-1:-1;8697:10:27;8683:99;8713:8;8709:1;:12;8683:99;;;8759:13;8773:1;8759:16;;;;;;;;:::i;:::-;;;;;;;;;;8736:39;;;;;;;;8759:16;;;;;;;8736:39;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8736:39:27;;;;;;;;:4;8741:14;8745:10;8741:1;:14;:::i;:::-;8736:20;;;;;;;;:::i;:::-;;;;;;;;;;:39;8723:3;;8683:99;;;-1:-1:-1;8794:4:27;8360:443;-1:-1:-1;;;8360:443:27:o;3287:113:12:-;3347:7;3373:20;:18;:20::i;:::-;3366:27;;3287:113;:::o;3408:195:8:-;-1:-1:-1;;;;;1764:6:8;1747:23;1755:4;1747:23;1739:80;;;;-1:-1:-1;;;1739:80:8;;20750:2:28;1739:80:8;;;20732:21:28;20789:2;20769:18;;;20762:30;20828:34;20808:18;;;20801:62;-1:-1:-1;;;20879:18:28;;;20872:42;20931:19;;1739:80:8;20548:408:28;1739:80:8;1861:6;-1:-1:-1;;;;;1837:30:8;:20;1180:66:5;1557:65;-1:-1:-1;;;;;1557:65:5;;1478:151;1837:20:8;-1:-1:-1;;;;;1837:30:8;;1829:87;;;;-1:-1:-1;;;1829:87:8;;21163:2:28;1829:87:8;;;21145:21:28;21202:2;21182:18;;;21175:30;21241:34;21221:18;;;21214:62;-1:-1:-1;;;21292:18:28;;;21285:42;21344:19;;1829:87:8;20961:408:28;1829:87:8;3489:36:::1;3507:17;3489;:36::i;:::-;3576:12;::::0;;3586:1:::1;3576:12:::0;;;::::1;::::0;::::1;::::0;;;3535:61:::1;::::0;3557:17;;3576:12;3535:21:::1;:61::i;:::-;3408:195:::0;:::o;6212:234:10:-;965:10:18;6300:4:10;4460:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4460:27:10;;;;;;;;;;6300:4;;965:10:18;6354:64:10;;965:10:18;;4460:27:10;;6379:38;;6407:10;;6379:38;:::i;:::-;6354:8;:64::i;13292:57:27:-;1355:13:0;:11;:13::i;:::-;13334:10:27::1;:8;:10::i;7171:797:1:-:0;-1:-1:-1;;;;;7263:16:1;;7282:1;7263:16;;;:7;:16;;;;;;7255:71;;;;-1:-1:-1;;;7255:71:1;;18479:2:28;7255:71:1;;;18461:21:28;18518:2;18498:18;;;18491:30;18557:34;18537:18;;;18530:62;-1:-1:-1;;;18608:18:28;;;18601:36;18654:19;;7255:71:1;18277:402:28;7255:71:1;7337:15;7355:26;7366:5;7373:7;7355:10;:26::i;:::-;7337:44;;7400:7;7411:1;7400:12;7392:68;;;;-1:-1:-1;;;7392:68:1;;18886:2:28;7392:68:1;;;18868:21:28;18925:2;18905:18;;;18898:30;18964:34;18944:18;;;18937:62;-1:-1:-1;;;19015:18:28;;;19008:41;19066:19;;7392:68:1;18684:407:28;7392:68:1;-1:-1:-1;;;;;7710:26:1;;;;;;:19;:26;;;;;:37;;7740:7;;7710:26;:37;;7740:7;;7710:37;:::i;:::-;;;;-1:-1:-1;;;;;;;7781:21:1;;;;;;;:14;:21;;;;;;;;:30;;;;;;;;;:41;;;;;;7843:58;7796:5;7803:7;7815;7843:33;:58::i;:::-;7916:45;;;-1:-1:-1;;;;;206:55:28;;;188:74;;293:2;278:18;;271:34;;;7916:45:1;;;;;161:18:28;7916:45:1;;;;;;;7245:723;7171:797;;:::o;3975:280:27:-;1355:13:0;:11;:13::i;:::-;1503:19:9::1;:17;:19::i;:::-;4121:8:27::2;:20:::0;;;;4147:13:::2;:52:::0;;-1:-1:-1;;;;;4147:52:27;;::::2;-1:-1:-1::0;;;;;;4147:52:27;;::::2;;::::0;;;4205:17:::2;:45:::0;;;;;::::2;::::0;::::2;;::::0;;3975:280::o;3922:220:8:-;-1:-1:-1;;;;;1764:6:8;1747:23;1755:4;1747:23;1739:80;;;;-1:-1:-1;;;1739:80:8;;20750:2:28;1739:80:8;;;20732:21:28;20789:2;20769:18;;;20762:30;20828:34;20808:18;;;20801:62;-1:-1:-1;;;20879:18:28;;;20872:42;20931:19;;1739:80:8;20548:408:28;1739:80:8;1861:6;-1:-1:-1;;;;;1837:30:8;:20;1180:66:5;1557:65;-1:-1:-1;;;;;1557:65:5;;1478:151;1837:20:8;-1:-1:-1;;;;;1837:30:8;;1829:87;;;;-1:-1:-1;;;1829:87:8;;21163:2:28;1829:87:8;;;21145:21:28;21202:2;21182:18;;;21175:30;21241:34;21221:18;;;21214:62;-1:-1:-1;;;21292:18:28;;;21285:42;21344:19;;1829:87:8;20961:408:28;1829:87:8;4037:36:::1;4055:17;4037;:36::i;:::-;4083:52;4105:17;4124:4;4130;4083:21;:52::i;3027:131::-:0;3105:7;2190:4;-1:-1:-1;;;;;2199:6:8;2182:23;;2174:92;;;;-1:-1:-1;;;2174:92:8;;21576:2:28;2174:92:8;;;21558:21:28;21615:2;21595:18;;;21588:30;21654:34;21634:18;;;21627:62;21725:26;21705:18;;;21698:54;21769:19;;2174:92:8;21374:420:28;2174:92:8;-1:-1:-1;1180:66:5::1;3027:131:8::0;:::o;8839:100:27:-;8885:21;8921:13;8914:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8914:20:27;;;;;;;;;;;;;;;;;;;;;;;;;8839:100;:::o;2085:101:0:-;1355:13;:11;:13::i;:::-;2149:30:::1;2176:1;2149:18;:30::i;3043:126:12:-:0;-1:-1:-1;;;;;3138:14:12;;3112:7;3138:14;;;:7;:14;;;;;929::19;3138:24:12;838:112:19;4532:207:27;3279:19:7;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:7;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:7;1713:19:17;:23;;;3387:66:7;;-1:-1:-1;3436:12:7;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:7;;22001:2:28;3325:201:7;;;21983:21:28;22040:2;22020:18;;;22013:30;22079:34;22059:18;;;22052:62;22150:16;22130:18;;;22123:44;22184:19;;3325:201:7;21799:410:28;3325:201:7;3536:12;:16;;-1:-1:-1;;3536:16:7;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:7;;;;;3562:65;4579:16:27::1;:14;:16::i;:::-;4601:17;:15;:17::i;:::-;4657:24;:22;:24::i;:::-;3651:14:7::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:7;;;3721:14;;-1:-1:-1;6551:36:28;;3721:14:7;;6539:2:28;6524:18;3721:14:7;;;;;;;3269:483;4532:207:27:o;11068:1760::-;1503:19:9;:17;:19::i;:::-;11250:18:27::1;11288:19:::0;11326:13:::1;11342:41;11366:16;11342:23;:41::i;:::-;11326:57;;11629:5;11618:8;;:16;;;;:::i;:::-;11606:9;:28;11602:57;;;11644:8;::::0;::::1;11602:57;11814:35;::::0;11855:205:::1;11876:13;:20:::0;11872:24;::::1;11855:205;;;11942:16;11915:13;11929:1;11915:16;;;;;;;;:::i;:::-;;;;;;;;;;;:23;;;:43:::0;11911:143:::1;;12000:13;12014:1;12000:16;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;:29:::1;:16;::::0;;::::1;;:29;::::0;-1:-1:-1;;;;;12000:29:27::1;::::0;-1:-1:-1;12040:5:27::1;;11911:143;11898:3;;11855:205;;;-1:-1:-1::0;12212:51:27::1;::::0;12110:2:::1;::::0;12087:20:::1;::::0;-1:-1:-1;;;;;12212:24:27;::::1;::::0;12110:2;;12087:20;12212:51;12087:20;12212:51;12110:2;12212:24;:51:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12196:67;;;12277:4;12269:37;;;::::0;-1:-1:-1;;;12269:37:27;;22825:2:28;12269:37:27::1;::::0;::::1;22807:21:28::0;22864:2;22844:18;;;22837:30;22903:22;22883:18;;;22876:50;22943:18;;12269:37:27::1;22623:344:28::0;12269:37:27::1;12338:13;::::0;:74:::1;::::0;;;;::::1;::::0;::::1;23197:25:28::0;;;23238:18;;;23231:34;;;12338:13:27::1;23281:18:28::0;;;23274:50;12402:9:27::1;23340:18:28::0;;;23333:34;-1:-1:-1;;;;;12338:13:27;;::::1;::::0;:26:::1;::::0;23169:19:28;;12338:74:27::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;12446:12;12435:8;;:23;;;;:::i;:::-;12423:9;:35;12419:213;;;12469:13;12488:10;-1:-1:-1::0;;;;;12488:15:27::1;12543:12;12532:8;;12520:9;:20;;;;:::i;:::-;:35;;;;:::i;:::-;12488:79;::::0;::::1;::::0;;;;;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12468:99;;;12583:8;12575:50;;;::::0;-1:-1:-1;;;12575:50:27;;23769:2:28;12575:50:27::1;::::0;::::1;23751:21:28::0;23808:2;23788:18;;;23781:30;23847:31;23827:18;;;23820:59;23896:18;;12575:50:27::1;23567:353:28::0;12575:50:27::1;12460:172;12419:213;12721:102;::::0;;24156:25:28;;;-1:-1:-1;;;;;24278:15:28;;;24273:2;24258:18;;24251:43;24310:18;;;24303:34;;;24373:15;;24368:2;24353:18;;24346:43;12721:102:27;;::::1;::::0;;;;24143:3:28;12721:102:27;;::::1;11173:1655;;;;;;11068:1760:::0;;:::o;4521:861:23:-;4636:13;4663:18;4695:21;4730:15;4759:25;4798:12;4824:27;5087:11;;5102:1;5087:16;;;:39;;;;-1:-1:-1;5107:14:23;;:19;5087:39;5079:73;;;;-1:-1:-1;;;5079:73:23;;24602:2:28;5079:73:23;;;24584:21:28;24641:2;24621:18;;;24614:30;24680:23;24660:18;;;24653:51;24721:18;;5079:73:23;24400:345:28;5079:73:23;5214:13;:11;:13::i;:::-;5241:16;:14;:16::i;:::-;5349;;;5333:1;5349:16;;;;;;;;;5163:212;;;;-1:-1:-1;5163:212:23;;-1:-1:-1;5271:13:23;;-1:-1:-1;5306:4:23;;-1:-1:-1;5333:1:23;-1:-1:-1;5349:16:23;-1:-1:-1;5163:212:23;-1:-1:-1;4521:861:23:o;3219:61:27:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3219:61:27;;-1:-1:-1;;;;;;3219:61:27;;:::o;5223:98:1:-;5274:7;5300;5308:5;5300:14;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;5300:14:1;;5223:98;-1:-1:-1;;5223:98:1:o;2727:102:10:-;2783:13;2815:7;2808:14;;;;;:::i;5406:222:1:-;5464:7;5483:21;5531:15;4140:14;;;4068:93;5531:15;5507:39;;:21;:39;:::i;:::-;5483:63;;5563:58;5579:7;5588:13;5603:17;5612:7;-1:-1:-1;;;;;4805:18:1;4779:7;4805:18;;;:9;:18;;;;;;;4723:107;5603:17;5563:15;:58::i;:::-;5556:65;5406:222;-1:-1:-1;;;5406:222:1:o;6933:427:10:-;965:10:18;7026:4:10;4460:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4460:27:10;;;;;;;;;;7026:4;;965:10:18;7170:15:10;7150:16;:35;;7142:85;;;;-1:-1:-1;;;7142:85:10;;24952:2:28;7142:85:10;;;24934:21:28;24991:2;24971:18;;;24964:30;25030:34;25010:18;;;25003:62;25101:7;25081:18;;;25074:35;25126:19;;7142:85:10;24750:401:28;7142:85:10;7261:60;7270:5;7277:7;7305:15;7286:16;:34;7261:8;:60::i;4098:189::-;4177:4;965:10:18;4231:28:10;965:10:18;4248:2:10;4252:6;4231:9;:28::i;5782:268:1:-;-1:-1:-1;;;;;4407:26:1;;5865:7;4407:26;;;:19;:26;;;;;;5865:7;;5908:30;;;;;5932:4;5908:30;;;647:74:28;-1:-1:-1;;;;;5908:15:1;;;;;620:18:28;;5908:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;;;:::i;:::-;-1:-1:-1;;;;;5100:21:1;;;5074:7;5100:21;;;:14;:21;;;;;;;;:30;;;;;;;;;;5884:77;;-1:-1:-1;5978:65:1;;5994:7;;5884:77;;5563:15;:58::i;4743:99:27:-;1355:13:0;:11;:13::i;:::-;1503:19:9::1;:17;:19::i;:::-;4820:8:27::2;:17:::0;4743:99::o;9090:1058::-;1503:19:9;:17;:19::i;:::-;9185:13:27::1;:20:::0;9175:30;::::1;9167:62;;;::::0;-1:-1:-1;;;9167:62:27;;20269:2:28;9167:62:27::1;::::0;::::1;20251:21:28::0;20308:2;20288:18;;;20281:30;20347:21;20327:18;;;20320:49;20386:18;;9167:62:27::1;20067:343:28::0;9167:62:27::1;9236:12;9251:10;9236:25;;9267:34;9304:13;9318:7;9304:22;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;9267:59:::1;::::0;;::::1;::::0;::::1;::::0;;9304:22:::1;::::0;;::::1;::::0;;::::1;9267:59:::0;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;9267:59:27::1;::::0;;;;;;;-1:-1:-1;9432:10:27::1;:41;9428:83;;9496:8;::::0;::::1;9428:83;9834:85;;;;;;;;9863:1;9834:85;;;;9879:1;9834:85;;;;9910:1;-1:-1:-1::0;;;;;9834:85:27::1;;;::::0;9809:13:::1;9823:7;9809:22;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;:110;;:22:::1;::::0;;;::::1;;:110:::0;;;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;;-1:-1:-1;;;;;;9809:110:27::1;-1:-1:-1::0;;;;;9809:110:27;;::::1;::::0;;;::::1;::::0;;9985:23:::1;9994:7:::0;10003:4;9985:8:::1;:23::i;:::-;10090:17;::::0;10116:21;;10047:96:::1;::::0;;-1:-1:-1;;;;;25437:15:28;;;25419:34;;10090:17:27;;::::1;25484:2:28::0;25469:18;;25462:43;25521:18;;25514:34;10047:96:27::1;::::0;25346:2:28;25331:18;10047:96:27::1;;;;;;;;9161:987;;9090:1058:::0;;:::o;3792:106::-;1355:13:0;:11;:13::i;:::-;1503:19:9::1;:17;:19::i;:::-;3871:12:27::2;:22:::0;;-1:-1:-1;;;;;;3871:22:27::2;-1:-1:-1::0;;;;;3871:22:27;;;::::2;::::0;;;::::2;::::0;;3792:106::o;13436:158::-;1355:13:0;:11;:13::i;:::-;13534:17:27::1;::::0;:55:::1;::::0;;;;-1:-1:-1;;;;;25745:55:28;;;13534::27::1;::::0;::::1;25727:74:28::0;25844:14;;25837:22;25817:18;;;25810:50;13534:17:27;;::::1;::::0;:35:::1;::::0;25700:18:28;;13534:55:27::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;13436:158:::0;;:::o;2341:637:12:-;2576:8;2557:15;:27;;2549:69;;;;-1:-1:-1;;;2549:69:12;;26073:2:28;2549:69:12;;;26055:21:28;26112:2;26092:18;;;26085:30;26151:31;26131:18;;;26124:59;26200:18;;2549:69:12;25871:353:28;2549:69:12;2629:18;1372:95;2689:5;2696:7;2705:5;2712:16;2722:5;2712:9;:16::i;:::-;2660:79;;;;;;26516:25:28;;;;-1:-1:-1;;;;;26638:15:28;;;26618:18;;;26611:43;26690:15;;;;26670:18;;;26663:43;26722:18;;;26715:34;26765:19;;;26758:35;26809:19;;;26802:35;;;26488:19;;2660:79:12;;;;;;;;;;;;2650:90;;;;;;2629:111;;2751:12;2766:28;2783:10;2766:16;:28::i;:::-;2751:43;;2805:14;2822:39;2847:4;2853:1;2856;2859;2822:24;:39::i;:::-;2805:56;;2889:5;-1:-1:-1;;;;;2879:15:12;:6;-1:-1:-1;;;;;2879:15:12;;2871:58;;;;-1:-1:-1;;;2871:58:12;;27050:2:28;2871:58:12;;;27032:21:28;27089:2;27069:18;;;27062:30;27128:32;27108:18;;;27101:60;27178:18;;2871:58:12;26848:354:28;2871:58:12;2940:31;2949:5;2956:7;2965:5;2940:8;:31::i;:::-;2539:439;;;2341:637;;;;;;;:::o;13598:170:27:-;13712:17;;:51;;;;;-1:-1:-1;;;;;27460:15:28;;;13712:51:27;;;27442:34:28;27512:15;;;27492:18;;;27485:43;13693:4:27;;13712:17;;:34;;27354:18:28;;13712:51:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3466:61::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3466:61:27;;;;-1:-1:-1;3466:61:27;;-1:-1:-1;3466:61:27;;;;;;;;;;;;:::o;2335:198:0:-;1355:13;:11;:13::i;:::-;-1:-1:-1;;;;;2423:22:0;::::1;2415:73;;;::::0;-1:-1:-1;;;2415:73:0;;27991:2:28;2415:73:0::1;::::0;::::1;27973:21:28::0;28030:2;28010:18;;;28003:30;28069:34;28049:18;;;28042:62;28140:8;28120:18;;;28113:36;28166:19;;2415:73:0::1;27789:402:28::0;2415:73:0::1;2498:28;2517:8;2498:18;:28::i;10815:340:10:-:0;-1:-1:-1;;;;;10916:19:10;;10908:68;;;;-1:-1:-1;;;10908:68:10;;28398:2:28;10908:68:10;;;28380:21:28;28437:2;28417:18;;;28410:30;28476:34;28456:18;;;28449:62;28547:6;28527:18;;;28520:34;28571:19;;10908:68:10;28196:400:28;10908:68:10;-1:-1:-1;;;;;10994:21:10;;10986:68;;;;-1:-1:-1;;;10986:68:10;;28803:2:28;10986:68:10;;;28785:21:28;28842:2;28822:18;;;28815:30;28881:34;28861:18;;;28854:62;28952:4;28932:18;;;28925:32;28974:19;;10986:68:10;28601:398:28;10986:68:10;-1:-1:-1;;;;;11065:18:10;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11116:32;;4492:25:28;;;11116:32:10;;4465:18:28;11116:32:10;;;;;;;10815:340;;;:::o;5847:898:27:-;5934:10;;;5968;;;;-1:-1:-1;;;;;5989:25:27;;5916:15;5989:25;;;:16;:25;;;;;;;:32;:36;5985:756;;6081:6;6076:250;-1:-1:-1;;;;;6097:25:27;;;;;;:16;:25;;;;;:32;6093:36;;6076:250;;;-1:-1:-1;;;;;6150:25:27;;;;;;;:16;:25;;;;;:28;;:51;;;;6176:1;;6150:28;;;;;;:::i;:::-;;;;;;;;;;;;;;:40;;;;;;-1:-1:-1;;;;;6150:40:27;:51;6146:172;;-1:-1:-1;;;;;6262:25:27;;;;;;:16;:25;;;;;:28;;6303:4;;6262:25;6288:1;;6262:28;;;;;;:::i;:::-;;;;;;;;;;;;;;:38;;:45;;-1:-1:-1;;6262:45:27;;;;;;;;;;6146:172;6131:3;;6076:250;;;;5910:835;;5847:898;:::o;5985:756::-;6359:10;;;;;-1:-1:-1;;;;;6342:28:27;6380:1;6342:28;;;:16;:28;;;;;;:35;:39;6338:403;;6422:6;6417:250;-1:-1:-1;;;;;6438:25:27;;;;;;:16;:25;;;;;:32;6434:36;;6417:250;;;-1:-1:-1;;;;;6491:25:27;;;;;;;:16;:25;;;;;:28;;:51;;;;6517:1;;6491:28;;;;;;:::i;:::-;;;;;;;;;;;;;;:40;;;;;;-1:-1:-1;;;;;6491:40:27;:51;6487:172;;-1:-1:-1;;;;;6603:25:27;;;;;;:16;:25;;;;;:28;;6644:4;;6603:25;6629:1;;6603:28;;;;;;:::i;:::-;;;;;;;;;;;;;;:38;;:45;;-1:-1:-1;;6603:45:27;;;;;;;;;;6487:172;6472:3;;6417:250;;6338:403;6687:47;;-1:-1:-1;;;6687:47:27;;29206:2:28;6687:47:27;;;29188:21:28;29245:2;29225:18;;;29218:30;29284:34;29264:18;;;29257:62;29355:7;29335:18;;;29328:35;29380:19;;6687:47:27;29004:401:28;6338:403:27;5910:835;;5847:898;:::o;4846:722::-;5285:66;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5285:66:27;;;;;;;;;-1:-1:-1;5357:33:27;;;:19;:33;;;;;:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5357:55:27;;;;;;5447:13;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5528:17;;5494:69;;5508:10;29702:34:28;;5528:17:27;;29752:18:28;;;29745:43;;;;29804:18;;;29797:34;;;29847:18;;29840:34;;;5285:66:27;5494:69;;29628:3:28;29613:19;5494:69:27;29410:470:28;2658:312:17;2772:6;2747:21;:31;;2739:73;;;;-1:-1:-1;;;2739:73:17;;30087:2:28;2739:73:17;;;30069:21:28;30126:2;30106:18;;;30099:30;30165:31;30145:18;;;30138:59;30214:18;;2739:73:17;29885:353:28;2739:73:17;2824:12;2842:9;-1:-1:-1;;;;;2842:14:17;2864:6;2842:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2823:52;;;2893:7;2885:78;;;;-1:-1:-1;;;2885:78:17;;30445:2:28;2885:78:17;;;30427:21:28;30484:2;30464:18;;;30457:30;30523:34;30503:18;;;30496:62;30594:28;30574:18;;;30567:56;30640:19;;2885:78:17;30243:422:28;1620:130:0;1534:6;;-1:-1:-1;;;;;1534:6:0;965:10:18;1683:23:0;1675:68;;;;-1:-1:-1;;;1675:68:0;;30872:2:28;1675:68:0;;;30854:21:28;;;30891:18;;;30884:30;30950:34;30930:18;;;30923:62;31002:18;;1675:68:0;30670:356:28;2450:115:9;1503:19;:17;:19::i;:::-;2509:7:::1;:14:::0;;-1:-1:-1;;2509:14:9::1;2519:4;2509:14;::::0;;2538:20:::1;2545:12;965:10:18::0;;886:96;2545:12:9::1;2538:20;::::0;-1:-1:-1;;;;;665:55:28;;;647:74;;635:2;620:18;2538:20:9::1;;;;;;;2450:115::o:0;11436:411:10:-;-1:-1:-1;;;;;4460:18:10;;;11536:24;4460:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;11602:37:10;;11598:243;;11683:6;11663:16;:26;;11655:68;;;;-1:-1:-1;;;11655:68:10;;31233:2:28;11655:68:10;;;31215:21:28;31272:2;31252:18;;;31245:30;31311:31;31291:18;;;31284:59;31360:18;;11655:68:10;31031:353:28;11655:68:10;11765:51;11774:5;11781:7;11809:6;11790:16;:25;11765:8;:51::i;7814:788::-;-1:-1:-1;;;;;7910:18:10;;7902:68;;;;-1:-1:-1;;;7902:68:10;;31591:2:28;7902:68:10;;;31573:21:28;31630:2;31610:18;;;31603:30;31669:34;31649:18;;;31642:62;31740:7;31720:18;;;31713:35;31765:19;;7902:68:10;31389:401:28;7902:68:10;-1:-1:-1;;;;;7988:16:10;;7980:64;;;;-1:-1:-1;;;7980:64:10;;31997:2:28;7980:64:10;;;31979:21:28;32036:2;32016:18;;;32009:30;32075:34;32055:18;;;32048:62;32146:5;32126:18;;;32119:33;32169:19;;7980:64:10;31795:399:28;7980:64:10;-1:-1:-1;;;;;8126:15:10;;8104:19;8126:15;;;:9;:15;;;;;;8159:21;;;;8151:72;;;;-1:-1:-1;;;8151:72:10;;32401:2:28;8151:72:10;;;32383:21:28;32440:2;32420:18;;;32413:30;32479:34;32459:18;;;32452:62;32550:8;32530:18;;;32523:36;32576:19;;8151:72:10;32199:402:28;8151:72:10;-1:-1:-1;;;;;8257:15:10;;;;;;;:9;:15;;;;;;8275:20;;;8257:38;;8472:13;;;;;;;;;;:23;;;;;;8521:26;;;;;;8289:6;4492:25:28;;4480:2;4465:18;;4346:177;8521:26:10;;;;;;;;8558:37;5847:898:27;2031:106:9;1949:7;;;;2100:9;2092:38;;;;-1:-1:-1;;;2092:38:9;;32808:2:28;2092:38:9;;;32790:21:28;32847:2;32827:18;;;32820:30;32886:18;32866;;;32859:46;32922:18;;2092:38:9;32606:340:28;3325:109:23;3378:7;3404:23;:21;:23::i;14183:92:27:-;1355:13:0;:11;:13::i;2841:944:5:-;839:66;3257:59;;;3253:526;;;3332:37;3351:17;3332:18;:37::i;3253:526::-;3433:17;-1:-1:-1;;;;;3404:61:5;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3404:63:5;;;;;;;;-1:-1:-1;;3404:63:5;;;;;;;;;;;;:::i;:::-;;;3400:302;;3631:56;;-1:-1:-1;;;3631:56:5;;33153:2:28;3631:56:5;;;33135:21:28;33192:2;33172:18;;;33165:30;33231:34;33211:18;;;33204:62;33302:16;33282:18;;;33275:44;33336:19;;3631:56:5;32951:410:28;3400:302:5;1180:66;3517:28;;3509:82;;;;-1:-1:-1;;;3509:82:5;;33568:2:28;3509:82:5;;;33550:21:28;33607:2;33587:18;;;33580:30;33646:34;33626:18;;;33619:62;33717:11;33697:18;;;33690:39;33746:19;;3509:82:5;33366:405:28;3509:82:5;3468:138;3715:53;3733:17;3752:4;3758:9;3715:17;:53::i;2697:117:9:-;1750:16;:14;:16::i;:::-;2755:7:::1;:15:::0;;-1:-1:-1;;2755:15:9::1;::::0;;2785:22:::1;965:10:18::0;2794:12:9::1;886:96:18::0;996:186:15;1116:58;;;-1:-1:-1;;;;;206:55:28;;1116:58:15;;;188:74:28;278:18;;;;271:34;;;1116:58:15;;;;;;;;;;161:18:28;;;;1116:58:15;;;;;;;;;;1139:23;1116:58;;;1089:86;;1109:5;;1089:19;:86::i;2687:187:0:-;2779:6;;;-1:-1:-1;;;;;2795:17:0;;;-1:-1:-1;;;;;;2795:17:0;;;;;;;2827:40;;2779:6;;;2795:17;2779:6;;2827:40;;2760:16;;2827:40;2750:124;2687:187;:::o;1024:95::-;5374:13:7;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:7;;33978:2:28;5366:69:7;;;33960:21:28;34017:2;33997:18;;;33990:30;34056:34;34036:18;;;34029:62;-1:-1:-1;;;34107:18:28;;;34100:41;34158:19;;5366:69:7;33776:407:28;5366:69:7;1086:26:0::1;:24;:26::i;1084:97:9:-:0;5374:13:7;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:7;;33978:2:28;5366:69:7;;;33960:21:28;34017:2;33997:18;;;33990:30;34056:34;34036:18;;;34029:62;-1:-1:-1;;;34107:18:28;;;34100:41;34158:19;;5366:69:7;33776:407:28;5366:69:7;1147:27:9::1;:25;:27::i;2290:67:8:-:0;5374:13:7;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:7;;33978:2:28;5366:69:7;;;33960:21:28;34017:2;33997:18;;;33990:30;34056:34;34036:18;;;34029:62;-1:-1:-1;;;34107:18:28;;;34100:41;34158:19;;5366:69:7;33776:407:28;10305:454:27;10413:7;1503:19:9;:17;:19::i;:::-;10433:6:27::1;10428:327;10449:13;:20:::0;10445:24;::::1;10428:327;;;10539:20;10512:13;10526:1;10512:16;;;;;;;;:::i;:::-;;;;;;;;;;;:23;;;:47:::0;10508:101:::1;;10578:13;10592:1;10578:16;;;;;;;;:::i;:::-;;;;;;;;;;;:22;;;10571:29;;;10305:454:::0;;;:::o;10508:101::-:1;10679:13;:20:::0;:24:::1;::::0;10702:1:::1;::::0;10679:24:::1;:::i;:::-;10673:1;:31:::0;10669:80:::1;;-1:-1:-1::0;;;10723:17:27;10305:454;-1:-1:-1;;10305:454:27:o;10669:80::-:1;10471:3;;10428:327;;;;1532:1:9;10305:454:27::0;;;:::o;5606:98:23:-;5660:13;5692:5;5685:12;;;;;:::i;5931:104::-;5988:13;6020:8;6013:15;;;;;:::i;8140:242:1:-;8345:12;;-1:-1:-1;;;;;8325:16:1;;8282:7;8325:16;;;:7;:16;;;;;;8282:7;;8360:15;;8309:32;;:13;:32;:::i;:::-;8308:49;;;;:::i;:::-;:67;;;;:::i;12832:129:27:-;12896:17;;:60;;;;;12935:4;12896:60;;;25419:34:28;-1:-1:-1;;;;;25489:15:28;;;25469:18;;;25462:43;25521:18;;;25514:34;;;12896:17:27;;;;:30;;25331:18:28;;12896:60:27;25156:398:28;3531:214:12;-1:-1:-1;;;;;3662:14:12;;3591:15;3662:14;;;:7;:14;;;;;929::19;;1061:1;1043:19;;;;929:14;3721:17:12;956:123:19;4257:176:23;4334:7;4360:66;4393:20;:18;:20::i;:::-;4415:10;8569:4:22;8563:11;8599:10;8587:23;;8639:4;8630:14;;8623:39;;;;8691:4;8682:14;;8675:34;8745:4;8730:20;;;8369:397;6620:232;6705:7;6725:17;6744:18;6766:25;6777:4;6783:1;6786;6789;6766:10;:25::i;:::-;6724:67;;;;6801:18;6813:5;6801:11;:18::i;:::-;-1:-1:-1;6836:9:22;6620:232;-1:-1:-1;;;;;6620:232:22:o;3440:192:23:-;3495:7;1934:95;3554:17;:15;:17::i;:::-;3573:20;:18;:20::i;:::-;3531:93;;;;;;34899:25:28;;;;34940:18;;34933:34;;;;34983:18;;;34976:34;3595:13:23;35026:18:28;;;35019:34;3618:4:23;35069:19:28;;;35062:84;34871:19;;3531:93:23;;;;;;;;;;;;3521:104;;;;;;3514:111;;3440:192;:::o;1720:281:5:-;-1:-1:-1;;;;;1713:19:17;;;1793:106:5;;;;-1:-1:-1;;;1793:106:5;;35359:2:28;1793:106:5;;;35341:21:28;35398:2;35378:18;;;35371:30;35437:34;35417:18;;;35410:62;35508:15;35488:18;;;35481:43;35541:19;;1793:106:5;35157:409:28;1793:106:5;1180:66;1909:85;;-1:-1:-1;;;;;;1909:85:5;-1:-1:-1;;;;;1909:85:5;;;;;;;;;;1720:281::o;2393:276::-;2501:29;2512:17;2501:10;:29::i;:::-;2558:1;2544:4;:11;:15;:28;;;;2563:9;2544:28;2540:123;;;2588:64;2628:17;2647:4;2588:39;:64::i;2209:106:9:-;1949:7;;;;2267:41;;;;-1:-1:-1;;;2267:41:9;;35773:2:28;2267:41:9;;;35755:21:28;35812:2;35792:18;;;35785:30;35851:22;35831:18;;;35824:50;35891:18;;2267:41:9;35571:344:28;5328:653:15;5758:23;5784:69;5812:4;5784:69;;;;;;;;;;;;;;;;;5792:5;-1:-1:-1;;;;;5784:27:15;;;:69;;;;;:::i;:::-;5758:95;;5871:10;:17;5892:1;5871:22;:56;;;;5908:10;5897:30;;;;;;;;;;;;:::i;:::-;5863:111;;;;-1:-1:-1;;;5863:111:15;;36122:2:28;5863:111:15;;;36104:21:28;36161:2;36141:18;;;36134:30;36200:34;36180:18;;;36173:62;36271:12;36251:18;;;36244:40;36301:19;;5863:111:15;35920:406:28;1125:111:0;5374:13:7;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:7;;33978:2:28;5366:69:7;;;33960:21:28;34017:2;33997:18;;;33990:30;34056:34;34036:18;;;34029:62;-1:-1:-1;;;34107:18:28;;;34100:41;34158:19;;5366:69:7;33776:407:28;5366:69:7;1197:32:0::1;965:10:18::0;1197:18:0::1;:32::i;1187:95:9:-:0;5374:13:7;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:7;;33978:2:28;5366:69:7;;;33960:21:28;34017:2;33997:18;;;33990:30;34056:34;34036:18;;;34029:62;-1:-1:-1;;;34107:18:28;;;34100:41;34158:19;;5366:69:7;33776:407:28;5366:69:7;1260:7:9::1;:15:::0;;-1:-1:-1;;1260:15:9::1;::::0;;1187:95::o;5031:1456:22:-;5119:7;;6043:66;6030:79;;6026:161;;;-1:-1:-1;6141:1:22;;-1:-1:-1;6145:30:22;6125:51;;6026:161;6298:24;;;6281:14;6298:24;;;;;;;;;36558:25:28;;;36631:4;36619:17;;36599:18;;;36592:45;;;;36653:18;;;36646:34;;;36696:18;;;36689:34;;;6298:24:22;;36530:19:28;;6298:24:22;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6298:24:22;;-1:-1:-1;;6298:24:22;;;-1:-1:-1;;;;;;;6336:20:22;;6332:101;;6388:1;6392:29;6372:50;;;;;;;6332:101;6451:6;-1:-1:-1;6459:20:22;;-1:-1:-1;5031:1456:22;;;;;;;;:::o;592:511::-;669:20;660:5;:29;;;;;;;;:::i;:::-;;656:441;;592:511;:::o;656:441::-;765:29;756:5;:38;;;;;;;;:::i;:::-;;752:345;;810:34;;-1:-1:-1;;;810:34:22;;37125:2:28;810:34:22;;;37107:21:28;37164:2;37144:18;;;37137:30;37203:26;37183:18;;;37176:54;37247:18;;810:34:22;36923:348:28;752:345:22;874:35;865:5;:44;;;;;;;;:::i;:::-;;861:236;;925:41;;-1:-1:-1;;;925:41:22;;37478:2:28;925:41:22;;;37460:21:28;37517:2;37497:18;;;37490:30;37556:33;37536:18;;;37529:61;37607:18;;925:41:22;37276:355:28;861:236:22;996:30;987:5;:39;;;;;;;;:::i;:::-;;983:114;;1042:44;;-1:-1:-1;;;1042:44:22;;37838:2:28;1042:44:22;;;37820:21:28;37877:2;37857:18;;;37850:30;37916:34;37896:18;;;37889:62;37987:4;37967:18;;;37960:32;38009:19;;1042:44:22;37636:398:28;6250:630:23;6300:7;6319:18;6340:13;:11;:13::i;:::-;6367:18;;6319:34;;-1:-1:-1;6367:22:23;6363:511;;6412:22;;;;;;;;6250:630;-1:-1:-1;6250:630:23:o;6363:511::-;6709:11;;6738:15;;6734:130;;6780:10;6250:630;-1:-1:-1;;6250:630:23:o;6734:130::-;6836:13;6829:20;;;;6250:630;:::o;7101:666::-;7154:7;7173:21;7197:16;:14;:16::i;:::-;7227:21;;7173:40;;-1:-1:-1;7227:25:23;7223:538;;7275:25;;;;;;;;7101:666;-1:-1:-1;7101:666:23:o;7223:538::-;7587:14;;7619:18;;7615:136;;7664:13;7101:666;-1:-1:-1;;7101:666:23:o;2107:152:5:-;2173:37;2192:17;2173:18;:37::i;:::-;2225:27;;-1:-1:-1;;;;;2225:27:5;;;;;;;;2107:152;:::o;6685:198:17:-;6768:12;6799:77;6820:6;6828:4;6799:77;;;;;;;;;;;;;;;;;:20;:77::i;4119:223::-;4252:12;4283:52;4305:6;4313:4;4319:1;4322:12;4283:21;:52::i;7069:325::-;7210:12;7235;7249:23;7276:6;-1:-1:-1;;;;;7276:19:17;7296:4;7276:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7234:67;;;;7318:69;7345:6;7353:7;7362:10;7374:12;7318:26;:69::i;:::-;7311:76;7069:325;-1:-1:-1;;;;;;7069:325:17:o;5176:446::-;5341:12;5398:5;5373:21;:30;;5365:81;;;;-1:-1:-1;;;5365:81:17;;38533:2:28;5365:81:17;;;38515:21:28;38572:2;38552:18;;;38545:30;38611:34;38591:18;;;38584:62;38682:8;38662:18;;;38655:36;38708:19;;5365:81:17;38331:402:28;5365:81:17;5457:12;5471:23;5498:6;-1:-1:-1;;;;;5498:11:17;5517:5;5524:4;5498:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5456:73;;;;5546:69;5573:6;5581:7;5590:10;5602:12;5546:26;:69::i;:::-;5539:76;5176:446;-1:-1:-1;;;;;;;5176:446:17:o;7682:628::-;7862:12;7890:7;7886:418;;;7917:10;:17;7938:1;7917:22;7913:286;;-1:-1:-1;;;;;1713:19:17;;;8124:60;;;;-1:-1:-1;;;8124:60:17;;38940:2:28;8124:60:17;;;38922:21:28;38979:2;38959:18;;;38952:30;39018:31;38998:18;;;38991:59;39067:18;;8124:60:17;38738:353:28;8124:60:17;-1:-1:-1;8219:10:17;8212:17;;7886:418;8260:33;8268:10;8280:12;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;-1:-1:-1;;;9335:20:17;;;;;;;;:::i;316:180:28:-;375:6;428:2;416:9;407:7;403:23;399:32;396:52;;;444:1;441;434:12;396:52;-1:-1:-1;467:23:28;;316:180;-1:-1:-1;316:180:28:o;732:250::-;817:1;827:113;841:6;838:1;835:13;827:113;;;917:11;;;911:18;898:11;;;891:39;863:2;856:10;827:113;;;-1:-1:-1;;974:1:28;956:16;;949:27;732:250::o;987:271::-;1029:3;1067:5;1061:12;1094:6;1089:3;1082:19;1110:76;1179:6;1172:4;1167:3;1163:14;1156:4;1149:5;1145:16;1110:76;:::i;:::-;1240:2;1219:15;-1:-1:-1;;1215:29:28;1206:39;;;;1247:4;1202:50;;987:271;-1:-1:-1;;987:271:28:o;1263:220::-;1412:2;1401:9;1394:21;1375:4;1432:45;1473:2;1462:9;1458:18;1450:6;1432:45;:::i;1488:154::-;-1:-1:-1;;;;;1567:5:28;1563:54;1556:5;1553:65;1543:93;;1632:1;1629;1622:12;1647:315;1715:6;1723;1776:2;1764:9;1755:7;1751:23;1747:32;1744:52;;;1792:1;1789;1782:12;1744:52;1831:9;1818:23;1850:31;1875:5;1850:31;:::i;:::-;1900:5;1952:2;1937:18;;;;1924:32;;-1:-1:-1;;;1647:315:28:o;2159:184::-;-1:-1:-1;;;2208:1:28;2201:88;2308:4;2305:1;2298:15;2332:4;2329:1;2322:15;2348:255;2420:2;2414:9;2462:6;2450:19;;2499:18;2484:34;;2520:22;;;2481:62;2478:88;;;2546:18;;:::i;:::-;2582:2;2575:22;2348:255;:::o;2608:275::-;2679:2;2673:9;2744:2;2725:13;;-1:-1:-1;;2721:27:28;2709:40;;2779:18;2764:34;;2800:22;;;2761:62;2758:88;;;2826:18;;:::i;:::-;2862:2;2855:22;2608:275;;-1:-1:-1;2608:275:28:o;2888:530::-;2930:5;2983:3;2976:4;2968:6;2964:17;2960:27;2950:55;;3001:1;2998;2991:12;2950:55;3037:6;3024:20;3063:18;3059:2;3056:26;3053:52;;;3085:18;;:::i;:::-;3129:55;3172:2;3153:13;;-1:-1:-1;;3149:27:28;3178:4;3145:38;3129:55;:::i;:::-;3209:2;3200:7;3193:19;3255:3;3248:4;3243:2;3235:6;3231:15;3227:26;3224:35;3221:55;;;3272:1;3269;3262:12;3221:55;3337:2;3330:4;3322:6;3318:17;3311:4;3302:7;3298:18;3285:55;3385:1;3360:16;;;3378:4;3356:27;3349:38;;;;3364:7;2888:530;-1:-1:-1;;;2888:530:28:o;3423:665::-;3518:6;3526;3534;3542;3595:3;3583:9;3574:7;3570:23;3566:33;3563:53;;;3612:1;3609;3602:12;3563:53;3651:9;3638:23;3670:31;3695:5;3670:31;:::i;:::-;3720:5;-1:-1:-1;3777:2:28;3762:18;;3749:32;3790:33;3749:32;3790:33;:::i;:::-;3842:7;-1:-1:-1;3896:2:28;3881:18;;3868:32;;-1:-1:-1;3951:2:28;3936:18;;3923:32;3978:18;3967:30;;3964:50;;;4010:1;4007;4000:12;3964:50;4033:49;4074:7;4065:6;4054:9;4050:22;4033:49;:::i;:::-;4023:59;;;3423:665;;;;;;;:::o;4528:255::-;4595:6;4648:2;4636:9;4627:7;4623:23;4619:32;4616:52;;;4664:1;4661;4654:12;4616:52;4703:9;4690:23;4722:31;4747:5;4722:31;:::i;4788:456::-;4865:6;4873;4881;4934:2;4922:9;4913:7;4909:23;4905:32;4902:52;;;4950:1;4947;4940:12;4902:52;4989:9;4976:23;5008:31;5033:5;5008:31;:::i;:::-;5058:5;-1:-1:-1;5115:2:28;5100:18;;5087:32;5128:33;5087:32;5128:33;:::i;:::-;4788:456;;5180:7;;-1:-1:-1;;;5234:2:28;5219:18;;;;5206:32;;4788:456::o;5249:248::-;5317:6;5325;5378:2;5366:9;5357:7;5353:23;5349:32;5346:52;;;5394:1;5391;5384:12;5346:52;-1:-1:-1;;5417:23:28;;;5487:2;5472:18;;;5459:32;;-1:-1:-1;5249:248:28:o;5502:902::-;5733:2;5785:21;;;5855:13;;5758:18;;;5877:22;;;5704:4;;5733:2;5918;;5936:18;;;;5977:15;;;5704:4;6020:358;6034:6;6031:1;6028:13;6020:358;;;6093:13;;6131:9;;6119:22;;6181:11;;;6175:18;6161:12;;;6154:40;6238:11;;6232:18;-1:-1:-1;;;;;6228:67:28;6214:12;;;6207:89;6325:4;6316:14;;;;6353:15;;;;6056:1;6049:9;6020:358;;;-1:-1:-1;6395:3:28;;5502:902;-1:-1:-1;;;;;;;5502:902:28:o;7032:414::-;7126:6;7134;7187:2;7175:9;7166:7;7162:23;7158:32;7155:52;;;7203:1;7200;7193:12;7155:52;7242:9;7229:23;7261:31;7286:5;7261:31;:::i;:::-;7311:5;-1:-1:-1;7368:2:28;7353:18;;7340:32;7381:33;7340:32;7381:33;:::i;:::-;7433:7;7423:17;;;7032:414;;;;;:::o;7451:456::-;7528:6;7536;7544;7597:2;7585:9;7576:7;7572:23;7568:32;7565:52;;;7613:1;7610;7603:12;7565:52;7652:9;7639:23;7671:31;7696:5;7671:31;:::i;:::-;7721:5;-1:-1:-1;7773:2:28;7758:18;;7745:32;;-1:-1:-1;7829:2:28;7814:18;;7801:32;7842:33;7801:32;7842:33;:::i;:::-;7894:7;7884:17;;;7451:456;;;;;:::o;7912:455::-;7989:6;7997;8050:2;8038:9;8029:7;8025:23;8021:32;8018:52;;;8066:1;8063;8056:12;8018:52;8105:9;8092:23;8124:31;8149:5;8124:31;:::i;:::-;8174:5;-1:-1:-1;8230:2:28;8215:18;;8202:32;8257:18;8246:30;;8243:50;;;8289:1;8286;8279:12;8243:50;8312:49;8353:7;8344:6;8333:9;8329:22;8312:49;:::i;:::-;8302:59;;;7912:455;;;;;:::o;8372:1335::-;8769:66;8761:6;8757:79;8746:9;8739:98;8720:4;8856:2;8894:3;8889:2;8878:9;8874:18;8867:31;8921:46;8962:3;8951:9;8947:19;8939:6;8921:46;:::i;:::-;9015:9;9007:6;9003:22;8998:2;8987:9;8983:18;8976:50;9049:33;9075:6;9067;9049:33;:::i;:::-;9113:2;9098:18;;9091:34;;;-1:-1:-1;;;;;9162:55:28;;9156:3;9141:19;;9134:84;9249:3;9234:19;;9227:35;;;9299:22;;;9293:3;9278:19;;9271:51;9371:13;;9393:22;;;9443:2;9469:15;;;;-1:-1:-1;9431:15:28;;;;-1:-1:-1;9512:169:28;9526:6;9523:1;9520:13;9512:169;;;9587:13;;9575:26;;9656:15;;;;9621:12;;;;9548:1;9541:9;9512:169;;;-1:-1:-1;9698:3:28;;8372:1335;-1:-1:-1;;;;;;;;;;;;8372:1335:28:o;10085:118::-;10171:5;10164:13;10157:21;10150:5;10147:32;10137:60;;10193:1;10190;10183:12;10208:382;10273:6;10281;10334:2;10322:9;10313:7;10309:23;10305:32;10302:52;;;10350:1;10347;10340:12;10302:52;10389:9;10376:23;10408:31;10433:5;10408:31;:::i;:::-;10458:5;-1:-1:-1;10515:2:28;10500:18;;10487:32;10528:30;10487:32;10528:30;:::i;10595:829::-;10706:6;10714;10722;10730;10738;10746;10754;10807:3;10795:9;10786:7;10782:23;10778:33;10775:53;;;10824:1;10821;10814:12;10775:53;10863:9;10850:23;10882:31;10907:5;10882:31;:::i;:::-;10932:5;-1:-1:-1;10989:2:28;10974:18;;10961:32;11002:33;10961:32;11002:33;:::i;:::-;11054:7;-1:-1:-1;11108:2:28;11093:18;;11080:32;;-1:-1:-1;11159:2:28;11144:18;;11131:32;;-1:-1:-1;11215:3:28;11200:19;;11187:33;11264:4;11251:18;;11239:31;;11229:59;;11284:1;11281;11274:12;11229:59;10595:829;;;;-1:-1:-1;10595:829:28;;;;11307:7;11361:3;11346:19;;11333:33;;-1:-1:-1;11413:3:28;11398:19;;;11385:33;;10595:829;-1:-1:-1;;10595:829:28:o;12657:437::-;12736:1;12732:12;;;;12779;;;12800:61;;12854:4;12846:6;12842:17;12832:27;;12800:61;12907:2;12899:6;12896:14;12876:18;12873:38;12870:218;;-1:-1:-1;;;12941:1:28;12934:88;13045:4;13042:1;13035:15;13073:4;13070:1;13063:15;13099:709;13164:5;13217:3;13210:4;13202:6;13198:17;13194:27;13184:55;;13235:1;13232;13225:12;13184:55;13264:6;13258:13;13290:4;13313:18;13309:2;13306:26;13303:52;;;13335:18;;:::i;:::-;13381:2;13378:1;13374:10;13404:28;13428:2;13424;13420:11;13404:28;:::i;:::-;13466:15;;;13536;;;13532:24;;;13497:12;;;;13568:15;;;13565:35;;;13596:1;13593;13586:12;13565:35;13632:2;13624:6;13620:15;13609:26;;13644:135;13660:6;13655:3;13652:15;13644:135;;;13726:10;;13714:23;;13677:12;;;;13757;;;;13644:135;;13813:132;13889:13;;13911:28;13889:13;13911:28;:::i;13950:1570::-;14054:6;14062;14115:2;14103:9;14094:7;14090:23;14086:32;14083:52;;;14131:1;14128;14121:12;14083:52;14164:9;14158:16;14193:18;14234:2;14226:6;14223:14;14220:34;;;14250:1;14247;14240:12;14220:34;14273:22;;;;14329:6;14311:16;;;14307:29;14304:49;;;14349:1;14346;14339:12;14304:49;14375:22;;:::i;:::-;14426:2;14420:9;14413:5;14406:24;14476:2;14472;14468:11;14462:18;14457:2;14450:5;14446:14;14439:42;14527:2;14523;14519:11;14513:18;14508:2;14501:5;14497:14;14490:42;14578:2;14574;14570:11;14564:18;14559:2;14552:5;14548:14;14541:42;14630:3;14626:2;14622:12;14616:19;14610:3;14603:5;14599:15;14592:44;14683:3;14679:2;14675:12;14669:19;14663:3;14656:5;14652:15;14645:44;14736:3;14732:2;14728:12;14722:19;14716:3;14709:5;14705:15;14698:44;14789:3;14785:2;14781:12;14775:19;14769:3;14762:5;14758:15;14751:44;14814:3;14856:2;14852;14848:11;14842:18;14885:2;14875:8;14872:16;14869:36;;;14901:1;14898;14891:12;14869:36;14937:67;14996:7;14985:8;14981:2;14977:17;14937:67;:::i;:::-;14932:2;14925:5;14921:14;14914:91;;;15024:3;15066:2;15062;15058:11;15052:18;15095:2;15085:8;15082:16;15079:36;;;15111:1;15108;15101:12;15079:36;15147:67;15206:7;15195:8;15191:2;15187:17;15147:67;:::i;:::-;15142:2;15135:5;15131:14;15124:91;;;15234:3;15276:2;15272;15268:11;15262:18;15305:2;15295:8;15292:16;15289:36;;;15321:1;15318;15311:12;15289:36;15357:67;15416:7;15405:8;15401:2;15397:17;15357:67;:::i;:::-;15352:2;15345:5;15341:14;15334:91;;;15444:5;15434:15;;;;;15468:46;15510:2;15499:9;15495:18;15468:46;:::i;:::-;15458:56;;13950:1570;;;;;:::o;15525:184::-;-1:-1:-1;;;15574:1:28;15567:88;15674:4;15671:1;15664:15;15698:4;15695:1;15688:15;15714:784;16009:4;-1:-1:-1;;;;;16119:2:28;16111:6;16107:15;16096:9;16089:34;16171:2;16163:6;16159:15;16154:2;16143:9;16139:18;16132:43;;16211:6;16206:2;16195:9;16191:18;16184:34;16254:3;16249:2;16238:9;16234:18;16227:31;16281:46;16322:3;16311:9;16307:19;16299:6;16281:46;:::i;:::-;16376:9;16368:6;16364:22;16358:3;16347:9;16343:19;16336:51;16411:2;16403:6;16396:18;16447:12;16442:2;16434:6;16430:15;16423:37;16489:2;16481:6;16477:15;16469:23;;;15714:784;;;;;;;:::o;16503:184::-;16573:6;16626:2;16614:9;16605:7;16601:23;16597:32;16594:52;;;16642:1;16639;16632:12;16594:52;-1:-1:-1;16665:16:28;;16503:184;-1:-1:-1;16503:184:28:o;16692:788::-;16987:4;-1:-1:-1;;;;;17097:2:28;17089:6;17085:15;17074:9;17067:34;17149:2;17141:6;17137:15;17132:2;17121:9;17117:18;17110:43;;17189:6;17184:2;17173:9;17169:18;17162:34;17232:3;17227:2;17216:9;17212:18;17205:31;17259:46;17300:3;17289:9;17285:19;17277:6;17259:46;:::i;:::-;17354:9;17346:6;17342:22;17336:3;17325:9;17321:19;17314:51;17389:2;17381:6;17374:18;17425:16;17420:2;17412:6;17408:15;17401:41;17471:2;17463:6;17459:15;17451:23;;;16692:788;;;;;;;:::o;17485:787::-;17780:4;-1:-1:-1;;;;;17890:2:28;17882:6;17878:15;17867:9;17860:34;17942:2;17934:6;17930:15;17925:2;17914:9;17910:18;17903:43;;17982:6;17977:2;17966:9;17962:18;17955:34;18025:3;18020:2;18009:9;18005:18;17998:31;18052:46;18093:3;18082:9;18078:19;18070:6;18052:46;:::i;:::-;18147:9;18139:6;18135:22;18129:3;18118:9;18114:19;18107:51;18182:2;18174:6;18167:18;18218:15;18213:2;18205:6;18201:15;18194:40;18263:2;18255:6;18251:15;18243:23;;;17485:787;;;;;;;:::o;19096:184::-;-1:-1:-1;;;19145:1:28;19138:88;19245:4;19242:1;19235:15;19269:4;19266:1;19259:15;19285:125;19350:9;;;19371:10;;;19368:36;;;19384:18;;:::i;20415:128::-;20482:9;;;20503:11;;;20500:37;;;20517:18;;:::i;27539:245::-;27606:6;27659:2;27647:9;27638:7;27634:23;27630:32;27627:52;;;27675:1;27672;27665:12;27627:52;27707:9;27701:16;27726:28;27748:5;27726:28;:::i;34188:168::-;34261:9;;;34292;;34309:15;;;34303:22;;34289:37;34279:71;;34330:18;;:::i;34361:274::-;34401:1;34427;34417:189;;-1:-1:-1;;;34459:1:28;34452:88;34563:4;34560:1;34553:15;34591:4;34588:1;34581:15;34417:189;-1:-1:-1;34620:9:28;;34361:274::o;36734:184::-;-1:-1:-1;;;36783:1:28;36776:88;36883:4;36880:1;36873:15;36907:4;36904:1;36897:15;38039:287;38168:3;38206:6;38200:13;38222:66;38281:6;38276:3;38269:4;38261:6;38257:17;38222:66;:::i;:::-;38304:16;;;;;38039:287;-1:-1:-1;;38039:287:28:o"},"gasEstimates":{"creation":{"codeDepositCost":"3647000","executionCost":"infinite","totalCost":"infinite"},"external":{"DOMAIN_SEPARATOR()":"infinite","allowance(address,address)":"infinite","approve(address,uint256)":"24713","approveForAllAsOwner(address,bool)":"infinite","balanceOf(address)":"2664","changeVRFValue(uint256)":"infinite","checkApprovalForAll(address,address)":"infinite","claimablePlanets(address,uint256)":"11365","claimableTokenIdToOwnerAddress(uint256)":"2536","conjunct(uint256,uint256)":"infinite","deList(uint256,uint256)":"infinite","deListAllYourPlanets()":"235","decimals()":"289","decreaseAllowance(address,uint256)":"27027","eip712Domain()":"infinite","getAllPlanets()":"infinite","getPlanetsPaginated(uint256,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","initialize()":"infinite","listAllYourPlanets()":"192","name()":"infinite","nonces(address)":"2656","onERC721Received(address,address,uint256,bytes)":"infinite","owner()":"2432","pause()":"infinite","paused()":"2393","payee(uint256)":"4698","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","proxiableUUID()":"infinite","releasable(address)":"infinite","releasable(address,address)":"infinite","release(address)":"infinite","release(address,address)":"infinite","released(address)":"2620","released(address,address)":"infinite","renounceOwnership()":"infinite","setAllOf(address,uint256,address)":"infinite","setTAdd(address)":"infinite","shares(address)":"2642","status()":"infinite","symbol()":"infinite","totalReleased()":"2402","totalReleased(address)":"2620","totalShares()":"2405","totalSupply()":"2372","transfer(address,uint256)":"51121","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","unpause()":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","userToListedPlanets(address,uint256)":"9129","withdrawFunds()":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_sendNFT(uint256,address)":"infinite","list(uint256,uint256,address)":"infinite","priceOfListingRetrieval(uint256)":"infinite","setDeliveryToTrue(address[2] memory)":"infinite"}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","approveForAllAsOwner(address,bool)":"d28eb2dc","balanceOf(address)":"70a08231","changeVRFValue(uint256)":"c7c0e6b1","checkApprovalForAll(address,address)":"dd22a9c7","claimablePlanets(address,uint256)":"e22aecb4","claimableTokenIdToOwnerAddress(uint256)":"064db874","conjunct(uint256,uint256)":"8230a784","deList(uint256,uint256)":"cbdf1b5a","deListAllYourPlanets()":"50842cf3","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","eip712Domain()":"84b0196e","getAllPlanets()":"6a23befb","getPlanetsPaginated(uint256,uint256)":"25947818","increaseAllowance(address,uint256)":"39509351","initialize()":"8129fc1c","listAllYourPlanets()":"1ac9a91e","name()":"06fdde03","nonces(address)":"7ecebe00","onERC721Received(address,address,uint256,bytes)":"150b7a02","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","payee(uint256)":"8b83209b","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","proxiableUUID()":"52d1902d","releasable(address)":"a3f8eace","releasable(address,address)":"c45ac050","release(address)":"19165587","release(address,address)":"48b75044","released(address)":"9852595c","released(address,address)":"406072a9","renounceOwnership()":"715018a6","setAllOf(address,uint256,address)":"4a02099b","setTAdd(address)":"cdb82a37","shares(address)":"ce7c2ac2","status()":"200d2ed2","symbol()":"95d89b41","totalReleased()":"e33b7de3","totalReleased(address)":"d79779b2","totalShares()":"3a98ef39","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","userToListedPlanets(address,uint256)":"85fe7243","withdrawFunds()":"24600fc3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sentToUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeListedAPlanet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sentFromUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListedAPlanet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"typeOfReceival\",\"type\":\"string\"}],\"name\":\"NftReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetAsking\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"askingUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetJoining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"joiningUser\",\"type\":\"address\"}],\"name\":\"PlanetsConjoining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approveForAllAsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVRF\",\"type\":\"uint256\"}],\"name\":\"changeVRFValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"checkApprovalForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimablePlanets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerParentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ownerTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delivered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"otherParent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"otherTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimableTokenIdToOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yourPlanet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withListedPlanet\",\"type\":\"uint256\"}],\"name\":\"conjunct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deListAllYourPlanets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPlanets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"internalType\":\"struct ListedPlanet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPlanetsPaginated\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"internalType\":\"struct ListedPlanet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllYourPlanets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_breederContractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vrfValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftContractAddr\",\"type\":\"address\"}],\"name\":\"setAllOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTAdd\",\"type\":\"address\"}],\"name\":\"setTAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToListedPlanets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"planet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Caecus\",\"custom:security-contact\":\"security@earnalliance.com\",\"details\":\"Contract is liable to be updated without warningHomo faber suae quisque fortunae\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize()\":{\"details\":\"implements EIP712, is upgradeable, pausable, burn function is custom to save space\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"can only be called by owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"releasable(address)\":{\"details\":\"Getter for the amount of payee's releasable Ether.\"},\"releasable(address,address)\":{\"details\":\"Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an IERC20 contract.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTAdd(address)\":{\"params\":{\"newTAdd\":\"the address that the owner would like the new URI to be\"}},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"can only be called by owner\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawFunds()\":{\"details\":\"utility function only, shouldn't need to be used.\"}},\"title\":\"HatcherGG\",\"version\":1},\"userdoc\":{\"errors\":{\"Unauthorized()\":[{\"notice\":\"error given if user other than minter tries to use forbidden funcs\"}]},\"kind\":\"user\",\"methods\":{\"initialize()\":{\"notice\":\"Initialization of contract, called upon deployment\"},\"pause()\":{\"notice\":\"pause any token transfers including mints and burns\"},\"setAllOf(address,uint256,address)\":{\"notice\":\"function should be run after deployment to set up defaults\"},\"setTAdd(address)\":{\"notice\":\"set URI.  Where metadata and images will come from per tokenId\"},\"unpause()\":{\"notice\":\"unpause any token transfers including mints and burns\"},\"withdrawFunds()\":{\"notice\":\"Allow Owner to withdraw of MATIC from the contract\"}},\"notice\":\"This contract allows for escrowed NFT breeding\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HatcherV1.sol\":\"HatcherV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x8a94877af58e9104fae9e11e13622976a879711072a121683af67b7b691e1437\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3d159b9049d4ef465c1fb41f7ff7620f18f52bf6f8f3018bae4ed95c2df537d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x7077d7f3369b21f286840c0d69b09a8a6d3d6e522fff67bfc240fd0a6cdf178c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1561a6950b1aaa504c8f81b7d46bccfa77ccd10de3eb865cf34b1acd5ad505e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"contracts/HatcherV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\ninterface IERC721 {\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  function isApprovedForAll(\\n    address owner,\\n    address operator\\n  ) external view returns (bool);\\n\\n  function getPlanetData(\\n    uint256 tokenId\\n  ) external view returns (PlanetData memory, bool);\\n  function setApprovalForAll(address operator, bool approved) external;\\n}\\n\\ninterface IBreedContract {\\n  function requestBreed(\\n    uint256 planetAId,\\n    uint256 planetBId,\\n    bool shouldUseMiniBlackhole,\\n    uint value\\n  ) external payable returns (bytes32);\\n}\\n\\nstruct ListedPlanet {\\n  uint256 planet;\\n  uint256 price;\\n  address ownerAddress;\\n}\\n\\nstruct ClaimablePlanet {\\n  address ownerParentAddress;\\n  uint256 ownerTokenId;\\n  bool delivered;\\n  address otherParent;\\n  uint256 otherTokenId;\\n}\\n\\nstruct PlanetData {\\n  uint256 gene;\\n  uint256 baseAge;\\n  uint256 evolve;\\n  uint256 breedCount;\\n  uint256 breedCountMax;\\n  uint256 createTime; // before hatch\\n  uint256 bornTime; // after hatch\\n  uint256 lastBreedTime;\\n  uint256[] relicsTokenIDs;\\n  uint256[] parents; //parent token ids\\n  uint256[] children; //children token ids\\n}\\n\\n/// @title HatcherGG\\n/// @author Caecus\\n/// @notice This contract allows for escrowed NFT breeding\\n/// @dev Contract is liable to be updated without warning\\n/// @dev Homo faber suae quisque fortunae\\n/// @custom:security-contact security@earnalliance.com\\ncontract HatcherV1 is\\n  Initializable,\\n  PausableUpgradeable,\\n  UUPSUpgradeable,\\n  EIP712Upgradeable,\\n  ERC20PermitUpgradeable,\\n  PaymentSplitterUpgradeable,\\n  IERC721ReceiverUpgradeable,\\n  OwnableUpgradeable\\n{\\n  using AddressUpgradeable for address payable;\\n\\n  event NftReceived(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes data,\\n    string typeOfReceival\\n  );\\n  event ListedAPlanet(\\n    address sentFromUser,\\n    address token,\\n    uint256 tokenId,\\n    uint256 price\\n  );\\n  event DeListedAPlanet(address sentToUser, address token, uint256 tokenId);\\n\\n  event PlanetsConjoining(\\n    uint256 planetAsking,\\n    address askingUser,\\n    uint256 planetJoining,\\n    address joiningUser\\n  );\\n\\n  IBreedContract breedContract;\\n\\n  address payable private treasuryAddr;\\n\\n  IERC721 nftPlanetContract;\\n\\n  uint256 vrfValue;\\n\\n  mapping(address => ListedPlanet[]) public userToListedPlanets;\\n\\n  ListedPlanet[] planetsListed;\\n\\n  // claimable tokenID -> address\\n  mapping(uint256 => address) public claimableTokenIdToOwnerAddress;\\n  // users to planets owed after conjunction\\n  mapping(address => ClaimablePlanet[]) public claimablePlanets;\\n\\n  /// @notice error given if user other than minter tries to use forbidden funcs\\n  error Unauthorized();\\n\\n  /// @notice set URI.  Where metadata and images will come from per tokenId\\n  /// @param newTAdd the address that the owner would like the new URI to be\\n  function setTAdd(address payable newTAdd) public onlyOwner whenNotPaused {\\n    treasuryAddr = newTAdd;\\n  }\\n\\n  /// @notice function should be run after deployment to set up defaults\\n  function setAllOf(\\n    address _breederContractAddr,\\n    uint256 _vrfValue,\\n    address _nftContractAddr\\n  ) public onlyOwner whenNotPaused {\\n    vrfValue = _vrfValue;\\n    breedContract = IBreedContract(_breederContractAddr);\\n    nftPlanetContract = IERC721(_nftContractAddr);\\n  }\\n\\n  // /// @custom:oz-upgrades-unsafe-allow constructor\\n  // constructor() {\\n  //   _disableInitializers();\\n  // }\\n\\n  /// @notice Initialization of contract, called upon deployment\\n  /// @dev implements EIP712, is upgradeable, pausable, burn function is custom to save space\\n  function initialize() public initializer {\\n    __Ownable_init();\\n    __Pausable_init();\\n    // __ERC1155Burnable_init();\\n    __UUPSUpgradeable_init();\\n    // PaymentSplitterUpgradeable(_payees, _shares);\\n  }\\n\\n  function changeVRFValue(uint256 newVRF) public onlyOwner whenNotPaused {\\n    vrfValue = newVRF;\\n  }\\n\\n  function list(uint256 tokenId, uint256 price, address ownerAddress) internal {\\n    // make sure it is approved for all before! maybe during contract creation or right after prob better / more chill\\n    //  add to userToListedPlanets\\n\\n    // ListedPlanet memory newPlanetToList = ListedPlanet(tokenId, price, ownerAddress);\\n    // ListedPlanet[] currentUserLP = userToListedPlanets[ownerAddress];\\n\\n    ListedPlanet memory newPlanetToList = ListedPlanet(\\n      tokenId,\\n      price,\\n      ownerAddress\\n    );\\n    userToListedPlanets[ownerAddress].push(newPlanetToList);\\n\\n    // add to planetsListed\\n    planetsListed.push(newPlanetToList);\\n\\n    emit ListedAPlanet(msg.sender, address(nftPlanetContract), tokenId, price);\\n  }\\n\\n  // test each address, one should have a claimable planet with the other being it's otherParent\\n  // for loop thru claimable planets\\n  // once address key hit, for loop thru those CPlanets checking otherParent for match\\n  // mark delivered on CPlanet struct and that's that\\n  function setDeliveryToTrue(address[2] memory parents) internal {\\n    address parentA = parents[0];\\n    address parentB = parents[1];\\n\\n    if (claimablePlanets[parentA].length > 0) {\\n      // it is likely parent 0, confirm:\\n      for (uint i = 0; i < claimablePlanets[parentA].length; i++) {\\n        if (claimablePlanets[parentA][i].otherParent == parentB) {\\n          // confirmed, change delivery status\\n          claimablePlanets[parentA][i].delivered = true;\\n        }\\n      }\\n    } else if (claimablePlanets[parents[1]].length > 0) {\\n      // must be parent 1\\n      for (uint i = 0; i < claimablePlanets[parentB].length; i++) {\\n        if (claimablePlanets[parentB][i].otherParent == parentA) {\\n          // confirmed, change delivery status\\n          claimablePlanets[parentB][i].delivered = true;\\n        }\\n      }\\n    } else {\\n      revert(\\\"planet sent errantly, no one to claim\\\");\\n    }\\n  }\\n\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) public override returns (bytes4) {\\n    // if new planet arrives\\n    if (msg.sender == address(0) && operator == address(nftPlanetContract)) {\\n      // get parents\\n      (PlanetData memory newPlanetData, ) = nftPlanetContract.getPlanetData(\\n        tokenId\\n      );\\n\\n      // check who the planet's parents are\\n      uint256[] memory parentsIDs = newPlanetData.parents;\\n\\n      // lookup addresses from Parent TokenIDs\\n      address addressParentA = claimableTokenIdToOwnerAddress[parentsIDs[0]];\\n      address addressParentB = claimableTokenIdToOwnerAddress[parentsIDs[1]];\\n\\n      // package addresses\\n      address[2] memory parents = [addressParentA, addressParentB];\\n      // see description, sets deliverable to true.\\n      setDeliveryToTrue(parents);\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"new planet\\\");\\n    } else if (data.length > 0 && operator == address(nftPlanetContract)) {\\n      uint256 priceData = abi.decode(data, (uint256));\\n      list(tokenId, priceData, from);\\n      // Perform operations based on the decoded data\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"listing planet\\\");\\n    } else {\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"uncategorized\\\");\\n    }\\n\\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n  }\\n\\n  // get planets by page, saves gas\\n  function getPlanetsPaginated(\\n    uint startIndex,\\n    uint endIndex\\n  ) public view returns (ListedPlanet[] memory) {\\n    require(endIndex > startIndex, \\\"Invalid index\\\");\\n    require(endIndex <= planetsListed.length, \\\"Index out of bounds\\\");\\n\\n    ListedPlanet[] memory page = new ListedPlanet[](endIndex - startIndex);\\n    for (uint i = startIndex; i < endIndex; i++) {\\n      page[i - startIndex] = planetsListed[i];\\n    }\\n    return page;\\n  }\\n\\n  // get all planets from array\\n  function getAllPlanets() public view returns (ListedPlanet[] memory) {\\n    return planetsListed;\\n  }\\n\\n  function listAllYourPlanets() public {\\n    // make sure it is approved for all\\n    // sort how many planets\\n    // add each to listedPlanets\\n  }\\n  function deList(uint256 idIndex, uint256 tokenId) public whenNotPaused {\\n    require(idIndex < planetsListed.length, \\\"Index out of bounds\\\");\\n\\n    address user = msg.sender;\\n    ListedPlanet memory planetToDeList = planetsListed[idIndex];\\n    // move out of escrow\\n    // subtract to listedPlanets\\n    // ensure owner or planet owner\\n\\n    if (msg.sender != planetToDeList.ownerAddress /*|| owner*/) {\\n      revert();\\n    }\\n\\n    // this solution keeps the array cleaner but moves keys around\\n    // opted for alt solution b/c keeps keys intact\\n    // planetsListed[idIndex] = planetsListed[planetsListed.length - 1];\\n    // planetsListed.pop();\\n\\n    // zero out the array listing, this does not change the array keys\\n    planetsListed[idIndex] = ListedPlanet({\\n      planet: 0,\\n      price: 0,\\n      ownerAddress: address(0)\\n    });\\n\\n    // delist on mapping\\n\\n    // send planet back to owner\\n    _sendNFT(tokenId, user);\\n\\n    // emit accomplishment\\n    emit DeListedAPlanet(\\n      user,\\n      address(nftPlanetContract),\\n      planetToDeList.planet\\n    );\\n  }\\n\\n  function deListAllYourPlanets() public {\\n    // make sure it is approved for all\\n    // sort how many planets\\n    // remove each to listedPlanets\\n  }\\n\\n  function priceOfListingRetrieval(\\n    uint256 tokenIdOfListedToken\\n  ) internal view whenNotPaused returns (uint256) {\\n    for (uint i = 0; i < planetsListed.length; i++) {\\n      // seek out price\\n      if (planetsListed[i].planet == tokenIdOfListedToken) {\\n        return planetsListed[i].price;\\n      }\\n\\n      // if no price found, give infinite for fail.\\n      if (i == (planetsListed.length - 1)) {\\n        return type(uint256).max;\\n      }\\n    }\\n  }\\n\\n  // @notice: Conjunction functions takes a listed planet and a initiating user's planet and makes a breed request\\n  // @dev: must send 0.2 RON along with, such that VRF can operate\\n  // @param yourPlanet the planet user intends to breed\\n  // @param withListedPlanet the planet user intends to breed with\\n  function conjunct(\\n    uint256 yourPlanet,\\n    uint256 withListedPlanet\\n  ) public payable whenNotPaused {\\n    // make sure approval for all for (anima + aprs + nfts) before use\\n    address userAsking = address(0);\\n\\n    address joiningUser = address(0);\\n    uint256 price = priceOfListingRetrieval(withListedPlanet);\\n\\n    // can have this fail at breeder contract level or hatcher level.  commented out = breeder level\\n    // if (msg.value < vrfValue) {\\n    //       revert();\\n    // }\\n\\n    // check if covers vrf value and price\\n    if (msg.value < vrfValue + price) {\\n      revert();\\n    }\\n    // check if both planets are presently held TODO\\n\\n    // pay the owner of withListedPlanet\\n    // First, find the owner of the `withListedPlanet`\\n    address payable ownerOfListedPlanet;\\n    for (uint i = 0; i < planetsListed.length; i++) {\\n      if (planetsListed[i].planet == withListedPlanet) {\\n        ownerOfListedPlanet = payable(planetsListed[i].ownerAddress);\\n        break;\\n      }\\n    }\\n    // amount to send\\n    uint256 amountToSend = 11; //withListedPlanet price\\n\\n    // Send Ether to the owner of the listed planet\\n    (bool sent, ) = ownerOfListedPlanet.call{ value: amountToSend }(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n\\n    // breed the planets\\n    breedContract.requestBreed(yourPlanet, withListedPlanet, false, msg.value);\\n\\n    if (msg.value > vrfValue + amountToSend) {\\n      (bool refunded, ) = msg.sender.call{\\n        value: msg.value - vrfValue - amountToSend\\n      }(\\\"\\\");\\n      require(refunded, \\\"Failed to refund excess Ether\\\");\\n    }\\n\\n    // if listed planet is out of bondings, delist it\\n\\n    //emit conjunction\\n    emit PlanetsConjoining(\\n      yourPlanet,\\n      userAsking,\\n      withListedPlanet,\\n      joiningUser\\n    );\\n  }\\n\\n  function _sendNFT(uint256 _tokenId, address _to) internal {\\n    nftPlanetContract.transferFrom(address(this), _to, _tokenId);\\n  }\\n\\n  function status() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @notice pause any token transfers including mints and burns\\n  /// @dev can only be called by owner\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @notice unpause any token transfers including mints and burns\\n  /// @dev can only be called by owner\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  // Function to set approval for all tokens owned by the owner to another address\\n  function approveForAllAsOwner(\\n    address operator,\\n    bool approved\\n  ) public onlyOwner {\\n    nftPlanetContract.setApprovalForAll(operator, approved);\\n  }\\n\\n  function checkApprovalForAll(\\n    address owner,\\n    address operator\\n  ) public view returns (bool) {\\n    return nftPlanetContract.isApprovedForAll(owner, operator);\\n  }\\n\\n  /// @notice Allow Owner to withdraw of MATIC from the contract\\n  /// @dev utility function only, shouldn't need to be used.\\n  function withdrawFunds() public onlyOwner whenNotPaused {\\n    address payable to = payable(msg.sender);\\n    to.transfer(address(this).balance);\\n  }\\n\\n  /// @notice called to authorize Upgrades by owner only\\n  /// @dev used to upgrade\\n  /// @param newImplementation new implementation\\n  function _authorizeUpgrade(\\n    address newImplementation\\n  ) internal override onlyOwner {}\\n\\n  // unnecessary due to erc20Permit\\n  // receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6752a610c51e3269b076cdddf2f658eecd81736cde437f8e4fd978c4a3c37efc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1031,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1034,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3176,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1352,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":1457,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1013,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":1329,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"},{"astId":1478,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_balances","offset":0,"slot":"201","type":"t_mapping(t_address,t_uint256)"},{"astId":1484,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_allowances","offset":0,"slot":"202","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1486,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_totalSupply","offset":0,"slot":"203","type":"t_uint256"},{"astId":1488,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_name","offset":0,"slot":"204","type":"t_string_storage"},{"astId":1490,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_symbol","offset":0,"slot":"205","type":"t_string_storage"},{"astId":2070,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"206","type":"t_array(t_uint256)45_storage"},{"astId":3975,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_hashedName","offset":0,"slot":"251","type":"t_bytes32"},{"astId":3978,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_hashedVersion","offset":0,"slot":"252","type":"t_bytes32"},{"astId":3980,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_name","offset":0,"slot":"253","type":"t_string_storage"},{"astId":3982,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_version","offset":0,"slot":"254","type":"t_string_storage"},{"astId":4240,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"255","type":"t_array(t_uint256)48_storage"},{"astId":2176,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_nonces","offset":0,"slot":"303","type":"t_mapping(t_address,t_struct(Counter)3183_storage)"},{"astId":2184,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"304","type":"t_bytes32"},{"astId":2340,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"305","type":"t_array(t_uint256)49_storage"},{"astId":173,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_totalShares","offset":0,"slot":"354","type":"t_uint256"},{"astId":175,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_totalReleased","offset":0,"slot":"355","type":"t_uint256"},{"astId":179,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_shares","offset":0,"slot":"356","type":"t_mapping(t_address,t_uint256)"},{"astId":183,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_released","offset":0,"slot":"357","type":"t_mapping(t_address,t_uint256)"},{"astId":186,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_payees","offset":0,"slot":"358","type":"t_array(t_address)dyn_storage"},{"astId":191,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_erc20TotalReleased","offset":0,"slot":"359","type":"t_mapping(t_contract(IERC20Upgradeable)2149,t_uint256)"},{"astId":198,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_erc20Released","offset":0,"slot":"360","type":"t_mapping(t_contract(IERC20Upgradeable)2149,t_mapping(t_address,t_uint256))"},{"astId":632,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"361","type":"t_array(t_uint256)43_storage"},{"astId":11,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_owner","offset":0,"slot":"404","type":"t_address"},{"astId":131,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"__gap","offset":0,"slot":"405","type":"t_array(t_uint256)49_storage"},{"astId":5712,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"breedContract","offset":0,"slot":"454","type":"t_contract(IBreedContract)5605"},{"astId":5714,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"treasuryAddr","offset":0,"slot":"455","type":"t_address_payable"},{"astId":5717,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"nftPlanetContract","offset":0,"slot":"456","type":"t_contract(IERC721)5591"},{"astId":5719,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"vrfValue","offset":0,"slot":"457","type":"t_uint256"},{"astId":5725,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"userToListedPlanets","offset":0,"slot":"458","type":"t_mapping(t_address,t_array(t_struct(ListedPlanet)5612_storage)dyn_storage)"},{"astId":5729,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"planetsListed","offset":0,"slot":"459","type":"t_array(t_struct(ListedPlanet)5612_storage)dyn_storage"},{"astId":5733,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"claimableTokenIdToOwnerAddress","offset":0,"slot":"460","type":"t_mapping(t_uint256,t_address)"},{"astId":5739,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"claimablePlanets","offset":0,"slot":"461","type":"t_mapping(t_address,t_array(t_struct(ClaimablePlanet)5623_storage)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_struct(ClaimablePlanet)5623_storage)dyn_storage":{"base":"t_struct(ClaimablePlanet)5623_storage","encoding":"dynamic_array","label":"struct ClaimablePlanet[]","numberOfBytes":"32"},"t_array(t_struct(ListedPlanet)5612_storage)dyn_storage":{"base":"t_struct(ListedPlanet)5612_storage","encoding":"dynamic_array","label":"struct ListedPlanet[]","numberOfBytes":"32"},"t_array(t_uint256)43_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[43]","numberOfBytes":"1376"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)48_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[48]","numberOfBytes":"1536"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IBreedContract)5605":{"encoding":"inplace","label":"contract IBreedContract","numberOfBytes":"20"},"t_contract(IERC20Upgradeable)2149":{"encoding":"inplace","label":"contract IERC20Upgradeable","numberOfBytes":"20"},"t_contract(IERC721)5591":{"encoding":"inplace","label":"contract IERC721","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_struct(ClaimablePlanet)5623_storage)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ClaimablePlanet[])","numberOfBytes":"32","value":"t_array(t_struct(ClaimablePlanet)5623_storage)dyn_storage"},"t_mapping(t_address,t_array(t_struct(ListedPlanet)5612_storage)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ListedPlanet[])","numberOfBytes":"32","value":"t_array(t_struct(ListedPlanet)5612_storage)dyn_storage"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)3183_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CountersUpgradeable.Counter)","numberOfBytes":"32","value":"t_struct(Counter)3183_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_contract(IERC20Upgradeable)2149,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_contract(IERC20Upgradeable)2149","label":"mapping(contract IERC20Upgradeable => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_contract(IERC20Upgradeable)2149,t_uint256)":{"encoding":"mapping","key":"t_contract(IERC20Upgradeable)2149","label":"mapping(contract IERC20Upgradeable => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ClaimablePlanet)5623_storage":{"encoding":"inplace","label":"struct ClaimablePlanet","members":[{"astId":5614,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"ownerParentAddress","offset":0,"slot":"0","type":"t_address"},{"astId":5616,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"ownerTokenId","offset":0,"slot":"1","type":"t_uint256"},{"astId":5618,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"delivered","offset":0,"slot":"2","type":"t_bool"},{"astId":5620,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"otherParent","offset":1,"slot":"2","type":"t_address"},{"astId":5622,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"otherTokenId","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(Counter)3183_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":3182,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(ListedPlanet)5612_storage":{"encoding":"inplace","label":"struct ListedPlanet","members":[{"astId":5607,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"planet","offset":0,"slot":"0","type":"t_uint256"},{"astId":5609,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"price","offset":0,"slot":"1","type":"t_uint256"},{"astId":5611,"contract":"contracts/HatcherV1.sol:HatcherV1","label":"ownerAddress","offset":0,"slot":"2","type":"t_address"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"Unauthorized()":[{"notice":"error given if user other than minter tries to use forbidden funcs"}]},"kind":"user","methods":{"initialize()":{"notice":"Initialization of contract, called upon deployment"},"pause()":{"notice":"pause any token transfers including mints and burns"},"setAllOf(address,uint256,address)":{"notice":"function should be run after deployment to set up defaults"},"setTAdd(address)":{"notice":"set URI.  Where metadata and images will come from per tokenId"},"unpause()":{"notice":"unpause any token transfers including mints and burns"},"withdrawFunds()":{"notice":"Allow Owner to withdraw of MATIC from the contract"}},"notice":"This contract allows for escrowed NFT breeding","version":1}},"IBreedContract":{"abi":[{"inputs":[{"internalType":"uint256","name":"planetAId","type":"uint256"},{"internalType":"uint256","name":"planetBId","type":"uint256"},{"internalType":"bool","name":"shouldUseMiniBlackhole","type":"bool"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"requestBreed","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"requestBreed(uint256,uint256,bool,uint256)":"bf0e57a3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetAId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetBId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldUseMiniBlackhole\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"requestBreed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HatcherV1.sol\":\"IBreedContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x8a94877af58e9104fae9e11e13622976a879711072a121683af67b7b691e1437\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3d159b9049d4ef465c1fb41f7ff7620f18f52bf6f8f3018bae4ed95c2df537d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x7077d7f3369b21f286840c0d69b09a8a6d3d6e522fff67bfc240fd0a6cdf178c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1561a6950b1aaa504c8f81b7d46bccfa77ccd10de3eb865cf34b1acd5ad505e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"contracts/HatcherV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\ninterface IERC721 {\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  function isApprovedForAll(\\n    address owner,\\n    address operator\\n  ) external view returns (bool);\\n\\n  function getPlanetData(\\n    uint256 tokenId\\n  ) external view returns (PlanetData memory, bool);\\n  function setApprovalForAll(address operator, bool approved) external;\\n}\\n\\ninterface IBreedContract {\\n  function requestBreed(\\n    uint256 planetAId,\\n    uint256 planetBId,\\n    bool shouldUseMiniBlackhole,\\n    uint value\\n  ) external payable returns (bytes32);\\n}\\n\\nstruct ListedPlanet {\\n  uint256 planet;\\n  uint256 price;\\n  address ownerAddress;\\n}\\n\\nstruct ClaimablePlanet {\\n  address ownerParentAddress;\\n  uint256 ownerTokenId;\\n  bool delivered;\\n  address otherParent;\\n  uint256 otherTokenId;\\n}\\n\\nstruct PlanetData {\\n  uint256 gene;\\n  uint256 baseAge;\\n  uint256 evolve;\\n  uint256 breedCount;\\n  uint256 breedCountMax;\\n  uint256 createTime; // before hatch\\n  uint256 bornTime; // after hatch\\n  uint256 lastBreedTime;\\n  uint256[] relicsTokenIDs;\\n  uint256[] parents; //parent token ids\\n  uint256[] children; //children token ids\\n}\\n\\n/// @title HatcherGG\\n/// @author Caecus\\n/// @notice This contract allows for escrowed NFT breeding\\n/// @dev Contract is liable to be updated without warning\\n/// @dev Homo faber suae quisque fortunae\\n/// @custom:security-contact security@earnalliance.com\\ncontract HatcherV1 is\\n  Initializable,\\n  PausableUpgradeable,\\n  UUPSUpgradeable,\\n  EIP712Upgradeable,\\n  ERC20PermitUpgradeable,\\n  PaymentSplitterUpgradeable,\\n  IERC721ReceiverUpgradeable,\\n  OwnableUpgradeable\\n{\\n  using AddressUpgradeable for address payable;\\n\\n  event NftReceived(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes data,\\n    string typeOfReceival\\n  );\\n  event ListedAPlanet(\\n    address sentFromUser,\\n    address token,\\n    uint256 tokenId,\\n    uint256 price\\n  );\\n  event DeListedAPlanet(address sentToUser, address token, uint256 tokenId);\\n\\n  event PlanetsConjoining(\\n    uint256 planetAsking,\\n    address askingUser,\\n    uint256 planetJoining,\\n    address joiningUser\\n  );\\n\\n  IBreedContract breedContract;\\n\\n  address payable private treasuryAddr;\\n\\n  IERC721 nftPlanetContract;\\n\\n  uint256 vrfValue;\\n\\n  mapping(address => ListedPlanet[]) public userToListedPlanets;\\n\\n  ListedPlanet[] planetsListed;\\n\\n  // claimable tokenID -> address\\n  mapping(uint256 => address) public claimableTokenIdToOwnerAddress;\\n  // users to planets owed after conjunction\\n  mapping(address => ClaimablePlanet[]) public claimablePlanets;\\n\\n  /// @notice error given if user other than minter tries to use forbidden funcs\\n  error Unauthorized();\\n\\n  /// @notice set URI.  Where metadata and images will come from per tokenId\\n  /// @param newTAdd the address that the owner would like the new URI to be\\n  function setTAdd(address payable newTAdd) public onlyOwner whenNotPaused {\\n    treasuryAddr = newTAdd;\\n  }\\n\\n  /// @notice function should be run after deployment to set up defaults\\n  function setAllOf(\\n    address _breederContractAddr,\\n    uint256 _vrfValue,\\n    address _nftContractAddr\\n  ) public onlyOwner whenNotPaused {\\n    vrfValue = _vrfValue;\\n    breedContract = IBreedContract(_breederContractAddr);\\n    nftPlanetContract = IERC721(_nftContractAddr);\\n  }\\n\\n  // /// @custom:oz-upgrades-unsafe-allow constructor\\n  // constructor() {\\n  //   _disableInitializers();\\n  // }\\n\\n  /// @notice Initialization of contract, called upon deployment\\n  /// @dev implements EIP712, is upgradeable, pausable, burn function is custom to save space\\n  function initialize() public initializer {\\n    __Ownable_init();\\n    __Pausable_init();\\n    // __ERC1155Burnable_init();\\n    __UUPSUpgradeable_init();\\n    // PaymentSplitterUpgradeable(_payees, _shares);\\n  }\\n\\n  function changeVRFValue(uint256 newVRF) public onlyOwner whenNotPaused {\\n    vrfValue = newVRF;\\n  }\\n\\n  function list(uint256 tokenId, uint256 price, address ownerAddress) internal {\\n    // make sure it is approved for all before! maybe during contract creation or right after prob better / more chill\\n    //  add to userToListedPlanets\\n\\n    // ListedPlanet memory newPlanetToList = ListedPlanet(tokenId, price, ownerAddress);\\n    // ListedPlanet[] currentUserLP = userToListedPlanets[ownerAddress];\\n\\n    ListedPlanet memory newPlanetToList = ListedPlanet(\\n      tokenId,\\n      price,\\n      ownerAddress\\n    );\\n    userToListedPlanets[ownerAddress].push(newPlanetToList);\\n\\n    // add to planetsListed\\n    planetsListed.push(newPlanetToList);\\n\\n    emit ListedAPlanet(msg.sender, address(nftPlanetContract), tokenId, price);\\n  }\\n\\n  // test each address, one should have a claimable planet with the other being it's otherParent\\n  // for loop thru claimable planets\\n  // once address key hit, for loop thru those CPlanets checking otherParent for match\\n  // mark delivered on CPlanet struct and that's that\\n  function setDeliveryToTrue(address[2] memory parents) internal {\\n    address parentA = parents[0];\\n    address parentB = parents[1];\\n\\n    if (claimablePlanets[parentA].length > 0) {\\n      // it is likely parent 0, confirm:\\n      for (uint i = 0; i < claimablePlanets[parentA].length; i++) {\\n        if (claimablePlanets[parentA][i].otherParent == parentB) {\\n          // confirmed, change delivery status\\n          claimablePlanets[parentA][i].delivered = true;\\n        }\\n      }\\n    } else if (claimablePlanets[parents[1]].length > 0) {\\n      // must be parent 1\\n      for (uint i = 0; i < claimablePlanets[parentB].length; i++) {\\n        if (claimablePlanets[parentB][i].otherParent == parentA) {\\n          // confirmed, change delivery status\\n          claimablePlanets[parentB][i].delivered = true;\\n        }\\n      }\\n    } else {\\n      revert(\\\"planet sent errantly, no one to claim\\\");\\n    }\\n  }\\n\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) public override returns (bytes4) {\\n    // if new planet arrives\\n    if (msg.sender == address(0) && operator == address(nftPlanetContract)) {\\n      // get parents\\n      (PlanetData memory newPlanetData, ) = nftPlanetContract.getPlanetData(\\n        tokenId\\n      );\\n\\n      // check who the planet's parents are\\n      uint256[] memory parentsIDs = newPlanetData.parents;\\n\\n      // lookup addresses from Parent TokenIDs\\n      address addressParentA = claimableTokenIdToOwnerAddress[parentsIDs[0]];\\n      address addressParentB = claimableTokenIdToOwnerAddress[parentsIDs[1]];\\n\\n      // package addresses\\n      address[2] memory parents = [addressParentA, addressParentB];\\n      // see description, sets deliverable to true.\\n      setDeliveryToTrue(parents);\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"new planet\\\");\\n    } else if (data.length > 0 && operator == address(nftPlanetContract)) {\\n      uint256 priceData = abi.decode(data, (uint256));\\n      list(tokenId, priceData, from);\\n      // Perform operations based on the decoded data\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"listing planet\\\");\\n    } else {\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"uncategorized\\\");\\n    }\\n\\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n  }\\n\\n  // get planets by page, saves gas\\n  function getPlanetsPaginated(\\n    uint startIndex,\\n    uint endIndex\\n  ) public view returns (ListedPlanet[] memory) {\\n    require(endIndex > startIndex, \\\"Invalid index\\\");\\n    require(endIndex <= planetsListed.length, \\\"Index out of bounds\\\");\\n\\n    ListedPlanet[] memory page = new ListedPlanet[](endIndex - startIndex);\\n    for (uint i = startIndex; i < endIndex; i++) {\\n      page[i - startIndex] = planetsListed[i];\\n    }\\n    return page;\\n  }\\n\\n  // get all planets from array\\n  function getAllPlanets() public view returns (ListedPlanet[] memory) {\\n    return planetsListed;\\n  }\\n\\n  function listAllYourPlanets() public {\\n    // make sure it is approved for all\\n    // sort how many planets\\n    // add each to listedPlanets\\n  }\\n  function deList(uint256 idIndex, uint256 tokenId) public whenNotPaused {\\n    require(idIndex < planetsListed.length, \\\"Index out of bounds\\\");\\n\\n    address user = msg.sender;\\n    ListedPlanet memory planetToDeList = planetsListed[idIndex];\\n    // move out of escrow\\n    // subtract to listedPlanets\\n    // ensure owner or planet owner\\n\\n    if (msg.sender != planetToDeList.ownerAddress /*|| owner*/) {\\n      revert();\\n    }\\n\\n    // this solution keeps the array cleaner but moves keys around\\n    // opted for alt solution b/c keeps keys intact\\n    // planetsListed[idIndex] = planetsListed[planetsListed.length - 1];\\n    // planetsListed.pop();\\n\\n    // zero out the array listing, this does not change the array keys\\n    planetsListed[idIndex] = ListedPlanet({\\n      planet: 0,\\n      price: 0,\\n      ownerAddress: address(0)\\n    });\\n\\n    // delist on mapping\\n\\n    // send planet back to owner\\n    _sendNFT(tokenId, user);\\n\\n    // emit accomplishment\\n    emit DeListedAPlanet(\\n      user,\\n      address(nftPlanetContract),\\n      planetToDeList.planet\\n    );\\n  }\\n\\n  function deListAllYourPlanets() public {\\n    // make sure it is approved for all\\n    // sort how many planets\\n    // remove each to listedPlanets\\n  }\\n\\n  function priceOfListingRetrieval(\\n    uint256 tokenIdOfListedToken\\n  ) internal view whenNotPaused returns (uint256) {\\n    for (uint i = 0; i < planetsListed.length; i++) {\\n      // seek out price\\n      if (planetsListed[i].planet == tokenIdOfListedToken) {\\n        return planetsListed[i].price;\\n      }\\n\\n      // if no price found, give infinite for fail.\\n      if (i == (planetsListed.length - 1)) {\\n        return type(uint256).max;\\n      }\\n    }\\n  }\\n\\n  // @notice: Conjunction functions takes a listed planet and a initiating user's planet and makes a breed request\\n  // @dev: must send 0.2 RON along with, such that VRF can operate\\n  // @param yourPlanet the planet user intends to breed\\n  // @param withListedPlanet the planet user intends to breed with\\n  function conjunct(\\n    uint256 yourPlanet,\\n    uint256 withListedPlanet\\n  ) public payable whenNotPaused {\\n    // make sure approval for all for (anima + aprs + nfts) before use\\n    address userAsking = address(0);\\n\\n    address joiningUser = address(0);\\n    uint256 price = priceOfListingRetrieval(withListedPlanet);\\n\\n    // can have this fail at breeder contract level or hatcher level.  commented out = breeder level\\n    // if (msg.value < vrfValue) {\\n    //       revert();\\n    // }\\n\\n    // check if covers vrf value and price\\n    if (msg.value < vrfValue + price) {\\n      revert();\\n    }\\n    // check if both planets are presently held TODO\\n\\n    // pay the owner of withListedPlanet\\n    // First, find the owner of the `withListedPlanet`\\n    address payable ownerOfListedPlanet;\\n    for (uint i = 0; i < planetsListed.length; i++) {\\n      if (planetsListed[i].planet == withListedPlanet) {\\n        ownerOfListedPlanet = payable(planetsListed[i].ownerAddress);\\n        break;\\n      }\\n    }\\n    // amount to send\\n    uint256 amountToSend = 11; //withListedPlanet price\\n\\n    // Send Ether to the owner of the listed planet\\n    (bool sent, ) = ownerOfListedPlanet.call{ value: amountToSend }(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n\\n    // breed the planets\\n    breedContract.requestBreed(yourPlanet, withListedPlanet, false, msg.value);\\n\\n    if (msg.value > vrfValue + amountToSend) {\\n      (bool refunded, ) = msg.sender.call{\\n        value: msg.value - vrfValue - amountToSend\\n      }(\\\"\\\");\\n      require(refunded, \\\"Failed to refund excess Ether\\\");\\n    }\\n\\n    // if listed planet is out of bondings, delist it\\n\\n    //emit conjunction\\n    emit PlanetsConjoining(\\n      yourPlanet,\\n      userAsking,\\n      withListedPlanet,\\n      joiningUser\\n    );\\n  }\\n\\n  function _sendNFT(uint256 _tokenId, address _to) internal {\\n    nftPlanetContract.transferFrom(address(this), _to, _tokenId);\\n  }\\n\\n  function status() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @notice pause any token transfers including mints and burns\\n  /// @dev can only be called by owner\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @notice unpause any token transfers including mints and burns\\n  /// @dev can only be called by owner\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  // Function to set approval for all tokens owned by the owner to another address\\n  function approveForAllAsOwner(\\n    address operator,\\n    bool approved\\n  ) public onlyOwner {\\n    nftPlanetContract.setApprovalForAll(operator, approved);\\n  }\\n\\n  function checkApprovalForAll(\\n    address owner,\\n    address operator\\n  ) public view returns (bool) {\\n    return nftPlanetContract.isApprovedForAll(owner, operator);\\n  }\\n\\n  /// @notice Allow Owner to withdraw of MATIC from the contract\\n  /// @dev utility function only, shouldn't need to be used.\\n  function withdrawFunds() public onlyOwner whenNotPaused {\\n    address payable to = payable(msg.sender);\\n    to.transfer(address(this).balance);\\n  }\\n\\n  /// @notice called to authorize Upgrades by owner only\\n  /// @dev used to upgrade\\n  /// @param newImplementation new implementation\\n  function _authorizeUpgrade(\\n    address newImplementation\\n  ) internal override onlyOwner {}\\n\\n  // unnecessary due to erc20Permit\\n  // receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6752a610c51e3269b076cdddf2f658eecd81736cde437f8e4fd978c4a3c37efc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getPlanetData","outputs":[{"components":[{"internalType":"uint256","name":"gene","type":"uint256"},{"internalType":"uint256","name":"baseAge","type":"uint256"},{"internalType":"uint256","name":"evolve","type":"uint256"},{"internalType":"uint256","name":"breedCount","type":"uint256"},{"internalType":"uint256","name":"breedCountMax","type":"uint256"},{"internalType":"uint256","name":"createTime","type":"uint256"},{"internalType":"uint256","name":"bornTime","type":"uint256"},{"internalType":"uint256","name":"lastBreedTime","type":"uint256"},{"internalType":"uint256[]","name":"relicsTokenIDs","type":"uint256[]"},{"internalType":"uint256[]","name":"parents","type":"uint256[]"},{"internalType":"uint256[]","name":"children","type":"uint256[]"}],"internalType":"struct PlanetData","name":"","type":"tuple"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPlanetData(uint256)":"dc9ce7a5","isApprovedForAll(address,address)":"e985e9c5","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlanetData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evolve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breedCountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bornTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBreedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"relicsTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"parents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"children\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PlanetData\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HatcherV1.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x8a94877af58e9104fae9e11e13622976a879711072a121683af67b7b691e1437\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20PermitUpgradeable\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3d159b9049d4ef465c1fb41f7ff7620f18f52bf6f8f3018bae4ed95c2df537d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x7077d7f3369b21f286840c0d69b09a8a6d3d6e522fff67bfc240fd0a6cdf178c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1561a6950b1aaa504c8f81b7d46bccfa77ccd10de3eb865cf34b1acd5ad505e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"contracts/HatcherV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\ninterface IERC721 {\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  function isApprovedForAll(\\n    address owner,\\n    address operator\\n  ) external view returns (bool);\\n\\n  function getPlanetData(\\n    uint256 tokenId\\n  ) external view returns (PlanetData memory, bool);\\n  function setApprovalForAll(address operator, bool approved) external;\\n}\\n\\ninterface IBreedContract {\\n  function requestBreed(\\n    uint256 planetAId,\\n    uint256 planetBId,\\n    bool shouldUseMiniBlackhole,\\n    uint value\\n  ) external payable returns (bytes32);\\n}\\n\\nstruct ListedPlanet {\\n  uint256 planet;\\n  uint256 price;\\n  address ownerAddress;\\n}\\n\\nstruct ClaimablePlanet {\\n  address ownerParentAddress;\\n  uint256 ownerTokenId;\\n  bool delivered;\\n  address otherParent;\\n  uint256 otherTokenId;\\n}\\n\\nstruct PlanetData {\\n  uint256 gene;\\n  uint256 baseAge;\\n  uint256 evolve;\\n  uint256 breedCount;\\n  uint256 breedCountMax;\\n  uint256 createTime; // before hatch\\n  uint256 bornTime; // after hatch\\n  uint256 lastBreedTime;\\n  uint256[] relicsTokenIDs;\\n  uint256[] parents; //parent token ids\\n  uint256[] children; //children token ids\\n}\\n\\n/// @title HatcherGG\\n/// @author Caecus\\n/// @notice This contract allows for escrowed NFT breeding\\n/// @dev Contract is liable to be updated without warning\\n/// @dev Homo faber suae quisque fortunae\\n/// @custom:security-contact security@earnalliance.com\\ncontract HatcherV1 is\\n  Initializable,\\n  PausableUpgradeable,\\n  UUPSUpgradeable,\\n  EIP712Upgradeable,\\n  ERC20PermitUpgradeable,\\n  PaymentSplitterUpgradeable,\\n  IERC721ReceiverUpgradeable,\\n  OwnableUpgradeable\\n{\\n  using AddressUpgradeable for address payable;\\n\\n  event NftReceived(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes data,\\n    string typeOfReceival\\n  );\\n  event ListedAPlanet(\\n    address sentFromUser,\\n    address token,\\n    uint256 tokenId,\\n    uint256 price\\n  );\\n  event DeListedAPlanet(address sentToUser, address token, uint256 tokenId);\\n\\n  event PlanetsConjoining(\\n    uint256 planetAsking,\\n    address askingUser,\\n    uint256 planetJoining,\\n    address joiningUser\\n  );\\n\\n  IBreedContract breedContract;\\n\\n  address payable private treasuryAddr;\\n\\n  IERC721 nftPlanetContract;\\n\\n  uint256 vrfValue;\\n\\n  mapping(address => ListedPlanet[]) public userToListedPlanets;\\n\\n  ListedPlanet[] planetsListed;\\n\\n  // claimable tokenID -> address\\n  mapping(uint256 => address) public claimableTokenIdToOwnerAddress;\\n  // users to planets owed after conjunction\\n  mapping(address => ClaimablePlanet[]) public claimablePlanets;\\n\\n  /// @notice error given if user other than minter tries to use forbidden funcs\\n  error Unauthorized();\\n\\n  /// @notice set URI.  Where metadata and images will come from per tokenId\\n  /// @param newTAdd the address that the owner would like the new URI to be\\n  function setTAdd(address payable newTAdd) public onlyOwner whenNotPaused {\\n    treasuryAddr = newTAdd;\\n  }\\n\\n  /// @notice function should be run after deployment to set up defaults\\n  function setAllOf(\\n    address _breederContractAddr,\\n    uint256 _vrfValue,\\n    address _nftContractAddr\\n  ) public onlyOwner whenNotPaused {\\n    vrfValue = _vrfValue;\\n    breedContract = IBreedContract(_breederContractAddr);\\n    nftPlanetContract = IERC721(_nftContractAddr);\\n  }\\n\\n  // /// @custom:oz-upgrades-unsafe-allow constructor\\n  // constructor() {\\n  //   _disableInitializers();\\n  // }\\n\\n  /// @notice Initialization of contract, called upon deployment\\n  /// @dev implements EIP712, is upgradeable, pausable, burn function is custom to save space\\n  function initialize() public initializer {\\n    __Ownable_init();\\n    __Pausable_init();\\n    // __ERC1155Burnable_init();\\n    __UUPSUpgradeable_init();\\n    // PaymentSplitterUpgradeable(_payees, _shares);\\n  }\\n\\n  function changeVRFValue(uint256 newVRF) public onlyOwner whenNotPaused {\\n    vrfValue = newVRF;\\n  }\\n\\n  function list(uint256 tokenId, uint256 price, address ownerAddress) internal {\\n    // make sure it is approved for all before! maybe during contract creation or right after prob better / more chill\\n    //  add to userToListedPlanets\\n\\n    // ListedPlanet memory newPlanetToList = ListedPlanet(tokenId, price, ownerAddress);\\n    // ListedPlanet[] currentUserLP = userToListedPlanets[ownerAddress];\\n\\n    ListedPlanet memory newPlanetToList = ListedPlanet(\\n      tokenId,\\n      price,\\n      ownerAddress\\n    );\\n    userToListedPlanets[ownerAddress].push(newPlanetToList);\\n\\n    // add to planetsListed\\n    planetsListed.push(newPlanetToList);\\n\\n    emit ListedAPlanet(msg.sender, address(nftPlanetContract), tokenId, price);\\n  }\\n\\n  // test each address, one should have a claimable planet with the other being it's otherParent\\n  // for loop thru claimable planets\\n  // once address key hit, for loop thru those CPlanets checking otherParent for match\\n  // mark delivered on CPlanet struct and that's that\\n  function setDeliveryToTrue(address[2] memory parents) internal {\\n    address parentA = parents[0];\\n    address parentB = parents[1];\\n\\n    if (claimablePlanets[parentA].length > 0) {\\n      // it is likely parent 0, confirm:\\n      for (uint i = 0; i < claimablePlanets[parentA].length; i++) {\\n        if (claimablePlanets[parentA][i].otherParent == parentB) {\\n          // confirmed, change delivery status\\n          claimablePlanets[parentA][i].delivered = true;\\n        }\\n      }\\n    } else if (claimablePlanets[parents[1]].length > 0) {\\n      // must be parent 1\\n      for (uint i = 0; i < claimablePlanets[parentB].length; i++) {\\n        if (claimablePlanets[parentB][i].otherParent == parentA) {\\n          // confirmed, change delivery status\\n          claimablePlanets[parentB][i].delivered = true;\\n        }\\n      }\\n    } else {\\n      revert(\\\"planet sent errantly, no one to claim\\\");\\n    }\\n  }\\n\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) public override returns (bytes4) {\\n    // if new planet arrives\\n    if (msg.sender == address(0) && operator == address(nftPlanetContract)) {\\n      // get parents\\n      (PlanetData memory newPlanetData, ) = nftPlanetContract.getPlanetData(\\n        tokenId\\n      );\\n\\n      // check who the planet's parents are\\n      uint256[] memory parentsIDs = newPlanetData.parents;\\n\\n      // lookup addresses from Parent TokenIDs\\n      address addressParentA = claimableTokenIdToOwnerAddress[parentsIDs[0]];\\n      address addressParentB = claimableTokenIdToOwnerAddress[parentsIDs[1]];\\n\\n      // package addresses\\n      address[2] memory parents = [addressParentA, addressParentB];\\n      // see description, sets deliverable to true.\\n      setDeliveryToTrue(parents);\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"new planet\\\");\\n    } else if (data.length > 0 && operator == address(nftPlanetContract)) {\\n      uint256 priceData = abi.decode(data, (uint256));\\n      list(tokenId, priceData, from);\\n      // Perform operations based on the decoded data\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"listing planet\\\");\\n    } else {\\n      // Emit an event with details about the NFT received\\n      emit NftReceived(operator, from, tokenId, data, \\\"uncategorized\\\");\\n    }\\n\\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n  }\\n\\n  // get planets by page, saves gas\\n  function getPlanetsPaginated(\\n    uint startIndex,\\n    uint endIndex\\n  ) public view returns (ListedPlanet[] memory) {\\n    require(endIndex > startIndex, \\\"Invalid index\\\");\\n    require(endIndex <= planetsListed.length, \\\"Index out of bounds\\\");\\n\\n    ListedPlanet[] memory page = new ListedPlanet[](endIndex - startIndex);\\n    for (uint i = startIndex; i < endIndex; i++) {\\n      page[i - startIndex] = planetsListed[i];\\n    }\\n    return page;\\n  }\\n\\n  // get all planets from array\\n  function getAllPlanets() public view returns (ListedPlanet[] memory) {\\n    return planetsListed;\\n  }\\n\\n  function listAllYourPlanets() public {\\n    // make sure it is approved for all\\n    // sort how many planets\\n    // add each to listedPlanets\\n  }\\n  function deList(uint256 idIndex, uint256 tokenId) public whenNotPaused {\\n    require(idIndex < planetsListed.length, \\\"Index out of bounds\\\");\\n\\n    address user = msg.sender;\\n    ListedPlanet memory planetToDeList = planetsListed[idIndex];\\n    // move out of escrow\\n    // subtract to listedPlanets\\n    // ensure owner or planet owner\\n\\n    if (msg.sender != planetToDeList.ownerAddress /*|| owner*/) {\\n      revert();\\n    }\\n\\n    // this solution keeps the array cleaner but moves keys around\\n    // opted for alt solution b/c keeps keys intact\\n    // planetsListed[idIndex] = planetsListed[planetsListed.length - 1];\\n    // planetsListed.pop();\\n\\n    // zero out the array listing, this does not change the array keys\\n    planetsListed[idIndex] = ListedPlanet({\\n      planet: 0,\\n      price: 0,\\n      ownerAddress: address(0)\\n    });\\n\\n    // delist on mapping\\n\\n    // send planet back to owner\\n    _sendNFT(tokenId, user);\\n\\n    // emit accomplishment\\n    emit DeListedAPlanet(\\n      user,\\n      address(nftPlanetContract),\\n      planetToDeList.planet\\n    );\\n  }\\n\\n  function deListAllYourPlanets() public {\\n    // make sure it is approved for all\\n    // sort how many planets\\n    // remove each to listedPlanets\\n  }\\n\\n  function priceOfListingRetrieval(\\n    uint256 tokenIdOfListedToken\\n  ) internal view whenNotPaused returns (uint256) {\\n    for (uint i = 0; i < planetsListed.length; i++) {\\n      // seek out price\\n      if (planetsListed[i].planet == tokenIdOfListedToken) {\\n        return planetsListed[i].price;\\n      }\\n\\n      // if no price found, give infinite for fail.\\n      if (i == (planetsListed.length - 1)) {\\n        return type(uint256).max;\\n      }\\n    }\\n  }\\n\\n  // @notice: Conjunction functions takes a listed planet and a initiating user's planet and makes a breed request\\n  // @dev: must send 0.2 RON along with, such that VRF can operate\\n  // @param yourPlanet the planet user intends to breed\\n  // @param withListedPlanet the planet user intends to breed with\\n  function conjunct(\\n    uint256 yourPlanet,\\n    uint256 withListedPlanet\\n  ) public payable whenNotPaused {\\n    // make sure approval for all for (anima + aprs + nfts) before use\\n    address userAsking = address(0);\\n\\n    address joiningUser = address(0);\\n    uint256 price = priceOfListingRetrieval(withListedPlanet);\\n\\n    // can have this fail at breeder contract level or hatcher level.  commented out = breeder level\\n    // if (msg.value < vrfValue) {\\n    //       revert();\\n    // }\\n\\n    // check if covers vrf value and price\\n    if (msg.value < vrfValue + price) {\\n      revert();\\n    }\\n    // check if both planets are presently held TODO\\n\\n    // pay the owner of withListedPlanet\\n    // First, find the owner of the `withListedPlanet`\\n    address payable ownerOfListedPlanet;\\n    for (uint i = 0; i < planetsListed.length; i++) {\\n      if (planetsListed[i].planet == withListedPlanet) {\\n        ownerOfListedPlanet = payable(planetsListed[i].ownerAddress);\\n        break;\\n      }\\n    }\\n    // amount to send\\n    uint256 amountToSend = 11; //withListedPlanet price\\n\\n    // Send Ether to the owner of the listed planet\\n    (bool sent, ) = ownerOfListedPlanet.call{ value: amountToSend }(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n\\n    // breed the planets\\n    breedContract.requestBreed(yourPlanet, withListedPlanet, false, msg.value);\\n\\n    if (msg.value > vrfValue + amountToSend) {\\n      (bool refunded, ) = msg.sender.call{\\n        value: msg.value - vrfValue - amountToSend\\n      }(\\\"\\\");\\n      require(refunded, \\\"Failed to refund excess Ether\\\");\\n    }\\n\\n    // if listed planet is out of bondings, delist it\\n\\n    //emit conjunction\\n    emit PlanetsConjoining(\\n      yourPlanet,\\n      userAsking,\\n      withListedPlanet,\\n      joiningUser\\n    );\\n  }\\n\\n  function _sendNFT(uint256 _tokenId, address _to) internal {\\n    nftPlanetContract.transferFrom(address(this), _to, _tokenId);\\n  }\\n\\n  function status() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @notice pause any token transfers including mints and burns\\n  /// @dev can only be called by owner\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @notice unpause any token transfers including mints and burns\\n  /// @dev can only be called by owner\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  // Function to set approval for all tokens owned by the owner to another address\\n  function approveForAllAsOwner(\\n    address operator,\\n    bool approved\\n  ) public onlyOwner {\\n    nftPlanetContract.setApprovalForAll(operator, approved);\\n  }\\n\\n  function checkApprovalForAll(\\n    address owner,\\n    address operator\\n  ) public view returns (bool) {\\n    return nftPlanetContract.isApprovedForAll(owner, operator);\\n  }\\n\\n  /// @notice Allow Owner to withdraw of MATIC from the contract\\n  /// @dev utility function only, shouldn't need to be used.\\n  function withdrawFunds() public onlyOwner whenNotPaused {\\n    address payable to = payable(msg.sender);\\n    to.transfer(address(this).balance);\\n  }\\n\\n  /// @notice called to authorize Upgrades by owner only\\n  /// @dev used to upgrade\\n  /// @param newImplementation new implementation\\n  function _authorizeUpgrade(\\n    address newImplementation\\n  ) internal override onlyOwner {}\\n\\n  // unnecessary due to erc20Permit\\n  // receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6752a610c51e3269b076cdddf2f658eecd81736cde437f8e4fd978c4a3c37efc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}