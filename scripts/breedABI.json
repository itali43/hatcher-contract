{
  "compiler": { "version": "0.8.12+commit.f00d7308" },
  "language": "Solidity",
  "output": {
    "abi": [
      { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
      { "inputs": [], "name": "OnlyCoordinatorCanFulfill", "type": "error" },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "_admin",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "_enabled",
            "type": "bool"
          }
        ],
        "name": "AdminAccessSet",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "previousAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "beacon",
            "type": "address"
          }
        ],
        "name": "BeaconUpgraded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "BreedSuccess",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "_requestId",
            "type": "uint256"
          }
        ],
        "name": "BreedSuccessWithRequestId",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "_requestHash",
            "type": "bytes32"
          }
        ],
        "name": "RequestBreed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "implementation",
            "type": "address"
          }
        ],
        "name": "Upgraded",
        "type": "event"
      },
      {
        "inputs": [
          { "internalType": "bytes32", "name": "", "type": "bytes32" }
        ],
        "name": "BreedStructMap",
        "outputs": [
          {
            "internalType": "address",
            "name": "userAddress",
            "type": "address"
          },
          { "internalType": "uint256", "name": "planetAId", "type": "uint256" },
          { "internalType": "uint256", "name": "planetBId", "type": "uint256" },
          {
            "internalType": "bool",
            "name": "shouldUseMiniBlackhole",
            "type": "bool"
          },
          { "internalType": "bool", "name": "isDone", "type": "bool" },
          { "internalType": "uint256", "name": "planetId", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "additionBornBaseInterval",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "addonGasPrice",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "bytes32", "name": "_reqHash", "type": "bytes32" },
          {
            "internalType": "uint256",
            "name": "_randomSeed",
            "type": "uint256"
          }
        ],
        "name": "adminFulfillRandomSeed",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "name": "animaPrices",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "animaToMiniBlackhole",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "animaToken",
        "outputs": [
          {
            "internalType": "contract IERC20Upgradeable",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "apeironGodiverseCollection",
        "outputs": [
          {
            "internalType": "contract ERC1155BurnableUpgradeable",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "name": "apeironGodiverseCollectionNumbers",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "name": "aprsPrices",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "aprsToken",
        "outputs": [
          {
            "internalType": "contract IERC20Upgradeable",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "blacklistContract",
        "outputs": [
          {
            "internalType": "contract IBlacklist",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "bornBaseInterval",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "breedPlanetDataContract",
        "outputs": [
          {
            "internalType": "contract IBreedPlanetData",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "callbackGaslimit",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "currentPlanetId",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "planetId", "type": "uint256" }
        ],
        "name": "getParentID",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "admin", "type": "address" }
        ],
        "name": "isAdmin",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "isPrimevalActive",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "minAnimaUse",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "minMiniBlackholeUse",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "miniBlackholeTokenId",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "normalBreedBaseInterval",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          { "internalType": "address", "name": "", "type": "address" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "planetAttributeManagerContract",
        "outputs": [
          {
            "internalType": "contract PlanetAttributeManager",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "planetContract",
        "outputs": [
          {
            "internalType": "contract IApeironPlanet",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "name": "primevalAnimaPrices",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "name": "primevalApeironGodiverseCollectionNumbers",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "name": "primevalAprsPrices",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "bytes32", "name": "_reqHash", "type": "bytes32" },
          {
            "internalType": "uint256",
            "name": "_randomSeed",
            "type": "uint256"
          }
        ],
        "name": "rawFulfillRandomSeed",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "planetAId", "type": "uint256" },
          { "internalType": "uint256", "name": "planetBId", "type": "uint256" },
          {
            "internalType": "bool",
            "name": "shouldUseMiniBlackhole",
            "type": "bool"
          }
        ],
        "name": "requestBreed",
        "outputs": [
          { "internalType": "bytes32", "name": "", "type": "bytes32" }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "requestId", "type": "uint256" },
          { "internalType": "uint256", "name": "planetAId", "type": "uint256" },
          { "internalType": "uint256", "name": "planetBId", "type": "uint256" },
          {
            "internalType": "uint256",
            "name": "animaDiscount",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "shouldUseMiniBlackhole",
            "type": "bool"
          },
          { "internalType": "uint256", "name": "time", "type": "uint256" },
          { "internalType": "bytes", "name": "signature", "type": "bytes" }
        ],
        "name": "requestBreedWithAnimus",
        "outputs": [
          { "internalType": "bytes32", "name": "", "type": "bytes32" }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "bytes32", "name": "", "type": "bytes32" }
        ],
        "name": "requestHashMap",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "name": "requestIdMap",
        "outputs": [
          { "internalType": "bytes32", "name": "", "type": "bytes32" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "admin", "type": "address" },
          { "internalType": "bool", "name": "enabled", "type": "bool" }
        ],
        "name": "setAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[][]",
            "name": "_apeironGodiverseCollectionNumbers",
            "type": "uint256[][]"
          },
          { "internalType": "bool", "name": "_isPrimeval", "type": "bool" }
        ],
        "name": "setApeironGodiverseCollectionNumber",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[][]",
            "name": "_aprsPrices",
            "type": "uint256[][]"
          },
          {
            "internalType": "uint256[][]",
            "name": "_animaPrices",
            "type": "uint256[][]"
          },
          { "internalType": "bool", "name": "_isPrimeval", "type": "bool" }
        ],
        "name": "setAprsAndAnimaPrices",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_normalBreedBaseInterval",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_bornBaseInterval",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_additionBornBaseInterval",
            "type": "uint256"
          }
        ],
        "name": "setBreedBornInterval",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_currentPlanetId",
            "type": "uint256"
          }
        ],
        "name": "setCurrentPlanetId",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_vrfCoordinator",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_callbackGaslimit",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_addonGasPrice",
            "type": "uint256"
          }
        ],
        "name": "setupVRFCoordinator",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "newOwner", "type": "address" }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_isPrimevalActive",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "_miniBlackholeTokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_animaToMiniBlackhole",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_ronToUseInRandomness",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_minMiniBlackholeUse",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_minAnimaUse",
            "type": "uint256"
          }
        ],
        "name": "updateBreedingTokenSetting",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nftAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_breedAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_blacklistAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_apeironGodiverseCollectionAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_aprsTokenAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_animaTokenAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_planetAttributeManagerContract",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_systemAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_ronToUseInRandomness",
            "type": "uint256"
          }
        ],
        "name": "updateContractSetting",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          }
        ],
        "name": "upgradeTo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          },
          { "internalType": "bytes", "name": "data", "type": "bytes" }
        ],
        "name": "upgradeToAndCall",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "vrfCoordinator",
        "outputs": [
          { "internalType": "address", "name": "", "type": "address" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "tokenAddress",
            "type": "address"
          },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          { "internalType": "address", "name": "wallet", "type": "address" }
        ],
        "name": "withdrawFunds",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      { "stateMutability": "payable", "type": "receive" }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "adminFulfillRandomSeed(bytes32,uint256)": {
          "params": {
            "_randomSeed": "random seed of the ronin VRF",
            "_reqHash": "request hash of the ronin VRF"
          }
        },
        "constructor": { "custom:oz-upgrades-unsafe-allow": "constructor" },
        "getParentID(uint256)": { "params": { "planetId": "planetId" } },
        "isAdmin(address)": {
          "params": { "admin": "- Address of Admin" },
          "returns": { "_0": "whether user has admin access" }
        },
        "owner()": { "details": "Returns the address of the current owner." },
        "rawFulfillRandomSeed(bytes32,uint256)": {
          "details": "Raw fulfills random seed. Requirements: - The method caller is VRF coordinator `vrfCoordinator`."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "setAdmin(address,bool)": {
          "params": {
            "admin": "- Address of Admin",
            "enabled": "- Enable/Disable Admin Access"
          }
        },
        "setApeironGodiverseCollectionNumber(uint256[][],bool)": {
          "params": {
            "_apeironGodiverseCollectionNumbers": "first[] is bloodline (must be 4), second[] is breed count price (must be 5)",
            "_isPrimeval": "is primeval"
          }
        },
        "setAprsAndAnimaPrices(uint256[][],uint256[][],bool)": {
          "params": {
            "_animaPrices": "first[] is bloodline (must be 4), second[] is breed count price (must be 5)",
            "_aprsPrices": "first[] is bloodline (must be 4), second[] is breed count price (must be 5)"
          }
        },
        "setBreedBornInterval(uint256,uint256,uint256)": {
          "params": {
            "_additionBornBaseInterval": "additionBornBaseInterval",
            "_bornBaseInterval": "bornBaseInterval",
            "_normalBreedBaseInterval": "normalBreedBaseInterval"
          }
        },
        "setCurrentPlanetId(uint256)": {
          "params": { "_currentPlanetId": "currentPlanetId" }
        },
        "setupVRFCoordinator(address,uint256,uint256)": {
          "details": "Set VRF coordinator setting. Requirements: - The method caller is owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "updateBreedingTokenSetting(bool,uint256,uint256,uint256,uint256,uint256)": {
          "params": {
            "_animaToMiniBlackhole": "anima To MiniBlackhole number",
            "_isPrimevalActive": "is Primeval Active",
            "_minAnimaUse": "minimum anima",
            "_minMiniBlackholeUse": "minimum mini-blackhold",
            "_miniBlackholeTokenId": "mini Blackhole Token Id",
            "_ronToUseInRandomness": "- ron to use in randomness"
          }
        },
        "updateContractSetting(address,address,address,address,address,address,address,address,uint256)": {
          "params": {
            "_animaTokenAddress": "anima token contract address",
            "_apeironGodiverseCollectionAddress": "ApeironGodiverseCollection contract address",
            "_aprsTokenAddress": "aprs token contract address",
            "_blacklistAddress": "blacklist contract address",
            "_breedAddress": "breedPlanetData contract address",
            "_nftAddress": "planet contract address",
            "_planetAttributeManagerContract": "PlanetAttributeManager contract address",
            "_ronToUseInRandomness": "- ron to use in randomness",
            "_systemAddress": "system address"
          }
        },
        "upgradeTo(address)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        },
        "upgradeToAndCall(address,bytes)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        },
        "withdrawFunds(address,uint256,address)": {
          "params": {
            "amount": "- amount to withdraw",
            "tokenAddress": "- ERC20 token address",
            "wallet": "- address to withdraw to"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "adminFulfillRandomSeed(bytes32,uint256)": {
          "notice": "incase of ronin fulfillRandomWords fail, admin can call this to fulfill random seed"
        },
        "getParentID(uint256)": { "notice": "get planetId Parent ID" },
        "isAdmin(address)": { "notice": "Check Admin Access" },
        "rawFulfillRandomSeed(bytes32,uint256)": {
          "notice": "The function `rawFulfillRandomSeed` is called by VRFCoordinator when it receives a valid VRF proof. It then calls `_fulfillRandomSeed`, after validating the origin of the call."
        },
        "setAdmin(address,bool)": { "notice": "Set Admin Access" },
        "setApeironGodiverseCollectionNumber(uint256[][],bool)": {
          "notice": "set Apeiron Godiverse Collection Number (mini blackhold)"
        },
        "setAprsAndAnimaPrices(uint256[][],uint256[][],bool)": {
          "notice": "set aprs and anima prices"
        },
        "setBreedBornInterval(uint256,uint256,uint256)": {
          "notice": "set Normal Breed Base Interval"
        },
        "setCurrentPlanetId(uint256)": {
          "notice": "set the currentPlanetId, only use when the currentPlanetId is error"
        },
        "updateBreedingTokenSetting(bool,uint256,uint256,uint256,uint256,uint256)": {
          "notice": "set is primeval active set MiniBlackholeTokenId; miniBlackhole is erc1155, and the TokenId is that id set AnimaToMiniBlackhole; 1 MiniBlackhole to X anima/animus set minimum token (mini-blackhold or anima) use, when using animus token"
        },
        "updateContractSetting(address,address,address,address,address,address,address,address,uint256)": {
          "notice": "update contract setting"
        },
        "withdrawFunds(address,uint256,address)": {
          "notice": "Withdraw any ERC20"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": { "contracts/BreedPlanet.sol": "BreedPlanet" },
    "evmVersion": "london",
    "libraries": {},
    "metadata": { "bytecodeHash": "ipfs", "useLiteralContent": true },
    "optimizer": { "enabled": false, "runs": 200 },
    "remappings": []
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n",
      "keccak256": "0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n",
      "keccak256": "0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n",
      "keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n",
      "keccak256": "0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n",
      "keccak256": "0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n    uint256[47] private __gap;\n}\n",
      "keccak256": "0xc8a2776bd48e62498418d7eede80bde0f00c6b5d67286abf49499d7f7b65b95c",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n",
      "keccak256": "0x19bc90c8301914433c5e9b74a4eaac8942f64ea79d509f445799459fa10695da",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n",
      "keccak256": "0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Burnable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC1155Burnable_init_unchained();\n    }\n\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\n    }\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n    uint256[50] private __gap;\n}\n",
      "keccak256": "0xf465e9dafcfb2cf5f44df433dfb3d413d48cb94e456c4214f3a0ee8694125b85",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n",
      "keccak256": "0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n",
      "keccak256": "0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n",
      "keccak256": "0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n",
      "keccak256": "0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n",
      "keccak256": "0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n",
      "keccak256": "0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n",
      "keccak256": "0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a",
      "license": "MIT"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n",
      "keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
      "license": "MIT"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n",
      "keccak256": "0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f",
      "license": "MIT"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n",
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n",
      "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
      "license": "MIT"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n",
      "keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
      "license": "MIT"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n",
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n",
      "keccak256": "0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0",
      "license": "MIT"
    },
    "contracts/BreedPlanet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./BreedPlanetBase.sol\";\nimport \"./PlanetAttributeManager.sol\";\nimport \"./interfaces/IBlacklist.sol\";\nimport \"./utils/VRFConsumer.sol\";\n\ncontract BreedPlanet is BreedPlanetBase, VRFConsumer {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using AddressUpgradeable for address;\n    using ECDSA for bytes32;\n\n    struct BreedStruct {\n        address userAddress;\n        uint256 planetAId;\n        uint256 planetBId;\n        bool shouldUseMiniBlackhole;\n        bool isDone; // for client check breed is finish or not\n        uint256 planetId;\n    }\n\n    PlanetAttributeManager public planetAttributeManagerContract;\n    IBlacklist public blacklistContract;\n    ERC1155BurnableUpgradeable public apeironGodiverseCollection;\n    IERC20Upgradeable public aprsToken;\n    IERC20Upgradeable public animaToken;\n\n    bool public isPrimevalActive;\n    mapping(uint256 => mapping(uint256 => uint256)) public aprsPrices; // bloodline => breedcount => cost\n    mapping(uint256 => mapping(uint256 => uint256)) public animaPrices; // bloodline => breedcount => cost\n    mapping(uint256 => mapping(uint256 => uint256)) public primevalAprsPrices; // bloodline => breedcount => cost, only use for primeval planet id <= 4585\n    mapping(uint256 => mapping(uint256 => uint256)) public primevalAnimaPrices; // bloodline => breedcount => cost, only use for primeval planet id <= 4585\n    mapping(uint256 => mapping(uint256 => uint256))\n        public apeironGodiverseCollectionNumbers; // bloodline => breedcount => cost\n    mapping(uint256 => mapping(uint256 => uint256))\n        public primevalApeironGodiverseCollectionNumbers; // bloodline => breedcount => cost, only use for primeval planet id <= 4585\n\n    uint256 public currentPlanetId; // production id\n    uint256 public normalBreedBaseInterval;\n    uint256 public bornBaseInterval;\n    uint256 public additionBornBaseInterval;\n    uint256 public miniBlackholeTokenId; // apeironGodiverseCollection id\n\n    mapping(bytes32 => BreedStruct) public BreedStructMap; // bytes32: ronin vrf requestHash\n\n    // version: animus update\n    address private systemAddress;\n    uint256 public animaToMiniBlackhole; // 1 mini-blackhole to X anima\n    // minimum token (mini-blackhold or anima) use, when using animus token\n    uint256 public minMiniBlackholeUse;\n    uint256 public minAnimaUse;\n    mapping(bytes32 => uint256) private animaDiscountMap; // bytes32: ronin vrf requestHash => uint256: AnimusUsed\n\n    // version: ronin\n    uint256 private ronToUseInRandomness;\n\n    // version: animus update\n    // use for backend check requestId\n    mapping(bytes32 => uint256) public requestHashMap; // vrf requestHash => requestId\n    mapping(uint256 => bytes32) public requestIdMap; // requestId => vrf requestHash\n\n    event RequestBreed(bytes32 indexed _requestHash);\n    event BreedSuccess(uint256 indexed _tokenId);\n    event BreedSuccessWithRequestId(\n        uint256 indexed _tokenId,\n        uint256 _requestId\n    );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function initialize() external virtual initializer {\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n\n        isPrimevalActive = true;\n        currentPlanetId = 4585; // production id\n        normalBreedBaseInterval = 14 * 3600 * 24;\n        bornBaseInterval = 7 * 3600 * 24;\n        additionBornBaseInterval = 14 * 3600 * 24;\n        miniBlackholeTokenId = 1; // apeironGodiverseCollection id\n    }\n\n    /// @dev Required by UUPSUpgradeable\n    function _authorizeUpgrade(\n        address newImplementation\n    ) internal override onlyOwner {}\n\n    receive() external payable {}\n\n    /// @notice update contract setting\n    /// @param _nftAddress planet contract address\n    /// @param _breedAddress breedPlanetData contract address\n    /// @param _blacklistAddress blacklist contract address\n    /// @param _apeironGodiverseCollectionAddress ApeironGodiverseCollection contract address\n    /// @param _aprsTokenAddress aprs token contract address\n    /// @param _animaTokenAddress anima token contract address\n    /// @param _planetAttributeManagerContract PlanetAttributeManager contract address\n    /// @param _systemAddress system address\n    /// @param _ronToUseInRandomness - ron to use in randomness\n    function updateContractSetting(\n        address _nftAddress,\n        address _breedAddress,\n        address _blacklistAddress,\n        address _apeironGodiverseCollectionAddress,\n        address _aprsTokenAddress,\n        address _animaTokenAddress,\n        address _planetAttributeManagerContract,\n        address _systemAddress,\n        uint256 _ronToUseInRandomness\n    ) external onlyOwner {\n        _requireArgument(\n            _checkIsContract(_nftAddress) &&\n                _checkIsContract(_breedAddress) &&\n                _checkIsContract(_blacklistAddress) &&\n                _checkIsContract(_apeironGodiverseCollectionAddress) &&\n                _checkIsContract(_aprsTokenAddress) &&\n                _checkIsContract(_animaTokenAddress) &&\n                _checkIsContract(_planetAttributeManagerContract),\n            \"Error contract address\"\n        );\n\n        _updateBaseContractSetting(_nftAddress, _breedAddress);\n\n        blacklistContract = IBlacklist(_blacklistAddress);\n        apeironGodiverseCollection = ERC1155BurnableUpgradeable(\n            _apeironGodiverseCollectionAddress\n        );\n        aprsToken = IERC20Upgradeable(_aprsTokenAddress);\n        animaToken = IERC20Upgradeable(_animaTokenAddress);\n        planetAttributeManagerContract = PlanetAttributeManager(\n            _planetAttributeManagerContract\n        );\n        systemAddress = _systemAddress;\n\n        // update ronin to use in randomness\n        ronToUseInRandomness = _ronToUseInRandomness;\n    }\n\n    /**\n     * set is primeval active\n     * set MiniBlackholeTokenId; miniBlackhole is erc1155, and the TokenId is that id\n     * set AnimaToMiniBlackhole; 1 MiniBlackhole to X anima/animus\n     * set minimum token (mini-blackhold or anima) use, when using animus token\n     *\n     * @param _isPrimevalActive is Primeval Active\n     * @param _miniBlackholeTokenId mini Blackhole Token Id\n     * @param _animaToMiniBlackhole anima To MiniBlackhole number\n     * @param _ronToUseInRandomness - ron to use in randomness\n     * @param _minMiniBlackholeUse minimum mini-blackhold\n     * @param _minAnimaUse minimum anima\n     */\n    function updateBreedingTokenSetting(\n        bool _isPrimevalActive,\n        uint256 _miniBlackholeTokenId,\n        uint256 _animaToMiniBlackhole,\n        uint256 _ronToUseInRandomness,\n        uint256 _minMiniBlackholeUse,\n        uint256 _minAnimaUse\n    ) external onlyOwner {\n        isPrimevalActive = _isPrimevalActive;\n        miniBlackholeTokenId = _miniBlackholeTokenId;\n        animaToMiniBlackhole = _animaToMiniBlackhole;\n        ronToUseInRandomness = _ronToUseInRandomness;\n        minMiniBlackholeUse = _minMiniBlackholeUse;\n        minAnimaUse = _minAnimaUse;\n    }\n\n    /// @notice set Normal Breed Base Interval\n    /// @param _normalBreedBaseInterval normalBreedBaseInterval\n    /// @param _bornBaseInterval bornBaseInterval\n    /// @param _additionBornBaseInterval additionBornBaseInterval\n    function setBreedBornInterval(\n        uint256 _normalBreedBaseInterval,\n        uint256 _bornBaseInterval,\n        uint256 _additionBornBaseInterval\n    ) external onlyOwner {\n        normalBreedBaseInterval = _normalBreedBaseInterval;\n        bornBaseInterval = _bornBaseInterval;\n        additionBornBaseInterval = additionBornBaseInterval;\n    }\n\n    /// @notice set aprs and anima prices\n    /// @param _aprsPrices first[] is bloodline (must be 4), second[] is breed count price (must be 5)\n    /// @param _animaPrices first[] is bloodline (must be 4), second[] is breed count price (must be 5)\n    function setAprsAndAnimaPrices(\n        uint256[][] memory _aprsPrices,\n        uint256[][] memory _animaPrices,\n        bool _isPrimeval\n    ) public onlyOwner {\n        // bloodline is 4\n        _requireArgument(\n            _aprsPrices.length == 4 && _animaPrices.length == 4,\n            \"Prices length are wrong\"\n        );\n\n        for (uint256 i = 0; i < _aprsPrices.length; i++) {\n            _requireArgument(\n                _aprsPrices[i].length == 5 && _animaPrices[i].length == 5,\n                \"Prices length are wrong\"\n            );\n            for (uint256 j = 0; j < _aprsPrices[i].length; j++) {\n                if (_isPrimeval) {\n                    primevalAprsPrices[i][j] = _aprsPrices[i][j];\n                    primevalAnimaPrices[i][j] = _animaPrices[i][j];\n                } else {\n                    aprsPrices[i][j] = _aprsPrices[i][j];\n                    animaPrices[i][j] = _animaPrices[i][j];\n                }\n            }\n        }\n    }\n\n    /// @notice set Apeiron Godiverse Collection Number (mini blackhold)\n    /// @param _apeironGodiverseCollectionNumbers first[] is bloodline (must be 4), second[] is breed count price (must be 5)\n    /// @param _isPrimeval is primeval\n    function setApeironGodiverseCollectionNumber(\n        uint256[][] memory _apeironGodiverseCollectionNumbers,\n        bool _isPrimeval\n    ) public onlyOwner {\n        // bloodline is 4\n        _requireArgument(\n            _apeironGodiverseCollectionNumbers.length == 4,\n            \"Number length are wrong\"\n        );\n\n        for (\n            uint256 i = 0;\n            i < _apeironGodiverseCollectionNumbers.length;\n            i++\n        ) {\n            _requireArgument(\n                _apeironGodiverseCollectionNumbers[i].length == 5,\n                \"Number length are wrong\"\n            );\n            for (\n                uint256 j = 0;\n                j < _apeironGodiverseCollectionNumbers[i].length;\n                j++\n            ) {\n                if (_isPrimeval) {\n                    primevalApeironGodiverseCollectionNumbers[i][\n                        j\n                    ] = _apeironGodiverseCollectionNumbers[i][j];\n                } else {\n                    apeironGodiverseCollectionNumbers[i][\n                        j\n                    ] = _apeironGodiverseCollectionNumbers[i][j];\n                }\n            }\n        }\n    }\n\n    /// @notice set the currentPlanetId, only use when the currentPlanetId is error\n    /// @param _currentPlanetId currentPlanetId\n    function setCurrentPlanetId(uint256 _currentPlanetId) external onlyAdmin {\n        currentPlanetId = _currentPlanetId;\n    }\n\n    function requestBreed(\n        uint256 planetAId,\n        uint256 planetBId,\n        bool shouldUseMiniBlackhole\n    ) external payable returns (bytes32) {\n        return _requestBreed(planetAId, planetBId, 0, shouldUseMiniBlackhole);\n    }\n\n    function requestBreedWithAnimus(\n        uint256 requestId,\n        uint256 planetAId,\n        uint256 planetBId,\n        uint256 animaDiscount,\n        bool shouldUseMiniBlackhole,\n        uint256 time,\n        bytes memory signature\n    ) external payable returns (bytes32) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                msg.sender,\n                requestId,\n                planetAId,\n                planetBId,\n                animaDiscount,\n                shouldUseMiniBlackhole,\n                time\n            )\n        );\n        // check signature is valid\n        // requestId is 0, means not use animaDiscount\n        // need to check requestId is not used or not 0\n        _requireArgument(\n            (requestId == 0 || requestIdMap[requestId] == 0) &&\n                hash.toEthSignedMessageHash().recover(signature) ==\n                systemAddress &&\n                time + 10 minutes >= block.timestamp, //valid signature period is 10 minutes\n            \"Invalid signature\"\n        );\n\n        // update requestIdMap and requestHashMap\n        requestIdMap[requestId] = _requestBreed(\n            planetAId,\n            planetBId,\n            animaDiscount,\n            shouldUseMiniBlackhole\n        );\n        requestHashMap[requestIdMap[requestId]] = requestId;\n\n        return requestIdMap[requestId];\n    }\n\n    /// @notice request for breeding\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    /// @param animaDiscount anima discount, use animus token to discount\n    /// @param shouldUseMiniBlackhole use mini blackhold or not\n    function _requestBreed(\n        uint256 planetAId,\n        uint256 planetBId,\n        uint256 animaDiscount,\n        bool shouldUseMiniBlackhole\n    ) internal returns (bytes32) {\n        // dry run for check can breed\n        _breed(\n            msg.sender,\n            planetAId,\n            planetBId,\n            animaDiscount,\n            shouldUseMiniBlackhole,\n            true\n        );\n\n        // request rng for get random number, and check ron fee\n        _requireArgument(\n            msg.value >= ronToUseInRandomness,\n            \"Insufficient ron fee\"\n        );\n        bytes32 requestHash = _requestRandomness(\n            ronToUseInRandomness,\n            msg.sender\n        );\n\n        BreedStruct memory breedStruct = BreedStruct(\n            msg.sender,\n            planetAId,\n            planetBId,\n            shouldUseMiniBlackhole,\n            false,\n            0\n        );\n        BreedStructMap[requestHash] = breedStruct;\n        animaDiscountMap[requestHash] = animaDiscount;\n\n        emit RequestBreed(requestHash);\n\n        return requestHash;\n    }\n\n    /// @notice incase of ronin fulfillRandomWords fail, admin can call this to fulfill random seed\n    /// @param _reqHash request hash of the ronin VRF\n    /// @param _randomSeed random seed of the ronin VRF\n    function adminFulfillRandomSeed(\n        bytes32 _reqHash,\n        uint256 _randomSeed\n    ) external onlyAdmin {\n        _fulfillRandomSeed(_reqHash, _randomSeed);\n    }\n\n    /// @notice after ronin fulfillRandomWords will call this, and it will run breed function\n    /// @param _reqHash request hash of the ronin VRF\n    /// @param _randomSeed random seed of the ronin VRF\n    function _fulfillRandomSeed(\n        bytes32 _reqHash,\n        uint256 _randomSeed\n    ) internal virtual override {\n        // update random nonce\n        _updateRandomNonce(_randomSeed);\n\n        BreedStruct memory breedStruct = BreedStructMap[_reqHash];\n        _breed(\n            breedStruct.userAddress,\n            breedStruct.planetAId,\n            breedStruct.planetBId,\n            animaDiscountMap[_reqHash],\n            breedStruct.shouldUseMiniBlackhole,\n            false\n        );\n        // update isDone status for client\n        BreedStructMap[_reqHash].isDone = true;\n        BreedStructMap[_reqHash].planetId = currentPlanetId;\n\n        emit BreedSuccessWithRequestId(\n            currentPlanetId,\n            requestHashMap[_reqHash]\n        );\n    }\n\n    /// @notice speacial handle presale planet breedCountMax\n    /// @param planetId planetId\n    function _checkAndAddBreedCountMax(uint256 planetId) internal {\n        IApeironPlanet.PlanetData memory planetData = _getPlanetData(planetId);\n        // speacial handle no parent breedCountMax\n        if (!_hasParent(planetId) && planetData.breedCountMax == 0) {\n            planetContract.updatePlanetData(\n                planetId,\n                planetData.gene,\n                0,\n                0,\n                3,\n                false\n            );\n        }\n    }\n\n    /// @notice planet breed function\n    /// @param userAddress planet user address\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    /// @param shouldUseMiniBlackhole should Use Mini Blockhole\n    /// @param isDryRun is dry run\n    function _breed(\n        address userAddress,\n        uint256 planetAId,\n        uint256 planetBId,\n        uint256 animaDiscount,\n        bool shouldUseMiniBlackhole,\n        bool isDryRun // if isDryRun, not run mint, transfer and burn token\n    ) internal virtual {\n        _checkAndAddBreedCountMax(planetAId);\n        _checkAndAddBreedCountMax(planetBId);\n\n        // check animaDiscount, save link fee\n        if (animaDiscount > 0) {\n            _requireArgument(\n                (!shouldUseMiniBlackhole ||\n                    (shouldUseMiniBlackhole && animaToMiniBlackhole > 0)),\n                \"animaToMiniBlackhole is not set\"\n            );\n        }\n\n        // handle breed checking, mint planet, transfer and burn token\n        _requireArgument(\n            planetAttributeManagerContract.breed(\n                userAddress,\n                planetAId,\n                planetBId,\n                animaDiscount,\n                shouldUseMiniBlackhole,\n                isDryRun\n            ),\n            \"breed check is not pass\"\n        );\n\n        // start breed\n        if (!isDryRun) {\n            // 7 days cooldown for the born\n            // +14 days if grandparent are same\n            bool isGrandparentRepeat = false;\n            (isGrandparentRepeat, ) = _checkIsGrandparentRepeat(\n                planetAId,\n                planetBId\n            );\n\n            uint256 bornInterval = bornBaseInterval;\n            if (isGrandparentRepeat) {\n                bornInterval += additionBornBaseInterval;\n            }\n            breedPlanetDataContract.updatePlanetNextBornMap(\n                currentPlanetId,\n                block.timestamp + bornInterval\n            );\n\n            emit BreedSuccess(currentPlanetId);\n        }\n    }\n\n    /**\n     * Withdraw any ERC20\n     *\n     * @param tokenAddress - ERC20 token address\n     * @param amount - amount to withdraw\n     * @param wallet - address to withdraw to\n     */\n    function withdrawFunds(\n        address tokenAddress,\n        uint256 amount,\n        address wallet\n    ) external onlyOwner {\n        IERC20Upgradeable(tokenAddress).safeTransfer(wallet, amount);\n    }\n}\n",
      "keccak256": "0xbc09d5d6ac0eded9ec14644429d728d57e8a22c797d04c155ba2d1915b54a565",
      "license": "MIT"
    },
    "contracts/BreedPlanetBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n// pragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./interfaces/IApeironPlanet.sol\";\nimport \"./interfaces/IBreedPlanetData.sol\";\n\nimport \"./utils/AccessProtectedUpgradable.sol\";\nimport \"./utils/Random.sol\";\n\ncontract BreedPlanetBase is\n    Random,\n    Initializable,\n    UUPSUpgradeable,\n    AccessProtectedUpgradable\n{\n    using AddressUpgradeable for address;\n\n    IApeironPlanet public planetContract;\n    IBreedPlanetData public breedPlanetDataContract;\n\n    struct ElementStruct {\n        uint256 fire;\n        uint256 water;\n        uint256 air;\n        uint256 earth;\n        uint256 domainValue;\n        uint256 domainIndex; // 1: fire, 2: water, 3: air, 4: earth\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    // constructor() initializer {}\n\n    // /// @dev Initialize the contract\n    // function initialize() external initializer {\n    //     __Ownable_init();\n    //     __UUPSUpgradeable_init();\n    // }\n\n    /// @dev Required by UUPSUpgradeable\n    function _authorizeUpgrade(\n        address newImplementation\n    ) internal virtual override onlyOwner {}\n\n    function _updateBaseContractSetting(\n        address _nftAddress,\n        address _breedAddress\n    ) internal onlyOwner {\n        planetContract = IApeironPlanet(_nftAddress);\n        breedPlanetDataContract = IBreedPlanetData(_breedAddress);\n    }\n\n    /// @notice get planetId Parent ID\n    /// @param planetId planetId\n    function getParentID(\n        uint256 planetId\n    ) public view returns (uint256, uint256) {\n        uint256 parentAId = 0;\n        uint256 parentBId = 0;\n        IApeironPlanet.PlanetData memory planetData = _getPlanetData(planetId);\n        if (planetData.parents.length == 2) {\n            parentAId = planetData.parents[0];\n            parentBId = planetData.parents[1];\n        }\n        return (parentAId, parentBId);\n    }\n\n    /// @notice check planet has parent or not\n    /// @param planetId planetId\n    function _hasParent(uint256 planetId) internal view returns (bool) {\n        if (_getPlanetData(planetId).parents.length == 2) {\n            return true;\n        }\n        return false;\n    }\n\n    /// @notice get planetId Parent and Grandparent ID array, which Parent in first two slot\n    /// @param planetId planetId\n    function _getParentAndGrandparentIDArray(\n        uint256 planetId\n    ) internal view returns (uint256[] memory) {\n        (uint256 parentAId, uint256 parentBId) = getParentID(planetId);\n        return _getParentIDArray(parentAId, parentBId);\n    }\n\n    /// @notice get planetA planetB Parent's ID array, which planetAId & planetBId in first two slot\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    function _getParentIDArray(\n        uint256 planetAId,\n        uint256 planetBId\n    ) internal view returns (uint256[] memory) {\n        uint256 parentCount = 2;\n\n        if (_hasParent(planetAId)) {\n            parentCount += 2;\n        }\n        if (_hasParent(planetBId)) {\n            parentCount += 2;\n        }\n\n        uint256[] memory parents = new uint256[](parentCount);\n        uint256 index = 2;\n        parents[0] = planetAId;\n        parents[1] = planetBId;\n\n        (parents, index) = _updateParentsId(parents, index, planetAId);\n        (parents, index) = _updateParentsId(parents, index, planetBId);\n\n        return parents; // parent count 2-6\n    }\n\n    function _updateParentsId(\n        uint256[] memory parents,\n        uint256 index,\n        uint256 _planetId\n    ) internal view returns (uint256[] memory, uint256) {\n        if (_hasParent(_planetId)) {\n            (uint256 parentAId, uint256 parentBId) = getParentID(_planetId);\n            parents[index++] = parentAId;\n            parents[index++] = parentBId;\n        }\n        return (parents, index);\n    }\n\n    /// @notice check planetA planetB Parent is repeated\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    function _parentIsRepeated(\n        uint256 planetAId,\n        uint256 planetBId\n    ) internal view returns (bool) {\n        uint256[] memory parentsArray = _getParentIDArray(planetAId, planetBId);\n        for (uint256 i = 0; i < parentsArray.length - 1; i++) {\n            for (uint256 j = i + 1; j < parentsArray.length; j++) {\n                if (parentsArray[i] == parentsArray[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /// @notice check planetA planetB Grandparent is repeated, and repeated count\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    function _checkIsGrandparentRepeat(\n        uint256 planetAId,\n        uint256 planetBId\n    ) internal view returns (bool, uint256) {\n        bool isGrandparentRepeat = false;\n        uint256 repeatCount = 0;\n        uint256[] memory parentAArray;\n        uint256[] memory parentBArray;\n        parentAArray = _initParentArray(parentAArray, planetAId);\n        parentBArray = _initParentArray(parentBArray, planetBId);\n\n        for (uint256 i = 0; i < parentAArray.length; i++) {\n            for (uint256 j = 0; j < parentBArray.length; j++) {\n                if (parentAArray[i] == parentBArray[j]) {\n                    isGrandparentRepeat = true;\n                    repeatCount++;\n                }\n            }\n        }\n        return (isGrandparentRepeat, repeatCount);\n    }\n\n    function _initParentArray(\n        uint256[] memory parentArray,\n        uint256 planetId\n    ) internal view returns (uint256[] memory) {\n        if (_hasParent(planetId)) {\n            parentArray = _getParentAndGrandparentIDArray(planetId);\n        } else {\n            parentArray = new uint256[](1);\n            parentArray[0] = planetId;\n        }\n        return parentArray;\n    }\n\n    /// @notice ease way (without any array creation) to filter out all duplicated values, the result values will be moved to the beginning of array and return the new array length\n    /// @dev use new array length to retrieve the non-duplicated values from the new array\n    /// @param input input array\n    /// @return output array and new array length\n    function _removeDuplicated(\n        uint256[] memory input\n    ) internal pure returns (uint256[] memory, uint256) {\n        uint256 availableCount = 1;\n        uint256 duplicatedIndex;\n        for (uint256 i = 1; i < input.length; i++) {\n            duplicatedIndex = 0;\n            for (uint256 j = 0; j < i; j++) {\n                if (input[i] == input[j]) {\n                    duplicatedIndex = i;\n                    break;\n                }\n            }\n\n            //without duplication\n            if (duplicatedIndex == 0) {\n                input[availableCount] = input[i];\n                ++availableCount;\n            }\n        }\n\n        return (input, availableCount);\n    }\n\n    /// @notice random shuffle array ordering\n    /// @param input input array\n    /// @param availableSize array size\n    function _shuffleOrdering(\n        uint256[] memory input,\n        uint256 availableSize\n    ) internal returns (uint256[] memory) {\n        uint256 wrapindex;\n        for (uint256 i = 0; i < availableSize - 1; i++) {\n            wrapindex = _randomRange(i, availableSize - 1);\n            (input[i], input[wrapindex]) = (input[wrapindex], input[i]);\n        }\n\n        return input;\n    }\n\n    /// @notice convert geneId To Attributes array\n    /// @param _geneId geneId\n    /// @param _numOfAttributes Number Of Attributes\n    function _convertToAttributes(\n        uint256 _geneId,\n        uint256 _numOfAttributes\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory attributes = new uint256[](_numOfAttributes);\n\n        uint256 geneId = _geneId;\n        for (uint256 i = 0; i < attributes.length; i++) {\n            attributes[i] = geneId % 256;\n            geneId /= 256;\n        }\n\n        return attributes;\n    }\n\n    /// @notice get planet data\n    /// @param planetId planetId\n    function _getPlanetData(\n        uint256 planetId\n    ) internal view returns (IApeironPlanet.PlanetData memory) {\n        (IApeironPlanet.PlanetData memory planetData, ) = planetContract\n            .getPlanetData(planetId);\n        return planetData;\n    }\n\n    /// @notice get planet attributes\n    /// @param planetId planetId\n    function _getPlanetAttributes(\n        uint256 planetId\n    ) internal view returns (uint256[] memory) {\n        return _convertToAttributes(_getPlanetData(planetId).gene, 18);\n    }\n\n    function _convertToGeneId(\n        uint256[] memory attributes\n    ) internal pure returns (uint256) {\n        uint256 geneId = 0;\n        for (uint256 id = 0; id < attributes.length; id++) {\n            geneId += attributes[id] << (8 * id);\n        }\n\n        return geneId;\n    }\n\n    function _checkIsContract(\n        address _contractAddress\n    ) internal returns (bool) {\n        return _contractAddress.isContract();\n    }\n}\n",
      "keccak256": "0x876becd9a3a0655cbaf4a37c63992c7fad00da22211d18ffacb75e835862190a",
      "license": "MIT"
    },
    "contracts/PlanetAttributeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"./BreedPlanetBase.sol\";\nimport \"./BreedPlanet.sol\";\n\ncontract PlanetAttributeManager is BreedPlanetBase {\n    struct PlanetTag {\n        uint256 id;\n        uint256 fire;\n        uint256 water;\n        uint256 air;\n        uint256 earth;\n    }\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    BreedPlanet public breedContract;\n\n    mapping(uint256 => mapping(uint256 => PlanetTag)) planetTagsPerBloodline;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() BreedPlanetBase() initializer {}\n\n    function initialize() external virtual initializer {\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n    }\n\n    function setUpContract(\n        address _planetAddress,\n        address payable _breedAddress\n    ) external onlyOwner {\n        planetContract = IApeironPlanet(_planetAddress);\n        breedContract = BreedPlanet(_breedAddress);\n    }\n\n    function setUpBloodline(\n        uint256 bloodline,\n        PlanetTag[] memory planetTagArray\n    ) external onlyOwner {\n        for (uint256 i = 0; i < planetTagArray.length; i++) {\n            planetTagsPerBloodline[bloodline][i] = planetTagArray[i];\n        }\n    }\n\n    /// @notice planet breed function\n    /// @param userAddress planet user address\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    /// @param shouldUseMiniBlackhole should Use Mini Blockhole\n    /// @param isDryRun is dry run\n    function breed(\n        address userAddress,\n        uint256 planetAId,\n        uint256 planetBId,\n        uint256 animusUse,\n        bool shouldUseMiniBlackhole,\n        bool isDryRun // if isDryRun, not run mint, transfer and burn token\n    ) external virtual onlyAdmin returns (bool) {\n        // check planet can breed or not\n        if (\n            !checkCanBreed(\n                userAddress,\n                planetAId,\n                planetBId,\n                shouldUseMiniBlackhole\n            )\n        ) {\n            return false;\n        }\n\n        BreedPlanet _breedContract = breedContract;\n\n        // APRS and ANIMA Fees is require\n        uint256 _aprsPrice;\n        uint256 _animaPrice;\n        if (shouldUseMiniBlackhole) {\n            _aprsPrice = 0;\n            _animaPrice = 0;\n        } else {\n            (_aprsPrice, _animaPrice) = _calcAPRSAndAnimaPrice(\n                planetAId,\n                _aprsPrice,\n                _animaPrice\n            );\n            (_aprsPrice, _animaPrice) = _calcAPRSAndAnimaPrice(\n                planetBId,\n                _aprsPrice,\n                _animaPrice\n            );\n\n            // need to check animusUse is pass minAnimaUse\n            if (animusUse > 0) {\n                if (\n                    animusUse > _animaPrice ||\n                    _animaPrice - animusUse < _breedContract.minAnimaUse()\n                ) {\n                    return false;\n                }\n\n                _animaPrice = _animaPrice - animusUse;\n            }\n        }\n        // if it is not dry run, transfer token\n        if (!isDryRun) {\n            if (_aprsPrice > 0) {\n                _breedContract.aprsToken().safeTransferFrom(\n                    userAddress,\n                    address(_breedContract),\n                    _aprsPrice\n                );\n            }\n            if (_animaPrice > 0) {\n                _breedContract.animaToken().safeTransferFrom(\n                    userAddress,\n                    address(_breedContract),\n                    _animaPrice\n                );\n            }\n        }\n\n        // handle apeironGodiverseCollection miniBlackhole\n        if (shouldUseMiniBlackhole) {\n            uint256 targetApeironGodiverseCollectionNumber = 0;\n            // 4585 is primeval checking\n            if (planetAId <= 4585) {\n                targetApeironGodiverseCollectionNumber += _breedContract\n                    .primevalApeironGodiverseCollectionNumbers(\n                        _getPlanetBloodline(planetAId),\n                        _getPlanetData(planetAId).breedCount\n                    );\n            } else {\n                targetApeironGodiverseCollectionNumber += _breedContract\n                    .apeironGodiverseCollectionNumbers(\n                        _getPlanetBloodline(planetAId),\n                        _getPlanetData(planetAId).breedCount\n                    );\n            }\n\n            if (planetBId <= 4585) {\n                targetApeironGodiverseCollectionNumber += _breedContract\n                    .primevalApeironGodiverseCollectionNumbers(\n                        _getPlanetBloodline(planetBId),\n                        _getPlanetData(planetBId).breedCount\n                    );\n            } else {\n                targetApeironGodiverseCollectionNumber += _breedContract\n                    .apeironGodiverseCollectionNumbers(\n                        _getPlanetBloodline(planetBId),\n                        _getPlanetData(planetBId).breedCount\n                    );\n            }\n\n            // update targetApeironGodiverseCollectionNumber if animusUse > 0\n            if (animusUse > 0) {\n                // get the target reduce MiniBlackhole number\n                uint256 targetMinusMiniBlackhole = animusUse /\n                    _breedContract.animaToMiniBlackhole();\n                // incase animus input wrong value to burn more than its needed\n                animusUse =\n                    targetMinusMiniBlackhole *\n                    _breedContract.animaToMiniBlackhole();\n                // check the animus value is correct,\n                // - targetMinusMiniBlackhole must less than or equal to targetApeironGodiverseCollectionNumber\n                // - targetApeironGodiverseCollectionNumber - targetMinusMiniBlackhole must greater than\n                //   or equal to minMiniBlackholeUse\n                if (\n                    targetMinusMiniBlackhole >\n                    targetApeironGodiverseCollectionNumber ||\n                    (targetApeironGodiverseCollectionNumber -\n                        targetMinusMiniBlackhole) <\n                    _breedContract.minMiniBlackholeUse()\n                ) {\n                    return false;\n                } else {\n                    targetApeironGodiverseCollectionNumber =\n                        targetApeironGodiverseCollectionNumber -\n                        targetMinusMiniBlackhole;\n                }\n            }\n\n            // check user have enough MiniBlackhole or not\n            if (\n                !(_breedContract.apeironGodiverseCollection().isApprovedForAll(\n                    userAddress,\n                    address(this)\n                ) &&\n                    _breedContract.apeironGodiverseCollection().balanceOf(\n                        userAddress,\n                        _breedContract.miniBlackholeTokenId()\n                    ) >=\n                    targetApeironGodiverseCollectionNumber)\n            ) {\n                return false;\n            }\n\n            // if it is not dry run, burn token\n            if (!isDryRun) {\n                _breedContract.apeironGodiverseCollection().burn(\n                    userAddress,\n                    _breedContract.miniBlackholeTokenId(),\n                    targetApeironGodiverseCollectionNumber\n                );\n            }\n        }\n\n        // start breed\n        if (!isDryRun) {\n            uint256[] memory parents = new uint256[](2);\n            parents[0] = planetAId;\n            parents[1] = planetBId;\n            _breedContract.setCurrentPlanetId(\n                _breedContract.currentPlanetId() + 1\n            );\n\n            // genid for element\n            uint256 geneId = _convertToGeneId(\n                _getUpdateAttributesOnBreed(planetAId, planetBId)\n            );\n            planetContract.safeMint(\n                geneId,\n                parents,\n                userAddress,\n                _breedContract.currentPlanetId()\n            );\n        }\n\n        return true;\n    }\n\n    function _calcAPRSAndAnimaPrice(\n        uint256 planetId,\n        uint256 _aprsPrice,\n        uint256 _animaPrice\n    ) internal returns (uint256, uint256) {\n        // 4585 is primeval checking\n        if (planetId <= 4585) {\n            _aprsPrice += breedContract.primevalAprsPrices(\n                _getPlanetBloodline(planetId),\n                _getPlanetData(planetId).breedCount\n            );\n            _animaPrice += breedContract.primevalAnimaPrices(\n                _getPlanetBloodline(planetId),\n                _getPlanetData(planetId).breedCount\n            );\n        } else {\n            _aprsPrice += breedContract.aprsPrices(\n                _getPlanetBloodline(planetId),\n                _getPlanetData(planetId).breedCount\n            );\n            _animaPrice += breedContract.animaPrices(\n                _getPlanetBloodline(planetId),\n                _getPlanetData(planetId).breedCount\n            );\n        }\n\n        return (_aprsPrice, _animaPrice);\n    }\n\n    /// @notice check planetA and B can breed or not, this function will not check the token balance\n    /// @param userAddress planet owner address\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    /// @param shouldUseMiniBlackhole should Use Mini Blockhole\n    function checkCanBreed(\n        address userAddress,\n        uint256 planetAId,\n        uint256 planetBId,\n        bool shouldUseMiniBlackhole\n    ) public view returns (bool) {\n        // check planet is owned\n        if (\n            !(planetContract.ownerOf(planetAId) == userAddress &&\n                planetContract.ownerOf(planetBId) == userAddress)\n        ) {\n            return false;\n        }\n\n        BreedPlanet _breedContract = breedContract;\n\n        // check planet is black listed\n        if (\n            !(!_breedContract.blacklistContract().blacklistedNFT(\n                userAddress,\n                address(planetContract),\n                planetAId\n            ) &&\n                !_breedContract.blacklistContract().blacklistedNFT(\n                    userAddress,\n                    address(planetContract),\n                    planetBId\n                ))\n        ) {\n            return false;\n        }\n\n        // planet data\n        IApeironPlanet.PlanetData memory planetAData = _getPlanetData(\n            planetAId\n        );\n        IApeironPlanet.PlanetData memory planetBData = _getPlanetData(\n            planetBId\n        );\n\n        // check breed time & breedCount & parentIsRepeated\n        if (\n            !(planetAData.lastBreedTime +\n                _breedContract.normalBreedBaseInterval() <\n                block.timestamp &&\n                planetBData.lastBreedTime +\n                    _breedContract.normalBreedBaseInterval() <\n                block.timestamp &&\n                planetAData.breedCount + 1 <= planetAData.breedCountMax &&\n                planetBData.breedCount + 1 <= planetBData.breedCountMax &&\n                !_parentIsRepeated(planetAId, planetBId))\n        ) {\n            return false;\n        }\n\n        // apeironGodiverseCollection nft\n        // require no parent\n        if (_breedContract.isPrimevalActive()) {\n            if (\n                !(!_hasParent(planetAId) &&\n                    !_hasParent(planetBId) &&\n                    shouldUseMiniBlackhole)\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /// @notice get Attributes on Breed, will only update 0-4\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    function _getUpdateAttributesOnBreed(\n        uint256 planetAId,\n        uint256 planetBId\n    ) internal returns (uint256[] memory) {\n        uint256[] memory parents = _getParentIDArray(planetAId, planetBId);\n        uint256 parentALegacyTag = _getPlanetAttributes(parents[0])[4];\n        uint256 parentBLegacyTag = _getPlanetAttributes(parents[1])[4];\n\n        // element\n        ElementStruct memory elementStruct = ElementStruct(0, 0, 0, 0, 0, 0);\n        uint256 totalWeight = 0;\n        for (uint256 i = 0; i < parents.length; i++) {\n            uint256[] memory planetAttributes = _getPlanetAttributes(\n                parents[i]\n            );\n\n            uint256 weight = 1;\n            // first 2 index is 3 weight, others(grandparents) is 1 weight\n            if (i == 0 || i == 1) {\n                weight = 3;\n            }\n            elementStruct.fire += planetAttributes[0] * weight;\n            elementStruct.water += planetAttributes[1] * weight;\n            elementStruct.air += planetAttributes[2] * weight;\n            elementStruct.earth += planetAttributes[3] * weight;\n            totalWeight += weight;\n        }\n        elementStruct.fire = elementStruct.fire / totalWeight;\n        elementStruct.water = elementStruct.water / totalWeight;\n        elementStruct.air = elementStruct.air / totalWeight;\n        elementStruct.earth = elementStruct.earth / totalWeight;\n\n        // first adjust value to total 100\n        elementStruct = _updateRemainValueForElementStruct(elementStruct);\n\n        // get planet domain element\n        elementStruct.domainValue = Math.max(\n            Math.max(elementStruct.fire, elementStruct.water),\n            Math.max(elementStruct.air, elementStruct.earth)\n        );\n        if (elementStruct.domainValue == elementStruct.fire) {\n            elementStruct.domainIndex = 1;\n        } else if (elementStruct.domainValue == elementStruct.water) {\n            elementStruct.domainIndex = 2;\n        } else if (elementStruct.domainValue == elementStruct.air) {\n            elementStruct.domainIndex = 3;\n        } else {\n            // elementStruct.domainValue == elementStruct.earth\n            elementStruct.domainIndex = 4;\n        }\n\n        // dominant element adjust by parent legacy tag\n        if (parentALegacyTag != 0 || parentBLegacyTag != 0) {\n            // get parent planetTag\n            PlanetTag memory planetATag = PlanetTag(0, 0, 0, 0, 0);\n            PlanetTag memory planetBTag = PlanetTag(0, 0, 0, 0, 0);\n            if (parentALegacyTag != 0) {\n                planetATag = _getPlanetTagById(parentALegacyTag);\n            }\n            if (parentBLegacyTag != 0) {\n                planetBTag = _getPlanetTagById(parentBLegacyTag);\n            }\n\n            // update element value by tag\n            if (elementStruct.domainIndex == 1) {\n                elementStruct.fire = Math.max(\n                    elementStruct.fire,\n                    Math.max(planetATag.fire, planetBTag.fire)\n                );\n            } else if (elementStruct.domainIndex == 2) {\n                elementStruct.water = Math.max(\n                    elementStruct.water,\n                    Math.max(planetATag.water, planetBTag.water)\n                );\n            } else if (elementStruct.domainIndex == 3) {\n                elementStruct.air = Math.max(\n                    elementStruct.air,\n                    Math.max(planetATag.air, planetBTag.air)\n                );\n            } else {\n                // elementStruct.domainIndex == 4\n                elementStruct.earth = Math.max(\n                    elementStruct.earth,\n                    Math.max(planetATag.earth, planetBTag.earth)\n                );\n            }\n            // update domainValue\n            elementStruct.domainValue = Math.max(\n                Math.max(elementStruct.fire, elementStruct.water),\n                Math.max(elementStruct.air, elementStruct.earth)\n            );\n        }\n\n        // final adjust value to total 100\n        elementStruct = _updateRemainValueForElementStruct(elementStruct);\n\n        // attributes\n        uint256[] memory attributes = new uint256[](18);\n        attributes[0] = elementStruct.fire; // element: fire\n        attributes[1] = elementStruct.water; // element: water\n        attributes[2] = elementStruct.air; // element: air\n        attributes[3] = elementStruct.earth; // element: earth\n\n        // primeval legacy tag\n        uint256[] memory parentLegacyArray = _getParentLegacyArray(\n            planetAId,\n            planetBId\n        );\n        uint256 random = _randomRange(0, 99);\n        random = random / 10;\n        if (parentLegacyArray.length > random) {\n            attributes[4] = parentLegacyArray[random];\n        } else {\n            attributes[4] = 0;\n        }\n\n        return attributes;\n    }\n\n    /// @notice update ElementStruct, it will adjust the total value to 100\n    /// @param elementStruct elementStruct\n    function _updateRemainValueForElementStruct(\n        ElementStruct memory elementStruct\n    ) internal returns (ElementStruct memory) {\n        uint256 totalValue = elementStruct.fire +\n            elementStruct.water +\n            elementStruct.air +\n            elementStruct.earth;\n        uint256 remainValue;\n        uint256 nonDomainValue;\n\n        if (totalValue > 100) {\n            remainValue = 100 - elementStruct.domainValue;\n            nonDomainValue =\n                elementStruct.fire +\n                elementStruct.water +\n                elementStruct.air +\n                elementStruct.earth -\n                elementStruct.domainValue;\n\n            if (elementStruct.domainIndex != 1) {\n                elementStruct.fire = ((elementStruct.fire * remainValue) /\n                    (nonDomainValue));\n            }\n            if (elementStruct.domainIndex != 2) {\n                elementStruct.water = ((elementStruct.water * remainValue) /\n                    (nonDomainValue));\n            }\n            if (elementStruct.domainIndex != 3) {\n                elementStruct.air = ((elementStruct.air * remainValue) /\n                    (nonDomainValue));\n            }\n            if (elementStruct.domainIndex != 4) {\n                elementStruct.earth = ((elementStruct.earth * remainValue) /\n                    (nonDomainValue));\n            }\n        }\n\n        totalValue =\n            elementStruct.fire +\n            elementStruct.water +\n            elementStruct.air +\n            elementStruct.earth;\n\n        if (totalValue < 100) {\n            remainValue = 100 - totalValue;\n            uint256[] memory elementArray = new uint256[](4);\n            uint256 elementCount = 0;\n            if (!(elementStruct.fire == 0 || elementStruct.domainIndex == 1)) {\n                elementArray[elementCount] = 1;\n                elementCount++;\n            }\n            if (!(elementStruct.water == 0 || elementStruct.domainIndex == 2)) {\n                elementArray[elementCount] = 2;\n                elementCount++;\n            }\n            if (!(elementStruct.air == 0 || elementStruct.domainIndex == 3)) {\n                elementArray[elementCount] = 3;\n                elementCount++;\n            }\n            if (!(elementStruct.earth == 0 || elementStruct.domainIndex == 4)) {\n                elementArray[elementCount] = 4;\n                elementCount++;\n            }\n            elementArray = _shuffleOrdering(elementArray, elementCount);\n\n            if (elementArray[0] == 1) {\n                elementStruct.fire += remainValue;\n            } else if (elementArray[0] == 2) {\n                elementStruct.water += remainValue;\n            } else if (elementArray[0] == 3) {\n                elementStruct.air += remainValue;\n            } else {\n                // elementArray[0] == 4\n                elementStruct.earth += remainValue;\n            }\n        }\n        return elementStruct;\n    }\n\n    /// @notice get planet parent legacy array\n    /// @param planetAId planetAId\n    /// @param planetBId planetBId\n    function _getParentLegacyArray(\n        uint256 planetAId,\n        uint256 planetBId\n    ) internal view returns (uint256[] memory) {\n        uint256 count = 0;\n        uint256[] memory parentArray = _getParentIDArray(planetAId, planetBId);\n        uint256[] memory legacyTagArray = new uint256[](parentArray.length);\n        for (uint256 i = 0; i < parentArray.length; i++) {\n            uint256 planetLegacyTag = _getPlanetAttributes(parentArray[i])[4];\n\n            if (planetLegacyTag != 0) {\n                legacyTagArray[count] = planetLegacyTag;\n                count++;\n            }\n        }\n\n        return legacyTagArray;\n    }\n\n    /// @notice get planet Bloodline, result will be 0-3\n    /// @param planetId planetId\n    function _getPlanetBloodline(\n        uint256 planetId\n    ) internal view returns (uint256) {\n        uint256 result = 0;\n        uint256[] memory planetAttributes = _getPlanetAttributes(planetId);\n        // there are 4 element\n        // 0: fire\n        // 1: water\n        // 2: air\n        // 3: earth\n        for (uint256 i = 0; i < 4; i++) {\n            if (planetAttributes[i] > 0) {\n                result++;\n            }\n        }\n\n        return result - 1;\n    }\n\n    /// @notice get planetTag by tagID\n    /// @param planetTagId planetTagId\n    function _getPlanetTagById(\n        uint256 planetTagId\n    ) internal view returns (PlanetTag memory) {\n        require(planetTagId != 0 && planetTagId <= 62, \"Error planet tag\");\n\n        if (planetTagId <= 18) {\n            return planetTagsPerBloodline[1][planetTagId - 1];\n        } else if (planetTagId <= 46) {\n            return planetTagsPerBloodline[2][planetTagId - 18 - 1];\n        } else {\n            // planetTagId <= 62\n            return planetTagsPerBloodline[3][planetTagId - 46 - 1];\n        }\n    }\n}\n",
      "keccak256": "0xff0888cddd11328989722b9c99984f2ba5acecbcfd0ca7af1fdf6aa689bdea1b",
      "license": "MIT"
    },
    "contracts/interfaces/IApeironPlanet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IApeironPlanet is IERC721 {\n    struct PlanetData {\n        uint256 gene;\n        uint256 baseAge;\n        uint256 evolve;\n        uint256 breedCount;\n        uint256 breedCountMax;\n        uint256 createTime; // before hatch\n        uint256 bornTime; // after hatch\n        uint256 lastBreedTime;\n        uint256[] relicsTokenIDs;\n        uint256[] parents; //parent token ids\n        uint256[] children; //children token ids\n    }\n\n    function safeMint(\n        uint256 gene,\n        // uint256 parentA,\n        // uint256 parentB,\n        uint256[] calldata parents,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function updatePlanetData(\n        uint256 tokenId,\n        uint256 gene,\n        //  Add planet baseage, by absorb\n        uint256 addAge,\n        // evolve the planet.\n        uint256 addEvolve,\n        // add breed count max\n        uint256 addBreedCountMax,\n        // update born time to now\n        bool setBornTime\n    ) external;\n\n    function getPlanetData(uint256 tokenId)\n        external\n        view\n        returns (\n            PlanetData memory, //planetData\n            bool //isAlive\n        );\n}\n",
      "keccak256": "0xaaf8ca61951a682519b5789bf1755311756b02ceea648879a0ea7e8eb14dd31d",
      "license": "MIT"
    },
    "contracts/interfaces/IBlacklist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\ninterface IBlacklist {\n    function blacklistedNFT(\n        address _owner,\n        address _token,\n        uint256 _id\n    ) external view returns (bool);\n}\n",
      "keccak256": "0xfb750ce7ada365491672c9d8f6e032f9cdaa9a0587d48d30d25c6cdec42d5e24",
      "license": "MIT"
    },
    "contracts/interfaces/IBreedPlanetData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\ninterface IBreedPlanetData {\n    function updatePlanetNextBornMap(uint256 planetId, uint256 nextBornTime)\n        external;\n\n    function getPlanetNextBornTime(uint256 planetId)\n        external\n        view\n        returns (uint256);\n}\n",
      "keccak256": "0xe311119b2b5cb1b587b98822fe24b734f94af8199d1301c88094dc54bb7a6248",
      "license": "MIT"
    },
    "contracts/utils/AccessProtectedUpgradable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nabstract contract AccessProtectedUpgradable is OwnableUpgradeable {\n    mapping(address => bool) internal _admins; // user address => admin? mapping\n\n    event AdminAccessSet(address _admin, bool _enabled);\n\n    /**\n     * @notice Set Admin Access\n     *\n     * @param admin - Address of Admin\n     * @param enabled - Enable/Disable Admin Access\n     */\n    function setAdmin(address admin, bool enabled) external onlyOwner {\n        _admins[admin] = enabled;\n        emit AdminAccessSet(admin, enabled);\n    }\n\n    /**\n     * @notice Check Admin Access\n     *\n     * @param admin - Address of Admin\n     * @return whether user has admin access\n     */\n    function isAdmin(address admin) public view returns (bool) {\n        return _admins[admin];\n    }\n\n    /**\n     * @notice Check if caller is Admin\n     */\n    function _checkOnlyAdmin() internal {\n        require(\n            _admins[_msgSender()] || _msgSender() == owner(),\n            \"Caller doesnt have Access\"\n        );\n    }\n\n    /**\n     * Throws if called by any account other than the Admin.\n     */\n    modifier onlyAdmin() {\n        _checkOnlyAdmin();\n        _;\n    }\n}\n",
      "keccak256": "0xab869217999edcb39294f694143a164173b709e396490fd7db7f1b019a9608d2",
      "license": "MIT"
    },
    "contracts/utils/IRoninVRFCoordinatorForConsumers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ninterface IRoninVRFCoordinatorForConsumers {\n    /**\n     * @dev Request random seed to the coordinator contract. Returns the request hash.\n     *  Consider using the method `estimateRequestRandomFee` to estimate the random fee.\n     *\n     * @param _callbackGasLimit The callback gas amount.\n     * @param _gasPrice The gas price that oracle must send transaction to fulfill.\n     * @param _consumer The consumer address to callback.\n     * @param _refundAddress Refund address if there is RON left after paying gas fee to oracle.\n     */\n    function requestRandomSeed(\n        uint256 _callbackGasLimit,\n        uint256 _gasPrice,\n        address _consumer,\n        address _refundAddress\n    ) external payable returns (bytes32 _reqHash);\n\n    /**\n     * @dev Estimates the request random fee in RON.\n     *\n     * @notice It should be larger than the real cost and the contract will refund if any.\n     */\n    function estimateRequestRandomFee(\n        uint256 _callbackGasLimit,\n        uint256 _gasPrice\n    ) external view returns (uint256);\n}\n",
      "keccak256": "0x13933b25523a2911d4c8f0b308327ef6361c4f9e33ca9a1771860b8a52ae7cad",
      "license": "MIT"
    },
    "contracts/utils/Random.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ncontract Random {\n    uint256 randomNonce;\n\n    function _updateRandomNonce(uint256 _num) internal {\n        randomNonce = _num;\n    }\n    \n    function _getRandomNonce() internal view returns (uint256) {\n        return randomNonce;\n    }\n\n    function __getRandomBaseValue(uint256 _nonce) internal view returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(\n            block.timestamp,\n            msg.sender,\n            _nonce\n        )));\n    }\n\n    function _getRandomBaseValue() internal returns (uint256) {\n        randomNonce++;\n        return __getRandomBaseValue(randomNonce);\n    }\n\n    function __random(uint256 _nonce, uint256 _modulus) internal view returns (uint256) {\n        require(_modulus >= 1, 'invalid values for random');\n\n        return __getRandomBaseValue(_nonce) % _modulus;\n    }\n\n    function _random(uint256 _modulus) internal returns (uint256) {\n        randomNonce++;\n        return __random(randomNonce, _modulus);\n    }\n\n    function _randomByBaseValue(uint256 _baseValue, uint256 _modulus) internal pure returns (uint256) {\n        require(_modulus >= 1, 'invalid values for random');\n\n        return _baseValue % _modulus;\n    }\n\n    function __randomRange(uint256 _nonce, uint256 _start, uint256 _end) internal view returns (uint256) {\n        if (_end > _start) {\n            return _start + __random(_nonce, _end + 1 - _start);\n        }\n        else {\n            return _end + __random(_nonce, _start + 1 - _end);\n        }\n    }\n\n    function _randomRange(uint256 _start, uint256 _end) internal returns (uint256) {\n        randomNonce++;\n        return __randomRange(randomNonce, _start, _end);\n    }\n\n    function _randomRangeByBaseValue(uint256 _baseValue, uint256 _start, uint256 _end) internal pure returns (uint256) {\n        if (_end > _start) {\n            return _start + _randomByBaseValue(_baseValue, _end + 1 - _start);\n        }\n        else {\n            return _end + _randomByBaseValue(_baseValue, _start + 1 - _end);\n        }\n    }\n}\n",
      "keccak256": "0x9fcda33c83f6cdbcafcfd51077ea8046d7e68078389dd72eabf64a0471beed0e",
      "license": "MIT"
    },
    "contracts/utils/VRFConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./IRoninVRFCoordinatorForConsumers.sol\";\nimport \"./Random.sol\";\n\nabstract contract VRFConsumer is Random, OwnableUpgradeable {\n    error OnlyCoordinatorCanFulfill();\n\n    address public vrfCoordinator;\n    uint256 public callbackGaslimit; // 500000\n    uint256 public addonGasPrice; // 0, using tx.gasprice + this\n\n    /**\n     * @dev Set VRF coordinator setting.\n     *\n     * Requirements:\n     * - The method caller is owner.\n     */\n    function setupVRFCoordinator(\n        address _vrfCoordinator,\n        uint256 _callbackGaslimit,\n        uint256 _addonGasPrice\n    ) external onlyOwner {\n        vrfCoordinator = _vrfCoordinator;\n        callbackGaslimit = _callbackGaslimit;\n        addonGasPrice = _addonGasPrice;\n    }\n\n    /**\n     * @dev Raw fulfills random seed.\n     *\n     * Requirements:\n     * - The method caller is VRF coordinator `vrfCoordinator`.\n     *\n     * @notice The function `rawFulfillRandomSeed` is called by VRFCoordinator when it receives a valid VRF\n     * proof. It then calls `_fulfillRandomSeed`, after validating the origin of the call.\n     *\n     */\n    function rawFulfillRandomSeed(\n        bytes32 _reqHash,\n        uint256 _randomSeed\n    ) external {\n        if (msg.sender != vrfCoordinator) revert OnlyCoordinatorCanFulfill();\n        _fulfillRandomSeed(_reqHash, _randomSeed);\n    }\n\n    /**\n     * @dev Fulfills random seed `_randomSeed` based on the request hash `_reqHash`\n     */\n    function _fulfillRandomSeed(\n        bytes32 _reqHash,\n        uint256 _randomSeed\n    ) internal virtual;\n\n    /**\n     * @dev Request random seed to the coordinator contract. Returns the request hash.\n     *  Consider using the method `IRoninVRFCoordinatorForConsumers.estimateRequestRandomFee` to estimate the random fee.\n     *\n     * @param _value Amount of RON to cover gas fee for oracle, will be refunded to `_refundAddr`.\n     * @param _refundAddr Refund address if there is RON left after paying gas fee to oracle.\n     */\n    function _requestRandomness(\n        uint256 _value,\n        address _refundAddr\n    ) internal virtual returns (bytes32 _reqHash) {\n        return\n            IRoninVRFCoordinatorForConsumers(vrfCoordinator).requestRandomSeed{\n                value: _value\n            }(\n                callbackGaslimit,\n                Math.max(tx.gasprice, addonGasPrice),\n                address(this),\n                _refundAddr\n            );\n    }\n\n    /**\n     * @notice require funciton, save file size\n     *\n     * @param _canPass false will revert\n     * @param _error error msg\n     */\n    function _requireArgument(bool _canPass, string memory _error) internal {\n        require(_canPass, _error);\n    }\n}\n",
      "keccak256": "0xc65c23d2167315e4e38a51e1eb17e4e26bb7a987d68fe3b98d1a6d8d7b0fc738",
      "license": "MIT"
    }
  },
  "version": 1
}
